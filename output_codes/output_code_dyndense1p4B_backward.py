
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile

from torch import empty_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


# kernel path: /tmp/torchinductor_mengqy/hb/chb3hasgpfrh5wt3ctsnnpxsd6dga3audi2vhpk53mhpfp6qzfsx.py
# Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_backward, aten.nll_loss_forward]
# cross_entropy => scalar_tensor_24
triton_poi_fused_nll_loss_backward_nll_loss_forward_0 = async_compile.triton('triton_poi_fused_nll_loss_backward_nll_loss_forward_0', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[536870912], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_nll_loss_backward_nll_loss_forward_0', 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_nll_loss_backward_nll_loss_forward_0(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 308779008
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0), tmp0, None)
''')

import triton
import triton.language as tl
from torch._inductor.triton_heuristics import grid, start_graph, end_graph
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


# kernel path: /tmp/torchinductor_mengqy/cd/ccdd2gbsqx3bp3fsxsmj76sy6h7rexeu3o5plvlg7ywvo23iddpw.py
# Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_backward, aten.nll_loss_forward]
# cross_entropy => scalar_tensor_24
triton_poi_fused_nll_loss_backward_nll_loss_forward_1 = async_compile.triton('triton_poi_fused_nll_loss_backward_nll_loss_forward_1', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[8192], filename=__file__, meta={'signature': {0: '*i64', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_nll_loss_backward_nll_loss_forward_1', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_nll_loss_backward_nll_loss_forward_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + ((2049*(x0 // 2048)) + (x0 % 2048)), None)
    tmp1 = tl.full([1], -100, tl.int64)
    tmp2 = tmp0 != tmp1
    tmp3 = tl.full([1], 0, tl.int64)
    tmp4 = tl.where(tmp2, tmp0, tmp3)
    tmp5 = tl.where(tmp4 < 0, tmp4 + 50257, tmp4)
    tl.device_assert((0 <= tmp5) & (tmp5 < 50257), "index out of bounds: 0 <= tmp5 < 50257")
    tmp6 = -1.0
    tl.store(out_ptr0 + (tmp5 + (50257*x0)), tmp6, None)
''')


# kernel path: /tmp/torchinductor_mengqy/dt/cdtnadz33kk7hy4xl5jjlpbmq3lh7xvkr5vh7dtl6ydg73lmycjt.py
# Source Nodes: [cross_entropy], Original ATen: [aten._log_softmax_backward_data, aten.nll_loss_backward, aten.nll_loss_forward]
# cross_entropy => scalar_tensor_25
triton_red_fused__log_softmax_backward_data_nll_loss_backward_nll_loss_forward_2 = async_compile.triton('triton_red_fused__log_softmax_backward_data_nll_loss_backward_nll_loss_forward_2', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 65536],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*i64', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__log_softmax_backward_data_nll_loss_backward_nll_loss_forward_2', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]}
)
@triton.jit
def triton_red_fused__log_softmax_backward_data_nll_loss_backward_nll_loss_forward_2(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 50257
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + ((2049*(x0 // 2048)) + (x0 % 2048)), None, eviction_policy='evict_last')
    tmp4 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp6 = tl.load(in_ptr3 + (0)).to(tl.float32)
    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (50257*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.full([1, 1], -100, tl.int64)
        tmp3 = tmp1 != tmp2
        tmp8 = tmp5 / tmp7
        tmp9 = 0.0
        tmp10 = tl.where(tmp3, tmp8, tmp9)
        tmp11 = tmp0 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp19 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp21 = tl.load(in_ptr3 + (0)).to(tl.float32)
    tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp16 = tl.load(in_ptr0 + (r1 + (50257*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr4 + (r1 + (50257*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.full([1, 1], -100, tl.int64)
        tmp18 = tmp1 != tmp17
        tmp23 = tmp20 / tmp22
        tmp24 = 0.0
        tmp25 = tl.where(tmp18, tmp23, tmp24)
        tmp26 = tmp16 * tmp25
        tmp27 = tmp26.to(tl.float32)
        tmp29 = tmp28.to(tl.float32)
        tmp30 = tl.exp(tmp29)
        tmp31 = tmp30 * tmp14
        tmp32 = tmp27 - tmp31
        tmp33 = tmp32.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (50257*x0)), tmp33, rmask)
        tl.store(out_ptr2 + (r1 + (50264*x0)), tmp33, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/iu/ciuqwdekvqjevtlkd57temlpm4nkr4exxbwzqerzkp4btewlaiww.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_3 = async_compile.triton('triton_poi_fused_3', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536, 8192], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_3', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_3(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 50257
    xnumel = 6144
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (50257*x1)), ymask, eviction_policy='evict_last').to(tl.float32)
    tl.store(out_ptr0 + (x1 + (6144*y0)), tmp0, ymask)
''')


# kernel path: /tmp/torchinductor_mengqy/y6/cy6feskldwd7pxjlry4dsamx7j5pytnfrshq4ppregnyxnsrclhv.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_4 = async_compile.triton('triton_poi_fused_4', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_4', 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_4(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 43008
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hc/chcatdp7bczvsqlzmso4bsbafg5risvkd5he57ujh3xt2wwadp3q.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_5 = async_compile.triton('triton_poi_fused_5', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_5', 'configs': [instance_descriptor(divisible_by_16=(1,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_5(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 43008
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 7
    x1 = (xindex // 7)
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0 + (50264*x1)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2l/c2lebak4vvn4x77tq3wwlf7pjcgvwuftc6wnb4gyunybzojmsvcz.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_6 = async_compile.triton('triton_poi_fused_6', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[134217728], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_6', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_6(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 102926336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/oy/coy7ukaihla62qymebe7777clwfijqh57kg4gpuqufdpnb4rb7qi.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_7 = async_compile.triton('triton_poi_fused_7', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16384], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_7', 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_7(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 14336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qc/cqcq4t6lcwt3uid4fg7ppnyrr5qmyff3td7qyu47jksxxp7igfpu.py
# Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
# stack => cat
# stack_1 => cat_1
triton_poi_fused_stack_8 = async_compile.triton('triton_poi_fused_stack_8', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_stack_8', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 6, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8,))]})
@triton.jit
def triton_poi_fused_stack_8(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, out_ptr3, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6291456
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 64
    x4 = (xindex // 64)
    x2 = (xindex // 1024) % 2048
    x5 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x4)), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + ((2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr0 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr2 + ((2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr3 + (x0 + (128*x4)), None).to(tl.float32)
    tmp17 = tl.load(in_ptr3 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = tmp1 * tmp3
    tmp6 = tmp5.to(tl.float32)
    tmp8 = tmp7.to(tl.float32)
    tmp9 = tmp6 * tmp8
    tmp10 = tmp4 - tmp9
    tmp11 = tmp6 * tmp3
    tmp12 = tmp1 * tmp8
    tmp13 = tmp11 + tmp12
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp15 * tmp3
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp18 * tmp8
    tmp20 = tmp16 - tmp19
    tmp21 = tmp18 * tmp3
    tmp22 = tmp15 * tmp8
    tmp23 = tmp21 + tmp22
    tl.store(out_ptr0 + (2*x5), tmp10, None)
    tl.store(out_ptr1 + (2*x5), tmp13, None)
    tl.store(out_ptr2 + (2*x5), tmp20, None)
    tl.store(out_ptr3 + (2*x5), tmp23, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lu/clukvq6kpu7johi2wdksfvp24nizi7a2q7gaeujnkbivbqsxrygi.py
# Source Nodes: [matmul], Original ATen: [aten.clone]
# matmul => clone
triton_poi_fused_clone_9 = async_compile.triton('triton_poi_fused_clone_9', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16777216], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_9', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_clone_9(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 12582912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 128
    x1 = (xindex // 128) % 2048
    x2 = (xindex // 262144) % 16
    x3 = (xindex // 4194304)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x2) + (2048*x1) + (4194304*x3)), None)
    tmp1 = tmp0.to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp1, None)
''')


# kernel path: /tmp/torchinductor_mengqy/4r/c4rytbjzu675ihyonilanivjqa3vywjy4j2zebpnedrmsax3fqfu.py
# Source Nodes: [matmul], Original ATen: [aten.clone]
# matmul => clone_1
triton_poi_fused_clone_10 = async_compile.triton('triton_poi_fused_clone_10', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[8192, 2048], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_10', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]})
@triton.jit
def triton_poi_fused_clone_10(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 6144
    xnumel = 2048
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = yindex % 2048
    y1 = (yindex // 2048)
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (2048*x2) + (4194304*y1)), None, eviction_policy='evict_last')
    tmp1 = tmp0.to(tl.float32)
    tl.store(out_ptr0 + (x2 + (2048*y3)), tmp1, None)
''')


# kernel path: /tmp/torchinductor_mengqy/4j/c4jug5wekkr5wtiabpna6cc5y3obz4cnbsichmyakqpmktoe4wbz.py
# Source Nodes: [mul_11, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
# mul_11 => mul_11
# softmax => amax, convert_element_type_6, convert_element_type_7, div, exp, sub_2, sum_1
# where => where
triton_red_fused__softmax_mul_where_11 = async_compile.triton('triton_red_fused__softmax_mul_where_11', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 2048],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*i1', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__softmax_mul_where_11', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__softmax_mul_where_11(in_ptr0, in_ptr1, in_ptr2, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x3 = xindex
    tmp4 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    _tmp9 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = 0.08838834764831843
        tmp3 = tmp1 * tmp2
        tmp6 = tl.where(tmp0, tmp3, tmp5)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.maximum(_tmp9, tmp8)
        _tmp9 = tl.where(rmask, tmp10, _tmp9)
    tmp9 = triton_helpers.max2(_tmp9, 1)[:, None]
    tmp15 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
    _tmp22 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp11 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = 0.08838834764831843
        tmp14 = tmp12 * tmp13
        tmp17 = tl.where(tmp11, tmp14, tmp16)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tmp18 - tmp9
        tmp20 = tl.exp(tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = _tmp22 + tmp21
        _tmp22 = tl.where(rmask, tmp23, _tmp22)
    tmp22 = tl.sum(_tmp22, 1)[:, None]
    tmp28 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp29 = tl.broadcast_to(tmp28, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp24 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, other=0).to(tl.float32)
        tmp26 = 0.08838834764831843
        tmp27 = tmp25 * tmp26
        tmp30 = tl.where(tmp24, tmp27, tmp29)
        tmp31 = tmp30.to(tl.float32)
        tmp32 = tmp31 - tmp9
        tmp33 = tl.exp(tmp32)
        tmp34 = tmp33 / tmp22
        tmp35 = tmp34.to(tl.float32)
        tl.store(out_ptr2 + (r2 + (2048*x3)), tmp35, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/75/c75xqo5eg3tauz6zyp7u5biomqfmaouldshjcdssq4f7l2okg6kl.py
# Source Nodes: [matmul_1], Original ATen: [aten.clone]
# matmul_1 => clone_2
triton_poi_fused_clone_12 = async_compile.triton('triton_poi_fused_clone_12', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16777216], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_12', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_clone_12(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 12582912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 128
    x1 = (xindex // 128) % 2048
    x2 = (xindex // 262144) % 16
    x3 = (xindex // 4194304)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x2) + (2048*x1) + (4194304*x3)), None).to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/vj/cvjwtmog6whqfcdwyn43dec7gp3kqazacyratmuiqwi5zhd5eaag.py
# Source Nodes: [linear_3], Original ATen: [aten.view]
# linear_3 => view_22
triton_poi_fused_view_13 = async_compile.triton('triton_poi_fused_view_13', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16777216], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_view_13', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_view_13(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 12582912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + ((128*(x1 % 2048)) + (262144*(x0 // 128)) + (4194304*(x1 // 2048)) + (x0 % 128)), None).to(tl.float32)
    tl.store(out_ptr0 + (x2), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zs/czs3tbotiiuem2kuao3earpmthznrzwcry6ip2ibypyjmf67zzc5.py
# Source Nodes: [add_2, add_3, add_4, float_1, float_2, float_3, float_4, mean, mean_1, mean_2, mul, mul_1, mul_12, mul_13, mul_14, mul_2, mul_3, mul_6, rsqrt_1, type_as_3], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_2 => add_9
# add_3 => add_10, add_3
# add_4 => add_11, add_4
# float_1 => convert_element_type_14
# float_2 => convert_element_type_16
# float_3 => convert_element_type_18
# float_4 => convert_element_type_8
# mean => mean_3
# mean_1 => mean_1, mean_4
# mean_2 => mean_5
# mul => mul_25
# mul_1 => mul_21
# mul_12 => mul_12
# mul_13 => mul_13
# mul_14 => mul_14
# mul_2 => mul_22
# mul_3 => mul_23, mul_28
# mul_6 => mul_31
# rsqrt_1 => rsqrt_1
# type_as_3 => convert_element_type_9
triton_red_fused__to_copy_add_mean_mul_rsqrt_14 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_14', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp16', 11: 'i32', 12: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_14', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(11, 12))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_14(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp8 = tl.load(in_ptr2 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp17 = tl.load(in_ptr3 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp23 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp25 = tl.load(in_ptr4 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp31 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp9 = tmp8 * tmp0
        tmp10 = 0.0
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tmp18 = tmp17 * tmp0
        tmp19 = tmp18 + tmp10
        tmp20 = tmp19.to(tl.float32)
        tmp21 = tmp20 * tmp20
        tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
        tmp24 = _tmp23 + tmp22
        _tmp23 = tl.where(rmask, tmp24, _tmp23)
        tmp26 = tmp25 * tmp0
        tmp27 = tmp26 + tmp10
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp28 * tmp28
        tmp30 = tl.broadcast_to(tmp29, [XBLOCK, RBLOCK])
        tmp32 = _tmp31 + tmp30
        _tmp31 = tl.where(rmask, tmp32, _tmp31)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp15, None)
    tmp23 = tl.sum(_tmp23, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp23, None)
    tmp31 = tl.sum(_tmp31, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp31, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp33 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tmp33 + tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp37 = 2048.0
        tmp38 = tmp6 / tmp37
        tmp39 = 1e-05
        tmp40 = tmp38 + tmp39
        tmp41 = tl.math.rsqrt(tmp40)
        tmp42 = tmp36 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = tmp43 * tmp44
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp45, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/tb/ctbhg64xtaugqtmywmynbzbzmofehfusfompyi67cwzh7ixzsojp.py
# Source Nodes: [mul_15, silu], Original ATen: [aten.mul, aten.silu]
# mul_15 => mul_16
# silu => convert_element_type_10, convert_element_type_11, mul_15, sigmoid
triton_poi_fused_mul_silu_15 = async_compile.triton('triton_poi_fused_mul_silu_15', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[67108864], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_mul_silu_15', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_mul_silu_15(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 34603008
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp5 = tl.load(in_ptr1 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = tl.sigmoid(tmp1)
    tmp3 = tmp1 * tmp2
    tmp4 = tmp3.to(tl.float32)
    tmp6 = tmp4 * tmp5
    tl.store(out_ptr0 + (x0), tmp6, None)
''')


# kernel path: /tmp/torchinductor_mengqy/db/cdbrkqilz6alxeiuttixr2ouz4rmbntx6nxawdets52jubidjrri.py
# Source Nodes: [add, add_10, add_11, add_12, add_13, add_14, add_2, add_3, add_4, add_5, add_6, add_8, add_9, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_10, mul_11, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_9, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_13, add_32
# add_10 => add_26
# add_11 => add_27
# add_12 => add_28, add_33
# add_13 => add_29
# add_14 => add_34
# add_2 => add_9
# add_3 => add_10, add_3
# add_4 => add_11, add_14
# add_5 => add_5
# add_6 => add_15
# add_8 => add_24
# add_9 => add_25
# float_1 => convert_element_type_14, convert_element_type_32
# float_2 => convert_element_type_16, convert_element_type_34
# float_3 => convert_element_type_18, convert_element_type_36
# mean => mean_3, mean_8
# mean_1 => mean_4, mean_9
# mean_2 => mean_10, mean_5
# mul => mul_25, mul_60
# mul_1 => mul_21, mul_26, mul_61
# mul_10 => mul_56
# mul_11 => mul_57
# mul_2 => mul_22, mul_27, mul_62
# mul_3 => mul_23, mul_28, mul_63
# mul_4 => mul_29, mul_64
# mul_5 => mul_30, mul_65
# mul_6 => mul_31, mul_52, mul_66
# mul_7 => mul_32, mul_53, mul_67
# mul_8 => mul_33, mul_54, mul_68
# mul_9 => mul_55
# rsqrt => rsqrt_3, rsqrt_8
# rsqrt_1 => rsqrt_4, rsqrt_9
# rsqrt_2 => rsqrt_10, rsqrt_5
# type_as => convert_element_type_15, convert_element_type_33
# type_as_1 => convert_element_type_17, convert_element_type_35
# type_as_2 => convert_element_type_19, convert_element_type_37
triton_red_fused__to_copy_add_mean_mul_rsqrt_16 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_16', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp16', 12: '*fp16', 13: '*fp32', 14: '*fp16', 15: '*fp16', 16: '*fp32', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp32', 28: '*fp16', 29: '*fp32', 30: '*fp16', 31: '*fp32', 32: '*fp16', 33: 'i32', 34: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_16', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(33, 34))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_16(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr5 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr6 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr7 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr8 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp27 = tl.load(in_ptr9 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr12 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp45 = tl.load(in_ptr13 + (x0), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr15 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr16 + (x0), None, eviction_policy='evict_last')
    _tmp67 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr14 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr17 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp16 * tmp9
        tmp18 = tmp15 + tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp21 = tmp20 * tmp1
        tmp22 = tmp21 + tmp3
        tmp24 = tmp23 * tmp9
        tmp25 = tmp22 + tmp24
        tmp26 = tmp25.to(tl.float32)
        tmp28 = tmp27 * tmp1
        tmp29 = tmp28 + tmp3
        tmp30 = tmp29.to(tl.float32)
        tmp32 = 2048.0
        tmp33 = tmp31 / tmp32
        tmp34 = 1e-05
        tmp35 = tmp33 + tmp34
        tmp36 = tl.math.rsqrt(tmp35)
        tmp37 = tmp30 * tmp36
        tmp38 = tmp37.to(tl.float32)
        tmp40 = tmp38 * tmp39
        tmp42 = tmp41 * tmp1
        tmp43 = tmp42 + tmp3
        tmp44 = tmp43.to(tl.float32)
        tmp46 = tmp45 / tmp32
        tmp47 = tmp46 + tmp34
        tmp48 = tl.math.rsqrt(tmp47)
        tmp49 = tmp44 * tmp48
        tmp50 = tmp49.to(tl.float32)
        tmp52 = tmp50 * tmp51
        tmp54 = tmp53 * tmp1
        tmp55 = tmp54 + tmp3
        tmp56 = tmp55.to(tl.float32)
        tmp58 = tmp57 / tmp32
        tmp59 = tmp58 + tmp34
        tmp60 = tl.math.rsqrt(tmp59)
        tmp61 = tmp56 * tmp60
        tmp62 = tmp61.to(tl.float32)
        tmp64 = tmp62 * tmp63
        tmp65 = tmp12 * tmp12
        tmp66 = tl.broadcast_to(tmp65, [XBLOCK, RBLOCK])
        tmp68 = _tmp67 + tmp66
        _tmp67 = tl.where(rmask, tmp68, _tmp67)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp12, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp19, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp26, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp40, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp52, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp64, rmask)
    tmp67 = tl.sum(_tmp67, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp67, None)
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp69 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp77 = tl.load(in_ptr18 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp79 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp70 = 2048.0
        tmp71 = tmp67 / tmp70
        tmp72 = 1e-05
        tmp73 = tmp71 + tmp72
        tmp74 = tl.math.rsqrt(tmp73)
        tmp75 = tmp69 * tmp74
        tmp76 = tmp75.to(tl.float32)
        tmp78 = tmp76 * tmp77
        tmp80 = tmp79 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp78, rmask)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp82, None)
    _tmp97 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp84 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp92 = tl.load(in_ptr19 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp94 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp85 = 2048.0
        tmp86 = tmp82 / tmp85
        tmp87 = 1e-05
        tmp88 = tmp86 + tmp87
        tmp89 = tl.math.rsqrt(tmp88)
        tmp90 = tmp84 * tmp89
        tmp91 = tmp90.to(tl.float32)
        tmp93 = tmp91 * tmp92
        tmp95 = tmp94 * tmp94
        tmp96 = tl.broadcast_to(tmp95, [XBLOCK, RBLOCK])
        tmp98 = _tmp97 + tmp96
        _tmp97 = tl.where(rmask, tmp98, _tmp97)
        tl.store(out_ptr9 + (r1 + (2048*x0)), tmp93, rmask)
    tmp97 = tl.sum(_tmp97, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp97, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp99 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp107 = tl.load(in_ptr20 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp100 = 2048.0
        tmp101 = tmp97 / tmp100
        tmp102 = 1e-05
        tmp103 = tmp101 + tmp102
        tmp104 = tl.math.rsqrt(tmp103)
        tmp105 = tmp99 * tmp104
        tmp106 = tmp105.to(tl.float32)
        tmp108 = tmp106 * tmp107
        tl.store(out_ptr11 + (r1 + (2048*x0)), tmp108, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wr/cwrg3fcn7s7ojeads2vsgh6r4johi5k2tvwk5qsiwzhtncuvfm7r.py
# Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
# stack => cat_2, cat_4
# stack_1 => cat_3, cat_5
triton_poi_fused_stack_17 = async_compile.triton('triton_poi_fused_stack_17', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[8388608], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_stack_17', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 14), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(14,))]})
@triton.jit
def triton_poi_fused_stack_17(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6291456
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 64
    x4 = (xindex // 64)
    x2 = (xindex // 1024) % 2048
    x5 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x4)), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + ((2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr0 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr2 + ((2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr3 + (x0 + (128*x4)), None).to(tl.float32)
    tmp17 = tl.load(in_ptr3 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp24 = tl.load(in_ptr4 + (x0 + (128*x4)), None).to(tl.float32)
    tmp27 = tl.load(in_ptr4 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp34 = tl.load(in_ptr5 + (x0 + (128*x4)), None).to(tl.float32)
    tmp37 = tl.load(in_ptr5 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = tmp1 * tmp3
    tmp6 = tmp5.to(tl.float32)
    tmp8 = tmp7.to(tl.float32)
    tmp9 = tmp6 * tmp8
    tmp10 = tmp4 - tmp9
    tmp11 = tmp6 * tmp3
    tmp12 = tmp1 * tmp8
    tmp13 = tmp11 + tmp12
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp15 * tmp3
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp18 * tmp8
    tmp20 = tmp16 - tmp19
    tmp21 = tmp18 * tmp3
    tmp22 = tmp15 * tmp8
    tmp23 = tmp21 + tmp22
    tmp25 = tmp24.to(tl.float32)
    tmp26 = tmp25 * tmp3
    tmp28 = tmp27.to(tl.float32)
    tmp29 = tmp28 * tmp8
    tmp30 = tmp26 - tmp29
    tmp31 = tmp28 * tmp3
    tmp32 = tmp25 * tmp8
    tmp33 = tmp31 + tmp32
    tmp35 = tmp34.to(tl.float32)
    tmp36 = tmp35 * tmp3
    tmp38 = tmp37.to(tl.float32)
    tmp39 = tmp38 * tmp8
    tmp40 = tmp36 - tmp39
    tmp41 = tmp38 * tmp3
    tmp42 = tmp35 * tmp8
    tmp43 = tmp41 + tmp42
    tl.store(out_ptr0 + (2*x5), tmp10, None)
    tl.store(out_ptr1 + (2*x5), tmp13, None)
    tl.store(out_ptr2 + (2*x5), tmp20, None)
    tl.store(out_ptr3 + (2*x5), tmp23, None)
    tl.store(out_ptr4 + (2*x5), tmp30, None)
    tl.store(out_ptr5 + (2*x5), tmp33, None)
    tl.store(out_ptr6 + (2*x5), tmp40, None)
    tl.store(out_ptr7 + (2*x5), tmp43, None)
''')


# kernel path: /tmp/torchinductor_mengqy/mi/cmitxx3i5ldpi2sqffxlqjpot7ki5fdlirzckniwuc4zwxjk72rh.py
# Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
# mul_17 => mul_42, mul_77
# softmax => amax_1, amax_2, convert_element_type_24, convert_element_type_25, convert_element_type_42, convert_element_type_43, div_1, div_2, exp_1, exp_2, sub_5, sub_8, sum_2, sum_3
# where => where_1, where_2
triton_red_fused__softmax_mul_where_18 = async_compile.triton('triton_red_fused__softmax_mul_where_18', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 2048],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*i1', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__softmax_mul_where_18', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused__softmax_mul_where_18(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr4, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x3 = xindex
    tmp4 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    _tmp9 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = 0.08838834764831843
        tmp3 = tmp1 * tmp2
        tmp6 = tl.where(tmp0, tmp3, tmp5)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.maximum(_tmp9, tmp8)
        _tmp9 = tl.where(rmask, tmp10, _tmp9)
    tmp9 = triton_helpers.max2(_tmp9, 1)[:, None]
    tmp15 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
    _tmp22 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp29 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp11 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr3 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = 0.08838834764831843
        tmp14 = tmp12 * tmp13
        tmp17 = tl.where(tmp11, tmp14, tmp16)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tmp18 - tmp9
        tmp20 = tl.exp(tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = _tmp22 + tmp21
        _tmp22 = tl.where(rmask, tmp23, _tmp22)
        tmp25 = tmp24 * tmp13
        tmp26 = tl.where(tmp11, tmp25, tmp16)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
        tmp30 = triton_helpers.maximum(_tmp29, tmp28)
        _tmp29 = tl.where(rmask, tmp30, _tmp29)
    tmp22 = tl.sum(_tmp22, 1)[:, None]
    tmp29 = triton_helpers.max2(_tmp29, 1)[:, None]
    tmp35 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
    _tmp42 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp31 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp32 = tl.load(in_ptr3 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, other=0).to(tl.float32)
        tmp33 = 0.08838834764831843
        tmp34 = tmp32 * tmp33
        tmp37 = tl.where(tmp31, tmp34, tmp36)
        tmp38 = tmp37.to(tl.float32)
        tmp39 = tmp38 - tmp29
        tmp40 = tl.exp(tmp39)
        tmp41 = tl.broadcast_to(tmp40, [XBLOCK, RBLOCK])
        tmp43 = _tmp42 + tmp41
        _tmp42 = tl.where(rmask, tmp43, _tmp42)
        tmp45 = tmp44 * tmp33
        tmp46 = tl.where(tmp31, tmp45, tmp36)
        tmp47 = tmp46.to(tl.float32)
        tmp48 = tmp47 - tmp9
        tmp49 = tl.exp(tmp48)
        tmp50 = tmp49 / tmp22
        tmp51 = tmp50.to(tl.float32)
        tl.store(out_ptr4 + (r2 + (2048*x3)), tmp51, rmask)
    tmp42 = tl.sum(_tmp42, 1)[:, None]
    tmp56 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp52 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp53 = tl.load(in_ptr3 + (r2 + (2048*x3)), rmask, other=0).to(tl.float32)
        tmp54 = 0.08838834764831843
        tmp55 = tmp53 * tmp54
        tmp58 = tl.where(tmp52, tmp55, tmp57)
        tmp59 = tmp58.to(tl.float32)
        tmp60 = tmp59 - tmp29
        tmp61 = tl.exp(tmp60)
        tmp62 = tmp61 / tmp42
        tmp63 = tmp62.to(tl.float32)
        tl.store(out_ptr5 + (r2 + (2048*x3)), tmp63, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/jw/cjw7ardphcvpr4odmsdzkxnbm5urslrheycbhgvbht2grjaeerf6.py
# Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_19, mul_20, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_11 => add_19
# add_5 => add_12
# float_6 => convert_element_type_26
# mean_3 => mean_6
# mul_18 => mul_43
# mul_19 => mul_44
# mul_20 => mul_45
# mul_4 => mul_24
# rsqrt_3 => rsqrt_6
# type_as_5 => convert_element_type_27
triton_red_fused__to_copy_add_mean_mul_rsqrt_19 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_19', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: '*fp16', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_19', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_19(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp10 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp7 * tmp7
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
        tmp11 = _tmp10 + tmp9
        _tmp10 = tl.where(rmask, tmp11, _tmp10)
    tmp10 = tl.sum(_tmp10, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp10, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp12 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tmp0 * tmp12
        tmp14 = 0.0
        tmp15 = tmp13 + tmp14
        tmp17 = tmp15 + tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 2048.0
        tmp20 = tmp10 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wi/cwig6nlkvkaximw3hv7fi55o6hh7q5ueqyvo2izums3iifgzgb5d.py
# Source Nodes: [add_10, add_12, add_14, add_15, add_18, add_19, add_3, add_32, add_33, add_34, add_36, add_37, add_38, add_5, float_6, mean_3, mul_12, mul_13, mul_18, mul_19, mul_20, mul_28, mul_29, mul_30, mul_32, mul_33, mul_34, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_12 => add_20
# add_14 => add_30
# add_15 => add_31
# add_18 => add_37
# add_19 => add_38
# add_3 => add_3
# add_32 => add_66
# add_33 => add_67
# add_34 => add_68
# add_36 => add_70
# add_37 => add_71
# add_38 => add_72
# add_5 => add_12, add_5
# float_6 => convert_element_type_44
# mean_3 => mean_11
# mul_12 => mul_58
# mul_13 => mul_59
# mul_18 => mul_78
# mul_19 => mul_79
# mul_20 => mul_80
# mul_28 => mul_126
# mul_29 => mul_127
# mul_30 => mul_128
# mul_32 => mul_130
# mul_33 => mul_131
# mul_34 => mul_132
# mul_4 => mul_24
# rsqrt_3 => rsqrt_11
# type_as_5 => convert_element_type_45
triton_red_fused__to_copy_add_mean_mul_rsqrt_20 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_20', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp32', 19: '*fp16', 20: 'i32', 21: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_20', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(20, 21))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_20(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, out_ptr0, out_ptr1, out_ptr2, out_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr5 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr6 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr7 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp21 = tl.load(in_ptr8 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr11 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp33 = tl.load(in_ptr12 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr13 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp42 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp13 = tmp11 + tmp12
        tmp15 = tmp14 * tmp1
        tmp16 = tmp15 + tmp3
        tmp18 = tmp17 * tmp9
        tmp19 = tmp16 + tmp18
        tmp22 = tmp21 * tmp1
        tmp23 = tmp22 + tmp3
        tmp25 = tmp23 + tmp24
        tmp27 = tmp25 + tmp26
        tmp28 = tmp20 * tmp27
        tmp29 = tmp19 + tmp28
        tmp31 = tmp30 * tmp1
        tmp32 = tmp31 + tmp3
        tmp34 = tmp33 * tmp9
        tmp35 = tmp32 + tmp34
        tmp37 = tmp36 * tmp27
        tmp38 = tmp35 + tmp37
        tmp39 = tmp13.to(tl.float32)
        tmp40 = tmp39 * tmp39
        tmp41 = tl.broadcast_to(tmp40, [XBLOCK, RBLOCK])
        tmp43 = _tmp42 + tmp41
        _tmp42 = tl.where(rmask, tmp43, _tmp42)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp13, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp29, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp38, rmask)
    tmp42 = tl.sum(_tmp42, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp42, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp44 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr14 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp45 = tmp44.to(tl.float32)
        tmp46 = 2048.0
        tmp47 = tmp42 / tmp46
        tmp48 = 1e-05
        tmp49 = tmp47 + tmp48
        tmp50 = tl.math.rsqrt(tmp49)
        tmp51 = tmp45 * tmp50
        tmp52 = tmp51.to(tl.float32)
        tmp54 = tmp52 * tmp53
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp54, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ek/cekkt6cemfgqkz3au3n6vi4zi6hnwvqlyytzm6a2iwz7eaac74q7.py
# Source Nodes: [add, add_10, add_12, add_18, add_19, add_20, add_21, add_22, add_23, add_24, add_25, add_26, add_27, add_28, add_29, add_3, add_35, add_39, add_40, add_41, add_42, add_43, add_44, add_45, add_46, add_5, add_72, add_73, add_74, add_78, add_79, add_80, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_15, mul_16, mul_17, mul_18, mul_19, mul_2, mul_20, mul_21, mul_22, mul_23, mul_24, mul_25, mul_26, mul_3, mul_31, mul_35, mul_36, mul_37, mul_38, mul_39, mul_4, mul_40, mul_41, mul_42, mul_5, mul_6, mul_66, mul_67, mul_68, mul_7, mul_72, mul_73, mul_74, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_55, add_82
# add_10 => add_18
# add_12 => add_20
# add_18 => add_43
# add_19 => add_44
# add_20 => add_39, add_45
# add_21 => add_46
# add_22 => add_47
# add_23 => add_48
# add_24 => add_49, add_56
# add_25 => add_50
# add_26 => add_51
# add_27 => add_52, add_57
# add_28 => add_53
# add_29 => add_54
# add_3 => add_3
# add_35 => add_69
# add_39 => add_73
# add_40 => add_74, add_83
# add_41 => add_75
# add_42 => add_76
# add_43 => add_77
# add_44 => add_78, add_84
# add_45 => add_79
# add_46 => add_80
# add_5 => add_12, add_5
# add_72 => add_124
# add_73 => add_125
# add_74 => add_126
# add_78 => add_130
# add_79 => add_131
# add_80 => add_132
# float_1 => convert_element_type_50, convert_element_type_68
# float_2 => convert_element_type_52, convert_element_type_70
# float_3 => convert_element_type_54, convert_element_type_72
# mean => mean_13, mean_18
# mean_1 => mean_14, mean_19
# mean_2 => mean_15, mean_20
# mul => mul_142, mul_99
# mul_1 => mul_100, mul_143
# mul_15 => mul_87
# mul_16 => mul_88
# mul_17 => mul_89
# mul_18 => mul_90
# mul_19 => mul_91
# mul_2 => mul_101, mul_144
# mul_20 => mul_92
# mul_21 => mul_93
# mul_22 => mul_94
# mul_23 => mul_95
# mul_24 => mul_96
# mul_25 => mul_97
# mul_26 => mul_98
# mul_3 => mul_102, mul_145
# mul_31 => mul_129
# mul_35 => mul_133
# mul_36 => mul_134
# mul_37 => mul_135
# mul_38 => mul_136
# mul_39 => mul_137
# mul_4 => mul_103, mul_146, mul_24
# mul_40 => mul_138
# mul_41 => mul_139
# mul_42 => mul_140
# mul_5 => mul_104, mul_147
# mul_6 => mul_105, mul_148
# mul_66 => mul_216
# mul_67 => mul_217
# mul_68 => mul_218
# mul_7 => mul_106, mul_149
# mul_72 => mul_222
# mul_73 => mul_223
# mul_74 => mul_224
# mul_8 => mul_107, mul_150
# rsqrt => rsqrt_13, rsqrt_18
# rsqrt_1 => rsqrt_14, rsqrt_19
# rsqrt_2 => rsqrt_15, rsqrt_20
# type_as => convert_element_type_51, convert_element_type_69
# type_as_1 => convert_element_type_53, convert_element_type_71
# type_as_2 => convert_element_type_55, convert_element_type_73
triton_red_fused__to_copy_add_mean_mul_rsqrt_21 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_21', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp32', 61: '*fp16', 62: '*fp32', 63: '*fp16', 64: '*fp32', 65: '*fp16', 66: 'i32', 67: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_21', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(66, 67))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_21(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr19 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr20 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr21 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr22 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr23 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr24 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr25 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr26 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr27 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp79 = tl.load(in_ptr28 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr29 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr31 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp95 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp98 = tl.load(in_ptr35 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp104 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp50 = tmp49 * tmp1
        tmp51 = tmp50 + tmp3
        tmp53 = tmp52 * tmp9
        tmp54 = tmp51 + tmp53
        tmp56 = tmp55 * tmp19
        tmp57 = tmp54 + tmp56
        tmp59 = tmp58 * tmp1
        tmp60 = tmp59 + tmp3
        tmp62 = tmp61 * tmp9
        tmp63 = tmp60 + tmp62
        tmp65 = tmp64 * tmp19
        tmp66 = tmp63 + tmp65
        tmp68 = tmp67 * tmp1
        tmp69 = tmp68 + tmp3
        tmp71 = tmp70 * tmp9
        tmp72 = tmp69 + tmp71
        tmp74 = tmp73 * tmp19
        tmp75 = tmp72 + tmp74
        tmp77 = tmp76 * tmp1
        tmp78 = tmp77 + tmp3
        tmp80 = tmp79 * tmp9
        tmp81 = tmp78 + tmp80
        tmp83 = tmp82 * tmp19
        tmp84 = tmp81 + tmp83
        tmp89 = tmp87 + tmp88
        tmp90 = tmp86 * tmp89
        tmp91 = tmp85 + tmp90
        tmp92 = tmp91.to(tl.float32)
        tmp93 = tmp92 * tmp92
        tmp94 = tl.broadcast_to(tmp93, [XBLOCK, RBLOCK])
        tmp96 = _tmp95 + tmp94
        _tmp95 = tl.where(rmask, tmp96, _tmp95)
        tmp99 = tmp98 * tmp89
        tmp100 = tmp97 + tmp99
        tmp101 = tmp100.to(tl.float32)
        tmp102 = tmp101 * tmp101
        tmp103 = tl.broadcast_to(tmp102, [XBLOCK, RBLOCK])
        tmp105 = _tmp104 + tmp103
        _tmp104 = tl.where(rmask, tmp105, _tmp104)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp21, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp39, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp48, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp57, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp75, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp84, rmask)
    tmp95 = tl.sum(_tmp95, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp95, None)
    tmp104 = tl.sum(_tmp104, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp104, None)
    tmp107 = tl.load(in_ptr36 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp116 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp106 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp109 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tmp108 + tmp109
        tmp111 = tmp107 * tmp110
        tmp112 = tmp106 + tmp111
        tmp113 = tmp112.to(tl.float32)
        tmp114 = tmp113 * tmp113
        tmp115 = tl.broadcast_to(tmp114, [XBLOCK, RBLOCK])
        tmp117 = _tmp116 + tmp115
        _tmp116 = tl.where(rmask, tmp117, _tmp116)
        tmp119 = tmp86 * tmp110
        tmp120 = tmp118 + tmp119
        tmp121 = tmp120.to(tl.float32)
        tmp122 = 2048.0
        tmp123 = tmp95 / tmp122
        tmp124 = 1e-05
        tmp125 = tmp123 + tmp124
        tmp126 = tl.math.rsqrt(tmp125)
        tmp127 = tmp121 * tmp126
        tmp128 = tmp127.to(tl.float32)
        tmp130 = tmp98 * tmp110
        tmp131 = tmp129 + tmp130
        tmp132 = tmp131.to(tl.float32)
        tmp133 = tmp104 / tmp122
        tmp134 = tmp133 + tmp124
        tmp135 = tl.math.rsqrt(tmp134)
        tmp136 = tmp132 * tmp135
        tmp137 = tmp136.to(tl.float32)
        tl.store(out_ptr11 + (r1 + (2048*x0)), tmp128, rmask)
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp137, rmask)
    tmp116 = tl.sum(_tmp116, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp116, None)
    _tmp164 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp138 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp152 = tl.load(out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr37 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp155 = tl.load(out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_ptr38 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr39 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp160 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp141 = tmp139 + tmp140
        tmp142 = tmp107 * tmp141
        tmp143 = tmp138 + tmp142
        tmp144 = tmp143.to(tl.float32)
        tmp145 = 2048.0
        tmp146 = tmp116 / tmp145
        tmp147 = 1e-05
        tmp148 = tmp146 + tmp147
        tmp149 = tl.math.rsqrt(tmp148)
        tmp150 = tmp144 * tmp149
        tmp151 = tmp150.to(tl.float32)
        tmp154 = tmp152 * tmp153
        tmp157 = tmp155 * tmp156
        tmp159 = tmp151 * tmp158
        tmp161 = tmp160.to(tl.float32)
        tmp162 = tmp161 * tmp161
        tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
        tmp165 = _tmp164 + tmp163
        _tmp164 = tl.where(rmask, tmp165, _tmp164)
        tl.store(out_ptr13 + (r1 + (2048*x0)), tmp151, rmask)
        tl.store(out_ptr14 + (r1 + (2048*x0)), tmp154, rmask)
        tl.store(out_ptr15 + (r1 + (2048*x0)), tmp157, rmask)
        tl.store(out_ptr16 + (r1 + (2048*x0)), tmp159, rmask)
    tmp164 = tl.sum(_tmp164, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp164, None)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp166 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp175 = tl.load(in_ptr40 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp177 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp167 = tmp166.to(tl.float32)
        tmp168 = 2048.0
        tmp169 = tmp164 / tmp168
        tmp170 = 1e-05
        tmp171 = tmp169 + tmp170
        tmp172 = tl.math.rsqrt(tmp171)
        tmp173 = tmp167 * tmp172
        tmp174 = tmp173.to(tl.float32)
        tmp176 = tmp174 * tmp175
        tmp178 = tmp177.to(tl.float32)
        tmp179 = tmp178 * tmp178
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tl.store(out_ptr18 + (r1 + (2048*x0)), tmp176, rmask)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp181, None)
    _tmp198 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp183 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr41 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp194 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp184 = tmp183.to(tl.float32)
        tmp185 = 2048.0
        tmp186 = tmp181 / tmp185
        tmp187 = 1e-05
        tmp188 = tmp186 + tmp187
        tmp189 = tl.math.rsqrt(tmp188)
        tmp190 = tmp184 * tmp189
        tmp191 = tmp190.to(tl.float32)
        tmp193 = tmp191 * tmp192
        tmp195 = tmp194.to(tl.float32)
        tmp196 = tmp195 * tmp195
        tmp197 = tl.broadcast_to(tmp196, [XBLOCK, RBLOCK])
        tmp199 = _tmp198 + tmp197
        _tmp198 = tl.where(rmask, tmp199, _tmp198)
        tl.store(out_ptr20 + (r1 + (2048*x0)), tmp193, rmask)
    tmp198 = tl.sum(_tmp198, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp198, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp200 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp209 = tl.load(in_ptr42 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp201 = tmp200.to(tl.float32)
        tmp202 = 2048.0
        tmp203 = tmp198 / tmp202
        tmp204 = 1e-05
        tmp205 = tmp203 + tmp204
        tmp206 = tl.math.rsqrt(tmp205)
        tmp207 = tmp201 * tmp206
        tmp208 = tmp207.to(tl.float32)
        tmp210 = tmp208 * tmp209
        tl.store(out_ptr22 + (r1 + (2048*x0)), tmp210, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/uy/cuyvaehu3mhb7gitkh6mao35lhiuwqyfrf2nneqem5p6sxsuw7iy.py
# Source Nodes: [add_20, add_47, add_48, add_49, float_6, mean_3, mul_18, mul_19, mul_20, mul_43, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_20 => add_39
# add_47 => add_81
# add_48 => add_87
# add_49 => add_88
# float_6 => convert_element_type_80
# mean_3 => mean_21
# mul_18 => mul_160
# mul_19 => mul_161
# mul_20 => mul_162
# mul_43 => mul_141
# rsqrt_3 => rsqrt_21
# type_as_5 => convert_element_type_81
triton_red_fused__to_copy_add_mean_mul_rsqrt_22 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_22', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_22', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_22(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/kz/ckz2wa6dwgy2zmizcwjeeumosvt3tlilvh7hvkt3mjlvddv4jvub.py
# Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_31 => add_60
# add_32 => add_61
# float_6 => convert_element_type_62
# mean_3 => mean_16
# mul_18 => mul_117
# mul_19 => mul_118
# mul_20 => mul_119
# rsqrt_3 => rsqrt_16
# type_as_5 => convert_element_type_63
triton_red_fused__to_copy_add_mean_mul_rsqrt_23 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_23', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_23', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_23(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = 2048.0
        tmp13 = tmp6 / tmp12
        tmp14 = 1e-05
        tmp15 = tmp13 + tmp14
        tmp16 = tl.math.rsqrt(tmp15)
        tmp17 = tmp11 * tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp20 = tmp18 * tmp19
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp20, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/qw/cqwtyfh4ifzruyjk4iizwbhtzxgs4alvk7cqhrbx2l6msbjcwzrk.py
# Source Nodes: [add, add_10, add_12, add_128, add_129, add_130, add_136, add_137, add_138, add_20, add_3, add_31, add_33, add_5, add_50, add_51, add_52, add_53, add_54, add_55, add_56, add_57, add_58, add_59, add_60, add_61, add_62, add_63, add_64, add_65, add_66, add_67, add_75, add_76, add_77, add_81, add_82, add_83, add_84, add_85, add_86, add_87, add_88, add_89, add_90, add_91, add_92, add_93, add_94, add_95, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_120, mul_121, mul_122, mul_128, mul_129, mul_130, mul_2, mul_3, mul_4, mul_45, mul_46, mul_47, mul_48, mul_49, mul_5, mul_50, mul_51, mul_52, mul_53, mul_54, mul_55, mul_56, mul_57, mul_58, mul_59, mul_6, mul_60, mul_61, mul_62, mul_69, mul_7, mul_70, mul_71, mul_75, mul_76, mul_77, mul_78, mul_79, mul_8, mul_80, mul_81, mul_82, mul_83, mul_84, mul_85, mul_86, mul_87, mul_88, mul_89, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_113, add_148
# add_10 => add_18
# add_12 => add_20
# add_128 => add_198
# add_129 => add_199
# add_130 => add_200
# add_136 => add_206
# add_137 => add_207
# add_138 => add_208
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89, add_93
# add_51 => add_94
# add_52 => add_95
# add_53 => add_96
# add_54 => add_97
# add_55 => add_98
# add_56 => add_99
# add_57 => add_100
# add_58 => add_101
# add_59 => add_102
# add_60 => add_103, add_114
# add_61 => add_104
# add_62 => add_105
# add_63 => add_106
# add_64 => add_107
# add_65 => add_108, add_115
# add_66 => add_109
# add_67 => add_110
# add_75 => add_127
# add_76 => add_128
# add_77 => add_129
# add_81 => add_133
# add_82 => add_134
# add_83 => add_135
# add_84 => add_136, add_149
# add_85 => add_137
# add_86 => add_138
# add_87 => add_139
# add_88 => add_140
# add_89 => add_141
# add_90 => add_142, add_150
# add_91 => add_143
# add_92 => add_144
# add_93 => add_145
# add_94 => add_146
# add_95 => add_147
# float_1 => convert_element_type_104, convert_element_type_86
# float_2 => convert_element_type_106, convert_element_type_88
# float_3 => convert_element_type_108, convert_element_type_90
# mean => mean_23, mean_28
# mean_1 => mean_24, mean_29
# mean_2 => mean_25, mean_30
# mul => mul_189, mul_240
# mul_1 => mul_190, mul_241
# mul_120 => mul_322
# mul_121 => mul_323
# mul_122 => mul_324
# mul_128 => mul_330
# mul_129 => mul_331
# mul_130 => mul_332
# mul_2 => mul_191, mul_242
# mul_3 => mul_192, mul_243
# mul_4 => mul_193, mul_24, mul_244
# mul_45 => mul_169
# mul_46 => mul_170
# mul_47 => mul_171
# mul_48 => mul_172
# mul_49 => mul_173
# mul_5 => mul_194, mul_245
# mul_50 => mul_174
# mul_51 => mul_175
# mul_52 => mul_176
# mul_53 => mul_177
# mul_54 => mul_178
# mul_55 => mul_179
# mul_56 => mul_180
# mul_57 => mul_181
# mul_58 => mul_182
# mul_59 => mul_183
# mul_6 => mul_195, mul_246
# mul_60 => mul_184
# mul_61 => mul_185
# mul_62 => mul_186
# mul_69 => mul_219
# mul_7 => mul_196, mul_247
# mul_70 => mul_220
# mul_71 => mul_221
# mul_75 => mul_225
# mul_76 => mul_226
# mul_77 => mul_227
# mul_78 => mul_228
# mul_79 => mul_229
# mul_8 => mul_197, mul_248
# mul_80 => mul_230
# mul_81 => mul_231
# mul_82 => mul_232
# mul_83 => mul_233
# mul_84 => mul_234
# mul_85 => mul_235
# mul_86 => mul_236
# mul_87 => mul_237
# mul_88 => mul_238
# mul_89 => mul_239
# rsqrt => rsqrt_23, rsqrt_28
# rsqrt_1 => rsqrt_24, rsqrt_29
# rsqrt_2 => rsqrt_25, rsqrt_30
# type_as => convert_element_type_105, convert_element_type_87
# type_as_1 => convert_element_type_107, convert_element_type_89
# type_as_2 => convert_element_type_109, convert_element_type_91
triton_red_fused__to_copy_add_mean_mul_rsqrt_24 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_24', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp16', 73: '*fp32', 74: '*fp16', 75: '*fp32', 76: '*fp16', 77: '*fp32', 78: '*fp16', 79: '*fp32', 80: '*fp16', 81: '*fp32', 82: '*fp16', 83: 'i32', 84: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_24', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(83, 84))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_24(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, out_ptr1, out_ptr2, out_ptr3, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr19 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr20 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr21 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr22 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr23 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr24 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr25 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr26 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr27 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp79 = tl.load(in_ptr28 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr29 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr30 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr33 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr37 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr40 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr41 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr42 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr43 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr44 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr45 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr46 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr47 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr48 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr49 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr50 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr51 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr52 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr53 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr54 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp50 = tmp49 * tmp1
        tmp51 = tmp50 + tmp3
        tmp53 = tmp52 * tmp9
        tmp54 = tmp51 + tmp53
        tmp56 = tmp55 * tmp19
        tmp57 = tmp54 + tmp56
        tmp59 = tmp58 * tmp1
        tmp60 = tmp59 + tmp3
        tmp62 = tmp61 * tmp9
        tmp63 = tmp60 + tmp62
        tmp65 = tmp64 * tmp19
        tmp66 = tmp63 + tmp65
        tmp68 = tmp67 * tmp1
        tmp69 = tmp68 + tmp3
        tmp71 = tmp70 * tmp9
        tmp72 = tmp69 + tmp71
        tmp74 = tmp73 * tmp19
        tmp75 = tmp72 + tmp74
        tmp77 = tmp76 * tmp1
        tmp78 = tmp77 + tmp3
        tmp80 = tmp79 * tmp9
        tmp81 = tmp78 + tmp80
        tmp83 = tmp82 * tmp19
        tmp84 = tmp81 + tmp83
        tmp89 = tmp87 + tmp88
        tmp90 = tmp86 * tmp89
        tmp91 = tmp85 + tmp90
        tmp95 = tmp93 + tmp94
        tmp97 = tmp95 + tmp96
        tmp98 = tmp92 * tmp97
        tmp99 = tmp91 + tmp98
        tmp103 = tmp101 + tmp102
        tmp104 = tmp100 * tmp103
        tmp105 = tmp99 + tmp104
        tmp108 = tmp107 * tmp89
        tmp109 = tmp106 + tmp108
        tmp111 = tmp110 * tmp97
        tmp112 = tmp109 + tmp111
        tmp114 = tmp113 * tmp103
        tmp115 = tmp112 + tmp114
        tmp117 = tmp116 * tmp89
        tmp118 = tmp57 + tmp117
        tmp120 = tmp119 * tmp97
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp103
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp89
        tmp127 = tmp66 + tmp126
        tmp129 = tmp128 * tmp97
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp103
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp89
        tmp136 = tmp75 + tmp135
        tmp138 = tmp137 * tmp97
        tmp139 = tmp136 + tmp138
        tmp140 = tmp139.to(tl.float32)
        tmp142 = tmp141 * tmp89
        tmp143 = tmp84 + tmp142
        tmp145 = tmp144 * tmp97
        tmp146 = tmp143 + tmp145
        tmp147 = tmp146.to(tl.float32)
        tmp149 = tmp148 * tmp89
        tmp150 = tmp21 + tmp149
        tmp152 = tmp151 * tmp97
        tmp153 = tmp150 + tmp152
        tmp154 = tmp153.to(tl.float32)
        tmp155 = tmp140 * tmp140
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp39, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp48, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp105, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp124, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp133, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp140, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp147, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp154, rmask)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp157, None)
    _tmp172 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp159 = tl.load(out_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp167 = tl.load(in_ptr55 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp169 = tl.load(out_ptr7 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp160 = 2048.0
        tmp161 = tmp157 / tmp160
        tmp162 = 1e-05
        tmp163 = tmp161 + tmp162
        tmp164 = tl.math.rsqrt(tmp163)
        tmp165 = tmp159 * tmp164
        tmp166 = tmp165.to(tl.float32)
        tmp168 = tmp166 * tmp167
        tmp170 = tmp169 * tmp169
        tmp171 = tl.broadcast_to(tmp170, [XBLOCK, RBLOCK])
        tmp173 = _tmp172 + tmp171
        _tmp172 = tl.where(rmask, tmp173, _tmp172)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp168, rmask)
    tmp172 = tl.sum(_tmp172, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp172, None)
    _tmp187 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp174 = tl.load(out_ptr7 + (r1 + (2048*x0)), rmask, other=0)
        tmp182 = tl.load(in_ptr56 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp184 = tl.load(out_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp175 = 2048.0
        tmp176 = tmp172 / tmp175
        tmp177 = 1e-05
        tmp178 = tmp176 + tmp177
        tmp179 = tl.math.rsqrt(tmp178)
        tmp180 = tmp174 * tmp179
        tmp181 = tmp180.to(tl.float32)
        tmp183 = tmp181 * tmp182
        tmp185 = tmp184 * tmp184
        tmp186 = tl.broadcast_to(tmp185, [XBLOCK, RBLOCK])
        tmp188 = _tmp187 + tmp186
        _tmp187 = tl.where(rmask, tmp188, _tmp187)
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp183, rmask)
    tmp187 = tl.sum(_tmp187, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp187, None)
    _tmp203 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp189 = tl.load(out_ptr8 + (r1 + (2048*x0)), rmask, other=0)
        tmp197 = tl.load(in_ptr57 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp199 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp190 = 2048.0
        tmp191 = tmp187 / tmp190
        tmp192 = 1e-05
        tmp193 = tmp191 + tmp192
        tmp194 = tl.math.rsqrt(tmp193)
        tmp195 = tmp189 * tmp194
        tmp196 = tmp195.to(tl.float32)
        tmp198 = tmp196 * tmp197
        tmp200 = tmp199.to(tl.float32)
        tmp201 = tmp200 * tmp200
        tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
        tmp204 = _tmp203 + tmp202
        _tmp203 = tl.where(rmask, tmp204, _tmp203)
        tl.store(out_ptr14 + (r1 + (2048*x0)), tmp198, rmask)
    tmp203 = tl.sum(_tmp203, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp203, None)
    _tmp220 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp205 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp214 = tl.load(in_ptr58 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp216 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp206 = tmp205.to(tl.float32)
        tmp207 = 2048.0
        tmp208 = tmp203 / tmp207
        tmp209 = 1e-05
        tmp210 = tmp208 + tmp209
        tmp211 = tl.math.rsqrt(tmp210)
        tmp212 = tmp206 * tmp211
        tmp213 = tmp212.to(tl.float32)
        tmp215 = tmp213 * tmp214
        tmp217 = tmp216.to(tl.float32)
        tmp218 = tmp217 * tmp217
        tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
        tmp221 = _tmp220 + tmp219
        _tmp220 = tl.where(rmask, tmp221, _tmp220)
        tl.store(out_ptr16 + (r1 + (2048*x0)), tmp215, rmask)
    tmp220 = tl.sum(_tmp220, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp220, None)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp222 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr59 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp233 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp223 = tmp222.to(tl.float32)
        tmp224 = 2048.0
        tmp225 = tmp220 / tmp224
        tmp226 = 1e-05
        tmp227 = tmp225 + tmp226
        tmp228 = tl.math.rsqrt(tmp227)
        tmp229 = tmp223 * tmp228
        tmp230 = tmp229.to(tl.float32)
        tmp232 = tmp230 * tmp231
        tmp234 = tmp233.to(tl.float32)
        tmp235 = tmp234 * tmp234
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tl.store(out_ptr18 + (r1 + (2048*x0)), tmp232, rmask)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp237, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp239 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp248 = tl.load(in_ptr60 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp240 = tmp239.to(tl.float32)
        tmp241 = 2048.0
        tmp242 = tmp237 / tmp241
        tmp243 = 1e-05
        tmp244 = tmp242 + tmp243
        tmp245 = tl.math.rsqrt(tmp244)
        tmp246 = tmp240 * tmp245
        tmp247 = tmp246.to(tl.float32)
        tmp249 = tmp247 * tmp248
        tl.store(out_ptr20 + (r1 + (2048*x0)), tmp249, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/jp/cjpsi7bgyigbcuxw6y3j2rlmy3fvijwcemjpfnq34t6nz4a3vdzg.py
# Source Nodes: [add_10, add_100, add_101, add_102, add_103, add_105, add_106, add_107, add_108, add_109, add_110, add_12, add_131, add_132, add_133, add_139, add_140, add_141, add_144, add_145, add_146, add_147, add_148, add_149, add_152, add_153, add_154, add_155, add_156, add_157, add_20, add_3, add_31, add_33, add_5, add_50, add_68, add_69, add_70, add_71, add_98, add_99, float_6, mean_3, mul_100, mul_101, mul_102, mul_103, mul_123, mul_124, mul_125, mul_131, mul_132, mul_133, mul_136, mul_137, mul_138, mul_139, mul_140, mul_141, mul_144, mul_145, mul_146, mul_147, mul_148, mul_149, mul_18, mul_19, mul_20, mul_4, mul_63, mul_64, mul_91, mul_92, mul_93, mul_94, mul_95, mul_96, mul_98, mul_99, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_100 => add_161
# add_101 => add_162
# add_102 => add_163
# add_103 => add_164
# add_105 => add_166
# add_106 => add_167
# add_107 => add_168
# add_108 => add_169
# add_109 => add_170
# add_110 => add_171
# add_12 => add_20
# add_131 => add_201
# add_132 => add_202
# add_133 => add_203
# add_139 => add_209
# add_140 => add_210
# add_141 => add_211
# add_144 => add_214
# add_145 => add_215
# add_146 => add_216
# add_147 => add_217
# add_148 => add_218
# add_149 => add_219
# add_152 => add_222
# add_153 => add_223
# add_154 => add_224
# add_155 => add_225
# add_156 => add_226
# add_157 => add_227
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_68 => add_111
# add_69 => add_112
# add_70 => add_118
# add_71 => add_119
# add_98 => add_159
# add_99 => add_160
# float_6 => convert_element_type_98
# mean_3 => mean_26
# mul_100 => mul_276
# mul_101 => mul_277
# mul_102 => mul_278
# mul_103 => mul_279
# mul_123 => mul_325
# mul_124 => mul_326
# mul_125 => mul_327
# mul_131 => mul_333
# mul_132 => mul_334
# mul_133 => mul_335
# mul_136 => mul_338
# mul_137 => mul_339
# mul_138 => mul_340
# mul_139 => mul_341
# mul_140 => mul_342
# mul_141 => mul_343
# mul_144 => mul_346
# mul_145 => mul_347
# mul_146 => mul_348
# mul_147 => mul_349
# mul_148 => mul_350
# mul_149 => mul_351
# mul_18 => mul_207
# mul_19 => mul_208
# mul_20 => mul_209
# mul_4 => mul_24
# mul_63 => mul_187
# mul_64 => mul_188
# mul_91 => mul_267
# mul_92 => mul_268
# mul_93 => mul_269
# mul_94 => mul_270
# mul_95 => mul_271
# mul_96 => mul_272
# mul_98 => mul_274
# mul_99 => mul_275
# rsqrt_3 => rsqrt_26
# type_as_5 => convert_element_type_99
triton_red_fused__to_copy_add_mean_mul_rsqrt_25 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_25', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp32', 55: '*fp16', 56: 'i32', 57: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_25', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(56, 57))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_25(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr19 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr22 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr26 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr27 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr28 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr31 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr32 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr33 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr34 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr35 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr36 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr37 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr38 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr39 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr40 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr41 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr42 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr43 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr44 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr45 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp128 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp52 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp75 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp53 = tmp51 + tmp52
        tmp54 = tmp50 * tmp53
        tmp55 = tmp49 + tmp54
        tmp59 = tmp57 + tmp58
        tmp61 = tmp59 + tmp60
        tmp62 = tmp56 * tmp61
        tmp63 = tmp55 + tmp62
        tmp65 = tmp63 + tmp64
        tmp68 = tmp67 * tmp53
        tmp69 = tmp66 + tmp68
        tmp71 = tmp70 * tmp61
        tmp72 = tmp69 + tmp71
        tmp76 = tmp74 + tmp75
        tmp77 = tmp73 * tmp76
        tmp78 = tmp72 + tmp77
        tmp81 = tmp80 * tmp53
        tmp82 = tmp79 + tmp81
        tmp84 = tmp83 * tmp61
        tmp85 = tmp82 + tmp84
        tmp87 = tmp86 * tmp76
        tmp88 = tmp85 + tmp87
        tmp90 = tmp89 * tmp53
        tmp91 = tmp21 + tmp90
        tmp93 = tmp92 * tmp61
        tmp94 = tmp91 + tmp93
        tmp96 = tmp95 * tmp76
        tmp97 = tmp94 + tmp96
        tmp99 = tmp98 * tmp53
        tmp100 = tmp30 + tmp99
        tmp102 = tmp101 * tmp61
        tmp103 = tmp100 + tmp102
        tmp105 = tmp104 * tmp76
        tmp106 = tmp103 + tmp105
        tmp108 = tmp107 * tmp53
        tmp109 = tmp39 + tmp108
        tmp111 = tmp110 * tmp61
        tmp112 = tmp109 + tmp111
        tmp114 = tmp113 * tmp76
        tmp115 = tmp112 + tmp114
        tmp117 = tmp116 * tmp53
        tmp118 = tmp48 + tmp117
        tmp120 = tmp119 * tmp61
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp76
        tmp124 = tmp121 + tmp123
        tmp125 = tmp65.to(tl.float32)
        tmp126 = tmp125 * tmp125
        tmp127 = tl.broadcast_to(tmp126, [XBLOCK, RBLOCK])
        tmp129 = _tmp128 + tmp127
        _tmp128 = tl.where(rmask, tmp129, _tmp128)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp65, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp78, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp88, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp97, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp124, rmask)
    tmp128 = tl.sum(_tmp128, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp128, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp130 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr46 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp131 = tmp130.to(tl.float32)
        tmp132 = 2048.0
        tmp133 = tmp128 / tmp132
        tmp134 = 1e-05
        tmp135 = tmp133 + tmp134
        tmp136 = tl.math.rsqrt(tmp135)
        tmp137 = tmp131 * tmp136
        tmp138 = tmp137.to(tl.float32)
        tmp140 = tmp138 * tmp139
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp140, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ya/cya25ovazi4h3cn4qkoezj7qt5w6ropszm4g5eufcn2r5jepfwer.py
# Source Nodes: [add, add_134, add_135, add_142, add_143, add_144, add_150, add_151, add_152, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_126, mul_127, mul_134, mul_135, mul_142, mul_143, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_230
# add_134 => add_204
# add_135 => add_205
# add_142 => add_212
# add_143 => add_213
# add_144 => add_231
# add_150 => add_220
# add_151 => add_221
# add_152 => add_232
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_140
# float_2 => convert_element_type_142
# float_3 => convert_element_type_144
# mean => mean_38
# mean_1 => mean_39
# mean_2 => mean_40
# mul => mul_354
# mul_1 => mul_355
# mul_126 => mul_328
# mul_127 => mul_329
# mul_134 => mul_336
# mul_135 => mul_337
# mul_142 => mul_344
# mul_143 => mul_345
# mul_2 => mul_356
# mul_3 => mul_357
# mul_4 => mul_358
# mul_5 => mul_359
# mul_6 => mul_360
# mul_7 => mul_361
# mul_8 => mul_362
# rsqrt => rsqrt_38
# rsqrt_1 => rsqrt_39
# rsqrt_2 => rsqrt_40
# type_as => convert_element_type_141
# type_as_1 => convert_element_type_143
# type_as_2 => convert_element_type_145
triton_red_fused__to_copy_add_mean_mul_rsqrt_26 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_26', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp16', 22: '*fp32', 23: '*fp16', 24: '*fp32', 25: '*fp16', 26: 'i32', 27: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_26', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(26, 27))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_26(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr4 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr9 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr10 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr12 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr13 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp34 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp18 = tmp17 * tmp4
        tmp19 = tmp16 + tmp18
        tmp21 = tmp20 * tmp12
        tmp22 = tmp19 + tmp21
        tmp23 = tmp22.to(tl.float32)
        tmp26 = tmp25 * tmp4
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp12
        tmp30 = tmp27 + tmp29
        tmp31 = tmp30.to(tl.float32)
        tmp32 = tmp15 * tmp15
        tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
        tmp35 = _tmp34 + tmp33
        _tmp34 = tl.where(rmask, tmp35, _tmp34)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp15, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp23, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp31, rmask)
    tmp34 = tl.sum(_tmp34, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp34, None)
    _tmp49 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp36 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp44 = tl.load(in_ptr14 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp46 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp37 = 2048.0
        tmp38 = tmp34 / tmp37
        tmp39 = 1e-05
        tmp40 = tmp38 + tmp39
        tmp41 = tl.math.rsqrt(tmp40)
        tmp42 = tmp36 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp47 = tmp46 * tmp46
        tmp48 = tl.broadcast_to(tmp47, [XBLOCK, RBLOCK])
        tmp50 = _tmp49 + tmp48
        _tmp49 = tl.where(rmask, tmp50, _tmp49)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp45, rmask)
    tmp49 = tl.sum(_tmp49, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp49, None)
    _tmp64 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp51 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp59 = tl.load(in_ptr15 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp52 = 2048.0
        tmp53 = tmp49 / tmp52
        tmp54 = 1e-05
        tmp55 = tmp53 + tmp54
        tmp56 = tl.math.rsqrt(tmp55)
        tmp57 = tmp51 * tmp56
        tmp58 = tmp57.to(tl.float32)
        tmp60 = tmp58 * tmp59
        tmp62 = tmp61 * tmp61
        tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
        tmp65 = _tmp64 + tmp63
        _tmp64 = tl.where(rmask, tmp65, _tmp64)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp60, rmask)
    tmp64 = tl.sum(_tmp64, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp64, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp66 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp74 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = 2048.0
        tmp68 = tmp64 / tmp67
        tmp69 = 1e-05
        tmp70 = tmp68 + tmp69
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp66 * tmp71
        tmp73 = tmp72.to(tl.float32)
        tmp75 = tmp73 * tmp74
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp75, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/tr/ctr4giiezximbc27nly6cuox24l7rl7634y6lx5vugzucn2i2uy5.py
# Source Nodes: [add, add_10, add_104, add_111, add_112, add_113, add_114, add_115, add_116, add_117, add_118, add_119, add_12, add_120, add_121, add_122, add_123, add_124, add_158, add_159, add_160, add_161, add_20, add_200, add_201, add_202, add_203, add_204, add_205, add_210, add_211, add_212, add_213, add_214, add_215, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_104, mul_105, mul_106, mul_107, mul_108, mul_109, mul_110, mul_111, mul_112, mul_113, mul_114, mul_115, mul_116, mul_117, mul_150, mul_151, mul_18, mul_19, mul_190, mul_191, mul_192, mul_193, mul_194, mul_195, mul_2, mul_20, mul_200, mul_201, mul_202, mul_203, mul_204, mul_205, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_97, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_187
# add_10 => add_18
# add_104 => add_165
# add_111 => add_172
# add_112 => add_173, add_188
# add_113 => add_174
# add_114 => add_175
# add_115 => add_176
# add_116 => add_177
# add_117 => add_178
# add_118 => add_179
# add_119 => add_180, add_189
# add_12 => add_20
# add_120 => add_181
# add_121 => add_182
# add_122 => add_183
# add_123 => add_184
# add_124 => add_185
# add_158 => add_228
# add_159 => add_229
# add_160 => add_235
# add_161 => add_236
# add_20 => add_39
# add_200 => add_288
# add_201 => add_289
# add_202 => add_290
# add_203 => add_291
# add_204 => add_292
# add_205 => add_293
# add_210 => add_298
# add_211 => add_299
# add_212 => add_300
# add_213 => add_301
# add_214 => add_302
# add_215 => add_303
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_122
# float_2 => convert_element_type_124
# float_3 => convert_element_type_126
# float_6 => convert_element_type_152
# mean => mean_33
# mean_1 => mean_34
# mean_2 => mean_35
# mean_3 => mean_41
# mul => mul_295
# mul_1 => mul_296
# mul_104 => mul_280
# mul_105 => mul_281
# mul_106 => mul_282
# mul_107 => mul_283
# mul_108 => mul_284
# mul_109 => mul_285
# mul_110 => mul_286
# mul_111 => mul_287
# mul_112 => mul_288
# mul_113 => mul_289
# mul_114 => mul_290
# mul_115 => mul_291
# mul_116 => mul_292
# mul_117 => mul_293
# mul_150 => mul_352
# mul_151 => mul_353
# mul_18 => mul_372
# mul_19 => mul_373
# mul_190 => mul_444
# mul_191 => mul_445
# mul_192 => mul_446
# mul_193 => mul_447
# mul_194 => mul_448
# mul_195 => mul_449
# mul_2 => mul_297
# mul_20 => mul_374
# mul_200 => mul_454
# mul_201 => mul_455
# mul_202 => mul_456
# mul_203 => mul_457
# mul_204 => mul_458
# mul_205 => mul_459
# mul_3 => mul_298
# mul_4 => mul_24, mul_299
# mul_5 => mul_300
# mul_6 => mul_301
# mul_7 => mul_302
# mul_8 => mul_303
# mul_97 => mul_273
# rsqrt => rsqrt_33
# rsqrt_1 => rsqrt_34
# rsqrt_2 => rsqrt_35
# rsqrt_3 => rsqrt_41
# type_as => convert_element_type_123
# type_as_1 => convert_element_type_125
# type_as_2 => convert_element_type_127
# type_as_5 => convert_element_type_153
triton_red_fused__to_copy_add_mean_mul_rsqrt_27 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_27', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp32', 69: '*fp16', 70: 'i32', 71: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_27', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(70, 71))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_27(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr38 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp106 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp109 = tl.load(in_ptr42 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp115 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp100 = tmp98 + tmp99
        tmp101 = tmp97 * tmp100
        tmp102 = tmp96 + tmp101
        tmp103 = tmp102.to(tl.float32)
        tmp104 = tmp103 * tmp103
        tmp105 = tl.broadcast_to(tmp104, [XBLOCK, RBLOCK])
        tmp107 = _tmp106 + tmp105
        _tmp106 = tl.where(rmask, tmp107, _tmp106)
        tmp110 = tmp109 * tmp100
        tmp111 = tmp108 + tmp110
        tmp112 = tmp111.to(tl.float32)
        tmp113 = tmp112 * tmp112
        tmp114 = tl.broadcast_to(tmp113, [XBLOCK, RBLOCK])
        tmp116 = _tmp115 + tmp114
        _tmp115 = tl.where(rmask, tmp116, _tmp115)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp68, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp77, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp95, rmask)
    tmp106 = tl.sum(_tmp106, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp106, None)
    tmp115 = tl.sum(_tmp115, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp115, None)
    tmp118 = tl.load(in_ptr43 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp127 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp130 = tl.load(in_ptr45 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr46 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp117 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp119 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp120 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp134 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp141 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp143 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp154 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tmp119 + tmp120
        tmp122 = tmp118 * tmp121
        tmp123 = tmp117 + tmp122
        tmp124 = tmp123.to(tl.float32)
        tmp125 = tmp124 * tmp124
        tmp126 = tl.broadcast_to(tmp125, [XBLOCK, RBLOCK])
        tmp128 = _tmp127 + tmp126
        _tmp127 = tl.where(rmask, tmp128, _tmp127)
        tmp131 = tmp130 * tmp121
        tmp132 = tmp129 + tmp131
        tmp136 = tmp134 + tmp135
        tmp138 = tmp136 + tmp137
        tmp139 = tmp133 * tmp138
        tmp140 = tmp132 + tmp139
        tmp142 = tmp140 + tmp141
        tmp144 = tmp97 * tmp121
        tmp145 = tmp143 + tmp144
        tmp146 = tmp145.to(tl.float32)
        tmp147 = 2048.0
        tmp148 = tmp106 / tmp147
        tmp149 = 1e-05
        tmp150 = tmp148 + tmp149
        tmp151 = tl.math.rsqrt(tmp150)
        tmp152 = tmp146 * tmp151
        tmp153 = tmp152.to(tl.float32)
        tmp155 = tmp109 * tmp121
        tmp156 = tmp154 + tmp155
        tmp157 = tmp156.to(tl.float32)
        tmp158 = tmp115 / tmp147
        tmp159 = tmp158 + tmp149
        tmp160 = tl.math.rsqrt(tmp159)
        tmp161 = tmp157 * tmp160
        tmp162 = tmp161.to(tl.float32)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp142, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp153, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp162, rmask)
    tmp127 = tl.sum(_tmp127, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp127, None)
    _tmp189 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp163 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp178 = tl.load(in_ptr50 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp180 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_ptr51 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr52 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp185 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp166 = tmp164 + tmp165
        tmp167 = tmp118 * tmp166
        tmp168 = tmp163 + tmp167
        tmp169 = tmp168.to(tl.float32)
        tmp170 = 2048.0
        tmp171 = tmp127 / tmp170
        tmp172 = 1e-05
        tmp173 = tmp171 + tmp172
        tmp174 = tl.math.rsqrt(tmp173)
        tmp175 = tmp169 * tmp174
        tmp176 = tmp175.to(tl.float32)
        tmp179 = tmp177 * tmp178
        tmp182 = tmp180 * tmp181
        tmp184 = tmp176 * tmp183
        tmp186 = tmp185.to(tl.float32)
        tmp187 = tmp186 * tmp186
        tmp188 = tl.broadcast_to(tmp187, [XBLOCK, RBLOCK])
        tmp190 = _tmp189 + tmp188
        _tmp189 = tl.where(rmask, tmp190, _tmp189)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp176, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp179, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp182, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp184, rmask)
    tmp189 = tl.sum(_tmp189, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp189, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp191 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr53 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp192 = tmp191.to(tl.float32)
        tmp193 = 2048.0
        tmp194 = tmp189 / tmp193
        tmp195 = 1e-05
        tmp196 = tmp194 + tmp195
        tmp197 = tl.math.rsqrt(tmp196)
        tmp198 = tmp192 * tmp197
        tmp199 = tmp198.to(tl.float32)
        tmp201 = tmp199 * tmp200
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp201, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ou/coujrmkzb3y3c2kwopcoqoqsa4sqh2flqisuovuk6igbquu2s7k2.py
# Source Nodes: [add_125, add_126, add_127, add_72, float_6, mean_3, mul_118, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_125 => add_186
# add_126 => add_192
# add_127 => add_193
# add_72 => add_120
# float_6 => convert_element_type_134
# mean_3 => mean_36
# mul_118 => mul_294
# mul_18 => mul_313
# mul_19 => mul_314
# mul_20 => mul_315
# rsqrt_3 => rsqrt_36
# type_as_5 => convert_element_type_135
triton_red_fused__to_copy_add_mean_mul_rsqrt_28 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_28', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_28', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_28(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/yl/cylseusjd5ocmplebbsuwqbvwxwsqypvu2jahjnx62imnlgq3wln.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_163, add_164, add_165, add_166, add_167, add_168, add_169, add_170, add_171, add_172, add_173, add_174, add_175, add_176, add_177, add_178, add_179, add_180, add_20, add_206, add_207, add_208, add_209, add_216, add_217, add_218, add_219, add_220, add_221, add_222, add_223, add_224, add_225, add_226, add_227, add_228, add_229, add_230, add_231, add_232, add_233, add_234, add_235, add_236, add_237, add_238, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_153, mul_154, mul_155, mul_156, mul_157, mul_158, mul_159, mul_160, mul_161, mul_162, mul_163, mul_164, mul_165, mul_166, mul_167, mul_168, mul_169, mul_170, mul_196, mul_197, mul_198, mul_199, mul_2, mul_206, mul_207, mul_208, mul_209, mul_210, mul_211, mul_212, mul_213, mul_214, mul_215, mul_216, mul_217, mul_218, mul_219, mul_220, mul_221, mul_222, mul_223, mul_224, mul_225, mul_226, mul_227, mul_228, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_277, add_328
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237, add_241
# add_163 => add_242
# add_164 => add_243
# add_165 => add_244
# add_166 => add_245
# add_167 => add_246
# add_168 => add_247
# add_169 => add_248
# add_170 => add_249
# add_171 => add_250
# add_172 => add_251
# add_173 => add_252
# add_174 => add_253
# add_175 => add_254
# add_176 => add_255
# add_177 => add_256
# add_178 => add_257
# add_179 => add_258
# add_180 => add_278
# add_20 => add_39
# add_206 => add_294
# add_207 => add_295
# add_208 => add_296
# add_209 => add_297
# add_216 => add_304
# add_217 => add_305
# add_218 => add_306
# add_219 => add_307
# add_220 => add_308, add_329
# add_221 => add_309
# add_222 => add_310
# add_223 => add_311
# add_224 => add_312
# add_225 => add_313
# add_226 => add_314
# add_227 => add_315
# add_228 => add_316
# add_229 => add_317
# add_230 => add_318, add_330
# add_231 => add_319
# add_232 => add_320
# add_233 => add_321
# add_234 => add_322
# add_235 => add_323
# add_236 => add_324
# add_237 => add_325
# add_238 => add_326
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_158, convert_element_type_176
# float_2 => convert_element_type_160, convert_element_type_178
# float_3 => convert_element_type_180
# mean => mean_43, mean_48
# mean_1 => mean_44, mean_49
# mean_2 => mean_50
# mul => mul_417, mul_484
# mul_1 => mul_418, mul_485
# mul_153 => mul_381
# mul_154 => mul_382
# mul_155 => mul_383
# mul_156 => mul_384
# mul_157 => mul_385
# mul_158 => mul_386
# mul_159 => mul_387
# mul_160 => mul_388
# mul_161 => mul_389
# mul_162 => mul_390
# mul_163 => mul_391
# mul_164 => mul_392
# mul_165 => mul_393
# mul_166 => mul_394
# mul_167 => mul_395
# mul_168 => mul_396
# mul_169 => mul_397
# mul_170 => mul_398
# mul_196 => mul_450
# mul_197 => mul_451
# mul_198 => mul_452
# mul_199 => mul_453
# mul_2 => mul_419, mul_486
# mul_206 => mul_460
# mul_207 => mul_461
# mul_208 => mul_462
# mul_209 => mul_463
# mul_210 => mul_464
# mul_211 => mul_465
# mul_212 => mul_466
# mul_213 => mul_467
# mul_214 => mul_468
# mul_215 => mul_469
# mul_216 => mul_470
# mul_217 => mul_471
# mul_218 => mul_472
# mul_219 => mul_473
# mul_220 => mul_474
# mul_221 => mul_475
# mul_222 => mul_476
# mul_223 => mul_477
# mul_224 => mul_478
# mul_225 => mul_479
# mul_226 => mul_480
# mul_227 => mul_481
# mul_228 => mul_482
# mul_3 => mul_420, mul_487
# mul_4 => mul_24, mul_421, mul_488
# mul_5 => mul_422, mul_489
# mul_6 => mul_490
# mul_7 => mul_491
# mul_8 => mul_492
# rsqrt => rsqrt_43, rsqrt_48
# rsqrt_1 => rsqrt_44, rsqrt_49
# rsqrt_2 => rsqrt_50
# type_as => convert_element_type_159, convert_element_type_177
# type_as_1 => convert_element_type_161, convert_element_type_179
# type_as_2 => convert_element_type_181
triton_red_fused__to_copy_add_mean_mul_rsqrt_29 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_29', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp32', 88: '*fp16', 89: '*fp32', 90: '*fp16', 91: 'i32', 92: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_29', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(91, 92))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_29(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr37 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp103 = tl.load(in_ptr40 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr44 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr47 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr48 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr49 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr50 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr51 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr52 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr53 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr54 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr55 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr56 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr57 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr58 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr59 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr60 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr61 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr62 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp172 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp96 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp105 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp100 = tmp98 + tmp99
        tmp101 = tmp97 * tmp100
        tmp102 = tmp96 + tmp101
        tmp106 = tmp104 + tmp105
        tmp108 = tmp106 + tmp107
        tmp109 = tmp103 * tmp108
        tmp110 = tmp102 + tmp109
        tmp114 = tmp112 + tmp113
        tmp115 = tmp111 * tmp114
        tmp116 = tmp110 + tmp115
        tmp119 = tmp118 * tmp100
        tmp120 = tmp117 + tmp119
        tmp122 = tmp121 * tmp108
        tmp123 = tmp120 + tmp122
        tmp125 = tmp124 * tmp114
        tmp126 = tmp123 + tmp125
        tmp128 = tmp127 * tmp100
        tmp129 = tmp68 + tmp128
        tmp131 = tmp130 * tmp108
        tmp132 = tmp129 + tmp131
        tmp134 = tmp133 * tmp114
        tmp135 = tmp132 + tmp134
        tmp137 = tmp136 * tmp100
        tmp138 = tmp77 + tmp137
        tmp140 = tmp139 * tmp108
        tmp141 = tmp138 + tmp140
        tmp143 = tmp142 * tmp114
        tmp144 = tmp141 + tmp143
        tmp146 = tmp145 * tmp100
        tmp147 = tmp86 + tmp146
        tmp149 = tmp148 * tmp108
        tmp150 = tmp147 + tmp149
        tmp152 = tmp151 * tmp114
        tmp153 = tmp150 + tmp152
        tmp155 = tmp154 * tmp100
        tmp156 = tmp95 + tmp155
        tmp158 = tmp157 * tmp108
        tmp159 = tmp156 + tmp158
        tmp161 = tmp160 * tmp114
        tmp162 = tmp159 + tmp161
        tmp166 = tmp164 + tmp165
        tmp167 = tmp163 * tmp166
        tmp168 = tmp116 + tmp167
        tmp169 = tmp168.to(tl.float32)
        tmp170 = tmp169 * tmp169
        tmp171 = tl.broadcast_to(tmp170, [XBLOCK, RBLOCK])
        tmp173 = _tmp172 + tmp171
        _tmp172 = tl.where(rmask, tmp173, _tmp172)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp116, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp135, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp144, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp153, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp162, rmask)
    tmp172 = tl.sum(_tmp172, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp172, None)
    tmp175 = tl.load(in_ptr65 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp187 = tl.load(in_ptr66 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp193 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp174 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp176 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp177 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp186 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp195 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp178 = tmp176 + tmp177
        tmp179 = tmp175 * tmp178
        tmp180 = tmp174 + tmp179
        tmp181 = tmp180.to(tl.float32)
        tmp182 = tmp181 * tmp181
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp188 = tmp187 * tmp178
        tmp189 = tmp186 + tmp188
        tmp190 = tmp189.to(tl.float32)
        tmp191 = tmp190 * tmp190
        tmp192 = tl.broadcast_to(tmp191, [XBLOCK, RBLOCK])
        tmp194 = _tmp193 + tmp192
        _tmp193 = tl.where(rmask, tmp194, _tmp193)
        tmp196 = tmp163 * tmp178
        tmp197 = tmp195 + tmp196
        tmp198 = tmp197.to(tl.float32)
        tmp199 = 2048.0
        tmp200 = tmp172 / tmp199
        tmp201 = 1e-05
        tmp202 = tmp200 + tmp201
        tmp203 = tl.math.rsqrt(tmp202)
        tmp204 = tmp198 * tmp203
        tmp205 = tmp204.to(tl.float32)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp205, rmask)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp184, None)
    tmp193 = tl.sum(_tmp193, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp193, None)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp206 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp208 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp220 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp230 = tl.load(in_ptr67 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr68 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp234 = tl.load(in_ptr69 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp236 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp209 = tmp207 + tmp208
        tmp210 = tmp175 * tmp209
        tmp211 = tmp206 + tmp210
        tmp212 = tmp211.to(tl.float32)
        tmp213 = 2048.0
        tmp214 = tmp184 / tmp213
        tmp215 = 1e-05
        tmp216 = tmp214 + tmp215
        tmp217 = tl.math.rsqrt(tmp216)
        tmp218 = tmp212 * tmp217
        tmp219 = tmp218.to(tl.float32)
        tmp221 = tmp187 * tmp209
        tmp222 = tmp220 + tmp221
        tmp223 = tmp222.to(tl.float32)
        tmp224 = tmp193 / tmp213
        tmp225 = tmp224 + tmp215
        tmp226 = tl.math.rsqrt(tmp225)
        tmp227 = tmp223 * tmp226
        tmp228 = tmp227.to(tl.float32)
        tmp231 = tmp229 * tmp230
        tmp233 = tmp219 * tmp232
        tmp235 = tmp228 * tmp234
        tmp237 = tmp236.to(tl.float32)
        tmp238 = tmp237 * tmp237
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp219, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp228, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp231, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp233, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp235, rmask)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp240, None)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp242 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr70 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp253 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp243 = tmp242.to(tl.float32)
        tmp244 = 2048.0
        tmp245 = tmp240 / tmp244
        tmp246 = 1e-05
        tmp247 = tmp245 + tmp246
        tmp248 = tl.math.rsqrt(tmp247)
        tmp249 = tmp243 * tmp248
        tmp250 = tmp249.to(tl.float32)
        tmp252 = tmp250 * tmp251
        tmp254 = tmp253.to(tl.float32)
        tmp255 = tmp254 * tmp254
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp252, rmask)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp257, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp259 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp268 = tl.load(in_ptr71 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp260 = tmp259.to(tl.float32)
        tmp261 = 2048.0
        tmp262 = tmp257 / tmp261
        tmp263 = 1e-05
        tmp264 = tmp262 + tmp263
        tmp265 = tl.math.rsqrt(tmp264)
        tmp266 = tmp260 * tmp265
        tmp267 = tmp266.to(tl.float32)
        tmp269 = tmp267 * tmp268
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp269, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/y5/cy5byeaifect6ktquitbns5oivmk5fvlxsv5bhdhcheeqlfyekyx.py
# Source Nodes: [add_162, add_239, add_240, add_241, float_6, mean_3, mul_18, mul_19, mul_20, mul_229, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_162 => add_237
# add_239 => add_327
# add_240 => add_333
# add_241 => add_334
# float_6 => convert_element_type_188
# mean_3 => mean_51
# mul_18 => mul_502
# mul_19 => mul_503
# mul_20 => mul_504
# mul_229 => mul_483
# rsqrt_3 => rsqrt_51
# type_as_5 => convert_element_type_189
triton_red_fused__to_copy_add_mean_mul_rsqrt_30 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_30', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_30', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_30(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wv/cwvoyn5hdtorqcitjjap5myx4ig326mqc5oktuyaet3dgofib72r.py
# Source Nodes: [add_10, add_12, add_128, add_180, add_181, add_182, add_183, add_184, add_185, add_186, add_187, add_188, add_189, add_190, add_191, add_192, add_193, add_194, add_195, add_196, add_197, add_20, add_288, add_289, add_290, add_291, add_292, add_293, add_294, add_295, add_296, add_3, add_300, add_301, add_302, add_303, add_304, add_305, add_306, add_307, add_308, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_3, mean_2, mul_171, mul_172, mul_173, mul_174, mul_175, mul_176, mul_177, mul_178, mul_179, mul_180, mul_181, mul_182, mul_183, mul_184, mul_185, mul_186, mul_187, mul_188, mul_276, mul_277, mul_278, mul_279, mul_280, mul_281, mul_282, mul_283, mul_284, mul_288, mul_289, mul_290, mul_291, mul_292, mul_293, mul_294, mul_295, mul_296, mul_4, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_180 => add_259
# add_181 => add_260
# add_182 => add_261
# add_183 => add_262
# add_184 => add_263
# add_185 => add_264
# add_186 => add_265
# add_187 => add_266
# add_188 => add_267
# add_189 => add_268, add_279
# add_190 => add_269
# add_191 => add_270
# add_192 => add_271
# add_193 => add_272
# add_194 => add_273
# add_195 => add_274
# add_196 => add_275
# add_197 => add_276
# add_20 => add_39
# add_288 => add_394
# add_289 => add_395
# add_290 => add_396
# add_291 => add_397
# add_292 => add_398
# add_293 => add_399
# add_294 => add_400
# add_295 => add_401
# add_296 => add_402
# add_3 => add_3
# add_300 => add_406
# add_301 => add_407
# add_302 => add_408
# add_303 => add_409
# add_304 => add_410
# add_305 => add_411
# add_306 => add_412
# add_307 => add_413
# add_308 => add_414
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_3 => convert_element_type_162
# mean_2 => mean_45
# mul_171 => mul_399
# mul_172 => mul_400
# mul_173 => mul_401
# mul_174 => mul_402
# mul_175 => mul_403
# mul_176 => mul_404
# mul_177 => mul_405
# mul_178 => mul_406
# mul_179 => mul_407
# mul_180 => mul_408
# mul_181 => mul_409
# mul_182 => mul_410
# mul_183 => mul_411
# mul_184 => mul_412
# mul_185 => mul_413
# mul_186 => mul_414
# mul_187 => mul_415
# mul_188 => mul_416
# mul_276 => mul_582
# mul_277 => mul_583
# mul_278 => mul_584
# mul_279 => mul_585
# mul_280 => mul_586
# mul_281 => mul_587
# mul_282 => mul_588
# mul_283 => mul_589
# mul_284 => mul_590
# mul_288 => mul_594
# mul_289 => mul_595
# mul_290 => mul_596
# mul_291 => mul_597
# mul_292 => mul_598
# mul_293 => mul_599
# mul_294 => mul_600
# mul_295 => mul_601
# mul_296 => mul_602
# mul_4 => mul_24
# mul_6 => mul_423
# mul_7 => mul_424
# mul_8 => mul_425
# rsqrt_2 => rsqrt_45
# type_as_2 => convert_element_type_163
triton_red_fused__to_copy_add_mean_mul_rsqrt_31 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_31', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp32', 62: '*fp16', 63: 'i32', 64: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_31', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(63, 64))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_31(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp146 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp143 = tmp115.to(tl.float32)
        tmp144 = tmp143 * tmp143
        tmp145 = tl.broadcast_to(tmp144, [XBLOCK, RBLOCK])
        tmp147 = _tmp146 + tmp145
        _tmp146 = tl.where(rmask, tmp147, _tmp146)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp124, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp133, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp142, rmask)
    tmp146 = tl.sum(_tmp146, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp146, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp148 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_ptr56 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp149 = tmp148.to(tl.float32)
        tmp150 = 2048.0
        tmp151 = tmp146 / tmp150
        tmp152 = 1e-05
        tmp153 = tmp151 + tmp152
        tmp154 = tl.math.rsqrt(tmp153)
        tmp155 = tmp149 * tmp154
        tmp156 = tmp155.to(tl.float32)
        tmp158 = tmp156 * tmp157
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp158, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/2f/c2f7dhqi2z2hmxyzmw7lkdcnportjpdbgm4icpdmiljp75i3oip7.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_243, add_244, add_245, add_246, add_247, add_248, add_249, add_250, add_251, add_252, add_253, add_254, add_255, add_256, add_257, add_258, add_259, add_260, add_261, add_262, add_263, add_264, add_297, add_298, add_299, add_3, add_309, add_31, add_310, add_311, add_312, add_313, add_314, add_315, add_316, add_317, add_318, add_319, add_320, add_321, add_322, add_323, add_324, add_325, add_326, add_327, add_328, add_329, add_33, add_330, add_331, add_332, add_333, add_334, add_335, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_231, mul_232, mul_233, mul_234, mul_235, mul_236, mul_237, mul_238, mul_239, mul_240, mul_241, mul_242, mul_243, mul_244, mul_245, mul_246, mul_247, mul_248, mul_249, mul_250, mul_251, mul_252, mul_285, mul_286, mul_287, mul_297, mul_298, mul_299, mul_3, mul_300, mul_301, mul_302, mul_303, mul_304, mul_305, mul_306, mul_307, mul_308, mul_309, mul_310, mul_311, mul_312, mul_313, mul_314, mul_315, mul_316, mul_317, mul_318, mul_319, mul_320, mul_321, mul_322, mul_323, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_383, add_442
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335, add_339
# add_243 => add_340
# add_244 => add_341
# add_245 => add_342
# add_246 => add_343
# add_247 => add_344
# add_248 => add_345
# add_249 => add_346
# add_250 => add_347
# add_251 => add_348
# add_252 => add_349
# add_253 => add_350
# add_254 => add_351
# add_255 => add_352
# add_256 => add_353
# add_257 => add_354
# add_258 => add_355
# add_259 => add_356
# add_260 => add_357
# add_261 => add_358
# add_262 => add_359
# add_263 => add_360
# add_264 => add_384
# add_297 => add_403
# add_298 => add_404
# add_299 => add_405
# add_3 => add_3
# add_309 => add_415
# add_31 => add_60
# add_310 => add_416
# add_311 => add_417
# add_312 => add_418, add_443
# add_313 => add_419
# add_314 => add_420
# add_315 => add_421
# add_316 => add_422
# add_317 => add_423
# add_318 => add_424
# add_319 => add_425
# add_320 => add_426
# add_321 => add_427
# add_322 => add_428
# add_323 => add_429
# add_324 => add_430, add_444
# add_325 => add_431
# add_326 => add_432
# add_327 => add_433
# add_328 => add_434
# add_329 => add_435
# add_33 => add_62
# add_330 => add_436
# add_331 => add_437
# add_332 => add_438
# add_333 => add_439
# add_334 => add_440
# add_335 => add_441
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_194, convert_element_type_212
# float_2 => convert_element_type_196, convert_element_type_214
# float_3 => convert_element_type_216
# mean => mean_53, mean_58
# mean_1 => mean_54, mean_59
# mean_2 => mean_60
# mul => mul_555, mul_630
# mul_1 => mul_556, mul_631
# mul_2 => mul_557, mul_632
# mul_231 => mul_511
# mul_232 => mul_512
# mul_233 => mul_513
# mul_234 => mul_514
# mul_235 => mul_515
# mul_236 => mul_516
# mul_237 => mul_517
# mul_238 => mul_518
# mul_239 => mul_519
# mul_240 => mul_520
# mul_241 => mul_521
# mul_242 => mul_522
# mul_243 => mul_523
# mul_244 => mul_524
# mul_245 => mul_525
# mul_246 => mul_526
# mul_247 => mul_527
# mul_248 => mul_528
# mul_249 => mul_529
# mul_250 => mul_530
# mul_251 => mul_531
# mul_252 => mul_532
# mul_285 => mul_591
# mul_286 => mul_592
# mul_287 => mul_593
# mul_297 => mul_603
# mul_298 => mul_604
# mul_299 => mul_605
# mul_3 => mul_558, mul_633
# mul_300 => mul_606
# mul_301 => mul_607
# mul_302 => mul_608
# mul_303 => mul_609
# mul_304 => mul_610
# mul_305 => mul_611
# mul_306 => mul_612
# mul_307 => mul_613
# mul_308 => mul_614
# mul_309 => mul_615
# mul_310 => mul_616
# mul_311 => mul_617
# mul_312 => mul_618
# mul_313 => mul_619
# mul_314 => mul_620
# mul_315 => mul_621
# mul_316 => mul_622
# mul_317 => mul_623
# mul_318 => mul_624
# mul_319 => mul_625
# mul_320 => mul_626
# mul_321 => mul_627
# mul_322 => mul_628
# mul_323 => mul_629
# mul_4 => mul_24, mul_559, mul_634
# mul_5 => mul_560, mul_635
# mul_6 => mul_636
# mul_7 => mul_637
# mul_8 => mul_638
# rsqrt => rsqrt_53, rsqrt_58
# rsqrt_1 => rsqrt_54, rsqrt_59
# rsqrt_2 => rsqrt_60
# type_as => convert_element_type_195, convert_element_type_213
# type_as_1 => convert_element_type_197, convert_element_type_215
# type_as_2 => convert_element_type_217
triton_red_fused__to_copy_add_mean_mul_rsqrt_32 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_32', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp32', 89: '*fp32', 90: '*fp32', 91: '*fp16', 92: '*fp32', 93: '*fp16', 94: '*fp32', 95: '*fp16', 96: '*fp32', 97: '*fp16', 98: '*fp32', 99: '*fp16', 100: 'i32', 101: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr4', 'in_out_ptr5'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_32', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(100, 101))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_32(in_out_ptr0, in_out_ptr1, in_out_ptr4, in_out_ptr5, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr56 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr59 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr63 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr66 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr67 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr68 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr69 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr70 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr71 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr72 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr73 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr74 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr75 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr76 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr77 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr78 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp208 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp143 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp152 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp154 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp160 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp147 = tmp145 + tmp146
        tmp148 = tmp144 * tmp147
        tmp149 = tmp143 + tmp148
        tmp153 = tmp151 + tmp152
        tmp155 = tmp153 + tmp154
        tmp156 = tmp150 * tmp155
        tmp157 = tmp149 + tmp156
        tmp161 = tmp159 + tmp160
        tmp162 = tmp158 * tmp161
        tmp163 = tmp157 + tmp162
        tmp166 = tmp165 * tmp147
        tmp167 = tmp164 + tmp166
        tmp169 = tmp168 * tmp155
        tmp170 = tmp167 + tmp169
        tmp172 = tmp171 * tmp161
        tmp173 = tmp170 + tmp172
        tmp175 = tmp174 * tmp147
        tmp176 = tmp115 + tmp175
        tmp178 = tmp177 * tmp155
        tmp179 = tmp176 + tmp178
        tmp181 = tmp180 * tmp161
        tmp182 = tmp179 + tmp181
        tmp184 = tmp183 * tmp147
        tmp185 = tmp124 + tmp184
        tmp187 = tmp186 * tmp155
        tmp188 = tmp185 + tmp187
        tmp190 = tmp189 * tmp161
        tmp191 = tmp188 + tmp190
        tmp193 = tmp192 * tmp147
        tmp194 = tmp133 + tmp193
        tmp196 = tmp195 * tmp155
        tmp197 = tmp194 + tmp196
        tmp198 = tmp197.to(tl.float32)
        tmp200 = tmp199 * tmp147
        tmp201 = tmp142 + tmp200
        tmp203 = tmp202 * tmp155
        tmp204 = tmp201 + tmp203
        tmp205 = tmp204.to(tl.float32)
        tmp206 = tmp198 * tmp198
        tmp207 = tl.broadcast_to(tmp206, [XBLOCK, RBLOCK])
        tmp209 = _tmp208 + tmp207
        _tmp208 = tl.where(rmask, tmp209, _tmp208)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp163, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp173, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp182, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp191, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp198, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp205, rmask)
    tmp208 = tl.sum(_tmp208, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp208, None)
    _tmp223 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp210 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp218 = tl.load(in_ptr79 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp220 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp211 = 2048.0
        tmp212 = tmp208 / tmp211
        tmp213 = 1e-05
        tmp214 = tmp212 + tmp213
        tmp215 = tl.math.rsqrt(tmp214)
        tmp216 = tmp210 * tmp215
        tmp217 = tmp216.to(tl.float32)
        tmp219 = tmp217 * tmp218
        tmp221 = tmp220 * tmp220
        tmp222 = tl.broadcast_to(tmp221, [XBLOCK, RBLOCK])
        tmp224 = _tmp223 + tmp222
        _tmp223 = tl.where(rmask, tmp224, _tmp223)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp219, rmask)
    tmp223 = tl.sum(_tmp223, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp223, None)
    _tmp239 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp225 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp233 = tl.load(in_ptr80 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp235 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp226 = 2048.0
        tmp227 = tmp223 / tmp226
        tmp228 = 1e-05
        tmp229 = tmp227 + tmp228
        tmp230 = tl.math.rsqrt(tmp229)
        tmp231 = tmp225 * tmp230
        tmp232 = tmp231.to(tl.float32)
        tmp234 = tmp232 * tmp233
        tmp236 = tmp235.to(tl.float32)
        tmp237 = tmp236 * tmp236
        tmp238 = tl.broadcast_to(tmp237, [XBLOCK, RBLOCK])
        tmp240 = _tmp239 + tmp238
        _tmp239 = tl.where(rmask, tmp240, _tmp239)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp234, rmask)
    tmp239 = tl.sum(_tmp239, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp239, None)
    _tmp256 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp241 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(in_ptr81 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp252 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp242 = tmp241.to(tl.float32)
        tmp243 = 2048.0
        tmp244 = tmp239 / tmp243
        tmp245 = 1e-05
        tmp246 = tmp244 + tmp245
        tmp247 = tl.math.rsqrt(tmp246)
        tmp248 = tmp242 * tmp247
        tmp249 = tmp248.to(tl.float32)
        tmp251 = tmp249 * tmp250
        tmp253 = tmp252.to(tl.float32)
        tmp254 = tmp253 * tmp253
        tmp255 = tl.broadcast_to(tmp254, [XBLOCK, RBLOCK])
        tmp257 = _tmp256 + tmp255
        _tmp256 = tl.where(rmask, tmp257, _tmp256)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp251, rmask)
    tmp256 = tl.sum(_tmp256, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp256, None)
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp258 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp267 = tl.load(in_ptr82 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp269 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp259 = tmp258.to(tl.float32)
        tmp260 = 2048.0
        tmp261 = tmp256 / tmp260
        tmp262 = 1e-05
        tmp263 = tmp261 + tmp262
        tmp264 = tl.math.rsqrt(tmp263)
        tmp265 = tmp259 * tmp264
        tmp266 = tmp265.to(tl.float32)
        tmp268 = tmp266 * tmp267
        tmp270 = tmp269.to(tl.float32)
        tmp271 = tmp270 * tmp270
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
        tl.store(out_ptr9 + (r1 + (2048*x0)), tmp268, rmask)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp273, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp275 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr83 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp276 = tmp275.to(tl.float32)
        tmp277 = 2048.0
        tmp278 = tmp273 / tmp277
        tmp279 = 1e-05
        tmp280 = tmp278 + tmp279
        tmp281 = tl.math.rsqrt(tmp280)
        tmp282 = tmp276 * tmp281
        tmp283 = tmp282.to(tl.float32)
        tmp285 = tmp283 * tmp284
        tl.store(out_ptr11 + (r1 + (2048*x0)), tmp285, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/du/cduvji2n6miixxu47f4pse6w3natclm7eptsx3bfrkprovr4vdr6.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_264, add_265, add_266, add_267, add_268, add_269, add_270, add_271, add_272, add_273, add_274, add_275, add_276, add_277, add_278, add_279, add_280, add_281, add_282, add_283, add_3, add_31, add_33, add_338, add_339, add_340, add_341, add_342, add_343, add_344, add_345, add_346, add_347, add_348, add_349, add_351, add_352, add_353, add_354, add_355, add_356, add_357, add_358, add_359, add_360, add_361, add_362, add_392, add_393, add_394, add_395, add_396, add_397, add_398, add_399, add_400, add_401, add_402, add_403, add_406, add_407, add_408, add_409, add_410, add_411, add_412, add_413, add_414, add_415, add_416, add_417, add_420, add_421, add_422, add_423, add_424, add_425, add_426, add_427, add_428, add_429, add_430, add_431, add_434, add_435, add_436, add_437, add_438, add_439, add_440, add_441, add_442, add_443, add_444, add_445, add_5, add_50, add_72, add_96, add_98, float_3, mean_2, mul_253, mul_254, mul_255, mul_256, mul_257, mul_258, mul_259, mul_260, mul_261, mul_262, mul_263, mul_264, mul_265, mul_266, mul_267, mul_268, mul_269, mul_270, mul_271, mul_272, mul_325, mul_326, mul_327, mul_328, mul_329, mul_330, mul_331, mul_332, mul_333, mul_334, mul_335, mul_336, mul_338, mul_339, mul_340, mul_341, mul_342, mul_343, mul_344, mul_345, mul_346, mul_347, mul_348, mul_349, mul_378, mul_379, mul_380, mul_381, mul_382, mul_383, mul_384, mul_385, mul_386, mul_387, mul_388, mul_389, mul_392, mul_393, mul_394, mul_395, mul_396, mul_397, mul_398, mul_399, mul_4, mul_400, mul_401, mul_402, mul_403, mul_406, mul_407, mul_408, mul_409, mul_410, mul_411, mul_412, mul_413, mul_414, mul_415, mul_416, mul_417, mul_420, mul_421, mul_422, mul_423, mul_424, mul_425, mul_426, mul_427, mul_428, mul_429, mul_430, mul_431, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_264 => add_361
# add_265 => add_362
# add_266 => add_363
# add_267 => add_364
# add_268 => add_365
# add_269 => add_366
# add_270 => add_367
# add_271 => add_368
# add_272 => add_369
# add_273 => add_370
# add_274 => add_371
# add_275 => add_372, add_385
# add_276 => add_373
# add_277 => add_374
# add_278 => add_375
# add_279 => add_376
# add_280 => add_377
# add_281 => add_378
# add_282 => add_379
# add_283 => add_380
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_453
# add_339 => add_454
# add_340 => add_455
# add_341 => add_456
# add_342 => add_457
# add_343 => add_458
# add_344 => add_459
# add_345 => add_460
# add_346 => add_461
# add_347 => add_462
# add_348 => add_463
# add_349 => add_464
# add_351 => add_466
# add_352 => add_467
# add_353 => add_468
# add_354 => add_469
# add_355 => add_470
# add_356 => add_471
# add_357 => add_472
# add_358 => add_473
# add_359 => add_474
# add_360 => add_475
# add_361 => add_476
# add_362 => add_477
# add_392 => add_516
# add_393 => add_517
# add_394 => add_518
# add_395 => add_519
# add_396 => add_520
# add_397 => add_521
# add_398 => add_522
# add_399 => add_523
# add_400 => add_524
# add_401 => add_525
# add_402 => add_526
# add_403 => add_527
# add_406 => add_530
# add_407 => add_531
# add_408 => add_532
# add_409 => add_533
# add_410 => add_534
# add_411 => add_535
# add_412 => add_536
# add_413 => add_537
# add_414 => add_538
# add_415 => add_539
# add_416 => add_540
# add_417 => add_541
# add_420 => add_544
# add_421 => add_545
# add_422 => add_546
# add_423 => add_547
# add_424 => add_548
# add_425 => add_549
# add_426 => add_550
# add_427 => add_551
# add_428 => add_552
# add_429 => add_553
# add_430 => add_554
# add_431 => add_555
# add_434 => add_558
# add_435 => add_559
# add_436 => add_560
# add_437 => add_561
# add_438 => add_562
# add_439 => add_563
# add_440 => add_564
# add_441 => add_565
# add_442 => add_566
# add_443 => add_567
# add_444 => add_568
# add_445 => add_569
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_3 => convert_element_type_198
# mean_2 => mean_55
# mul_253 => mul_533
# mul_254 => mul_534
# mul_255 => mul_535
# mul_256 => mul_536
# mul_257 => mul_537
# mul_258 => mul_538
# mul_259 => mul_539
# mul_260 => mul_540
# mul_261 => mul_541
# mul_262 => mul_542
# mul_263 => mul_543
# mul_264 => mul_544
# mul_265 => mul_545
# mul_266 => mul_546
# mul_267 => mul_547
# mul_268 => mul_548
# mul_269 => mul_549
# mul_270 => mul_550
# mul_271 => mul_551
# mul_272 => mul_552
# mul_325 => mul_657
# mul_326 => mul_658
# mul_327 => mul_659
# mul_328 => mul_660
# mul_329 => mul_661
# mul_330 => mul_662
# mul_331 => mul_663
# mul_332 => mul_664
# mul_333 => mul_665
# mul_334 => mul_666
# mul_335 => mul_667
# mul_336 => mul_668
# mul_338 => mul_670
# mul_339 => mul_671
# mul_340 => mul_672
# mul_341 => mul_673
# mul_342 => mul_674
# mul_343 => mul_675
# mul_344 => mul_676
# mul_345 => mul_677
# mul_346 => mul_678
# mul_347 => mul_679
# mul_348 => mul_680
# mul_349 => mul_681
# mul_378 => mul_736
# mul_379 => mul_737
# mul_380 => mul_738
# mul_381 => mul_739
# mul_382 => mul_740
# mul_383 => mul_741
# mul_384 => mul_742
# mul_385 => mul_743
# mul_386 => mul_744
# mul_387 => mul_745
# mul_388 => mul_746
# mul_389 => mul_747
# mul_392 => mul_750
# mul_393 => mul_751
# mul_394 => mul_752
# mul_395 => mul_753
# mul_396 => mul_754
# mul_397 => mul_755
# mul_398 => mul_756
# mul_399 => mul_757
# mul_4 => mul_24
# mul_400 => mul_758
# mul_401 => mul_759
# mul_402 => mul_760
# mul_403 => mul_761
# mul_406 => mul_764
# mul_407 => mul_765
# mul_408 => mul_766
# mul_409 => mul_767
# mul_410 => mul_768
# mul_411 => mul_769
# mul_412 => mul_770
# mul_413 => mul_771
# mul_414 => mul_772
# mul_415 => mul_773
# mul_416 => mul_774
# mul_417 => mul_775
# mul_420 => mul_778
# mul_421 => mul_779
# mul_422 => mul_780
# mul_423 => mul_781
# mul_424 => mul_782
# mul_425 => mul_783
# mul_426 => mul_784
# mul_427 => mul_785
# mul_428 => mul_786
# mul_429 => mul_787
# mul_430 => mul_788
# mul_431 => mul_789
# mul_6 => mul_561
# mul_7 => mul_562
# mul_8 => mul_563
# rsqrt_2 => rsqrt_55
# type_as_2 => convert_element_type_199
triton_red_fused__to_copy_add_mean_mul_rsqrt_33 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_33', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp32', 128: '*fp32', 129: '*fp16', 130: 'i32', 131: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_33', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(130, 131))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_33(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr57 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr58 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr59 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr60 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr61 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr62 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr63 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr64 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr65 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr66 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr67 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr68 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr69 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr70 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr71 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr72 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr73 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr74 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr75 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr76 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr77 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr78 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr79 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr80 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr81 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr82 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr83 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr84 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr85 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr86 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr87 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr88 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr89 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr90 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr91 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr92 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr95 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr99 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr100 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr101 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr104 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr105 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr106 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr107 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr108 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr109 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp296 = tl.load(in_ptr110 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp299 = tl.load(in_ptr111 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp302 = tl.load(in_ptr112 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp305 = tl.load(in_ptr113 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp308 = tl.load(in_ptr114 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp311 = tl.load(in_ptr115 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp314 = tl.load(in_ptr116 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp317 = tl.load(in_ptr117 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp320 = tl.load(in_ptr118 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp325 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp273 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp274 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp144 = tmp143 * tmp1
        tmp145 = tmp144 + tmp3
        tmp147 = tmp146 * tmp9
        tmp148 = tmp145 + tmp147
        tmp150 = tmp149 * tmp19
        tmp151 = tmp148 + tmp150
        tmp153 = tmp152 * tmp1
        tmp154 = tmp153 + tmp3
        tmp156 = tmp155 * tmp9
        tmp157 = tmp154 + tmp156
        tmp159 = tmp158 * tmp19
        tmp160 = tmp157 + tmp159
        tmp162 = tmp161 * tmp1
        tmp163 = tmp162 + tmp3
        tmp165 = tmp164 * tmp9
        tmp166 = tmp163 + tmp165
        tmp168 = tmp167 * tmp19
        tmp169 = tmp166 + tmp168
        tmp171 = tmp170 * tmp1
        tmp172 = tmp171 + tmp3
        tmp174 = tmp173 * tmp9
        tmp175 = tmp172 + tmp174
        tmp177 = tmp176 * tmp19
        tmp178 = tmp175 + tmp177
        tmp180 = tmp179 * tmp52
        tmp181 = tmp151 + tmp180
        tmp183 = tmp182 * tmp60
        tmp184 = tmp181 + tmp183
        tmp186 = tmp185 * tmp66
        tmp187 = tmp184 + tmp186
        tmp189 = tmp188 * tmp52
        tmp190 = tmp160 + tmp189
        tmp192 = tmp191 * tmp60
        tmp193 = tmp190 + tmp192
        tmp195 = tmp194 * tmp66
        tmp196 = tmp193 + tmp195
        tmp198 = tmp197 * tmp52
        tmp199 = tmp169 + tmp198
        tmp201 = tmp200 * tmp60
        tmp202 = tmp199 + tmp201
        tmp204 = tmp203 * tmp66
        tmp205 = tmp202 + tmp204
        tmp207 = tmp206 * tmp52
        tmp208 = tmp178 + tmp207
        tmp210 = tmp209 * tmp60
        tmp211 = tmp208 + tmp210
        tmp213 = tmp212 * tmp66
        tmp214 = tmp211 + tmp213
        tmp216 = tmp215 * tmp99
        tmp217 = tmp187 + tmp216
        tmp219 = tmp218 * tmp107
        tmp220 = tmp217 + tmp219
        tmp222 = tmp221 * tmp113
        tmp223 = tmp220 + tmp222
        tmp225 = tmp224 * tmp99
        tmp226 = tmp196 + tmp225
        tmp228 = tmp227 * tmp107
        tmp229 = tmp226 + tmp228
        tmp231 = tmp230 * tmp113
        tmp232 = tmp229 + tmp231
        tmp234 = tmp233 * tmp99
        tmp235 = tmp205 + tmp234
        tmp237 = tmp236 * tmp107
        tmp238 = tmp235 + tmp237
        tmp240 = tmp239 * tmp113
        tmp241 = tmp238 + tmp240
        tmp243 = tmp242 * tmp99
        tmp244 = tmp214 + tmp243
        tmp246 = tmp245 * tmp107
        tmp247 = tmp244 + tmp246
        tmp249 = tmp248 * tmp113
        tmp250 = tmp247 + tmp249
        tmp254 = tmp252 + tmp253
        tmp255 = tmp251 * tmp254
        tmp256 = tmp223 + tmp255
        tmp260 = tmp258 + tmp259
        tmp262 = tmp260 + tmp261
        tmp263 = tmp257 * tmp262
        tmp264 = tmp256 + tmp263
        tmp265 = tmp264.to(tl.float32)
        tmp267 = tmp266 * tmp254
        tmp268 = tmp241 + tmp267
        tmp270 = tmp269 * tmp262
        tmp271 = tmp268 + tmp270
        tmp275 = tmp273 + tmp274
        tmp276 = tmp272 * tmp275
        tmp277 = tmp271 + tmp276
        tmp279 = tmp278 * tmp254
        tmp280 = tmp250 + tmp279
        tmp282 = tmp281 * tmp262
        tmp283 = tmp280 + tmp282
        tmp285 = tmp284 * tmp275
        tmp286 = tmp283 + tmp285
        tmp288 = tmp287 * tmp254
        tmp289 = tmp115 + tmp288
        tmp291 = tmp290 * tmp262
        tmp292 = tmp289 + tmp291
        tmp294 = tmp293 * tmp275
        tmp295 = tmp292 + tmp294
        tmp297 = tmp296 * tmp254
        tmp298 = tmp124 + tmp297
        tmp300 = tmp299 * tmp262
        tmp301 = tmp298 + tmp300
        tmp303 = tmp302 * tmp275
        tmp304 = tmp301 + tmp303
        tmp306 = tmp305 * tmp254
        tmp307 = tmp133 + tmp306
        tmp309 = tmp308 * tmp262
        tmp310 = tmp307 + tmp309
        tmp312 = tmp311 * tmp275
        tmp313 = tmp310 + tmp312
        tmp315 = tmp314 * tmp254
        tmp316 = tmp142 + tmp315
        tmp318 = tmp317 * tmp262
        tmp319 = tmp316 + tmp318
        tmp321 = tmp320 * tmp275
        tmp322 = tmp319 + tmp321
        tmp323 = tmp265 * tmp265
        tmp324 = tl.broadcast_to(tmp323, [XBLOCK, RBLOCK])
        tmp326 = _tmp325 + tmp324
        _tmp325 = tl.where(rmask, tmp326, _tmp325)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp232, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp265, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp277, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp286, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp295, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp304, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp313, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp322, rmask)
    tmp325 = tl.sum(_tmp325, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp325, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp327 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp335 = tl.load(in_ptr119 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp328 = 2048.0
        tmp329 = tmp325 / tmp328
        tmp330 = 1e-05
        tmp331 = tmp329 + tmp330
        tmp332 = tl.math.rsqrt(tmp331)
        tmp333 = tmp327 * tmp332
        tmp334 = tmp333.to(tl.float32)
        tmp336 = tmp334 * tmp335
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp336, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/c6/cc6khcro5scmrpfaul42bbtrj5yydgatgtkgvtozqencjghz5mi2.py
# Source Nodes: [add_162, add_198, add_200, add_284, add_285, add_286, add_287, float_6, mean_3, mul_18, mul_19, mul_20, mul_273, mul_274, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_162 => add_237
# add_198 => add_282
# add_200 => add_284
# add_284 => add_381
# add_285 => add_382
# add_286 => add_388
# add_287 => add_389
# float_6 => convert_element_type_206
# mean_3 => mean_56
# mul_18 => mul_573
# mul_19 => mul_574
# mul_20 => mul_575
# mul_273 => mul_553
# mul_274 => mul_554
# rsqrt_3 => rsqrt_56
# type_as_5 => convert_element_type_207
triton_red_fused__to_copy_add_mean_mul_rsqrt_34 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_34', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp16', 12: 'i32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_34', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(12, 13))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_34(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr4 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp16 = tmp14 + tmp15
        tmp17 = tmp16.to(tl.float32)
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp16, rmask)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp20, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp22 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr8 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp23 = tmp22.to(tl.float32)
        tmp24 = 2048.0
        tmp25 = tmp20 / tmp24
        tmp26 = 1e-05
        tmp27 = tmp25 + tmp26
        tmp28 = tl.math.rsqrt(tmp27)
        tmp29 = tmp23 * tmp28
        tmp30 = tmp29.to(tl.float32)
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/t4/ct4voyhdmxkon3jkzuanbqcmmjsc3if5jflxqvwe2cvp5skryiks.py
# Source Nodes: [add, add_288, add_336, add_338, add_404, add_405, add_418, add_419, add_420, add_432, add_433, add_434, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_390, mul_391, mul_4, mul_404, mul_405, mul_418, mul_419, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_572
# add_288 => add_390
# add_336 => add_447
# add_338 => add_449
# add_404 => add_528
# add_405 => add_529
# add_418 => add_542
# add_419 => add_543
# add_420 => add_573
# add_432 => add_556
# add_433 => add_557
# add_434 => add_574
# float_1 => convert_element_type_248
# float_2 => convert_element_type_250
# float_3 => convert_element_type_252
# mean => mean_68
# mean_1 => mean_69
# mean_2 => mean_70
# mul => mul_792
# mul_1 => mul_793
# mul_2 => mul_794
# mul_3 => mul_795
# mul_390 => mul_748
# mul_391 => mul_749
# mul_4 => mul_796
# mul_404 => mul_762
# mul_405 => mul_763
# mul_418 => mul_776
# mul_419 => mul_777
# mul_5 => mul_797
# mul_6 => mul_798
# mul_7 => mul_799
# mul_8 => mul_800
# rsqrt => rsqrt_68
# rsqrt_1 => rsqrt_69
# rsqrt_2 => rsqrt_70
# type_as => convert_element_type_249
# type_as_1 => convert_element_type_251
# type_as_2 => convert_element_type_253
triton_red_fused__to_copy_add_mean_mul_rsqrt_35 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_35', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp16', 22: '*fp32', 23: '*fp16', 24: '*fp32', 25: '*fp16', 26: 'i32', 27: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_35', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(26, 27))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_35(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr4 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr9 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr10 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr12 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr13 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp34 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp18 = tmp17 * tmp4
        tmp19 = tmp16 + tmp18
        tmp21 = tmp20 * tmp12
        tmp22 = tmp19 + tmp21
        tmp23 = tmp22.to(tl.float32)
        tmp26 = tmp25 * tmp4
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp12
        tmp30 = tmp27 + tmp29
        tmp31 = tmp30.to(tl.float32)
        tmp32 = tmp15 * tmp15
        tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
        tmp35 = _tmp34 + tmp33
        _tmp34 = tl.where(rmask, tmp35, _tmp34)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp15, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp23, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp31, rmask)
    tmp34 = tl.sum(_tmp34, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp34, None)
    _tmp49 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp36 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp44 = tl.load(in_ptr14 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp46 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp37 = 2048.0
        tmp38 = tmp34 / tmp37
        tmp39 = 1e-05
        tmp40 = tmp38 + tmp39
        tmp41 = tl.math.rsqrt(tmp40)
        tmp42 = tmp36 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp47 = tmp46 * tmp46
        tmp48 = tl.broadcast_to(tmp47, [XBLOCK, RBLOCK])
        tmp50 = _tmp49 + tmp48
        _tmp49 = tl.where(rmask, tmp50, _tmp49)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp45, rmask)
    tmp49 = tl.sum(_tmp49, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp49, None)
    _tmp64 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp51 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp59 = tl.load(in_ptr15 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp52 = 2048.0
        tmp53 = tmp49 / tmp52
        tmp54 = 1e-05
        tmp55 = tmp53 + tmp54
        tmp56 = tl.math.rsqrt(tmp55)
        tmp57 = tmp51 * tmp56
        tmp58 = tmp57.to(tl.float32)
        tmp60 = tmp58 * tmp59
        tmp62 = tmp61 * tmp61
        tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
        tmp65 = _tmp64 + tmp63
        _tmp64 = tl.where(rmask, tmp65, _tmp64)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp60, rmask)
    tmp64 = tl.sum(_tmp64, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp64, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp66 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp74 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = 2048.0
        tmp68 = tmp64 / tmp67
        tmp69 = 1e-05
        tmp70 = tmp68 + tmp69
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp66 * tmp71
        tmp73 = tmp72.to(tl.float32)
        tmp75 = tmp73 * tmp74
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp75, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/gs/cgsziavko4wi7ctphlwjkhvpav7cqg4ss7nyi5bywhhcgnlx6xmi.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_350, add_363, add_364, add_365, add_366, add_367, add_368, add_369, add_370, add_371, add_372, add_373, add_374, add_375, add_376, add_377, add_378, add_379, add_380, add_381, add_382, add_383, add_384, add_385, add_386, add_387, add_388, add_446, add_447, add_448, add_449, add_5, add_50, add_512, add_513, add_514, add_515, add_516, add_517, add_518, add_519, add_520, add_521, add_522, add_523, add_528, add_529, add_530, add_531, add_532, add_533, add_534, add_535, add_536, add_537, add_538, add_539, add_72, add_96, add_98, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_18, mul_19, mul_2, mul_20, mul_3, mul_337, mul_350, mul_351, mul_352, mul_353, mul_354, mul_355, mul_356, mul_357, mul_358, mul_359, mul_360, mul_361, mul_362, mul_363, mul_364, mul_365, mul_366, mul_367, mul_368, mul_369, mul_370, mul_371, mul_372, mul_373, mul_374, mul_375, mul_4, mul_432, mul_433, mul_496, mul_497, mul_498, mul_499, mul_5, mul_500, mul_501, mul_502, mul_503, mul_504, mul_505, mul_506, mul_507, mul_512, mul_513, mul_514, mul_515, mul_516, mul_517, mul_518, mul_519, mul_520, mul_521, mul_522, mul_523, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_505
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_350 => add_465
# add_363 => add_478
# add_364 => add_479, add_506
# add_365 => add_480
# add_366 => add_481
# add_367 => add_482
# add_368 => add_483
# add_369 => add_484
# add_370 => add_485
# add_371 => add_486
# add_372 => add_487
# add_373 => add_488
# add_374 => add_489
# add_375 => add_490
# add_376 => add_491
# add_377 => add_492, add_507
# add_378 => add_493
# add_379 => add_494
# add_380 => add_495
# add_381 => add_496
# add_382 => add_497
# add_383 => add_498
# add_384 => add_499
# add_385 => add_500
# add_386 => add_501
# add_387 => add_502
# add_388 => add_503
# add_446 => add_570
# add_447 => add_571
# add_448 => add_577
# add_449 => add_578
# add_5 => add_12, add_5
# add_50 => add_89
# add_512 => add_654
# add_513 => add_655
# add_514 => add_656
# add_515 => add_657
# add_516 => add_658
# add_517 => add_659
# add_518 => add_660
# add_519 => add_661
# add_520 => add_662
# add_521 => add_663
# add_522 => add_664
# add_523 => add_665
# add_528 => add_670
# add_529 => add_671
# add_530 => add_672
# add_531 => add_673
# add_532 => add_674
# add_533 => add_675
# add_534 => add_676
# add_535 => add_677
# add_536 => add_678
# add_537 => add_679
# add_538 => add_680
# add_539 => add_681
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_230
# float_2 => convert_element_type_232
# float_3 => convert_element_type_234
# float_6 => convert_element_type_260
# mean => mean_63
# mean_1 => mean_64
# mean_2 => mean_65
# mean_3 => mean_71
# mul => mul_709
# mul_1 => mul_710
# mul_18 => mul_810
# mul_19 => mul_811
# mul_2 => mul_711
# mul_20 => mul_812
# mul_3 => mul_712
# mul_337 => mul_669
# mul_350 => mul_682
# mul_351 => mul_683
# mul_352 => mul_684
# mul_353 => mul_685
# mul_354 => mul_686
# mul_355 => mul_687
# mul_356 => mul_688
# mul_357 => mul_689
# mul_358 => mul_690
# mul_359 => mul_691
# mul_360 => mul_692
# mul_361 => mul_693
# mul_362 => mul_694
# mul_363 => mul_695
# mul_364 => mul_696
# mul_365 => mul_697
# mul_366 => mul_698
# mul_367 => mul_699
# mul_368 => mul_700
# mul_369 => mul_701
# mul_370 => mul_702
# mul_371 => mul_703
# mul_372 => mul_704
# mul_373 => mul_705
# mul_374 => mul_706
# mul_375 => mul_707
# mul_4 => mul_24, mul_713
# mul_432 => mul_790
# mul_433 => mul_791
# mul_496 => mul_906
# mul_497 => mul_907
# mul_498 => mul_908
# mul_499 => mul_909
# mul_5 => mul_714
# mul_500 => mul_910
# mul_501 => mul_911
# mul_502 => mul_912
# mul_503 => mul_913
# mul_504 => mul_914
# mul_505 => mul_915
# mul_506 => mul_916
# mul_507 => mul_917
# mul_512 => mul_922
# mul_513 => mul_923
# mul_514 => mul_924
# mul_515 => mul_925
# mul_516 => mul_926
# mul_517 => mul_927
# mul_518 => mul_928
# mul_519 => mul_929
# mul_520 => mul_930
# mul_521 => mul_931
# mul_522 => mul_932
# mul_523 => mul_933
# mul_6 => mul_715
# mul_7 => mul_716
# mul_8 => mul_717
# rsqrt => rsqrt_63
# rsqrt_1 => rsqrt_64
# rsqrt_2 => rsqrt_65
# rsqrt_3 => rsqrt_71
# type_as => convert_element_type_231
# type_as_1 => convert_element_type_233
# type_as_2 => convert_element_type_235
# type_as_5 => convert_element_type_261
triton_red_fused__to_copy_add_mean_mul_rsqrt_36 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_36', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp32', 98: '*fp32', 99: '*fp32', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp32', 107: '*fp16', 108: 'i32', 109: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_36', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(108, 109))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_36(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr76 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp203 = tl.load(in_ptr80 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp190 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp193 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp202 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp194 = tmp192 + tmp193
        tmp195 = tmp191 * tmp194
        tmp196 = tmp190 + tmp195
        tmp197 = tmp196.to(tl.float32)
        tmp198 = tmp197 * tmp197
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp204 = tmp203 * tmp194
        tmp205 = tmp202 + tmp204
        tmp206 = tmp205.to(tl.float32)
        tmp207 = tmp206 * tmp206
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp162, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp171, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp180, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp189, rmask)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp200, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp209, None)
    tmp212 = tl.load(in_ptr81 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp224 = tl.load(in_ptr83 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr84 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp211 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp213 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp214 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp223 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp228 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp235 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp237 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp248 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp215 = tmp213 + tmp214
        tmp216 = tmp212 * tmp215
        tmp217 = tmp211 + tmp216
        tmp218 = tmp217.to(tl.float32)
        tmp219 = tmp218 * tmp218
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp225 = tmp224 * tmp215
        tmp226 = tmp223 + tmp225
        tmp230 = tmp228 + tmp229
        tmp232 = tmp230 + tmp231
        tmp233 = tmp227 * tmp232
        tmp234 = tmp226 + tmp233
        tmp236 = tmp234 + tmp235
        tmp238 = tmp191 * tmp215
        tmp239 = tmp237 + tmp238
        tmp240 = tmp239.to(tl.float32)
        tmp241 = 2048.0
        tmp242 = tmp200 / tmp241
        tmp243 = 1e-05
        tmp244 = tmp242 + tmp243
        tmp245 = tl.math.rsqrt(tmp244)
        tmp246 = tmp240 * tmp245
        tmp247 = tmp246.to(tl.float32)
        tmp249 = tmp203 * tmp215
        tmp250 = tmp248 + tmp249
        tmp251 = tmp250.to(tl.float32)
        tmp252 = tmp209 / tmp241
        tmp253 = tmp252 + tmp243
        tmp254 = tl.math.rsqrt(tmp253)
        tmp255 = tmp251 * tmp254
        tmp256 = tmp255.to(tl.float32)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp247, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp256, rmask)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp221, None)
    _tmp283 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp257 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp271 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_ptr88 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp274 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr89 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp277 = tl.load(in_ptr90 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp279 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp260 = tmp258 + tmp259
        tmp261 = tmp212 * tmp260
        tmp262 = tmp257 + tmp261
        tmp263 = tmp262.to(tl.float32)
        tmp264 = 2048.0
        tmp265 = tmp221 / tmp264
        tmp266 = 1e-05
        tmp267 = tmp265 + tmp266
        tmp268 = tl.math.rsqrt(tmp267)
        tmp269 = tmp263 * tmp268
        tmp270 = tmp269.to(tl.float32)
        tmp273 = tmp271 * tmp272
        tmp276 = tmp274 * tmp275
        tmp278 = tmp270 * tmp277
        tmp280 = tmp279.to(tl.float32)
        tmp281 = tmp280 * tmp280
        tmp282 = tl.broadcast_to(tmp281, [XBLOCK, RBLOCK])
        tmp284 = _tmp283 + tmp282
        _tmp283 = tl.where(rmask, tmp284, _tmp283)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp270, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp273, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp276, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp278, rmask)
    tmp283 = tl.sum(_tmp283, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp283, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp285 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr91 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp286 = tmp285.to(tl.float32)
        tmp287 = 2048.0
        tmp288 = tmp283 / tmp287
        tmp289 = 1e-05
        tmp290 = tmp288 + tmp289
        tmp291 = tl.math.rsqrt(tmp290)
        tmp292 = tmp286 * tmp291
        tmp293 = tmp292.to(tl.float32)
        tmp295 = tmp293 * tmp294
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp295, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/qp/cqp4ay2q5lejdkf6kydsoyxgmuhkmjmfnicuokhzsfwwszbj4fdv.py
# Source Nodes: [add_288, add_389, add_390, add_391, float_6, mean_3, mul_18, mul_19, mul_20, mul_376, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_288 => add_390
# add_389 => add_504
# add_390 => add_510
# add_391 => add_511
# float_6 => convert_element_type_242
# mean_3 => mean_66
# mul_18 => mul_727
# mul_19 => mul_728
# mul_20 => mul_729
# mul_376 => mul_708
# rsqrt_3 => rsqrt_66
# type_as_5 => convert_element_type_243
triton_red_fused__to_copy_add_mean_mul_rsqrt_37 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_37', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_37', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_37(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ve/cve4rtzs6hgm27w7rqnux742rdvfvstzr7l4jou2qqlb3ysc7bqv.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_451, add_452, add_453, add_454, add_455, add_456, add_457, add_458, add_459, add_460, add_461, add_462, add_463, add_464, add_465, add_466, add_467, add_468, add_469, add_470, add_471, add_472, add_473, add_474, add_475, add_476, add_477, add_478, add_479, add_480, add_5, add_50, add_524, add_525, add_526, add_527, add_540, add_541, add_542, add_543, add_544, add_545, add_546, add_547, add_548, add_549, add_550, add_551, add_552, add_553, add_554, add_555, add_556, add_557, add_558, add_559, add_560, add_561, add_562, add_563, add_564, add_565, add_566, add_567, add_568, add_569, add_570, add_571, add_572, add_573, add_574, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_435, mul_436, mul_437, mul_438, mul_439, mul_440, mul_441, mul_442, mul_443, mul_444, mul_445, mul_446, mul_447, mul_448, mul_449, mul_450, mul_451, mul_452, mul_453, mul_454, mul_455, mul_456, mul_457, mul_458, mul_459, mul_460, mul_461, mul_462, mul_463, mul_464, mul_5, mul_508, mul_509, mul_510, mul_511, mul_524, mul_525, mul_526, mul_527, mul_528, mul_529, mul_530, mul_531, mul_532, mul_533, mul_534, mul_535, mul_536, mul_537, mul_538, mul_539, mul_540, mul_541, mul_542, mul_543, mul_544, mul_545, mul_546, mul_547, mul_548, mul_549, mul_550, mul_551, mul_552, mul_553, mul_554, mul_555, mul_556, mul_557, mul_558, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_643, add_718
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579, add_583
# add_451 => add_584
# add_452 => add_585
# add_453 => add_586
# add_454 => add_587
# add_455 => add_588
# add_456 => add_589
# add_457 => add_590
# add_458 => add_591
# add_459 => add_592
# add_460 => add_593
# add_461 => add_594
# add_462 => add_595
# add_463 => add_596
# add_464 => add_597
# add_465 => add_598
# add_466 => add_599
# add_467 => add_600
# add_468 => add_601
# add_469 => add_602
# add_470 => add_603
# add_471 => add_604
# add_472 => add_605
# add_473 => add_606
# add_474 => add_607
# add_475 => add_608
# add_476 => add_609
# add_477 => add_610
# add_478 => add_611
# add_479 => add_612
# add_480 => add_644
# add_5 => add_12, add_5
# add_50 => add_89
# add_524 => add_666
# add_525 => add_667
# add_526 => add_668
# add_527 => add_669
# add_540 => add_682
# add_541 => add_683
# add_542 => add_684
# add_543 => add_685
# add_544 => add_686, add_719
# add_545 => add_687
# add_546 => add_688
# add_547 => add_689
# add_548 => add_690
# add_549 => add_691
# add_550 => add_692
# add_551 => add_693
# add_552 => add_694
# add_553 => add_695
# add_554 => add_696
# add_555 => add_697
# add_556 => add_698
# add_557 => add_699
# add_558 => add_700
# add_559 => add_701
# add_560 => add_702, add_720
# add_561 => add_703
# add_562 => add_704
# add_563 => add_705
# add_564 => add_706
# add_565 => add_707
# add_566 => add_708
# add_567 => add_709
# add_568 => add_710
# add_569 => add_711
# add_570 => add_712
# add_571 => add_713
# add_572 => add_714
# add_573 => add_715
# add_574 => add_716
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_266, convert_element_type_284
# float_2 => convert_element_type_268, convert_element_type_286
# float_3 => convert_element_type_288
# mean => mean_73, mean_78
# mean_1 => mean_74, mean_79
# mean_2 => mean_80
# mul => mul_879, mul_970
# mul_1 => mul_880, mul_971
# mul_2 => mul_881, mul_972
# mul_3 => mul_882, mul_973
# mul_4 => mul_24, mul_883, mul_974
# mul_435 => mul_819
# mul_436 => mul_820
# mul_437 => mul_821
# mul_438 => mul_822
# mul_439 => mul_823
# mul_440 => mul_824
# mul_441 => mul_825
# mul_442 => mul_826
# mul_443 => mul_827
# mul_444 => mul_828
# mul_445 => mul_829
# mul_446 => mul_830
# mul_447 => mul_831
# mul_448 => mul_832
# mul_449 => mul_833
# mul_450 => mul_834
# mul_451 => mul_835
# mul_452 => mul_836
# mul_453 => mul_837
# mul_454 => mul_838
# mul_455 => mul_839
# mul_456 => mul_840
# mul_457 => mul_841
# mul_458 => mul_842
# mul_459 => mul_843
# mul_460 => mul_844
# mul_461 => mul_845
# mul_462 => mul_846
# mul_463 => mul_847
# mul_464 => mul_848
# mul_5 => mul_884, mul_975
# mul_508 => mul_918
# mul_509 => mul_919
# mul_510 => mul_920
# mul_511 => mul_921
# mul_524 => mul_934
# mul_525 => mul_935
# mul_526 => mul_936
# mul_527 => mul_937
# mul_528 => mul_938
# mul_529 => mul_939
# mul_530 => mul_940
# mul_531 => mul_941
# mul_532 => mul_942
# mul_533 => mul_943
# mul_534 => mul_944
# mul_535 => mul_945
# mul_536 => mul_946
# mul_537 => mul_947
# mul_538 => mul_948
# mul_539 => mul_949
# mul_540 => mul_950
# mul_541 => mul_951
# mul_542 => mul_952
# mul_543 => mul_953
# mul_544 => mul_954
# mul_545 => mul_955
# mul_546 => mul_956
# mul_547 => mul_957
# mul_548 => mul_958
# mul_549 => mul_959
# mul_550 => mul_960
# mul_551 => mul_961
# mul_552 => mul_962
# mul_553 => mul_963
# mul_554 => mul_964
# mul_555 => mul_965
# mul_556 => mul_966
# mul_557 => mul_967
# mul_558 => mul_968
# mul_6 => mul_976
# mul_7 => mul_977
# mul_8 => mul_978
# rsqrt => rsqrt_73, rsqrt_78
# rsqrt_1 => rsqrt_74, rsqrt_79
# rsqrt_2 => rsqrt_80
# type_as => convert_element_type_267, convert_element_type_285
# type_as_1 => convert_element_type_269, convert_element_type_287
# type_as_2 => convert_element_type_289
triton_red_fused__to_copy_add_mean_mul_rsqrt_38 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_38', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp32', 117: '*fp32', 118: '*fp32', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp32', 126: '*fp16', 127: '*fp32', 128: '*fp16', 129: 'i32', 130: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_38', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(129, 130))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_38(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr94 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr95 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr96 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr97 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr98 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp254 = tl.load(in_ptr99 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr100 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp239 = tmp238 * tmp193
        tmp240 = tmp237 + tmp239
        tmp242 = tmp241 * tmp201
        tmp243 = tmp240 + tmp242
        tmp245 = tmp244 * tmp207
        tmp246 = tmp243 + tmp245
        tmp249 = tmp248 * tmp193
        tmp250 = tmp247 + tmp249
        tmp252 = tmp251 * tmp201
        tmp253 = tmp250 + tmp252
        tmp255 = tmp254 * tmp207
        tmp256 = tmp253 + tmp255
        tmp260 = tmp258 + tmp259
        tmp261 = tmp257 * tmp260
        tmp262 = tmp246 + tmp261
        tmp263 = tmp262.to(tl.float32)
        tmp264 = tmp263 * tmp263
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp209, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp218, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp227, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp246, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp256, rmask)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp266, None)
    tmp269 = tl.load(in_ptr103 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp278 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp281 = tl.load(in_ptr104 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp268 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp270 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp271 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp280 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp289 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tmp270 + tmp271
        tmp273 = tmp269 * tmp272
        tmp274 = tmp268 + tmp273
        tmp275 = tmp274.to(tl.float32)
        tmp276 = tmp275 * tmp275
        tmp277 = tl.broadcast_to(tmp276, [XBLOCK, RBLOCK])
        tmp279 = _tmp278 + tmp277
        _tmp278 = tl.where(rmask, tmp279, _tmp278)
        tmp282 = tmp281 * tmp272
        tmp283 = tmp280 + tmp282
        tmp284 = tmp283.to(tl.float32)
        tmp285 = tmp284 * tmp284
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp290 = tmp257 * tmp272
        tmp291 = tmp289 + tmp290
        tmp292 = tmp291.to(tl.float32)
        tmp293 = 2048.0
        tmp294 = tmp266 / tmp293
        tmp295 = 1e-05
        tmp296 = tmp294 + tmp295
        tmp297 = tl.math.rsqrt(tmp296)
        tmp298 = tmp292 * tmp297
        tmp299 = tmp298.to(tl.float32)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp299, rmask)
    tmp278 = tl.sum(_tmp278, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp278, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp287, None)
    _tmp334 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp300 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp301 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp302 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp314 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp323 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp324 = tl.load(in_ptr105 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp326 = tl.load(in_ptr106 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp328 = tl.load(in_ptr107 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp330 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp303 = tmp301 + tmp302
        tmp304 = tmp269 * tmp303
        tmp305 = tmp300 + tmp304
        tmp306 = tmp305.to(tl.float32)
        tmp307 = 2048.0
        tmp308 = tmp278 / tmp307
        tmp309 = 1e-05
        tmp310 = tmp308 + tmp309
        tmp311 = tl.math.rsqrt(tmp310)
        tmp312 = tmp306 * tmp311
        tmp313 = tmp312.to(tl.float32)
        tmp315 = tmp281 * tmp303
        tmp316 = tmp314 + tmp315
        tmp317 = tmp316.to(tl.float32)
        tmp318 = tmp287 / tmp307
        tmp319 = tmp318 + tmp309
        tmp320 = tl.math.rsqrt(tmp319)
        tmp321 = tmp317 * tmp320
        tmp322 = tmp321.to(tl.float32)
        tmp325 = tmp323 * tmp324
        tmp327 = tmp313 * tmp326
        tmp329 = tmp322 * tmp328
        tmp331 = tmp330.to(tl.float32)
        tmp332 = tmp331 * tmp331
        tmp333 = tl.broadcast_to(tmp332, [XBLOCK, RBLOCK])
        tmp335 = _tmp334 + tmp333
        _tmp334 = tl.where(rmask, tmp335, _tmp334)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp313, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp322, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp325, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp327, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp329, rmask)
    tmp334 = tl.sum(_tmp334, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp334, None)
    _tmp351 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp336 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp345 = tl.load(in_ptr108 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp347 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp337 = tmp336.to(tl.float32)
        tmp338 = 2048.0
        tmp339 = tmp334 / tmp338
        tmp340 = 1e-05
        tmp341 = tmp339 + tmp340
        tmp342 = tl.math.rsqrt(tmp341)
        tmp343 = tmp337 * tmp342
        tmp344 = tmp343.to(tl.float32)
        tmp346 = tmp344 * tmp345
        tmp348 = tmp347.to(tl.float32)
        tmp349 = tmp348 * tmp348
        tmp350 = tl.broadcast_to(tmp349, [XBLOCK, RBLOCK])
        tmp352 = _tmp351 + tmp350
        _tmp351 = tl.where(rmask, tmp352, _tmp351)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp346, rmask)
    tmp351 = tl.sum(_tmp351, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp351, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp353 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp362 = tl.load(in_ptr109 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp354 = tmp353.to(tl.float32)
        tmp355 = 2048.0
        tmp356 = tmp351 / tmp355
        tmp357 = 1e-05
        tmp358 = tmp356 + tmp357
        tmp359 = tl.math.rsqrt(tmp358)
        tmp360 = tmp354 * tmp359
        tmp361 = tmp360.to(tl.float32)
        tmp363 = tmp361 * tmp362
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp363, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/iu/ciucu2g5mxzclpkj43d5ltr2jyzsfpsk3b7ls2vu775otglasd3k.py
# Source Nodes: [add_450, add_575, add_576, add_577, float_6, mean_3, mul_18, mul_19, mul_20, mul_559, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_450 => add_579
# add_575 => add_717
# add_576 => add_723
# add_577 => add_724
# float_6 => convert_element_type_296
# mean_3 => mean_81
# mul_18 => mul_988
# mul_19 => mul_989
# mul_20 => mul_990
# mul_559 => mul_969
# rsqrt_3 => rsqrt_81
# type_as_5 => convert_element_type_297
triton_red_fused__to_copy_add_mean_mul_rsqrt_39 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_39', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_39', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_39(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/3e/c3eubdor4qgs6bnfgi2petrgxlutdvtnkymi52ultkizfjqin6r3.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_480, add_481, add_482, add_483, add_484, add_485, add_486, add_487, add_488, add_489, add_490, add_491, add_492, add_493, add_494, add_495, add_496, add_497, add_498, add_499, add_5, add_50, add_500, add_501, add_502, add_503, add_504, add_505, add_506, add_507, add_508, add_509, add_648, add_649, add_650, add_651, add_652, add_653, add_654, add_655, add_656, add_657, add_658, add_659, add_660, add_661, add_662, add_666, add_667, add_668, add_669, add_670, add_671, add_672, add_673, add_674, add_675, add_676, add_677, add_678, add_679, add_680, add_72, add_96, add_98, float_3, mean_2, mul_4, mul_465, mul_466, mul_467, mul_468, mul_469, mul_470, mul_471, mul_472, mul_473, mul_474, mul_475, mul_476, mul_477, mul_478, mul_479, mul_480, mul_481, mul_482, mul_483, mul_484, mul_485, mul_486, mul_487, mul_488, mul_489, mul_490, mul_491, mul_492, mul_493, mul_494, mul_6, mul_630, mul_631, mul_632, mul_633, mul_634, mul_635, mul_636, mul_637, mul_638, mul_639, mul_640, mul_641, mul_642, mul_643, mul_644, mul_648, mul_649, mul_650, mul_651, mul_652, mul_653, mul_654, mul_655, mul_656, mul_657, mul_658, mul_659, mul_660, mul_661, mul_662, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_480 => add_613
# add_481 => add_614
# add_482 => add_615
# add_483 => add_616
# add_484 => add_617
# add_485 => add_618
# add_486 => add_619
# add_487 => add_620
# add_488 => add_621
# add_489 => add_622
# add_490 => add_623
# add_491 => add_624
# add_492 => add_625
# add_493 => add_626
# add_494 => add_627
# add_495 => add_628, add_645
# add_496 => add_629
# add_497 => add_630
# add_498 => add_631
# add_499 => add_632
# add_5 => add_12, add_5
# add_50 => add_89
# add_500 => add_633
# add_501 => add_634
# add_502 => add_635
# add_503 => add_636
# add_504 => add_637
# add_505 => add_638
# add_506 => add_639
# add_507 => add_640
# add_508 => add_641
# add_509 => add_642
# add_648 => add_808
# add_649 => add_809
# add_650 => add_810
# add_651 => add_811
# add_652 => add_812
# add_653 => add_813
# add_654 => add_814
# add_655 => add_815
# add_656 => add_816
# add_657 => add_817
# add_658 => add_818
# add_659 => add_819
# add_660 => add_820
# add_661 => add_821
# add_662 => add_822
# add_666 => add_826
# add_667 => add_827
# add_668 => add_828
# add_669 => add_829
# add_670 => add_830
# add_671 => add_831
# add_672 => add_832
# add_673 => add_833
# add_674 => add_834
# add_675 => add_835
# add_676 => add_836
# add_677 => add_837
# add_678 => add_838
# add_679 => add_839
# add_680 => add_840
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_3 => convert_element_type_270
# mean_2 => mean_75
# mul_4 => mul_24
# mul_465 => mul_849
# mul_466 => mul_850
# mul_467 => mul_851
# mul_468 => mul_852
# mul_469 => mul_853
# mul_470 => mul_854
# mul_471 => mul_855
# mul_472 => mul_856
# mul_473 => mul_857
# mul_474 => mul_858
# mul_475 => mul_859
# mul_476 => mul_860
# mul_477 => mul_861
# mul_478 => mul_862
# mul_479 => mul_863
# mul_480 => mul_864
# mul_481 => mul_865
# mul_482 => mul_866
# mul_483 => mul_867
# mul_484 => mul_868
# mul_485 => mul_869
# mul_486 => mul_870
# mul_487 => mul_871
# mul_488 => mul_872
# mul_489 => mul_873
# mul_490 => mul_874
# mul_491 => mul_875
# mul_492 => mul_876
# mul_493 => mul_877
# mul_494 => mul_878
# mul_6 => mul_885
# mul_630 => mul_1092
# mul_631 => mul_1093
# mul_632 => mul_1094
# mul_633 => mul_1095
# mul_634 => mul_1096
# mul_635 => mul_1097
# mul_636 => mul_1098
# mul_637 => mul_1099
# mul_638 => mul_1100
# mul_639 => mul_1101
# mul_640 => mul_1102
# mul_641 => mul_1103
# mul_642 => mul_1104
# mul_643 => mul_1105
# mul_644 => mul_1106
# mul_648 => mul_1110
# mul_649 => mul_1111
# mul_650 => mul_1112
# mul_651 => mul_1113
# mul_652 => mul_1114
# mul_653 => mul_1115
# mul_654 => mul_1116
# mul_655 => mul_1117
# mul_656 => mul_1118
# mul_657 => mul_1119
# mul_658 => mul_1120
# mul_659 => mul_1121
# mul_660 => mul_1122
# mul_661 => mul_1123
# mul_662 => mul_1124
# mul_7 => mul_886
# mul_8 => mul_887
# rsqrt_2 => rsqrt_75
# type_as_2 => convert_element_type_271
triton_red_fused__to_copy_add_mean_mul_rsqrt_40 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_40', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp32', 100: '*fp16', 101: 'i32', 102: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_40', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(101, 102))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_40(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp237 = tmp209.to(tl.float32)
        tmp238 = tmp237 * tmp237
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp209, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp218, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp227, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp236, rmask)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp240, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp242 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr94 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp243 = tmp242.to(tl.float32)
        tmp244 = 2048.0
        tmp245 = tmp240 / tmp244
        tmp246 = 1e-05
        tmp247 = tmp245 + tmp246
        tmp248 = tl.math.rsqrt(tmp247)
        tmp249 = tmp243 * tmp248
        tmp250 = tmp249.to(tl.float32)
        tmp252 = tmp250 * tmp251
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp252, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/kn/ckn43rxi4hwmqbr4hrg4e54w3zkswlyzrclsl65jh6oizattp6we.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_579, add_580, add_581, add_582, add_583, add_584, add_585, add_586, add_587, add_588, add_589, add_590, add_591, add_592, add_593, add_594, add_595, add_596, add_597, add_598, add_599, add_600, add_601, add_602, add_603, add_604, add_605, add_606, add_607, add_608, add_609, add_610, add_611, add_612, add_613, add_614, add_615, add_616, add_617, add_618, add_619, add_620, add_621, add_622, add_623, add_624, add_625, add_626, add_627, add_628, add_629, add_630, add_631, add_632, add_633, add_634, add_635, add_636, add_637, add_638, add_639, add_640, add_641, add_642, add_643, add_663, add_664, add_665, add_681, add_682, add_683, add_684, add_685, add_686, add_687, add_688, add_689, add_690, add_691, add_692, add_693, add_694, add_695, add_696, add_697, add_698, add_699, add_700, add_701, add_702, add_703, add_704, add_705, add_706, add_707, add_708, add_709, add_710, add_711, add_712, add_713, add_714, add_715, add_716, add_717, add_718, add_719, add_72, add_800, add_801, add_802, add_803, add_804, add_805, add_806, add_807, add_808, add_809, add_810, add_811, add_812, add_813, add_814, add_820, add_821, add_822, add_823, add_824, add_825, add_826, add_827, add_828, add_829, add_830, add_831, add_832, add_833, add_834, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_561, mul_562, mul_563, mul_564, mul_565, mul_566, mul_567, mul_568, mul_569, mul_570, mul_571, mul_572, mul_573, mul_574, mul_575, mul_576, mul_577, mul_578, mul_579, mul_580, mul_581, mul_582, mul_583, mul_584, mul_585, mul_586, mul_587, mul_588, mul_589, mul_590, mul_591, mul_592, mul_593, mul_594, mul_595, mul_596, mul_597, mul_598, mul_599, mul_6, mul_600, mul_601, mul_602, mul_603, mul_604, mul_605, mul_606, mul_607, mul_608, mul_609, mul_610, mul_611, mul_612, mul_613, mul_614, mul_615, mul_616, mul_617, mul_618, mul_619, mul_620, mul_621, mul_622, mul_623, mul_624, mul_625, mul_626, mul_645, mul_646, mul_647, mul_663, mul_664, mul_665, mul_666, mul_667, mul_668, mul_669, mul_670, mul_671, mul_672, mul_673, mul_674, mul_675, mul_676, mul_677, mul_678, mul_679, mul_680, mul_681, mul_682, mul_683, mul_684, mul_685, mul_686, mul_687, mul_688, mul_689, mul_690, mul_691, mul_692, mul_693, mul_694, mul_695, mul_696, mul_697, mul_698, mul_699, mul_7, mul_700, mul_701, mul_780, mul_781, mul_782, mul_783, mul_784, mul_785, mul_786, mul_787, mul_788, mul_789, mul_790, mul_791, mul_792, mul_793, mul_794, mul_8, mul_800, mul_801, mul_802, mul_803, mul_804, mul_805, mul_806, mul_807, mul_808, mul_809, mul_810, mul_811, mul_812, mul_813, mul_814, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_797, add_880
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725, add_729
# add_579 => add_730
# add_580 => add_731
# add_581 => add_732
# add_582 => add_733
# add_583 => add_734
# add_584 => add_735
# add_585 => add_736
# add_586 => add_737
# add_587 => add_738
# add_588 => add_739
# add_589 => add_740
# add_590 => add_741
# add_591 => add_742
# add_592 => add_743
# add_593 => add_744
# add_594 => add_745
# add_595 => add_746
# add_596 => add_747
# add_597 => add_748
# add_598 => add_749
# add_599 => add_750
# add_600 => add_751
# add_601 => add_752
# add_602 => add_753
# add_603 => add_754
# add_604 => add_755
# add_605 => add_756
# add_606 => add_757
# add_607 => add_758
# add_608 => add_759
# add_609 => add_760
# add_610 => add_761
# add_611 => add_762
# add_612 => add_763, add_798
# add_613 => add_764
# add_614 => add_765
# add_615 => add_766
# add_616 => add_767
# add_617 => add_768
# add_618 => add_769
# add_619 => add_770
# add_620 => add_771
# add_621 => add_772
# add_622 => add_773
# add_623 => add_774
# add_624 => add_775
# add_625 => add_776
# add_626 => add_777
# add_627 => add_778
# add_628 => add_779
# add_629 => add_780, add_799
# add_630 => add_781
# add_631 => add_782
# add_632 => add_783
# add_633 => add_784
# add_634 => add_785
# add_635 => add_786
# add_636 => add_787
# add_637 => add_788
# add_638 => add_789
# add_639 => add_790
# add_640 => add_791
# add_641 => add_792
# add_642 => add_793
# add_643 => add_794
# add_663 => add_823
# add_664 => add_824
# add_665 => add_825
# add_681 => add_841
# add_682 => add_842
# add_683 => add_843
# add_684 => add_844, add_881
# add_685 => add_845
# add_686 => add_846
# add_687 => add_847
# add_688 => add_848
# add_689 => add_849
# add_690 => add_850
# add_691 => add_851
# add_692 => add_852
# add_693 => add_853
# add_694 => add_854
# add_695 => add_855
# add_696 => add_856
# add_697 => add_857
# add_698 => add_858
# add_699 => add_859
# add_700 => add_860
# add_701 => add_861
# add_702 => add_862, add_882
# add_703 => add_863
# add_704 => add_864
# add_705 => add_865
# add_706 => add_866
# add_707 => add_867
# add_708 => add_868
# add_709 => add_869
# add_710 => add_870
# add_711 => add_871
# add_712 => add_872
# add_713 => add_873
# add_714 => add_874
# add_715 => add_875
# add_716 => add_876
# add_717 => add_877
# add_718 => add_878
# add_719 => add_879
# add_72 => add_120
# add_800 => add_978
# add_801 => add_979
# add_802 => add_980
# add_803 => add_981
# add_804 => add_982
# add_805 => add_983
# add_806 => add_984
# add_807 => add_985
# add_808 => add_986
# add_809 => add_987
# add_810 => add_988
# add_811 => add_989
# add_812 => add_990
# add_813 => add_991
# add_814 => add_992
# add_820 => add_998
# add_821 => add_999
# add_822 => add_1000
# add_823 => add_1001
# add_824 => add_1002
# add_825 => add_1003
# add_826 => add_1004
# add_827 => add_1005
# add_828 => add_1006
# add_829 => add_1007
# add_830 => add_1008
# add_831 => add_1009
# add_832 => add_1010
# add_833 => add_1011
# add_834 => add_1012
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_302, convert_element_type_320
# float_2 => convert_element_type_304, convert_element_type_322
# float_3 => convert_element_type_306, convert_element_type_324
# mean => mean_83, mean_88
# mean_1 => mean_84, mean_89
# mean_2 => mean_85, mean_90
# mul => mul_1065, mul_1164
# mul_1 => mul_1066, mul_1165
# mul_2 => mul_1067, mul_1166
# mul_3 => mul_1068, mul_1167
# mul_4 => mul_1069, mul_1168, mul_24
# mul_5 => mul_1070, mul_1169
# mul_561 => mul_997
# mul_562 => mul_998
# mul_563 => mul_999
# mul_564 => mul_1000
# mul_565 => mul_1001
# mul_566 => mul_1002
# mul_567 => mul_1003
# mul_568 => mul_1004
# mul_569 => mul_1005
# mul_570 => mul_1006
# mul_571 => mul_1007
# mul_572 => mul_1008
# mul_573 => mul_1009
# mul_574 => mul_1010
# mul_575 => mul_1011
# mul_576 => mul_1012
# mul_577 => mul_1013
# mul_578 => mul_1014
# mul_579 => mul_1015
# mul_580 => mul_1016
# mul_581 => mul_1017
# mul_582 => mul_1018
# mul_583 => mul_1019
# mul_584 => mul_1020
# mul_585 => mul_1021
# mul_586 => mul_1022
# mul_587 => mul_1023
# mul_588 => mul_1024
# mul_589 => mul_1025
# mul_590 => mul_1026
# mul_591 => mul_1027
# mul_592 => mul_1028
# mul_593 => mul_1029
# mul_594 => mul_1030
# mul_595 => mul_1031
# mul_596 => mul_1032
# mul_597 => mul_1033
# mul_598 => mul_1034
# mul_599 => mul_1035
# mul_6 => mul_1071, mul_1170
# mul_600 => mul_1036
# mul_601 => mul_1037
# mul_602 => mul_1038
# mul_603 => mul_1039
# mul_604 => mul_1040
# mul_605 => mul_1041
# mul_606 => mul_1042
# mul_607 => mul_1043
# mul_608 => mul_1044
# mul_609 => mul_1045
# mul_610 => mul_1046
# mul_611 => mul_1047
# mul_612 => mul_1048
# mul_613 => mul_1049
# mul_614 => mul_1050
# mul_615 => mul_1051
# mul_616 => mul_1052
# mul_617 => mul_1053
# mul_618 => mul_1054
# mul_619 => mul_1055
# mul_620 => mul_1056
# mul_621 => mul_1057
# mul_622 => mul_1058
# mul_623 => mul_1059
# mul_624 => mul_1060
# mul_625 => mul_1061
# mul_626 => mul_1062
# mul_645 => mul_1107
# mul_646 => mul_1108
# mul_647 => mul_1109
# mul_663 => mul_1125
# mul_664 => mul_1126
# mul_665 => mul_1127
# mul_666 => mul_1128
# mul_667 => mul_1129
# mul_668 => mul_1130
# mul_669 => mul_1131
# mul_670 => mul_1132
# mul_671 => mul_1133
# mul_672 => mul_1134
# mul_673 => mul_1135
# mul_674 => mul_1136
# mul_675 => mul_1137
# mul_676 => mul_1138
# mul_677 => mul_1139
# mul_678 => mul_1140
# mul_679 => mul_1141
# mul_680 => mul_1142
# mul_681 => mul_1143
# mul_682 => mul_1144
# mul_683 => mul_1145
# mul_684 => mul_1146
# mul_685 => mul_1147
# mul_686 => mul_1148
# mul_687 => mul_1149
# mul_688 => mul_1150
# mul_689 => mul_1151
# mul_690 => mul_1152
# mul_691 => mul_1153
# mul_692 => mul_1154
# mul_693 => mul_1155
# mul_694 => mul_1156
# mul_695 => mul_1157
# mul_696 => mul_1158
# mul_697 => mul_1159
# mul_698 => mul_1160
# mul_699 => mul_1161
# mul_7 => mul_1072, mul_1171
# mul_700 => mul_1162
# mul_701 => mul_1163
# mul_780 => mul_1294
# mul_781 => mul_1295
# mul_782 => mul_1296
# mul_783 => mul_1297
# mul_784 => mul_1298
# mul_785 => mul_1299
# mul_786 => mul_1300
# mul_787 => mul_1301
# mul_788 => mul_1302
# mul_789 => mul_1303
# mul_790 => mul_1304
# mul_791 => mul_1305
# mul_792 => mul_1306
# mul_793 => mul_1307
# mul_794 => mul_1308
# mul_8 => mul_1073, mul_1172
# mul_800 => mul_1314
# mul_801 => mul_1315
# mul_802 => mul_1316
# mul_803 => mul_1317
# mul_804 => mul_1318
# mul_805 => mul_1319
# mul_806 => mul_1320
# mul_807 => mul_1321
# mul_808 => mul_1322
# mul_809 => mul_1323
# mul_810 => mul_1324
# mul_811 => mul_1325
# mul_812 => mul_1326
# mul_813 => mul_1327
# mul_814 => mul_1328
# rsqrt => rsqrt_83, rsqrt_88
# rsqrt_1 => rsqrt_84, rsqrt_89
# rsqrt_2 => rsqrt_85, rsqrt_90
# type_as => convert_element_type_303, convert_element_type_321
# type_as_1 => convert_element_type_305, convert_element_type_323
# type_as_2 => convert_element_type_307, convert_element_type_325
triton_red_fused__to_copy_add_mean_mul_rsqrt_41 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_41', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp16', 155: '*fp16', 156: '*fp16', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp16', 164: '*fp16', 165: '*fp16', 166: '*fp16', 167: '*fp16', 168: '*fp16', 169: '*fp16', 170: '*fp16', 171: '*fp16', 172: '*fp16', 173: '*fp16', 174: '*fp16', 175: '*fp16', 176: '*fp16', 177: '*fp16', 178: '*fp16', 179: '*fp16', 180: '*fp16', 181: '*fp16', 182: '*fp16', 183: '*fp16', 184: '*fp16', 185: '*fp16', 186: '*fp16', 187: '*fp16', 188: '*fp16', 189: '*fp16', 190: '*fp16', 191: '*fp16', 192: '*fp32', 193: '*fp32', 194: '*fp32', 195: '*fp32', 196: '*fp16', 197: '*fp32', 198: '*fp16', 199: '*fp32', 200: '*fp16', 201: '*fp32', 202: '*fp16', 203: '*fp32', 204: '*fp16', 205: '*fp32', 206: '*fp16', 207: 'i32', 208: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_41', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(207, 208))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_41(in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr8, in_out_ptr9, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, in_ptr130, in_ptr131, in_ptr132, in_ptr133, in_ptr134, in_ptr135, in_ptr136, in_ptr137, in_ptr138, in_ptr139, in_ptr140, in_ptr141, in_ptr142, in_ptr143, in_ptr144, in_ptr145, in_ptr146, in_ptr147, in_ptr148, in_ptr149, in_ptr150, in_ptr151, in_ptr152, in_ptr153, in_ptr154, in_ptr155, in_ptr156, in_ptr157, in_ptr158, in_ptr159, in_ptr160, in_ptr161, in_ptr162, in_ptr163, in_ptr164, in_ptr165, in_ptr166, in_ptr167, in_ptr168, in_ptr169, in_ptr170, in_ptr171, in_ptr172, in_ptr173, in_ptr174, in_ptr175, in_ptr176, in_ptr177, in_ptr178, in_ptr179, in_ptr180, in_ptr181, in_ptr182, in_ptr183, in_ptr184, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr94 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr95 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr96 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp246 = tl.load(in_ptr97 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr98 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp252 = tl.load(in_ptr99 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp255 = tl.load(in_ptr100 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp258 = tl.load(in_ptr101 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp261 = tl.load(in_ptr102 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp264 = tl.load(in_ptr103 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr104 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr105 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr106 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp276 = tl.load(in_ptr107 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp279 = tl.load(in_ptr108 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp282 = tl.load(in_ptr109 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp285 = tl.load(in_ptr110 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp288 = tl.load(in_ptr111 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp291 = tl.load(in_ptr112 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp294 = tl.load(in_ptr113 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp297 = tl.load(in_ptr114 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr115 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr116 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr117 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp309 = tl.load(in_ptr118 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr119 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp315 = tl.load(in_ptr120 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr121 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr122 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr123 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp327 = tl.load(in_ptr124 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr125 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp333 = tl.load(in_ptr126 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr127 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp339 = tl.load(in_ptr128 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr129 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp345 = tl.load(in_ptr130 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr131 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp351 = tl.load(in_ptr132 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr133 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp357 = tl.load(in_ptr134 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr135 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp363 = tl.load(in_ptr136 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp366 = tl.load(in_ptr137 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr138 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp372 = tl.load(in_ptr139 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp375 = tl.load(in_ptr140 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp378 = tl.load(in_ptr141 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp381 = tl.load(in_ptr142 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp384 = tl.load(in_ptr143 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp387 = tl.load(in_ptr144 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp390 = tl.load(in_ptr145 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp393 = tl.load(in_ptr146 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp396 = tl.load(in_ptr147 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp399 = tl.load(in_ptr148 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp402 = tl.load(in_ptr149 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp405 = tl.load(in_ptr150 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp408 = tl.load(in_ptr151 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp411 = tl.load(in_ptr152 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp414 = tl.load(in_ptr153 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp418 = tl.load(in_ptr154 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp424 = tl.load(in_ptr157 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp432 = tl.load(in_ptr161 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp439 = tl.load(in_ptr164 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr165 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp445 = tl.load(in_ptr166 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr167 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp451 = tl.load(in_ptr168 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr169 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp457 = tl.load(in_ptr170 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr171 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp463 = tl.load(in_ptr172 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr173 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp469 = tl.load(in_ptr174 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp473 = tl.load(in_ptr175 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp476 = tl.load(in_ptr176 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp480 = tl.load(in_ptr177 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp483 = tl.load(in_ptr178 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp489 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp417 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr155 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr156 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp425 = tl.load(in_ptr158 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp426 = tl.load(in_ptr159 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr160 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp433 = tl.load(in_ptr162 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp434 = tl.load(in_ptr163 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp438 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp238 = tmp237 * tmp1
        tmp239 = tmp238 + tmp3
        tmp241 = tmp240 * tmp9
        tmp242 = tmp239 + tmp241
        tmp244 = tmp243 * tmp19
        tmp245 = tmp242 + tmp244
        tmp247 = tmp246 * tmp1
        tmp248 = tmp247 + tmp3
        tmp250 = tmp249 * tmp9
        tmp251 = tmp248 + tmp250
        tmp253 = tmp252 * tmp19
        tmp254 = tmp251 + tmp253
        tmp256 = tmp255 * tmp1
        tmp257 = tmp256 + tmp3
        tmp259 = tmp258 * tmp9
        tmp260 = tmp257 + tmp259
        tmp262 = tmp261 * tmp19
        tmp263 = tmp260 + tmp262
        tmp265 = tmp264 * tmp1
        tmp266 = tmp265 + tmp3
        tmp268 = tmp267 * tmp9
        tmp269 = tmp266 + tmp268
        tmp271 = tmp270 * tmp19
        tmp272 = tmp269 + tmp271
        tmp274 = tmp273 * tmp52
        tmp275 = tmp245 + tmp274
        tmp277 = tmp276 * tmp60
        tmp278 = tmp275 + tmp277
        tmp280 = tmp279 * tmp66
        tmp281 = tmp278 + tmp280
        tmp283 = tmp282 * tmp52
        tmp284 = tmp254 + tmp283
        tmp286 = tmp285 * tmp60
        tmp287 = tmp284 + tmp286
        tmp289 = tmp288 * tmp66
        tmp290 = tmp287 + tmp289
        tmp292 = tmp291 * tmp52
        tmp293 = tmp263 + tmp292
        tmp295 = tmp294 * tmp60
        tmp296 = tmp293 + tmp295
        tmp298 = tmp297 * tmp66
        tmp299 = tmp296 + tmp298
        tmp301 = tmp300 * tmp52
        tmp302 = tmp272 + tmp301
        tmp304 = tmp303 * tmp60
        tmp305 = tmp302 + tmp304
        tmp307 = tmp306 * tmp66
        tmp308 = tmp305 + tmp307
        tmp310 = tmp309 * tmp99
        tmp311 = tmp281 + tmp310
        tmp313 = tmp312 * tmp107
        tmp314 = tmp311 + tmp313
        tmp316 = tmp315 * tmp113
        tmp317 = tmp314 + tmp316
        tmp319 = tmp318 * tmp99
        tmp320 = tmp290 + tmp319
        tmp322 = tmp321 * tmp107
        tmp323 = tmp320 + tmp322
        tmp325 = tmp324 * tmp113
        tmp326 = tmp323 + tmp325
        tmp328 = tmp327 * tmp99
        tmp329 = tmp299 + tmp328
        tmp331 = tmp330 * tmp107
        tmp332 = tmp329 + tmp331
        tmp334 = tmp333 * tmp113
        tmp335 = tmp332 + tmp334
        tmp337 = tmp336 * tmp99
        tmp338 = tmp308 + tmp337
        tmp340 = tmp339 * tmp107
        tmp341 = tmp338 + tmp340
        tmp343 = tmp342 * tmp113
        tmp344 = tmp341 + tmp343
        tmp346 = tmp345 * tmp146
        tmp347 = tmp317 + tmp346
        tmp349 = tmp348 * tmp154
        tmp350 = tmp347 + tmp349
        tmp352 = tmp351 * tmp160
        tmp353 = tmp350 + tmp352
        tmp355 = tmp354 * tmp146
        tmp356 = tmp326 + tmp355
        tmp358 = tmp357 * tmp154
        tmp359 = tmp356 + tmp358
        tmp361 = tmp360 * tmp160
        tmp362 = tmp359 + tmp361
        tmp364 = tmp363 * tmp146
        tmp365 = tmp335 + tmp364
        tmp367 = tmp366 * tmp154
        tmp368 = tmp365 + tmp367
        tmp370 = tmp369 * tmp160
        tmp371 = tmp368 + tmp370
        tmp373 = tmp372 * tmp146
        tmp374 = tmp344 + tmp373
        tmp376 = tmp375 * tmp154
        tmp377 = tmp374 + tmp376
        tmp379 = tmp378 * tmp160
        tmp380 = tmp377 + tmp379
        tmp382 = tmp381 * tmp193
        tmp383 = tmp353 + tmp382
        tmp385 = tmp384 * tmp201
        tmp386 = tmp383 + tmp385
        tmp388 = tmp387 * tmp207
        tmp389 = tmp386 + tmp388
        tmp391 = tmp390 * tmp193
        tmp392 = tmp362 + tmp391
        tmp394 = tmp393 * tmp201
        tmp395 = tmp392 + tmp394
        tmp397 = tmp396 * tmp207
        tmp398 = tmp395 + tmp397
        tmp400 = tmp399 * tmp193
        tmp401 = tmp371 + tmp400
        tmp403 = tmp402 * tmp201
        tmp404 = tmp401 + tmp403
        tmp406 = tmp405 * tmp207
        tmp407 = tmp404 + tmp406
        tmp409 = tmp408 * tmp193
        tmp410 = tmp380 + tmp409
        tmp412 = tmp411 * tmp201
        tmp413 = tmp410 + tmp412
        tmp415 = tmp414 * tmp207
        tmp416 = tmp413 + tmp415
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp417 + tmp422
        tmp427 = tmp425 + tmp426
        tmp429 = tmp427 + tmp428
        tmp430 = tmp424 * tmp429
        tmp431 = tmp423 + tmp430
        tmp435 = tmp433 + tmp434
        tmp436 = tmp432 * tmp435
        tmp437 = tmp431 + tmp436
        tmp440 = tmp439 * tmp421
        tmp441 = tmp438 + tmp440
        tmp443 = tmp442 * tmp429
        tmp444 = tmp441 + tmp443
        tmp446 = tmp445 * tmp435
        tmp447 = tmp444 + tmp446
        tmp449 = tmp448 * tmp421
        tmp450 = tmp389 + tmp449
        tmp452 = tmp451 * tmp429
        tmp453 = tmp450 + tmp452
        tmp455 = tmp454 * tmp435
        tmp456 = tmp453 + tmp455
        tmp458 = tmp457 * tmp421
        tmp459 = tmp398 + tmp458
        tmp461 = tmp460 * tmp429
        tmp462 = tmp459 + tmp461
        tmp464 = tmp463 * tmp435
        tmp465 = tmp462 + tmp464
        tmp467 = tmp466 * tmp421
        tmp468 = tmp407 + tmp467
        tmp470 = tmp469 * tmp429
        tmp471 = tmp468 + tmp470
        tmp472 = tmp471.to(tl.float32)
        tmp474 = tmp473 * tmp421
        tmp475 = tmp416 + tmp474
        tmp477 = tmp476 * tmp429
        tmp478 = tmp475 + tmp477
        tmp479 = tmp478.to(tl.float32)
        tmp481 = tmp480 * tmp421
        tmp482 = tmp209 + tmp481
        tmp484 = tmp483 * tmp429
        tmp485 = tmp482 + tmp484
        tmp486 = tmp485.to(tl.float32)
        tmp487 = tmp472 * tmp472
        tmp488 = tl.broadcast_to(tmp487, [XBLOCK, RBLOCK])
        tmp490 = _tmp489 + tmp488
        _tmp489 = tl.where(rmask, tmp490, _tmp489)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp218, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp227, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp437, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp447, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp456, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp465, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp472, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp479, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp486, rmask)
    tmp489 = tl.sum(_tmp489, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp489, None)
    _tmp504 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp491 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp499 = tl.load(in_ptr179 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp501 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp492 = 2048.0
        tmp493 = tmp489 / tmp492
        tmp494 = 1e-05
        tmp495 = tmp493 + tmp494
        tmp496 = tl.math.rsqrt(tmp495)
        tmp497 = tmp491 * tmp496
        tmp498 = tmp497.to(tl.float32)
        tmp500 = tmp498 * tmp499
        tmp502 = tmp501 * tmp501
        tmp503 = tl.broadcast_to(tmp502, [XBLOCK, RBLOCK])
        tmp505 = _tmp504 + tmp503
        _tmp504 = tl.where(rmask, tmp505, _tmp504)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp500, rmask)
    tmp504 = tl.sum(_tmp504, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp504, None)
    _tmp519 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp506 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp514 = tl.load(in_ptr180 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp516 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp507 = 2048.0
        tmp508 = tmp504 / tmp507
        tmp509 = 1e-05
        tmp510 = tmp508 + tmp509
        tmp511 = tl.math.rsqrt(tmp510)
        tmp512 = tmp506 * tmp511
        tmp513 = tmp512.to(tl.float32)
        tmp515 = tmp513 * tmp514
        tmp517 = tmp516 * tmp516
        tmp518 = tl.broadcast_to(tmp517, [XBLOCK, RBLOCK])
        tmp520 = _tmp519 + tmp518
        _tmp519 = tl.where(rmask, tmp520, _tmp519)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp515, rmask)
    tmp519 = tl.sum(_tmp519, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp519, None)
    _tmp535 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp521 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp529 = tl.load(in_ptr181 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp531 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp522 = 2048.0
        tmp523 = tmp519 / tmp522
        tmp524 = 1e-05
        tmp525 = tmp523 + tmp524
        tmp526 = tl.math.rsqrt(tmp525)
        tmp527 = tmp521 * tmp526
        tmp528 = tmp527.to(tl.float32)
        tmp530 = tmp528 * tmp529
        tmp532 = tmp531.to(tl.float32)
        tmp533 = tmp532 * tmp532
        tmp534 = tl.broadcast_to(tmp533, [XBLOCK, RBLOCK])
        tmp536 = _tmp535 + tmp534
        _tmp535 = tl.where(rmask, tmp536, _tmp535)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp530, rmask)
    tmp535 = tl.sum(_tmp535, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp535, None)
    _tmp552 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp537 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp546 = tl.load(in_ptr182 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp548 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp538 = tmp537.to(tl.float32)
        tmp539 = 2048.0
        tmp540 = tmp535 / tmp539
        tmp541 = 1e-05
        tmp542 = tmp540 + tmp541
        tmp543 = tl.math.rsqrt(tmp542)
        tmp544 = tmp538 * tmp543
        tmp545 = tmp544.to(tl.float32)
        tmp547 = tmp545 * tmp546
        tmp549 = tmp548.to(tl.float32)
        tmp550 = tmp549 * tmp549
        tmp551 = tl.broadcast_to(tmp550, [XBLOCK, RBLOCK])
        tmp553 = _tmp552 + tmp551
        _tmp552 = tl.where(rmask, tmp553, _tmp552)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp547, rmask)
    tmp552 = tl.sum(_tmp552, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp552, None)
    _tmp569 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp554 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp563 = tl.load(in_ptr183 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp565 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp555 = tmp554.to(tl.float32)
        tmp556 = 2048.0
        tmp557 = tmp552 / tmp556
        tmp558 = 1e-05
        tmp559 = tmp557 + tmp558
        tmp560 = tl.math.rsqrt(tmp559)
        tmp561 = tmp555 * tmp560
        tmp562 = tmp561.to(tl.float32)
        tmp564 = tmp562 * tmp563
        tmp566 = tmp565.to(tl.float32)
        tmp567 = tmp566 * tmp566
        tmp568 = tl.broadcast_to(tmp567, [XBLOCK, RBLOCK])
        tmp570 = _tmp569 + tmp568
        _tmp569 = tl.where(rmask, tmp570, _tmp569)
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp564, rmask)
    tmp569 = tl.sum(_tmp569, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp569, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp571 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp580 = tl.load(in_ptr184 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp572 = tmp571.to(tl.float32)
        tmp573 = 2048.0
        tmp574 = tmp569 / tmp573
        tmp575 = 1e-05
        tmp576 = tmp574 + tmp575
        tmp577 = tl.math.rsqrt(tmp576)
        tmp578 = tmp572 * tmp577
        tmp579 = tmp578.to(tl.float32)
        tmp581 = tmp579 * tmp580
        tl.store(out_ptr14 + (r1 + (2048*x0)), tmp581, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/r6/cr6ssqhqcmycp3lg7gxfo2u4k3nhjaqgs7qtitu5mfyz2vqnigsl.py
# Source Nodes: [add_450, add_510, add_512, add_578, add_644, add_645, add_646, add_647, add_815, add_816, add_817, add_835, add_836, add_837, float_6, mean_3, mul_18, mul_19, mul_20, mul_627, mul_628, mul_795, mul_796, mul_797, mul_815, mul_816, mul_817, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_450 => add_579
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_644 => add_795
# add_645 => add_796
# add_646 => add_802
# add_647 => add_803
# add_815 => add_993
# add_816 => add_994
# add_817 => add_995
# add_835 => add_1013
# add_836 => add_1014
# add_837 => add_1015
# float_6 => convert_element_type_314
# mean_3 => mean_86
# mul_18 => mul_1083
# mul_19 => mul_1084
# mul_20 => mul_1085
# mul_627 => mul_1063
# mul_628 => mul_1064
# mul_795 => mul_1309
# mul_796 => mul_1310
# mul_797 => mul_1311
# mul_815 => mul_1329
# mul_816 => mul_1330
# mul_817 => mul_1331
# rsqrt_3 => rsqrt_86
# type_as_5 => convert_element_type_315
triton_red_fused__to_copy_add_mean_mul_rsqrt_42 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_42', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp32', 21: '*fp16', 22: 'i32', 23: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_42', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(22, 23))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_42(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr4 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr8 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp21 = tl.load(in_ptr9 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr10 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr13 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr14 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr15 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp43 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp25 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp16 = tmp14 + tmp15
        tmp19 = tmp18 * tmp4
        tmp20 = tmp17 + tmp19
        tmp22 = tmp21 * tmp12
        tmp23 = tmp20 + tmp22
        tmp27 = tmp25 + tmp26
        tmp28 = tmp24 * tmp27
        tmp29 = tmp23 + tmp28
        tmp32 = tmp31 * tmp4
        tmp33 = tmp30 + tmp32
        tmp35 = tmp34 * tmp12
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp27
        tmp39 = tmp36 + tmp38
        tmp40 = tmp16.to(tl.float32)
        tmp41 = tmp40 * tmp40
        tmp42 = tl.broadcast_to(tmp41, [XBLOCK, RBLOCK])
        tmp44 = _tmp43 + tmp42
        _tmp43 = tl.where(rmask, tmp44, _tmp43)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp16, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp29, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp39, rmask)
    tmp43 = tl.sum(_tmp43, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp43, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp45 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp54 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp46 = tmp45.to(tl.float32)
        tmp47 = 2048.0
        tmp48 = tmp43 / tmp47
        tmp49 = 1e-05
        tmp50 = tmp48 + tmp49
        tmp51 = tl.math.rsqrt(tmp50)
        tmp52 = tmp46 * tmp51
        tmp53 = tmp52.to(tl.float32)
        tmp55 = tmp53 * tmp54
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp55, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/7k/c7kfbfykpqmoql3j66tn7cxfis4kvjkfclqszl4luf2qoxaxkw67.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_723, add_724, add_725, add_726, add_727, add_728, add_729, add_730, add_731, add_732, add_733, add_734, add_735, add_736, add_737, add_738, add_739, add_741, add_742, add_743, add_744, add_745, add_746, add_747, add_748, add_749, add_750, add_751, add_752, add_753, add_754, add_755, add_756, add_757, add_758, add_818, add_819, add_838, add_839, add_840, add_841, add_842, add_843, add_844, add_845, add_846, add_847, add_848, add_849, add_850, add_851, add_852, add_853, add_854, add_855, add_856, add_857, add_858, add_859, add_860, add_861, add_862, add_863, add_864, add_865, add_866, add_867, add_868, add_869, add_870, add_871, add_872, add_873, add_874, add_875, add_876, add_877, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_703, mul_704, mul_705, mul_706, mul_707, mul_708, mul_709, mul_710, mul_711, mul_712, mul_713, mul_714, mul_715, mul_716, mul_717, mul_718, mul_719, mul_720, mul_722, mul_723, mul_724, mul_725, mul_726, mul_727, mul_728, mul_729, mul_730, mul_731, mul_732, mul_733, mul_734, mul_735, mul_736, mul_737, mul_738, mul_739, mul_798, mul_799, mul_8, mul_818, mul_819, mul_820, mul_821, mul_822, mul_823, mul_824, mul_825, mul_826, mul_827, mul_828, mul_829, mul_830, mul_831, mul_832, mul_833, mul_834, mul_835, mul_836, mul_837, mul_838, mul_839, mul_840, mul_841, mul_842, mul_843, mul_844, mul_845, mul_846, mul_847, mul_848, mul_849, mul_850, mul_851, mul_852, mul_853, mul_854, mul_855, mul_856, mul_857, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1058
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887, add_891
# add_723 => add_892
# add_724 => add_893
# add_725 => add_894
# add_726 => add_895
# add_727 => add_896
# add_728 => add_897
# add_729 => add_898
# add_730 => add_899
# add_731 => add_900
# add_732 => add_901
# add_733 => add_902
# add_734 => add_903
# add_735 => add_904
# add_736 => add_905
# add_737 => add_906
# add_738 => add_907
# add_739 => add_908
# add_741 => add_910
# add_742 => add_911
# add_743 => add_912
# add_744 => add_913
# add_745 => add_914
# add_746 => add_915
# add_747 => add_916
# add_748 => add_917
# add_749 => add_918
# add_750 => add_919
# add_751 => add_920
# add_752 => add_921
# add_753 => add_922
# add_754 => add_923
# add_755 => add_924
# add_756 => add_925
# add_757 => add_926
# add_758 => add_927
# add_818 => add_996
# add_819 => add_997
# add_838 => add_1016
# add_839 => add_1017
# add_840 => add_1018, add_1059
# add_841 => add_1019
# add_842 => add_1020
# add_843 => add_1021
# add_844 => add_1022
# add_845 => add_1023
# add_846 => add_1024
# add_847 => add_1025
# add_848 => add_1026
# add_849 => add_1027
# add_850 => add_1028
# add_851 => add_1029
# add_852 => add_1030
# add_853 => add_1031
# add_854 => add_1032
# add_855 => add_1033
# add_856 => add_1034
# add_857 => add_1035
# add_858 => add_1036
# add_859 => add_1037
# add_860 => add_1038, add_1060
# add_861 => add_1039
# add_862 => add_1040
# add_863 => add_1041
# add_864 => add_1042
# add_865 => add_1043
# add_866 => add_1044
# add_867 => add_1045
# add_868 => add_1046
# add_869 => add_1047
# add_870 => add_1048
# add_871 => add_1049
# add_872 => add_1050
# add_873 => add_1051
# add_874 => add_1052
# add_875 => add_1053
# add_876 => add_1054
# add_877 => add_1055
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_356
# float_2 => convert_element_type_358
# float_3 => convert_element_type_360
# mean => mean_98
# mean_1 => mean_99
# mean_2 => mean_100
# mul => mul_1374
# mul_1 => mul_1375
# mul_2 => mul_1376
# mul_3 => mul_1377
# mul_4 => mul_1378, mul_24
# mul_5 => mul_1379
# mul_6 => mul_1380
# mul_7 => mul_1381
# mul_703 => mul_1191
# mul_704 => mul_1192
# mul_705 => mul_1193
# mul_706 => mul_1194
# mul_707 => mul_1195
# mul_708 => mul_1196
# mul_709 => mul_1197
# mul_710 => mul_1198
# mul_711 => mul_1199
# mul_712 => mul_1200
# mul_713 => mul_1201
# mul_714 => mul_1202
# mul_715 => mul_1203
# mul_716 => mul_1204
# mul_717 => mul_1205
# mul_718 => mul_1206
# mul_719 => mul_1207
# mul_720 => mul_1208
# mul_722 => mul_1210
# mul_723 => mul_1211
# mul_724 => mul_1212
# mul_725 => mul_1213
# mul_726 => mul_1214
# mul_727 => mul_1215
# mul_728 => mul_1216
# mul_729 => mul_1217
# mul_730 => mul_1218
# mul_731 => mul_1219
# mul_732 => mul_1220
# mul_733 => mul_1221
# mul_734 => mul_1222
# mul_735 => mul_1223
# mul_736 => mul_1224
# mul_737 => mul_1225
# mul_738 => mul_1226
# mul_739 => mul_1227
# mul_798 => mul_1312
# mul_799 => mul_1313
# mul_8 => mul_1382
# mul_818 => mul_1332
# mul_819 => mul_1333
# mul_820 => mul_1334
# mul_821 => mul_1335
# mul_822 => mul_1336
# mul_823 => mul_1337
# mul_824 => mul_1338
# mul_825 => mul_1339
# mul_826 => mul_1340
# mul_827 => mul_1341
# mul_828 => mul_1342
# mul_829 => mul_1343
# mul_830 => mul_1344
# mul_831 => mul_1345
# mul_832 => mul_1346
# mul_833 => mul_1347
# mul_834 => mul_1348
# mul_835 => mul_1349
# mul_836 => mul_1350
# mul_837 => mul_1351
# mul_838 => mul_1352
# mul_839 => mul_1353
# mul_840 => mul_1354
# mul_841 => mul_1355
# mul_842 => mul_1356
# mul_843 => mul_1357
# mul_844 => mul_1358
# mul_845 => mul_1359
# mul_846 => mul_1360
# mul_847 => mul_1361
# mul_848 => mul_1362
# mul_849 => mul_1363
# mul_850 => mul_1364
# mul_851 => mul_1365
# mul_852 => mul_1366
# mul_853 => mul_1367
# mul_854 => mul_1368
# mul_855 => mul_1369
# mul_856 => mul_1370
# mul_857 => mul_1371
# rsqrt => rsqrt_98
# rsqrt_1 => rsqrt_99
# rsqrt_2 => rsqrt_100
# type_as => convert_element_type_357
# type_as_1 => convert_element_type_359
# type_as_2 => convert_element_type_361
triton_red_fused__to_copy_add_mean_mul_rsqrt_43 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_43', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp32', 133: '*fp32', 134: '*fp32', 135: '*fp32', 136: '*fp16', 137: '*fp32', 138: '*fp16', 139: '*fp32', 140: '*fp16', 141: 'i32', 142: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_43', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(141, 142))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_43(in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr94 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr97 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr101 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr104 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr105 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr106 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr107 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr108 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr109 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr110 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr111 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr112 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp285 = tl.load(in_ptr114 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp291 = tl.load(in_ptr117 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp301 = tl.load(in_ptr122 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr123 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp308 = tl.load(in_ptr124 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp311 = tl.load(in_ptr125 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp317 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp287 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp293 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp295 = tl.load(in_ptr120 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp300 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp240 = tmp238 + tmp239
        tmp241 = tmp237 * tmp240
        tmp242 = tmp209 + tmp241
        tmp246 = tmp244 + tmp245
        tmp248 = tmp246 + tmp247
        tmp249 = tmp243 * tmp248
        tmp250 = tmp242 + tmp249
        tmp254 = tmp252 + tmp253
        tmp255 = tmp251 * tmp254
        tmp256 = tmp250 + tmp255
        tmp258 = tmp257 * tmp240
        tmp259 = tmp218 + tmp258
        tmp261 = tmp260 * tmp248
        tmp262 = tmp259 + tmp261
        tmp264 = tmp263 * tmp254
        tmp265 = tmp262 + tmp264
        tmp267 = tmp266 * tmp240
        tmp268 = tmp227 + tmp267
        tmp270 = tmp269 * tmp248
        tmp271 = tmp268 + tmp270
        tmp273 = tmp272 * tmp254
        tmp274 = tmp271 + tmp273
        tmp276 = tmp275 * tmp240
        tmp277 = tmp236 + tmp276
        tmp279 = tmp278 * tmp248
        tmp280 = tmp277 + tmp279
        tmp282 = tmp281 * tmp254
        tmp283 = tmp280 + tmp282
        tmp288 = tmp286 + tmp287
        tmp289 = tmp285 * tmp288
        tmp290 = tmp284 + tmp289
        tmp294 = tmp292 + tmp293
        tmp296 = tmp294 + tmp295
        tmp297 = tmp291 * tmp296
        tmp298 = tmp290 + tmp297
        tmp299 = tmp298.to(tl.float32)
        tmp302 = tmp301 * tmp288
        tmp303 = tmp300 + tmp302
        tmp305 = tmp304 * tmp296
        tmp306 = tmp303 + tmp305
        tmp307 = tmp306.to(tl.float32)
        tmp309 = tmp308 * tmp288
        tmp310 = tmp256 + tmp309
        tmp312 = tmp311 * tmp296
        tmp313 = tmp310 + tmp312
        tmp314 = tmp313.to(tl.float32)
        tmp315 = tmp299 * tmp299
        tmp316 = tl.broadcast_to(tmp315, [XBLOCK, RBLOCK])
        tmp318 = _tmp317 + tmp316
        _tmp317 = tl.where(rmask, tmp318, _tmp317)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp265, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp274, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp283, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp299, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp307, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp314, rmask)
    tmp317 = tl.sum(_tmp317, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp317, None)
    _tmp332 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp319 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp327 = tl.load(in_ptr126 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp329 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp320 = 2048.0
        tmp321 = tmp317 / tmp320
        tmp322 = 1e-05
        tmp323 = tmp321 + tmp322
        tmp324 = tl.math.rsqrt(tmp323)
        tmp325 = tmp319 * tmp324
        tmp326 = tmp325.to(tl.float32)
        tmp328 = tmp326 * tmp327
        tmp330 = tmp329 * tmp329
        tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
        tmp333 = _tmp332 + tmp331
        _tmp332 = tl.where(rmask, tmp333, _tmp332)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp328, rmask)
    tmp332 = tl.sum(_tmp332, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp332, None)
    _tmp347 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp334 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp342 = tl.load(in_ptr127 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp344 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp335 = 2048.0
        tmp336 = tmp332 / tmp335
        tmp337 = 1e-05
        tmp338 = tmp336 + tmp337
        tmp339 = tl.math.rsqrt(tmp338)
        tmp340 = tmp334 * tmp339
        tmp341 = tmp340.to(tl.float32)
        tmp343 = tmp341 * tmp342
        tmp345 = tmp344 * tmp344
        tmp346 = tl.broadcast_to(tmp345, [XBLOCK, RBLOCK])
        tmp348 = _tmp347 + tmp346
        _tmp347 = tl.where(rmask, tmp348, _tmp347)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp343, rmask)
    tmp347 = tl.sum(_tmp347, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp347, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp349 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp357 = tl.load(in_ptr128 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp350 = 2048.0
        tmp351 = tmp347 / tmp350
        tmp352 = 1e-05
        tmp353 = tmp351 + tmp352
        tmp354 = tl.math.rsqrt(tmp353)
        tmp355 = tmp349 * tmp354
        tmp356 = tmp355.to(tl.float32)
        tmp358 = tmp356 * tmp357
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp358, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/2f/c2fjrzq57uhmgs7pzb2xdnu5qf2jpk336gjbhkkd6k5lhw633taf.py
# Source Nodes: [add, add_10, add_1000, add_1001, add_1002, add_1003, add_1004, add_1005, add_1006, add_1007, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_740, add_759, add_760, add_761, add_762, add_763, add_764, add_765, add_766, add_767, add_768, add_769, add_770, add_771, add_772, add_773, add_774, add_775, add_776, add_777, add_778, add_779, add_780, add_781, add_782, add_783, add_784, add_785, add_786, add_787, add_788, add_789, add_790, add_791, add_792, add_793, add_794, add_795, add_796, add_878, add_879, add_880, add_881, add_96, add_968, add_969, add_970, add_971, add_972, add_973, add_974, add_975, add_976, add_977, add_978, add_979, add_98, add_980, add_981, add_982, add_983, add_984, add_985, add_990, add_991, add_992, add_993, add_994, add_995, add_996, add_997, add_998, add_999, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_18, mul_19, mul_2, mul_20, mul_3, mul_4, mul_5, mul_6, mul_7, mul_721, mul_740, mul_741, mul_742, mul_743, mul_744, mul_745, mul_746, mul_747, mul_748, mul_749, mul_750, mul_751, mul_752, mul_753, mul_754, mul_755, mul_756, mul_757, mul_758, mul_759, mul_760, mul_761, mul_762, mul_763, mul_764, mul_765, mul_766, mul_767, mul_768, mul_769, mul_770, mul_771, mul_772, mul_773, mul_774, mul_775, mul_776, mul_777, mul_8, mul_858, mul_859, mul_946, mul_947, mul_948, mul_949, mul_950, mul_951, mul_952, mul_953, mul_954, mul_955, mul_956, mul_957, mul_958, mul_959, mul_960, mul_961, mul_962, mul_963, mul_968, mul_969, mul_970, mul_971, mul_972, mul_973, mul_974, mul_975, mul_976, mul_977, mul_978, mul_979, mul_980, mul_981, mul_982, mul_983, mul_984, mul_985, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_967
# add_10 => add_18
# add_1000 => add_1196
# add_1001 => add_1197
# add_1002 => add_1198
# add_1003 => add_1199
# add_1004 => add_1200
# add_1005 => add_1201
# add_1006 => add_1202
# add_1007 => add_1203
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_740 => add_909
# add_759 => add_928
# add_760 => add_929, add_968
# add_761 => add_930
# add_762 => add_931
# add_763 => add_932
# add_764 => add_933
# add_765 => add_934
# add_766 => add_935
# add_767 => add_936
# add_768 => add_937
# add_769 => add_938
# add_770 => add_939
# add_771 => add_940
# add_772 => add_941
# add_773 => add_942
# add_774 => add_943
# add_775 => add_944
# add_776 => add_945
# add_777 => add_946
# add_778 => add_947
# add_779 => add_948, add_969
# add_780 => add_949
# add_781 => add_950
# add_782 => add_951
# add_783 => add_952
# add_784 => add_953
# add_785 => add_954
# add_786 => add_955
# add_787 => add_956
# add_788 => add_957
# add_789 => add_958
# add_790 => add_959
# add_791 => add_960
# add_792 => add_961
# add_793 => add_962
# add_794 => add_963
# add_795 => add_964
# add_796 => add_965
# add_878 => add_1056
# add_879 => add_1057
# add_880 => add_1063
# add_881 => add_1064
# add_96 => add_153
# add_968 => add_1164
# add_969 => add_1165
# add_970 => add_1166
# add_971 => add_1167
# add_972 => add_1168
# add_973 => add_1169
# add_974 => add_1170
# add_975 => add_1171
# add_976 => add_1172
# add_977 => add_1173
# add_978 => add_1174
# add_979 => add_1175
# add_98 => add_155
# add_980 => add_1176
# add_981 => add_1177
# add_982 => add_1178
# add_983 => add_1179
# add_984 => add_1180
# add_985 => add_1181
# add_990 => add_1186
# add_991 => add_1187
# add_992 => add_1188
# add_993 => add_1189
# add_994 => add_1190
# add_995 => add_1191
# add_996 => add_1192
# add_997 => add_1193
# add_998 => add_1194
# add_999 => add_1195
# float_1 => convert_element_type_338
# float_2 => convert_element_type_340
# float_3 => convert_element_type_342
# float_6 => convert_element_type_368
# mean => mean_93
# mean_1 => mean_94
# mean_2 => mean_95
# mean_3 => mean_101
# mul => mul_1267
# mul_1 => mul_1268
# mul_18 => mul_1392
# mul_19 => mul_1393
# mul_2 => mul_1269
# mul_20 => mul_1394
# mul_3 => mul_1270
# mul_4 => mul_1271, mul_24
# mul_5 => mul_1272
# mul_6 => mul_1273
# mul_7 => mul_1274
# mul_721 => mul_1209
# mul_740 => mul_1228
# mul_741 => mul_1229
# mul_742 => mul_1230
# mul_743 => mul_1231
# mul_744 => mul_1232
# mul_745 => mul_1233
# mul_746 => mul_1234
# mul_747 => mul_1235
# mul_748 => mul_1236
# mul_749 => mul_1237
# mul_750 => mul_1238
# mul_751 => mul_1239
# mul_752 => mul_1240
# mul_753 => mul_1241
# mul_754 => mul_1242
# mul_755 => mul_1243
# mul_756 => mul_1244
# mul_757 => mul_1245
# mul_758 => mul_1246
# mul_759 => mul_1247
# mul_760 => mul_1248
# mul_761 => mul_1249
# mul_762 => mul_1250
# mul_763 => mul_1251
# mul_764 => mul_1252
# mul_765 => mul_1253
# mul_766 => mul_1254
# mul_767 => mul_1255
# mul_768 => mul_1256
# mul_769 => mul_1257
# mul_770 => mul_1258
# mul_771 => mul_1259
# mul_772 => mul_1260
# mul_773 => mul_1261
# mul_774 => mul_1262
# mul_775 => mul_1263
# mul_776 => mul_1264
# mul_777 => mul_1265
# mul_8 => mul_1275
# mul_858 => mul_1372
# mul_859 => mul_1373
# mul_946 => mul_1512
# mul_947 => mul_1513
# mul_948 => mul_1514
# mul_949 => mul_1515
# mul_950 => mul_1516
# mul_951 => mul_1517
# mul_952 => mul_1518
# mul_953 => mul_1519
# mul_954 => mul_1520
# mul_955 => mul_1521
# mul_956 => mul_1522
# mul_957 => mul_1523
# mul_958 => mul_1524
# mul_959 => mul_1525
# mul_960 => mul_1526
# mul_961 => mul_1527
# mul_962 => mul_1528
# mul_963 => mul_1529
# mul_968 => mul_1534
# mul_969 => mul_1535
# mul_970 => mul_1536
# mul_971 => mul_1537
# mul_972 => mul_1538
# mul_973 => mul_1539
# mul_974 => mul_1540
# mul_975 => mul_1541
# mul_976 => mul_1542
# mul_977 => mul_1543
# mul_978 => mul_1544
# mul_979 => mul_1545
# mul_980 => mul_1546
# mul_981 => mul_1547
# mul_982 => mul_1548
# mul_983 => mul_1549
# mul_984 => mul_1550
# mul_985 => mul_1551
# rsqrt => rsqrt_93
# rsqrt_1 => rsqrt_94
# rsqrt_2 => rsqrt_95
# rsqrt_3 => rsqrt_101
# type_as => convert_element_type_339
# type_as_1 => convert_element_type_341
# type_as_2 => convert_element_type_343
# type_as_5 => convert_element_type_369
triton_red_fused__to_copy_add_mean_mul_rsqrt_44 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_44', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp32', 136: '*fp32', 137: '*fp32', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp32', 145: '*fp16', 146: 'i32', 147: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_44', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(146, 147))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_44(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr94 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr97 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr101 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr104 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr105 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr106 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr107 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr108 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr109 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr110 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr111 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr112 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp285 = tl.load(in_ptr114 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp294 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp297 = tl.load(in_ptr118 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp303 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp287 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp296 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp240 = tmp238 + tmp239
        tmp241 = tmp237 * tmp240
        tmp242 = tmp209 + tmp241
        tmp246 = tmp244 + tmp245
        tmp248 = tmp246 + tmp247
        tmp249 = tmp243 * tmp248
        tmp250 = tmp242 + tmp249
        tmp254 = tmp252 + tmp253
        tmp255 = tmp251 * tmp254
        tmp256 = tmp250 + tmp255
        tmp258 = tmp257 * tmp240
        tmp259 = tmp218 + tmp258
        tmp261 = tmp260 * tmp248
        tmp262 = tmp259 + tmp261
        tmp264 = tmp263 * tmp254
        tmp265 = tmp262 + tmp264
        tmp267 = tmp266 * tmp240
        tmp268 = tmp227 + tmp267
        tmp270 = tmp269 * tmp248
        tmp271 = tmp268 + tmp270
        tmp273 = tmp272 * tmp254
        tmp274 = tmp271 + tmp273
        tmp276 = tmp275 * tmp240
        tmp277 = tmp236 + tmp276
        tmp279 = tmp278 * tmp248
        tmp280 = tmp277 + tmp279
        tmp282 = tmp281 * tmp254
        tmp283 = tmp280 + tmp282
        tmp288 = tmp286 + tmp287
        tmp289 = tmp285 * tmp288
        tmp290 = tmp284 + tmp289
        tmp291 = tmp290.to(tl.float32)
        tmp292 = tmp291 * tmp291
        tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
        tmp295 = _tmp294 + tmp293
        _tmp294 = tl.where(rmask, tmp295, _tmp294)
        tmp298 = tmp297 * tmp288
        tmp299 = tmp296 + tmp298
        tmp300 = tmp299.to(tl.float32)
        tmp301 = tmp300 * tmp300
        tmp302 = tl.broadcast_to(tmp301, [XBLOCK, RBLOCK])
        tmp304 = _tmp303 + tmp302
        _tmp303 = tl.where(rmask, tmp304, _tmp303)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp256, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp265, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp274, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp283, rmask)
    tmp294 = tl.sum(_tmp294, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp294, None)
    tmp303 = tl.sum(_tmp303, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp303, None)
    tmp306 = tl.load(in_ptr119 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp315 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp318 = tl.load(in_ptr121 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr122 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp305 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr120 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp322 = tl.load(in_ptr123 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp323 = tl.load(in_ptr124 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp325 = tl.load(in_ptr125 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp329 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp331 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp342 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp305 + tmp310
        tmp312 = tmp311.to(tl.float32)
        tmp313 = tmp312 * tmp312
        tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
        tmp316 = _tmp315 + tmp314
        _tmp315 = tl.where(rmask, tmp316, _tmp315)
        tmp319 = tmp318 * tmp309
        tmp320 = tmp317 + tmp319
        tmp324 = tmp322 + tmp323
        tmp326 = tmp324 + tmp325
        tmp327 = tmp321 * tmp326
        tmp328 = tmp320 + tmp327
        tmp330 = tmp328 + tmp329
        tmp332 = tmp285 * tmp309
        tmp333 = tmp331 + tmp332
        tmp334 = tmp333.to(tl.float32)
        tmp335 = 2048.0
        tmp336 = tmp294 / tmp335
        tmp337 = 1e-05
        tmp338 = tmp336 + tmp337
        tmp339 = tl.math.rsqrt(tmp338)
        tmp340 = tmp334 * tmp339
        tmp341 = tmp340.to(tl.float32)
        tmp343 = tmp297 * tmp309
        tmp344 = tmp342 + tmp343
        tmp345 = tmp344.to(tl.float32)
        tmp346 = tmp303 / tmp335
        tmp347 = tmp346 + tmp337
        tmp348 = tl.math.rsqrt(tmp347)
        tmp349 = tmp345 * tmp348
        tmp350 = tmp349.to(tl.float32)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp330, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp341, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp350, rmask)
    tmp315 = tl.sum(_tmp315, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp315, None)
    _tmp377 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp351 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp352 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp353 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp365 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp366 = tl.load(in_ptr126 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp368 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp369 = tl.load(in_ptr127 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp371 = tl.load(in_ptr128 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp373 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp354 = tmp352 + tmp353
        tmp355 = tmp306 * tmp354
        tmp356 = tmp351 + tmp355
        tmp357 = tmp356.to(tl.float32)
        tmp358 = 2048.0
        tmp359 = tmp315 / tmp358
        tmp360 = 1e-05
        tmp361 = tmp359 + tmp360
        tmp362 = tl.math.rsqrt(tmp361)
        tmp363 = tmp357 * tmp362
        tmp364 = tmp363.to(tl.float32)
        tmp367 = tmp365 * tmp366
        tmp370 = tmp368 * tmp369
        tmp372 = tmp364 * tmp371
        tmp374 = tmp373.to(tl.float32)
        tmp375 = tmp374 * tmp374
        tmp376 = tl.broadcast_to(tmp375, [XBLOCK, RBLOCK])
        tmp378 = _tmp377 + tmp376
        _tmp377 = tl.where(rmask, tmp378, _tmp377)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp364, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp367, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp370, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp372, rmask)
    tmp377 = tl.sum(_tmp377, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp377, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp379 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp388 = tl.load(in_ptr129 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp380 = tmp379.to(tl.float32)
        tmp381 = 2048.0
        tmp382 = tmp377 / tmp381
        tmp383 = 1e-05
        tmp384 = tmp382 + tmp383
        tmp385 = tl.math.rsqrt(tmp384)
        tmp386 = tmp380 * tmp385
        tmp387 = tmp386.to(tl.float32)
        tmp389 = tmp387 * tmp388
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp389, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/kt/cktxure5kygthcgiu3adt3zinasphxlad3l7gksbe5kdw3fpqgcu.py
# Source Nodes: [add_648, add_797, add_798, add_799, float_6, mean_3, mul_18, mul_19, mul_20, mul_778, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_648 => add_804
# add_797 => add_966
# add_798 => add_972
# add_799 => add_973
# float_6 => convert_element_type_350
# mean_3 => mean_96
# mul_18 => mul_1285
# mul_19 => mul_1286
# mul_20 => mul_1287
# mul_778 => mul_1266
# rsqrt_3 => rsqrt_96
# type_as_5 => convert_element_type_351
triton_red_fused__to_copy_add_mean_mul_rsqrt_45 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_45', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_45', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_45(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/72/c72y7ycjqyvyiovjefvvc5mswffftnq5uuamb2myhwh4te7635jh.py
# Source Nodes: [add, add_10, add_1008, add_1009, add_1010, add_1011, add_1012, add_1013, add_1014, add_1015, add_1016, add_1017, add_1018, add_1019, add_1020, add_1021, add_1022, add_1023, add_1024, add_1025, add_1026, add_1027, add_1028, add_1029, add_1030, add_1031, add_1032, add_1033, add_1034, add_1035, add_1036, add_1037, add_1038, add_1039, add_1040, add_1041, add_1042, add_1043, add_1044, add_1045, add_1046, add_1047, add_1048, add_1049, add_1050, add_1051, add_1052, add_1053, add_1054, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_883, add_884, add_885, add_886, add_887, add_888, add_889, add_890, add_891, add_892, add_893, add_894, add_895, add_896, add_897, add_898, add_899, add_900, add_901, add_902, add_903, add_904, add_905, add_906, add_907, add_908, add_909, add_910, add_911, add_912, add_913, add_914, add_915, add_916, add_917, add_918, add_919, add_920, add_921, add_922, add_923, add_924, add_96, add_98, add_986, add_987, add_988, add_989, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1000, mul_1001, mul_1002, mul_1003, mul_1004, mul_1005, mul_1006, mul_1007, mul_1008, mul_1009, mul_1010, mul_1011, mul_1012, mul_1013, mul_1014, mul_1015, mul_1016, mul_1017, mul_1018, mul_1019, mul_1020, mul_1021, mul_1022, mul_1023, mul_1024, mul_1025, mul_1026, mul_1027, mul_1028, mul_1029, mul_1030, mul_1031, mul_1032, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_861, mul_862, mul_863, mul_864, mul_865, mul_866, mul_867, mul_868, mul_869, mul_870, mul_871, mul_872, mul_873, mul_874, mul_875, mul_876, mul_877, mul_878, mul_879, mul_880, mul_881, mul_882, mul_883, mul_884, mul_885, mul_886, mul_887, mul_888, mul_889, mul_890, mul_891, mul_892, mul_893, mul_894, mul_895, mul_896, mul_897, mul_898, mul_899, mul_900, mul_901, mul_902, mul_964, mul_965, mul_966, mul_967, mul_986, mul_987, mul_988, mul_989, mul_990, mul_991, mul_992, mul_993, mul_994, mul_995, mul_996, mul_997, mul_998, mul_999, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1153, add_1252
# add_10 => add_18
# add_1008 => add_1204
# add_1009 => add_1205
# add_1010 => add_1206
# add_1011 => add_1207
# add_1012 => add_1208, add_1253
# add_1013 => add_1209
# add_1014 => add_1210
# add_1015 => add_1211
# add_1016 => add_1212
# add_1017 => add_1213
# add_1018 => add_1214
# add_1019 => add_1215
# add_1020 => add_1216
# add_1021 => add_1217
# add_1022 => add_1218
# add_1023 => add_1219
# add_1024 => add_1220
# add_1025 => add_1221
# add_1026 => add_1222
# add_1027 => add_1223
# add_1028 => add_1224
# add_1029 => add_1225
# add_1030 => add_1226
# add_1031 => add_1227
# add_1032 => add_1228
# add_1033 => add_1229
# add_1034 => add_1230, add_1254
# add_1035 => add_1231
# add_1036 => add_1232
# add_1037 => add_1233
# add_1038 => add_1234
# add_1039 => add_1235
# add_1040 => add_1236
# add_1041 => add_1237
# add_1042 => add_1238
# add_1043 => add_1239
# add_1044 => add_1240
# add_1045 => add_1241
# add_1046 => add_1242
# add_1047 => add_1243
# add_1048 => add_1244
# add_1049 => add_1245
# add_1050 => add_1246
# add_1051 => add_1247
# add_1052 => add_1248
# add_1053 => add_1249
# add_1054 => add_1250
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065, add_1069
# add_883 => add_1070
# add_884 => add_1071
# add_885 => add_1072
# add_886 => add_1073
# add_887 => add_1074
# add_888 => add_1075
# add_889 => add_1076
# add_890 => add_1077
# add_891 => add_1078
# add_892 => add_1079
# add_893 => add_1080
# add_894 => add_1081
# add_895 => add_1082
# add_896 => add_1083
# add_897 => add_1084
# add_898 => add_1085
# add_899 => add_1086
# add_900 => add_1087
# add_901 => add_1088
# add_902 => add_1089
# add_903 => add_1090
# add_904 => add_1091
# add_905 => add_1092
# add_906 => add_1093
# add_907 => add_1094
# add_908 => add_1095
# add_909 => add_1096
# add_910 => add_1097
# add_911 => add_1098
# add_912 => add_1099
# add_913 => add_1100
# add_914 => add_1101
# add_915 => add_1102
# add_916 => add_1103
# add_917 => add_1104
# add_918 => add_1105
# add_919 => add_1106
# add_920 => add_1107
# add_921 => add_1108
# add_922 => add_1109
# add_923 => add_1110
# add_924 => add_1154
# add_96 => add_153
# add_98 => add_155
# add_986 => add_1182
# add_987 => add_1183
# add_988 => add_1184
# add_989 => add_1185
# float_1 => convert_element_type_374, convert_element_type_392
# float_2 => convert_element_type_376, convert_element_type_394
# float_3 => convert_element_type_396
# mean => mean_103, mean_108
# mean_1 => mean_104, mean_109
# mean_2 => mean_110
# mul => mul_1485, mul_1600
# mul_1 => mul_1486, mul_1601
# mul_1000 => mul_1566
# mul_1001 => mul_1567
# mul_1002 => mul_1568
# mul_1003 => mul_1569
# mul_1004 => mul_1570
# mul_1005 => mul_1571
# mul_1006 => mul_1572
# mul_1007 => mul_1573
# mul_1008 => mul_1574
# mul_1009 => mul_1575
# mul_1010 => mul_1576
# mul_1011 => mul_1577
# mul_1012 => mul_1578
# mul_1013 => mul_1579
# mul_1014 => mul_1580
# mul_1015 => mul_1581
# mul_1016 => mul_1582
# mul_1017 => mul_1583
# mul_1018 => mul_1584
# mul_1019 => mul_1585
# mul_1020 => mul_1586
# mul_1021 => mul_1587
# mul_1022 => mul_1588
# mul_1023 => mul_1589
# mul_1024 => mul_1590
# mul_1025 => mul_1591
# mul_1026 => mul_1592
# mul_1027 => mul_1593
# mul_1028 => mul_1594
# mul_1029 => mul_1595
# mul_1030 => mul_1596
# mul_1031 => mul_1597
# mul_1032 => mul_1598
# mul_2 => mul_1487, mul_1602
# mul_3 => mul_1488, mul_1603
# mul_4 => mul_1489, mul_1604, mul_24
# mul_5 => mul_1490, mul_1605
# mul_6 => mul_1606
# mul_7 => mul_1607
# mul_8 => mul_1608
# mul_861 => mul_1401
# mul_862 => mul_1402
# mul_863 => mul_1403
# mul_864 => mul_1404
# mul_865 => mul_1405
# mul_866 => mul_1406
# mul_867 => mul_1407
# mul_868 => mul_1408
# mul_869 => mul_1409
# mul_870 => mul_1410
# mul_871 => mul_1411
# mul_872 => mul_1412
# mul_873 => mul_1413
# mul_874 => mul_1414
# mul_875 => mul_1415
# mul_876 => mul_1416
# mul_877 => mul_1417
# mul_878 => mul_1418
# mul_879 => mul_1419
# mul_880 => mul_1420
# mul_881 => mul_1421
# mul_882 => mul_1422
# mul_883 => mul_1423
# mul_884 => mul_1424
# mul_885 => mul_1425
# mul_886 => mul_1426
# mul_887 => mul_1427
# mul_888 => mul_1428
# mul_889 => mul_1429
# mul_890 => mul_1430
# mul_891 => mul_1431
# mul_892 => mul_1432
# mul_893 => mul_1433
# mul_894 => mul_1434
# mul_895 => mul_1435
# mul_896 => mul_1436
# mul_897 => mul_1437
# mul_898 => mul_1438
# mul_899 => mul_1439
# mul_900 => mul_1440
# mul_901 => mul_1441
# mul_902 => mul_1442
# mul_964 => mul_1530
# mul_965 => mul_1531
# mul_966 => mul_1532
# mul_967 => mul_1533
# mul_986 => mul_1552
# mul_987 => mul_1553
# mul_988 => mul_1554
# mul_989 => mul_1555
# mul_990 => mul_1556
# mul_991 => mul_1557
# mul_992 => mul_1558
# mul_993 => mul_1559
# mul_994 => mul_1560
# mul_995 => mul_1561
# mul_996 => mul_1562
# mul_997 => mul_1563
# mul_998 => mul_1564
# mul_999 => mul_1565
# rsqrt => rsqrt_103, rsqrt_108
# rsqrt_1 => rsqrt_104, rsqrt_109
# rsqrt_2 => rsqrt_110
# type_as => convert_element_type_375, convert_element_type_393
# type_as_1 => convert_element_type_377, convert_element_type_395
# type_as_2 => convert_element_type_397
triton_red_fused__to_copy_add_mean_mul_rsqrt_46 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_46', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp32', 155: '*fp32', 156: '*fp32', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp32', 164: '*fp16', 165: '*fp32', 166: '*fp16', 167: 'i32', 168: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_46', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(167, 168))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_46(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, in_ptr130, in_ptr131, in_ptr132, in_ptr133, in_ptr134, in_ptr135, in_ptr136, in_ptr137, in_ptr138, in_ptr139, in_ptr140, in_ptr141, in_ptr142, in_ptr143, in_ptr144, in_ptr145, in_ptr146, in_ptr147, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr94 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr97 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr101 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr104 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr105 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr106 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr107 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr108 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr109 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr110 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr111 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr112 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr113 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr116 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr120 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr123 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp307 = tl.load(in_ptr124 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp310 = tl.load(in_ptr125 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr126 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp316 = tl.load(in_ptr127 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp319 = tl.load(in_ptr128 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp322 = tl.load(in_ptr129 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp325 = tl.load(in_ptr130 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp328 = tl.load(in_ptr131 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp332 = tl.load(in_ptr132 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp335 = tl.load(in_ptr133 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp338 = tl.load(in_ptr134 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr135 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp345 = tl.load(in_ptr136 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr137 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp351 = tl.load(in_ptr138 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp360 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp285 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp291 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp300 = tl.load(in_ptr122 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp331 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp352 = tl.load(in_ptr139 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp353 = tl.load(in_ptr140 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp240 = tmp238 + tmp239
        tmp241 = tmp237 * tmp240
        tmp242 = tmp209 + tmp241
        tmp246 = tmp244 + tmp245
        tmp248 = tmp246 + tmp247
        tmp249 = tmp243 * tmp248
        tmp250 = tmp242 + tmp249
        tmp254 = tmp252 + tmp253
        tmp255 = tmp251 * tmp254
        tmp256 = tmp250 + tmp255
        tmp258 = tmp257 * tmp240
        tmp259 = tmp218 + tmp258
        tmp261 = tmp260 * tmp248
        tmp262 = tmp259 + tmp261
        tmp264 = tmp263 * tmp254
        tmp265 = tmp262 + tmp264
        tmp267 = tmp266 * tmp240
        tmp268 = tmp227 + tmp267
        tmp270 = tmp269 * tmp248
        tmp271 = tmp268 + tmp270
        tmp273 = tmp272 * tmp254
        tmp274 = tmp271 + tmp273
        tmp276 = tmp275 * tmp240
        tmp277 = tmp236 + tmp276
        tmp279 = tmp278 * tmp248
        tmp280 = tmp277 + tmp279
        tmp282 = tmp281 * tmp254
        tmp283 = tmp280 + tmp282
        tmp287 = tmp285 + tmp286
        tmp288 = tmp284 * tmp287
        tmp289 = tmp256 + tmp288
        tmp293 = tmp291 + tmp292
        tmp295 = tmp293 + tmp294
        tmp296 = tmp290 * tmp295
        tmp297 = tmp289 + tmp296
        tmp301 = tmp299 + tmp300
        tmp302 = tmp298 * tmp301
        tmp303 = tmp297 + tmp302
        tmp305 = tmp304 * tmp287
        tmp306 = tmp265 + tmp305
        tmp308 = tmp307 * tmp295
        tmp309 = tmp306 + tmp308
        tmp311 = tmp310 * tmp301
        tmp312 = tmp309 + tmp311
        tmp314 = tmp313 * tmp287
        tmp315 = tmp274 + tmp314
        tmp317 = tmp316 * tmp295
        tmp318 = tmp315 + tmp317
        tmp320 = tmp319 * tmp301
        tmp321 = tmp318 + tmp320
        tmp323 = tmp322 * tmp287
        tmp324 = tmp283 + tmp323
        tmp326 = tmp325 * tmp295
        tmp327 = tmp324 + tmp326
        tmp329 = tmp328 * tmp301
        tmp330 = tmp327 + tmp329
        tmp333 = tmp332 * tmp287
        tmp334 = tmp331 + tmp333
        tmp336 = tmp335 * tmp295
        tmp337 = tmp334 + tmp336
        tmp339 = tmp338 * tmp301
        tmp340 = tmp337 + tmp339
        tmp343 = tmp342 * tmp287
        tmp344 = tmp341 + tmp343
        tmp346 = tmp345 * tmp295
        tmp347 = tmp344 + tmp346
        tmp349 = tmp348 * tmp301
        tmp350 = tmp347 + tmp349
        tmp354 = tmp352 + tmp353
        tmp355 = tmp351 * tmp354
        tmp356 = tmp340 + tmp355
        tmp357 = tmp356.to(tl.float32)
        tmp358 = tmp357 * tmp357
        tmp359 = tl.broadcast_to(tmp358, [XBLOCK, RBLOCK])
        tmp361 = _tmp360 + tmp359
        _tmp360 = tl.where(rmask, tmp361, _tmp360)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp303, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp312, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp321, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp330, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp340, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp350, rmask)
    tmp360 = tl.sum(_tmp360, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp360, None)
    tmp363 = tl.load(in_ptr141 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp372 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp375 = tl.load(in_ptr142 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp381 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp362 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr139 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp365 = tl.load(in_ptr140 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp374 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp383 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp366 = tmp364 + tmp365
        tmp367 = tmp363 * tmp366
        tmp368 = tmp362 + tmp367
        tmp369 = tmp368.to(tl.float32)
        tmp370 = tmp369 * tmp369
        tmp371 = tl.broadcast_to(tmp370, [XBLOCK, RBLOCK])
        tmp373 = _tmp372 + tmp371
        _tmp372 = tl.where(rmask, tmp373, _tmp372)
        tmp376 = tmp375 * tmp366
        tmp377 = tmp374 + tmp376
        tmp378 = tmp377.to(tl.float32)
        tmp379 = tmp378 * tmp378
        tmp380 = tl.broadcast_to(tmp379, [XBLOCK, RBLOCK])
        tmp382 = _tmp381 + tmp380
        _tmp381 = tl.where(rmask, tmp382, _tmp381)
        tmp384 = tmp351 * tmp366
        tmp385 = tmp383 + tmp384
        tmp386 = tmp385.to(tl.float32)
        tmp387 = 2048.0
        tmp388 = tmp360 / tmp387
        tmp389 = 1e-05
        tmp390 = tmp388 + tmp389
        tmp391 = tl.math.rsqrt(tmp390)
        tmp392 = tmp386 * tmp391
        tmp393 = tmp392.to(tl.float32)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp393, rmask)
    tmp372 = tl.sum(_tmp372, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp372, None)
    tmp381 = tl.sum(_tmp381, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp381, None)
    _tmp428 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp394 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp395 = tl.load(in_ptr139 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp396 = tl.load(in_ptr140 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp408 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp417 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp418 = tl.load(in_ptr143 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr144 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp422 = tl.load(in_ptr145 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp424 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp397 = tmp395 + tmp396
        tmp398 = tmp363 * tmp397
        tmp399 = tmp394 + tmp398
        tmp400 = tmp399.to(tl.float32)
        tmp401 = 2048.0
        tmp402 = tmp372 / tmp401
        tmp403 = 1e-05
        tmp404 = tmp402 + tmp403
        tmp405 = tl.math.rsqrt(tmp404)
        tmp406 = tmp400 * tmp405
        tmp407 = tmp406.to(tl.float32)
        tmp409 = tmp375 * tmp397
        tmp410 = tmp408 + tmp409
        tmp411 = tmp410.to(tl.float32)
        tmp412 = tmp381 / tmp401
        tmp413 = tmp412 + tmp403
        tmp414 = tl.math.rsqrt(tmp413)
        tmp415 = tmp411 * tmp414
        tmp416 = tmp415.to(tl.float32)
        tmp419 = tmp417 * tmp418
        tmp421 = tmp407 * tmp420
        tmp423 = tmp416 * tmp422
        tmp425 = tmp424.to(tl.float32)
        tmp426 = tmp425 * tmp425
        tmp427 = tl.broadcast_to(tmp426, [XBLOCK, RBLOCK])
        tmp429 = _tmp428 + tmp427
        _tmp428 = tl.where(rmask, tmp429, _tmp428)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp407, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp416, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp419, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp421, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp423, rmask)
    tmp428 = tl.sum(_tmp428, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp428, None)
    _tmp445 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp430 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp439 = tl.load(in_ptr146 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp441 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp431 = tmp430.to(tl.float32)
        tmp432 = 2048.0
        tmp433 = tmp428 / tmp432
        tmp434 = 1e-05
        tmp435 = tmp433 + tmp434
        tmp436 = tl.math.rsqrt(tmp435)
        tmp437 = tmp431 * tmp436
        tmp438 = tmp437.to(tl.float32)
        tmp440 = tmp438 * tmp439
        tmp442 = tmp441.to(tl.float32)
        tmp443 = tmp442 * tmp442
        tmp444 = tl.broadcast_to(tmp443, [XBLOCK, RBLOCK])
        tmp446 = _tmp445 + tmp444
        _tmp445 = tl.where(rmask, tmp446, _tmp445)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp440, rmask)
    tmp445 = tl.sum(_tmp445, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp445, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp447 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp456 = tl.load(in_ptr147 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp448 = tmp447.to(tl.float32)
        tmp449 = 2048.0
        tmp450 = tmp445 / tmp449
        tmp451 = 1e-05
        tmp452 = tmp450 + tmp451
        tmp453 = tl.math.rsqrt(tmp452)
        tmp454 = tmp448 * tmp453
        tmp455 = tmp454.to(tl.float32)
        tmp457 = tmp455 * tmp456
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp457, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/yi/cyixnvjrxyrahzhibnfzwgirwaqsqmsg4rfwfan5kw626nwnfrwn.py
# Source Nodes: [add_1055, add_1056, add_1057, add_882, float_6, mean_3, mul_1033, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1055 => add_1251
# add_1056 => add_1257
# add_1057 => add_1258
# add_882 => add_1065
# float_6 => convert_element_type_404
# mean_3 => mean_111
# mul_1033 => mul_1599
# mul_18 => mul_1618
# mul_19 => mul_1619
# mul_20 => mul_1620
# rsqrt_3 => rsqrt_111
# type_as_5 => convert_element_type_405
triton_red_fused__to_copy_add_mean_mul_rsqrt_47 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_47', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_47', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_47(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp8, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = 2048.0
        tmp17 = tmp12 / tmp16
        tmp18 = 1e-05
        tmp19 = tmp17 + tmp18
        tmp20 = tl.math.rsqrt(tmp19)
        tmp21 = tmp15 * tmp20
        tmp22 = tmp21.to(tl.float32)
        tmp24 = tmp22 * tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/sw/cswir5svqnqtmd7kk5ofhnfgmz43q3zpoq2fafmoaqrhghqd7kx2.py
# Source Nodes: [add_10, add_1176, add_1177, add_1178, add_1179, add_1180, add_1181, add_1182, add_1183, add_1184, add_1185, add_1186, add_1187, add_1188, add_1189, add_1190, add_1191, add_1192, add_1193, add_1194, add_1195, add_1196, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_924, add_925, add_926, add_927, add_928, add_929, add_930, add_931, add_932, add_933, add_934, add_935, add_936, add_937, add_938, add_939, add_940, add_941, add_942, add_943, add_944, add_945, add_946, add_947, add_948, add_949, add_950, add_951, add_952, add_953, add_954, add_955, add_956, add_957, add_958, add_959, add_96, add_960, add_961, add_962, add_963, add_964, add_965, add_98, float_3, mean_2, mul_1152, mul_1153, mul_1154, mul_1155, mul_1156, mul_1157, mul_1158, mul_1159, mul_1160, mul_1161, mul_1162, mul_1163, mul_1164, mul_1165, mul_1166, mul_1167, mul_1168, mul_1169, mul_1170, mul_1171, mul_1172, mul_4, mul_6, mul_7, mul_8, mul_903, mul_904, mul_905, mul_906, mul_907, mul_908, mul_909, mul_910, mul_911, mul_912, mul_913, mul_914, mul_915, mul_916, mul_917, mul_918, mul_919, mul_920, mul_921, mul_922, mul_923, mul_924, mul_925, mul_926, mul_927, mul_928, mul_929, mul_930, mul_931, mul_932, mul_933, mul_934, mul_935, mul_936, mul_937, mul_938, mul_939, mul_940, mul_941, mul_942, mul_943, mul_944, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_1176 => add_1390
# add_1177 => add_1391
# add_1178 => add_1392
# add_1179 => add_1393
# add_1180 => add_1394
# add_1181 => add_1395
# add_1182 => add_1396
# add_1183 => add_1397
# add_1184 => add_1398
# add_1185 => add_1399
# add_1186 => add_1400
# add_1187 => add_1401
# add_1188 => add_1402
# add_1189 => add_1403
# add_1190 => add_1404
# add_1191 => add_1405
# add_1192 => add_1406
# add_1193 => add_1407
# add_1194 => add_1408
# add_1195 => add_1409
# add_1196 => add_1410
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_924 => add_1111
# add_925 => add_1112
# add_926 => add_1113
# add_927 => add_1114
# add_928 => add_1115
# add_929 => add_1116
# add_930 => add_1117
# add_931 => add_1118
# add_932 => add_1119
# add_933 => add_1120
# add_934 => add_1121
# add_935 => add_1122
# add_936 => add_1123
# add_937 => add_1124
# add_938 => add_1125
# add_939 => add_1126
# add_940 => add_1127
# add_941 => add_1128
# add_942 => add_1129
# add_943 => add_1130
# add_944 => add_1131
# add_945 => add_1132, add_1155
# add_946 => add_1133
# add_947 => add_1134
# add_948 => add_1135
# add_949 => add_1136
# add_950 => add_1137
# add_951 => add_1138
# add_952 => add_1139
# add_953 => add_1140
# add_954 => add_1141
# add_955 => add_1142
# add_956 => add_1143
# add_957 => add_1144
# add_958 => add_1145
# add_959 => add_1146
# add_96 => add_153
# add_960 => add_1147
# add_961 => add_1148
# add_962 => add_1149
# add_963 => add_1150
# add_964 => add_1151
# add_965 => add_1152
# add_98 => add_155
# float_3 => convert_element_type_378
# mean_2 => mean_105
# mul_1152 => mul_1770
# mul_1153 => mul_1771
# mul_1154 => mul_1772
# mul_1155 => mul_1773
# mul_1156 => mul_1774
# mul_1157 => mul_1775
# mul_1158 => mul_1776
# mul_1159 => mul_1777
# mul_1160 => mul_1778
# mul_1161 => mul_1779
# mul_1162 => mul_1780
# mul_1163 => mul_1781
# mul_1164 => mul_1782
# mul_1165 => mul_1783
# mul_1166 => mul_1784
# mul_1167 => mul_1785
# mul_1168 => mul_1786
# mul_1169 => mul_1787
# mul_1170 => mul_1788
# mul_1171 => mul_1789
# mul_1172 => mul_1790
# mul_4 => mul_24
# mul_6 => mul_1491
# mul_7 => mul_1492
# mul_8 => mul_1493
# mul_903 => mul_1443
# mul_904 => mul_1444
# mul_905 => mul_1445
# mul_906 => mul_1446
# mul_907 => mul_1447
# mul_908 => mul_1448
# mul_909 => mul_1449
# mul_910 => mul_1450
# mul_911 => mul_1451
# mul_912 => mul_1452
# mul_913 => mul_1453
# mul_914 => mul_1454
# mul_915 => mul_1455
# mul_916 => mul_1456
# mul_917 => mul_1457
# mul_918 => mul_1458
# mul_919 => mul_1459
# mul_920 => mul_1460
# mul_921 => mul_1461
# mul_922 => mul_1462
# mul_923 => mul_1463
# mul_924 => mul_1464
# mul_925 => mul_1465
# mul_926 => mul_1466
# mul_927 => mul_1467
# mul_928 => mul_1468
# mul_929 => mul_1469
# mul_930 => mul_1470
# mul_931 => mul_1471
# mul_932 => mul_1472
# mul_933 => mul_1473
# mul_934 => mul_1474
# mul_935 => mul_1475
# mul_936 => mul_1476
# mul_937 => mul_1477
# mul_938 => mul_1478
# mul_939 => mul_1479
# mul_940 => mul_1480
# mul_941 => mul_1481
# mul_942 => mul_1482
# mul_943 => mul_1483
# mul_944 => mul_1484
# rsqrt_2 => rsqrt_105
# type_as_2 => convert_element_type_379
triton_red_fused__to_copy_add_mean_mul_rsqrt_48 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_48', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp32', 116: '*fp16', 117: 'i32', 118: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_48', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(117, 118))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_48(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr18 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr22 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr25 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr26 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr27 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr34 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr38 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr41 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr42 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr43 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr44 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr45 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr46 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr50 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr54 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr57 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr58 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr59 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr60 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr61 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr62 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr63 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr66 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr70 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr73 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr74 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr75 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr76 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr77 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr78 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr79 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr82 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr86 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr89 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr90 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr91 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr92 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr93 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr94 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr95 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr98 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr102 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp250 = tl.load(in_ptr105 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr106 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr107 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr108 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp262 = tl.load(in_ptr109 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr110 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp271 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp47 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp48 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp123 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp131 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp132 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp155 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp161 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp162 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp169 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp193 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp202 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp208 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp240 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp246 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp43 = tmp41 + tmp42
        tmp44 = tmp40 * tmp43
        tmp45 = tmp21 + tmp44
        tmp49 = tmp47 + tmp48
        tmp51 = tmp49 + tmp50
        tmp52 = tmp46 * tmp51
        tmp53 = tmp45 + tmp52
        tmp57 = tmp55 + tmp56
        tmp58 = tmp54 * tmp57
        tmp59 = tmp53 + tmp58
        tmp61 = tmp60 * tmp43
        tmp62 = tmp30 + tmp61
        tmp64 = tmp63 * tmp51
        tmp65 = tmp62 + tmp64
        tmp67 = tmp66 * tmp57
        tmp68 = tmp65 + tmp67
        tmp70 = tmp69 * tmp43
        tmp71 = tmp39 + tmp70
        tmp73 = tmp72 * tmp51
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp57
        tmp77 = tmp74 + tmp76
        tmp81 = tmp79 + tmp80
        tmp82 = tmp78 * tmp81
        tmp83 = tmp59 + tmp82
        tmp87 = tmp85 + tmp86
        tmp89 = tmp87 + tmp88
        tmp90 = tmp84 * tmp89
        tmp91 = tmp83 + tmp90
        tmp95 = tmp93 + tmp94
        tmp96 = tmp92 * tmp95
        tmp97 = tmp91 + tmp96
        tmp99 = tmp98 * tmp81
        tmp100 = tmp68 + tmp99
        tmp102 = tmp101 * tmp89
        tmp103 = tmp100 + tmp102
        tmp105 = tmp104 * tmp95
        tmp106 = tmp103 + tmp105
        tmp108 = tmp107 * tmp81
        tmp109 = tmp77 + tmp108
        tmp111 = tmp110 * tmp89
        tmp112 = tmp109 + tmp111
        tmp114 = tmp113 * tmp95
        tmp115 = tmp112 + tmp114
        tmp119 = tmp117 + tmp118
        tmp120 = tmp116 * tmp119
        tmp121 = tmp97 + tmp120
        tmp125 = tmp123 + tmp124
        tmp127 = tmp125 + tmp126
        tmp128 = tmp122 * tmp127
        tmp129 = tmp121 + tmp128
        tmp133 = tmp131 + tmp132
        tmp134 = tmp130 * tmp133
        tmp135 = tmp129 + tmp134
        tmp137 = tmp136 * tmp119
        tmp138 = tmp106 + tmp137
        tmp140 = tmp139 * tmp127
        tmp141 = tmp138 + tmp140
        tmp143 = tmp142 * tmp133
        tmp144 = tmp141 + tmp143
        tmp146 = tmp145 * tmp119
        tmp147 = tmp115 + tmp146
        tmp149 = tmp148 * tmp127
        tmp150 = tmp147 + tmp149
        tmp152 = tmp151 * tmp133
        tmp153 = tmp150 + tmp152
        tmp157 = tmp155 + tmp156
        tmp158 = tmp154 * tmp157
        tmp159 = tmp135 + tmp158
        tmp163 = tmp161 + tmp162
        tmp165 = tmp163 + tmp164
        tmp166 = tmp160 * tmp165
        tmp167 = tmp159 + tmp166
        tmp171 = tmp169 + tmp170
        tmp172 = tmp168 * tmp171
        tmp173 = tmp167 + tmp172
        tmp175 = tmp174 * tmp157
        tmp176 = tmp144 + tmp175
        tmp178 = tmp177 * tmp165
        tmp179 = tmp176 + tmp178
        tmp181 = tmp180 * tmp171
        tmp182 = tmp179 + tmp181
        tmp184 = tmp183 * tmp157
        tmp185 = tmp153 + tmp184
        tmp187 = tmp186 * tmp165
        tmp188 = tmp185 + tmp187
        tmp190 = tmp189 * tmp171
        tmp191 = tmp188 + tmp190
        tmp195 = tmp193 + tmp194
        tmp196 = tmp192 * tmp195
        tmp197 = tmp173 + tmp196
        tmp201 = tmp199 + tmp200
        tmp203 = tmp201 + tmp202
        tmp204 = tmp198 * tmp203
        tmp205 = tmp197 + tmp204
        tmp209 = tmp207 + tmp208
        tmp210 = tmp206 * tmp209
        tmp211 = tmp205 + tmp210
        tmp213 = tmp212 * tmp195
        tmp214 = tmp182 + tmp213
        tmp216 = tmp215 * tmp203
        tmp217 = tmp214 + tmp216
        tmp219 = tmp218 * tmp209
        tmp220 = tmp217 + tmp219
        tmp222 = tmp221 * tmp195
        tmp223 = tmp191 + tmp222
        tmp225 = tmp224 * tmp203
        tmp226 = tmp223 + tmp225
        tmp228 = tmp227 * tmp209
        tmp229 = tmp226 + tmp228
        tmp233 = tmp231 + tmp232
        tmp234 = tmp230 * tmp233
        tmp235 = tmp211 + tmp234
        tmp239 = tmp237 + tmp238
        tmp241 = tmp239 + tmp240
        tmp242 = tmp236 * tmp241
        tmp243 = tmp235 + tmp242
        tmp247 = tmp245 + tmp246
        tmp248 = tmp244 * tmp247
        tmp249 = tmp243 + tmp248
        tmp251 = tmp250 * tmp233
        tmp252 = tmp220 + tmp251
        tmp254 = tmp253 * tmp241
        tmp255 = tmp252 + tmp254
        tmp257 = tmp256 * tmp247
        tmp258 = tmp255 + tmp257
        tmp260 = tmp259 * tmp233
        tmp261 = tmp229 + tmp260
        tmp263 = tmp262 * tmp241
        tmp264 = tmp261 + tmp263
        tmp266 = tmp265 * tmp247
        tmp267 = tmp264 + tmp266
        tmp268 = tmp249.to(tl.float32)
        tmp269 = tmp268 * tmp268
        tmp270 = tl.broadcast_to(tmp269, [XBLOCK, RBLOCK])
        tmp272 = _tmp271 + tmp270
        _tmp271 = tl.where(rmask, tmp272, _tmp271)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp249, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp258, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp267, rmask)
    tmp271 = tl.sum(_tmp271, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp271, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp273 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp282 = tl.load(in_ptr111 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp274 = tmp273.to(tl.float32)
        tmp275 = 2048.0
        tmp276 = tmp271 / tmp275
        tmp277 = 1e-05
        tmp278 = tmp276 + tmp277
        tmp279 = tl.math.rsqrt(tmp278)
        tmp280 = tmp274 * tmp279
        tmp281 = tmp280.to(tl.float32)
        tmp283 = tmp281 * tmp282
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp283, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/xe/cxee6lrhkqaa3h7ro3fm563m3nqkxfyamqg3d6cuqnhcjy3wksmo.py
# Source Nodes: [add_10, add_1058, add_1197, add_1198, add_1199, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, float_1, mul_1173, mul_1174, mul_1175, mul_4], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mul, aten.sum]
# add_10 => add_18
# add_1058 => add_1259
# add_1197 => add_1411
# add_1198 => add_1412
# add_1199 => add_1413
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_428
# mul_1173 => mul_1791
# mul_1174 => mul_1792
# mul_1175 => mul_1793
# mul_4 => mul_24
triton_red_fused__to_copy_add_div_mul_sum_49 = async_compile.triton('triton_red_fused__to_copy_add_div_mul_sum_49', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp32', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: 'i32', 88: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mul_sum_49', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(87, 88))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mul_sum_49(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr3 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp15 = tl.load(in_ptr7 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp18 = tmp16 + tmp17
        tmp19 = tmp15 * tmp18
        tmp20 = tmp14 + tmp19
        tmp23 = tmp21 * tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp20.to(tl.float32)
        tmp26 = tmp24 * tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask, tmp29, _tmp28)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp20, rmask)
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tmp34 = tl.load(in_ptr12 + (x0), None, eviction_policy='evict_last')
    _tmp54 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp30 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp43 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tmp30 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tmp36 = -0.5
        tmp37 = tmp28 * tmp36
        tmp38 = tmp34 * tmp34
        tmp39 = tmp38 * tmp34
        tmp40 = tmp37 * tmp39
        tmp41 = 2048.0
        tmp42 = tmp40 / tmp41
        tmp44 = tmp43.to(tl.float32)
        tmp45 = tmp42 * tmp44
        tmp46 = tmp35 + tmp45
        tmp47 = tmp46 + tmp45
        tmp48 = tmp47.to(tl.float32)
        tmp51 = tmp49 + tmp50
        tmp52 = tmp48 * tmp51
        tmp53 = tl.broadcast_to(tmp52, [XBLOCK, RBLOCK])
        tmp55 = _tmp54 + tmp53
        _tmp54 = tl.where(rmask, tmp55, _tmp54)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp48, rmask)
    tmp54 = tl.sum(_tmp54, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp54, None)
    _tmp64 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp71 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp78 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp87 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp94 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp110 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp117 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp124 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp140 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp147 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp156 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp163 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp170 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp179 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp186 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp193 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp202 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp211 = tl.load(in_ptr55 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp222 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp230 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp234 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp56 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp119 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp143 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp152 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp173 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp175 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp188 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp189 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp224 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tmp57 + tmp58
        tmp61 = tmp59 + tmp60
        tmp62 = tmp56 * tmp61
        tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
        tmp65 = _tmp64 + tmp63
        _tmp64 = tl.where(rmask, tmp65, _tmp64)
        tmp68 = tmp66 + tmp67
        tmp69 = tmp56 * tmp68
        tmp70 = tl.broadcast_to(tmp69, [XBLOCK, RBLOCK])
        tmp72 = _tmp71 + tmp70
        _tmp71 = tl.where(rmask, tmp72, _tmp71)
        tmp75 = tmp73 + tmp74
        tmp76 = tmp56 * tmp75
        tmp77 = tl.broadcast_to(tmp76, [XBLOCK, RBLOCK])
        tmp79 = _tmp78 + tmp77
        _tmp78 = tl.where(rmask, tmp79, _tmp78)
        tmp82 = tmp80 + tmp81
        tmp84 = tmp82 + tmp83
        tmp85 = tmp56 * tmp84
        tmp86 = tl.broadcast_to(tmp85, [XBLOCK, RBLOCK])
        tmp88 = _tmp87 + tmp86
        _tmp87 = tl.where(rmask, tmp88, _tmp87)
        tmp91 = tmp89 + tmp90
        tmp92 = tmp56 * tmp91
        tmp93 = tl.broadcast_to(tmp92, [XBLOCK, RBLOCK])
        tmp95 = _tmp94 + tmp93
        _tmp94 = tl.where(rmask, tmp95, _tmp94)
        tmp98 = tmp96 + tmp97
        tmp99 = tmp56 * tmp98
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp56 * tmp107
        tmp109 = tl.broadcast_to(tmp108, [XBLOCK, RBLOCK])
        tmp111 = _tmp110 + tmp109
        _tmp110 = tl.where(rmask, tmp111, _tmp110)
        tmp114 = tmp112 + tmp113
        tmp115 = tmp56 * tmp114
        tmp116 = tl.broadcast_to(tmp115, [XBLOCK, RBLOCK])
        tmp118 = _tmp117 + tmp116
        _tmp117 = tl.where(rmask, tmp118, _tmp117)
        tmp121 = tmp119 + tmp120
        tmp122 = tmp56 * tmp121
        tmp123 = tl.broadcast_to(tmp122, [XBLOCK, RBLOCK])
        tmp125 = _tmp124 + tmp123
        _tmp124 = tl.where(rmask, tmp125, _tmp124)
        tmp128 = tmp126 + tmp127
        tmp130 = tmp128 + tmp129
        tmp131 = tmp56 * tmp130
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp137 = tmp135 + tmp136
        tmp138 = tmp56 * tmp137
        tmp139 = tl.broadcast_to(tmp138, [XBLOCK, RBLOCK])
        tmp141 = _tmp140 + tmp139
        _tmp140 = tl.where(rmask, tmp141, _tmp140)
        tmp144 = tmp142 + tmp143
        tmp145 = tmp56 * tmp144
        tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
        tmp148 = _tmp147 + tmp146
        _tmp147 = tl.where(rmask, tmp148, _tmp147)
        tmp151 = tmp149 + tmp150
        tmp153 = tmp151 + tmp152
        tmp154 = tmp56 * tmp153
        tmp155 = tl.broadcast_to(tmp154, [XBLOCK, RBLOCK])
        tmp157 = _tmp156 + tmp155
        _tmp156 = tl.where(rmask, tmp157, _tmp156)
        tmp160 = tmp158 + tmp159
        tmp161 = tmp56 * tmp160
        tmp162 = tl.broadcast_to(tmp161, [XBLOCK, RBLOCK])
        tmp164 = _tmp163 + tmp162
        _tmp163 = tl.where(rmask, tmp164, _tmp163)
        tmp167 = tmp165 + tmp166
        tmp168 = tmp56 * tmp167
        tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
        tmp171 = _tmp170 + tmp169
        _tmp170 = tl.where(rmask, tmp171, _tmp170)
        tmp174 = tmp172 + tmp173
        tmp176 = tmp174 + tmp175
        tmp177 = tmp56 * tmp176
        tmp178 = tl.broadcast_to(tmp177, [XBLOCK, RBLOCK])
        tmp180 = _tmp179 + tmp178
        _tmp179 = tl.where(rmask, tmp180, _tmp179)
        tmp183 = tmp181 + tmp182
        tmp184 = tmp56 * tmp183
        tmp185 = tl.broadcast_to(tmp184, [XBLOCK, RBLOCK])
        tmp187 = _tmp186 + tmp185
        _tmp186 = tl.where(rmask, tmp187, _tmp186)
        tmp190 = tmp188 + tmp189
        tmp191 = tmp56 * tmp190
        tmp192 = tl.broadcast_to(tmp191, [XBLOCK, RBLOCK])
        tmp194 = _tmp193 + tmp192
        _tmp193 = tl.where(rmask, tmp194, _tmp193)
        tmp197 = tmp195 + tmp196
        tmp199 = tmp197 + tmp198
        tmp200 = tmp56 * tmp199
        tmp201 = tl.broadcast_to(tmp200, [XBLOCK, RBLOCK])
        tmp203 = _tmp202 + tmp201
        _tmp202 = tl.where(rmask, tmp203, _tmp202)
        tmp206 = tmp204 + tmp205
        tmp207 = tmp56 * tmp206
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp213 = tmp211 * tmp212
        tmp214 = 0.0
        tmp215 = tmp213 + tmp214
        tmp217 = tmp215 + tmp216
        tmp219 = tmp217 + tmp218
        tmp220 = tmp56 * tmp219
        tmp221 = tl.broadcast_to(tmp220, [XBLOCK, RBLOCK])
        tmp223 = _tmp222 + tmp221
        _tmp222 = tl.where(rmask, tmp223, _tmp222)
        tmp225 = tmp212 + tmp224
        tmp227 = tmp225 + tmp226
        tmp228 = tmp56 * tmp227
        tmp229 = tl.broadcast_to(tmp228, [XBLOCK, RBLOCK])
        tmp231 = _tmp230 + tmp229
        _tmp230 = tl.where(rmask, tmp231, _tmp230)
        tmp232 = tmp56 * tmp212
        tmp233 = tl.broadcast_to(tmp232, [XBLOCK, RBLOCK])
        tmp235 = _tmp234 + tmp233
        _tmp234 = tl.where(rmask, tmp235, _tmp234)
    tmp64 = tl.sum(_tmp64, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp64, None)
    tmp71 = tl.sum(_tmp71, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp71, None)
    tmp78 = tl.sum(_tmp78, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp78, None)
    tmp87 = tl.sum(_tmp87, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp87, None)
    tmp94 = tl.sum(_tmp94, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp94, None)
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp101, None)
    tmp110 = tl.sum(_tmp110, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp110, None)
    tmp117 = tl.sum(_tmp117, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp117, None)
    tmp124 = tl.sum(_tmp124, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp124, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp133, None)
    tmp140 = tl.sum(_tmp140, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp140, None)
    tmp147 = tl.sum(_tmp147, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp147, None)
    tmp156 = tl.sum(_tmp156, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp156, None)
    tmp163 = tl.sum(_tmp163, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp163, None)
    tmp170 = tl.sum(_tmp170, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp170, None)
    tmp179 = tl.sum(_tmp179, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp179, None)
    tmp186 = tl.sum(_tmp186, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp186, None)
    tmp193 = tl.sum(_tmp193, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp193, None)
    tmp202 = tl.sum(_tmp202, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp202, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp209, None)
    tmp222 = tl.sum(_tmp222, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp222, None)
    tmp230 = tl.sum(_tmp230, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp230, None)
    tmp234 = tl.sum(_tmp234, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp234, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zg/czgic67ef3mqoszo4s7unre63dzpcgh33hzruhy55vbqpjas2pj2.py
# Source Nodes: [float_1, mul_1225, type_as], Original ATen: [aten._to_copy, aten.mul, aten.sum]
# float_1 => convert_element_type_428
# mul_1225 => mul_1843
# type_as => convert_element_type_429
triton_red_fused__to_copy_mul_sum_50 = async_compile.triton('triton_red_fused__to_copy_mul_sum_50', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_mul_sum_50', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_mul_sum_50(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp1.to(tl.float32)
        tmp4 = tmp2 * tmp3
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp8, None)
''')


# kernel path: /tmp/torchinductor_mengqy/36/c36dqzfscbzwu5vn4x2r2psuj5z5nbolen7kyxf6xinzrdccnznq.py
# Source Nodes: [float_1, mul_1225, type_as], Original ATen: [aten._to_copy, aten.mul, aten.sum]
# float_1 => convert_element_type_428
# mul_1225 => mul_1843
# type_as => convert_element_type_429
triton_per_fused__to_copy_mul_sum_51 = async_compile.triton('triton_per_fused__to_copy_mul_sum_51', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[2048, 64],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_mul_sum_51', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused__to_copy_mul_sum_51(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 2048
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (2048*r1)), rmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, None)
''')


# kernel path: /tmp/torchinductor_mengqy/or/corfleocudozdsujfjqkucwsx6iqm56ab2ceahv4tylc2p2vccmy.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_52 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_52', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_52', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(22,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_52(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, xnumel, XBLOCK : tl.constexpr):
    xnumel = 614400
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 153600)
    x0 = xindex % 25
    x1 = (xindex // 25) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 1, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 23, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 22, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 21, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 20, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 19, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 18, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 17, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 16, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 15, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 14, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 13, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 12, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 11, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 10, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 9, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tl.full([1], 8, tl.int32)
    tmp95 = tmp3 == tmp94
    tmp97 = tl.where(tmp95, tmp96, tmp7)
    tmp98 = tl.where(tmp2, tmp97, tmp7)
    tmp99 = tmp93 + tmp98
    tmp100 = tl.full([1], 7, tl.int32)
    tmp101 = tmp3 == tmp100
    tmp103 = tl.where(tmp101, tmp102, tmp7)
    tmp104 = tl.where(tmp2, tmp103, tmp7)
    tmp105 = tmp99 + tmp104
    tmp106 = tl.full([1], 6, tl.int32)
    tmp107 = tmp3 == tmp106
    tmp109 = tl.where(tmp107, tmp108, tmp7)
    tmp110 = tl.where(tmp2, tmp109, tmp7)
    tmp111 = tmp105 + tmp110
    tmp112 = tl.full([1], 5, tl.int32)
    tmp113 = tmp3 == tmp112
    tmp115 = tl.where(tmp113, tmp114, tmp7)
    tmp116 = tl.where(tmp2, tmp115, tmp7)
    tmp117 = tmp111 + tmp116
    tmp118 = tl.full([1], 4, tl.int32)
    tmp119 = tmp3 == tmp118
    tmp121 = tl.where(tmp119, tmp120, tmp7)
    tmp122 = tl.where(tmp2, tmp121, tmp7)
    tmp123 = tmp117 + tmp122
    tmp124 = tl.full([1], 3, tl.int32)
    tmp125 = tmp3 == tmp124
    tmp127 = tl.where(tmp125, tmp126, tmp7)
    tmp128 = tl.where(tmp2, tmp127, tmp7)
    tmp129 = tmp123 + tmp128
    tl.store(in_out_ptr0 + (x3), tmp129, None)
''')


# kernel path: /tmp/torchinductor_mengqy/eh/ceh7zu4d6acw2isctnmtpx5qkgnbzj6ajvswrbkqx53yxp2q3hma.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_53 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_53', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_53', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_53(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4800
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 25
    x4 = (xindex // 25)
    x2 = (xindex // 1200)
    x1 = (xindex // 25) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (25*r3) + (3200*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 1, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tmp4 == tmp2
        tmp14 = tl.where(tmp12, tmp13, tmp8)
        tmp15 = tl.where(tmp3, tmp14, tmp8)
        tmp16 = tmp11 + tmp15
        tmp17 = tl.full([1, 1], 0, tl.int32)
        tmp18 = tmp4 == tmp17
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp16 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/m3/cm327vunyplq6tl76xqi3f5vtw5sduu6lo5rwwgy4jzo2xxk65lc.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_54 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_54', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_54', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_54(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 100
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 25
    x1 = (xindex // 25)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (25*r2) + (1200*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/bk/cbkjccl7lgzoyu47z4ijxngt6iztnctbrxzxhxuu2fscjiursznw.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_55 = async_compile.triton('triton_poi_fused_clone_55', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_55', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_55(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 614400
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 25
    x1 = (xindex // 25) % 4
    x2 = (xindex // 100)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (25*x2) + (153600*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 1, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tmp4 == tmp2
    tmp14 = tl.where(tmp12, tmp13, tmp8)
    tmp15 = tl.where(tmp3, tmp14, tmp8)
    tmp16 = tmp11 + tmp15
    tmp17 = tl.full([1], 0, tl.int32)
    tmp18 = tmp4 == tmp17
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp16 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/mz/cmzyb2qphh3jjexmv5kj4kwcgxcmu3dhv6bu5sjnc4uwvpyjvuea.py
# Source Nodes: [l__mod___dynamic_dense_23_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_23_act => add_1364, convert_element_type_426, erf_23, mul_1744
triton_poi_fused_gelu_gelu_backward_56 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_56', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_56', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_56(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 614400
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/vj/cvjw6ynsgivz5ly4kf4ye23lhiavbuf4erpmokkovcdnrvdyb2ll.py
# Source Nodes: [add, add_10, add_1058, add_1059, add_1060, add_1061, add_1062, add_1063, add_1064, add_1065, add_1066, add_1067, add_1068, add_1069, add_1070, add_1071, add_1072, add_1073, add_1074, add_1075, add_1076, add_1077, add_1078, add_1079, add_1080, add_1081, add_1082, add_1083, add_1084, add_1085, add_1086, add_1087, add_1088, add_1089, add_1090, add_1091, add_1092, add_1093, add_1094, add_1095, add_1096, add_1097, add_1098, add_1099, add_1100, add_1101, add_1102, add_1103, add_1104, add_1105, add_1106, add_1107, add_1108, add_1109, add_1110, add_1111, add_1112, add_1113, add_1114, add_1115, add_1116, add_1117, add_1118, add_1119, add_1120, add_1121, add_1122, add_1123, add_1124, add_1125, add_1126, add_1127, add_1128, add_1129, add_1130, add_1131, add_1132, add_1133, add_1134, add_1135, add_1136, add_1137, add_1138, add_1139, add_1140, add_1141, add_1142, add_1143, add_1144, add_1145, add_1146, add_1147, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1035, mul_1036, mul_1037, mul_1038, mul_1039, mul_1040, mul_1041, mul_1042, mul_1043, mul_1044, mul_1045, mul_1046, mul_1047, mul_1048, mul_1049, mul_1050, mul_1051, mul_1052, mul_1053, mul_1054, mul_1055, mul_1056, mul_1057, mul_1058, mul_1059, mul_1060, mul_1061, mul_1062, mul_1063, mul_1064, mul_1065, mul_1066, mul_1067, mul_1068, mul_1069, mul_1070, mul_1071, mul_1072, mul_1073, mul_1074, mul_1075, mul_1076, mul_1077, mul_1078, mul_1079, mul_1080, mul_1081, mul_1082, mul_1083, mul_1084, mul_1085, mul_1086, mul_1087, mul_1088, mul_1089, mul_1090, mul_1091, mul_1092, mul_1093, mul_1094, mul_1095, mul_1096, mul_1097, mul_1098, mul_1099, mul_1100, mul_1101, mul_1102, mul_1103, mul_1104, mul_1105, mul_1106, mul_1107, mul_1108, mul_1109, mul_1110, mul_1111, mul_1112, mul_1113, mul_1114, mul_1115, mul_1116, mul_1117, mul_1118, mul_1119, mul_1120, mul_1121, mul_1122, mul_1123, mul_1124, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1355
# add_10 => add_18
# add_1058 => add_1263
# add_1059 => add_1264
# add_1060 => add_1265
# add_1061 => add_1266
# add_1062 => add_1267
# add_1063 => add_1268
# add_1064 => add_1269
# add_1065 => add_1270
# add_1066 => add_1271
# add_1067 => add_1272
# add_1068 => add_1273
# add_1069 => add_1274
# add_1070 => add_1275
# add_1071 => add_1276
# add_1072 => add_1277
# add_1073 => add_1278
# add_1074 => add_1279
# add_1075 => add_1280
# add_1076 => add_1281
# add_1077 => add_1282
# add_1078 => add_1283
# add_1079 => add_1284
# add_1080 => add_1285
# add_1081 => add_1286
# add_1082 => add_1287
# add_1083 => add_1288
# add_1084 => add_1289
# add_1085 => add_1290
# add_1086 => add_1291
# add_1087 => add_1292
# add_1088 => add_1293
# add_1089 => add_1294
# add_1090 => add_1295
# add_1091 => add_1296
# add_1092 => add_1297
# add_1093 => add_1298
# add_1094 => add_1299
# add_1095 => add_1300
# add_1096 => add_1301
# add_1097 => add_1302
# add_1098 => add_1303
# add_1099 => add_1304
# add_1100 => add_1305
# add_1101 => add_1306
# add_1102 => add_1307
# add_1103 => add_1308
# add_1104 => add_1309, add_1356
# add_1105 => add_1310
# add_1106 => add_1311
# add_1107 => add_1312
# add_1108 => add_1313
# add_1109 => add_1314
# add_1110 => add_1315
# add_1111 => add_1316
# add_1112 => add_1317
# add_1113 => add_1318
# add_1114 => add_1319
# add_1115 => add_1320
# add_1116 => add_1321
# add_1117 => add_1322
# add_1118 => add_1323
# add_1119 => add_1324
# add_1120 => add_1325
# add_1121 => add_1326
# add_1122 => add_1327
# add_1123 => add_1328
# add_1124 => add_1329
# add_1125 => add_1330
# add_1126 => add_1331
# add_1127 => add_1332, add_1357
# add_1128 => add_1333
# add_1129 => add_1334
# add_1130 => add_1335
# add_1131 => add_1336
# add_1132 => add_1337
# add_1133 => add_1338
# add_1134 => add_1339
# add_1135 => add_1340
# add_1136 => add_1341
# add_1137 => add_1342
# add_1138 => add_1343
# add_1139 => add_1344
# add_1140 => add_1345
# add_1141 => add_1346
# add_1142 => add_1347
# add_1143 => add_1348
# add_1144 => add_1349
# add_1145 => add_1350
# add_1146 => add_1351
# add_1147 => add_1352
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_410
# float_2 => convert_element_type_412
# float_3 => convert_element_type_414
# mean => mean_113
# mean_1 => mean_114
# mean_2 => mean_115
# mul => mul_1719
# mul_1 => mul_1720
# mul_1035 => mul_1627
# mul_1036 => mul_1628
# mul_1037 => mul_1629
# mul_1038 => mul_1630
# mul_1039 => mul_1631
# mul_1040 => mul_1632
# mul_1041 => mul_1633
# mul_1042 => mul_1634
# mul_1043 => mul_1635
# mul_1044 => mul_1636
# mul_1045 => mul_1637
# mul_1046 => mul_1638
# mul_1047 => mul_1639
# mul_1048 => mul_1640
# mul_1049 => mul_1641
# mul_1050 => mul_1642
# mul_1051 => mul_1643
# mul_1052 => mul_1644
# mul_1053 => mul_1645
# mul_1054 => mul_1646
# mul_1055 => mul_1647
# mul_1056 => mul_1648
# mul_1057 => mul_1649
# mul_1058 => mul_1650
# mul_1059 => mul_1651
# mul_1060 => mul_1652
# mul_1061 => mul_1653
# mul_1062 => mul_1654
# mul_1063 => mul_1655
# mul_1064 => mul_1656
# mul_1065 => mul_1657
# mul_1066 => mul_1658
# mul_1067 => mul_1659
# mul_1068 => mul_1660
# mul_1069 => mul_1661
# mul_1070 => mul_1662
# mul_1071 => mul_1663
# mul_1072 => mul_1664
# mul_1073 => mul_1665
# mul_1074 => mul_1666
# mul_1075 => mul_1667
# mul_1076 => mul_1668
# mul_1077 => mul_1669
# mul_1078 => mul_1670
# mul_1079 => mul_1671
# mul_1080 => mul_1672
# mul_1081 => mul_1673
# mul_1082 => mul_1674
# mul_1083 => mul_1675
# mul_1084 => mul_1676
# mul_1085 => mul_1677
# mul_1086 => mul_1678
# mul_1087 => mul_1679
# mul_1088 => mul_1680
# mul_1089 => mul_1681
# mul_1090 => mul_1682
# mul_1091 => mul_1683
# mul_1092 => mul_1684
# mul_1093 => mul_1685
# mul_1094 => mul_1686
# mul_1095 => mul_1687
# mul_1096 => mul_1688
# mul_1097 => mul_1689
# mul_1098 => mul_1690
# mul_1099 => mul_1691
# mul_1100 => mul_1692
# mul_1101 => mul_1693
# mul_1102 => mul_1694
# mul_1103 => mul_1695
# mul_1104 => mul_1696
# mul_1105 => mul_1697
# mul_1106 => mul_1698
# mul_1107 => mul_1699
# mul_1108 => mul_1700
# mul_1109 => mul_1701
# mul_1110 => mul_1702
# mul_1111 => mul_1703
# mul_1112 => mul_1704
# mul_1113 => mul_1705
# mul_1114 => mul_1706
# mul_1115 => mul_1707
# mul_1116 => mul_1708
# mul_1117 => mul_1709
# mul_1118 => mul_1710
# mul_1119 => mul_1711
# mul_1120 => mul_1712
# mul_1121 => mul_1713
# mul_1122 => mul_1714
# mul_1123 => mul_1715
# mul_1124 => mul_1716
# mul_2 => mul_1721
# mul_3 => mul_1722
# mul_4 => mul_1723, mul_24
# mul_5 => mul_1724
# mul_6 => mul_1725
# mul_7 => mul_1726
# mul_8 => mul_1727
# rsqrt => rsqrt_113
# rsqrt_1 => rsqrt_114
# rsqrt_2 => rsqrt_115
# type_as => convert_element_type_411
# type_as_1 => convert_element_type_413
# type_as_2 => convert_element_type_415
triton_red_fused__to_copy_add_mean_mul_rsqrt_57 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_57', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp32', 148: '*fp32', 149: '*fp32', 150: '*fp32', 151: '*fp16', 152: '*fp32', 153: '*fp16', 154: '*fp32', 155: '*fp16', 156: 'i32', 157: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_57', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(156, 157))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_57(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, in_ptr130, in_ptr131, in_ptr132, in_ptr133, in_ptr134, in_ptr135, in_ptr136, in_ptr137, in_ptr138, in_ptr139, in_ptr140, in_ptr141, in_ptr142, in_ptr143, in_ptr144, in_ptr145, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr2 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp13 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr9 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr10 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr11 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr12 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr13 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr14 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr15 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr16 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr17 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr18 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr21 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr25 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr29 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr30 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr31 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr32 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr33 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr34 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr35 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr36 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr37 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr44 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr47 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr48 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr49 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr50 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr51 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr52 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr53 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr54 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr55 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr56 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr59 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr63 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr66 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr67 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr68 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr69 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr70 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr71 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr72 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr73 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr74 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr75 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr78 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr82 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr85 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr86 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr87 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr88 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr89 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr90 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr91 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr92 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr93 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr94 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr97 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr101 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr104 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr105 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr106 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr107 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr108 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr109 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr110 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr111 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr112 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr113 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr116 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr120 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr123 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp307 = tl.load(in_ptr124 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp310 = tl.load(in_ptr125 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr126 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp316 = tl.load(in_ptr127 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp319 = tl.load(in_ptr128 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp322 = tl.load(in_ptr129 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp325 = tl.load(in_ptr130 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp328 = tl.load(in_ptr131 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp331 = tl.load(in_ptr132 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp337 = tl.load(in_ptr135 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp346 = tl.load(in_ptr139 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp349 = tl.load(in_ptr140 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp353 = tl.load(in_ptr141 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp356 = tl.load(in_ptr142 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp362 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp285 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp291 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp300 = tl.load(in_ptr122 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp332 = tl.load(in_ptr133 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr134 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp338 = tl.load(in_ptr136 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr137 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_ptr138 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp7 = tmp1 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp5 * tmp9
        tmp11 = tmp4 + tmp10
        tmp14 = tmp13 * tmp1
        tmp15 = tmp14 + tmp3
        tmp17 = tmp15 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp12 * tmp19
        tmp21 = tmp11 + tmp20
        tmp23 = tmp22 * tmp1
        tmp24 = tmp23 + tmp3
        tmp26 = tmp25 * tmp9
        tmp27 = tmp24 + tmp26
        tmp29 = tmp28 * tmp19
        tmp30 = tmp27 + tmp29
        tmp32 = tmp31 * tmp1
        tmp33 = tmp32 + tmp3
        tmp35 = tmp34 * tmp9
        tmp36 = tmp33 + tmp35
        tmp38 = tmp37 * tmp19
        tmp39 = tmp36 + tmp38
        tmp41 = tmp40 * tmp1
        tmp42 = tmp41 + tmp3
        tmp44 = tmp43 * tmp9
        tmp45 = tmp42 + tmp44
        tmp47 = tmp46 * tmp19
        tmp48 = tmp45 + tmp47
        tmp52 = tmp50 + tmp51
        tmp53 = tmp49 * tmp52
        tmp54 = tmp21 + tmp53
        tmp58 = tmp56 + tmp57
        tmp60 = tmp58 + tmp59
        tmp61 = tmp55 * tmp60
        tmp62 = tmp54 + tmp61
        tmp66 = tmp64 + tmp65
        tmp67 = tmp63 * tmp66
        tmp68 = tmp62 + tmp67
        tmp70 = tmp69 * tmp52
        tmp71 = tmp30 + tmp70
        tmp73 = tmp72 * tmp60
        tmp74 = tmp71 + tmp73
        tmp76 = tmp75 * tmp66
        tmp77 = tmp74 + tmp76
        tmp79 = tmp78 * tmp52
        tmp80 = tmp39 + tmp79
        tmp82 = tmp81 * tmp60
        tmp83 = tmp80 + tmp82
        tmp85 = tmp84 * tmp66
        tmp86 = tmp83 + tmp85
        tmp88 = tmp87 * tmp52
        tmp89 = tmp48 + tmp88
        tmp91 = tmp90 * tmp60
        tmp92 = tmp89 + tmp91
        tmp94 = tmp93 * tmp66
        tmp95 = tmp92 + tmp94
        tmp99 = tmp97 + tmp98
        tmp100 = tmp96 * tmp99
        tmp101 = tmp68 + tmp100
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp102 * tmp107
        tmp109 = tmp101 + tmp108
        tmp113 = tmp111 + tmp112
        tmp114 = tmp110 * tmp113
        tmp115 = tmp109 + tmp114
        tmp117 = tmp116 * tmp99
        tmp118 = tmp77 + tmp117
        tmp120 = tmp119 * tmp107
        tmp121 = tmp118 + tmp120
        tmp123 = tmp122 * tmp113
        tmp124 = tmp121 + tmp123
        tmp126 = tmp125 * tmp99
        tmp127 = tmp86 + tmp126
        tmp129 = tmp128 * tmp107
        tmp130 = tmp127 + tmp129
        tmp132 = tmp131 * tmp113
        tmp133 = tmp130 + tmp132
        tmp135 = tmp134 * tmp99
        tmp136 = tmp95 + tmp135
        tmp138 = tmp137 * tmp107
        tmp139 = tmp136 + tmp138
        tmp141 = tmp140 * tmp113
        tmp142 = tmp139 + tmp141
        tmp146 = tmp144 + tmp145
        tmp147 = tmp143 * tmp146
        tmp148 = tmp115 + tmp147
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp149 * tmp154
        tmp156 = tmp148 + tmp155
        tmp160 = tmp158 + tmp159
        tmp161 = tmp157 * tmp160
        tmp162 = tmp156 + tmp161
        tmp164 = tmp163 * tmp146
        tmp165 = tmp124 + tmp164
        tmp167 = tmp166 * tmp154
        tmp168 = tmp165 + tmp167
        tmp170 = tmp169 * tmp160
        tmp171 = tmp168 + tmp170
        tmp173 = tmp172 * tmp146
        tmp174 = tmp133 + tmp173
        tmp176 = tmp175 * tmp154
        tmp177 = tmp174 + tmp176
        tmp179 = tmp178 * tmp160
        tmp180 = tmp177 + tmp179
        tmp182 = tmp181 * tmp146
        tmp183 = tmp142 + tmp182
        tmp185 = tmp184 * tmp154
        tmp186 = tmp183 + tmp185
        tmp188 = tmp187 * tmp160
        tmp189 = tmp186 + tmp188
        tmp193 = tmp191 + tmp192
        tmp194 = tmp190 * tmp193
        tmp195 = tmp162 + tmp194
        tmp199 = tmp197 + tmp198
        tmp201 = tmp199 + tmp200
        tmp202 = tmp196 * tmp201
        tmp203 = tmp195 + tmp202
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tmp203 + tmp208
        tmp211 = tmp210 * tmp193
        tmp212 = tmp171 + tmp211
        tmp214 = tmp213 * tmp201
        tmp215 = tmp212 + tmp214
        tmp217 = tmp216 * tmp207
        tmp218 = tmp215 + tmp217
        tmp220 = tmp219 * tmp193
        tmp221 = tmp180 + tmp220
        tmp223 = tmp222 * tmp201
        tmp224 = tmp221 + tmp223
        tmp226 = tmp225 * tmp207
        tmp227 = tmp224 + tmp226
        tmp229 = tmp228 * tmp193
        tmp230 = tmp189 + tmp229
        tmp232 = tmp231 * tmp201
        tmp233 = tmp230 + tmp232
        tmp235 = tmp234 * tmp207
        tmp236 = tmp233 + tmp235
        tmp240 = tmp238 + tmp239
        tmp241 = tmp237 * tmp240
        tmp242 = tmp209 + tmp241
        tmp246 = tmp244 + tmp245
        tmp248 = tmp246 + tmp247
        tmp249 = tmp243 * tmp248
        tmp250 = tmp242 + tmp249
        tmp254 = tmp252 + tmp253
        tmp255 = tmp251 * tmp254
        tmp256 = tmp250 + tmp255
        tmp258 = tmp257 * tmp240
        tmp259 = tmp218 + tmp258
        tmp261 = tmp260 * tmp248
        tmp262 = tmp259 + tmp261
        tmp264 = tmp263 * tmp254
        tmp265 = tmp262 + tmp264
        tmp267 = tmp266 * tmp240
        tmp268 = tmp227 + tmp267
        tmp270 = tmp269 * tmp248
        tmp271 = tmp268 + tmp270
        tmp273 = tmp272 * tmp254
        tmp274 = tmp271 + tmp273
        tmp276 = tmp275 * tmp240
        tmp277 = tmp236 + tmp276
        tmp279 = tmp278 * tmp248
        tmp280 = tmp277 + tmp279
        tmp282 = tmp281 * tmp254
        tmp283 = tmp280 + tmp282
        tmp287 = tmp285 + tmp286
        tmp288 = tmp284 * tmp287
        tmp289 = tmp256 + tmp288
        tmp293 = tmp291 + tmp292
        tmp295 = tmp293 + tmp294
        tmp296 = tmp290 * tmp295
        tmp297 = tmp289 + tmp296
        tmp301 = tmp299 + tmp300
        tmp302 = tmp298 * tmp301
        tmp303 = tmp297 + tmp302
        tmp305 = tmp304 * tmp287
        tmp306 = tmp265 + tmp305
        tmp308 = tmp307 * tmp295
        tmp309 = tmp306 + tmp308
        tmp311 = tmp310 * tmp301
        tmp312 = tmp309 + tmp311
        tmp314 = tmp313 * tmp287
        tmp315 = tmp274 + tmp314
        tmp317 = tmp316 * tmp295
        tmp318 = tmp315 + tmp317
        tmp320 = tmp319 * tmp301
        tmp321 = tmp318 + tmp320
        tmp323 = tmp322 * tmp287
        tmp324 = tmp283 + tmp323
        tmp326 = tmp325 * tmp295
        tmp327 = tmp324 + tmp326
        tmp329 = tmp328 * tmp301
        tmp330 = tmp327 + tmp329
        tmp334 = tmp332 + tmp333
        tmp335 = tmp331 * tmp334
        tmp336 = tmp303 + tmp335
        tmp340 = tmp338 + tmp339
        tmp342 = tmp340 + tmp341
        tmp343 = tmp337 * tmp342
        tmp344 = tmp336 + tmp343
        tmp345 = tmp344.to(tl.float32)
        tmp347 = tmp346 * tmp334
        tmp348 = tmp312 + tmp347
        tmp350 = tmp349 * tmp342
        tmp351 = tmp348 + tmp350
        tmp352 = tmp351.to(tl.float32)
        tmp354 = tmp353 * tmp334
        tmp355 = tmp321 + tmp354
        tmp357 = tmp356 * tmp342
        tmp358 = tmp355 + tmp357
        tmp359 = tmp358.to(tl.float32)
        tmp360 = tmp345 * tmp345
        tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
        tmp363 = _tmp362 + tmp361
        _tmp362 = tl.where(rmask, tmp363, _tmp362)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp330, rmask)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp345, rmask)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp352, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp359, rmask)
    tmp362 = tl.sum(_tmp362, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp362, None)
    _tmp377 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp364 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp372 = tl.load(in_ptr143 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp374 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp365 = 2048.0
        tmp366 = tmp362 / tmp365
        tmp367 = 1e-05
        tmp368 = tmp366 + tmp367
        tmp369 = tl.math.rsqrt(tmp368)
        tmp370 = tmp364 * tmp369
        tmp371 = tmp370.to(tl.float32)
        tmp373 = tmp371 * tmp372
        tmp375 = tmp374 * tmp374
        tmp376 = tl.broadcast_to(tmp375, [XBLOCK, RBLOCK])
        tmp378 = _tmp377 + tmp376
        _tmp377 = tl.where(rmask, tmp378, _tmp377)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp373, rmask)
    tmp377 = tl.sum(_tmp377, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp377, None)
    _tmp392 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp379 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0)
        tmp387 = tl.load(in_ptr144 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp389 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp380 = 2048.0
        tmp381 = tmp377 / tmp380
        tmp382 = 1e-05
        tmp383 = tmp381 + tmp382
        tmp384 = tl.math.rsqrt(tmp383)
        tmp385 = tmp379 * tmp384
        tmp386 = tmp385.to(tl.float32)
        tmp388 = tmp386 * tmp387
        tmp390 = tmp389 * tmp389
        tmp391 = tl.broadcast_to(tmp390, [XBLOCK, RBLOCK])
        tmp393 = _tmp392 + tmp391
        _tmp392 = tl.where(rmask, tmp393, _tmp392)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp388, rmask)
    tmp392 = tl.sum(_tmp392, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp392, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp394 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp402 = tl.load(in_ptr145 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp395 = 2048.0
        tmp396 = tmp392 / tmp395
        tmp397 = 1e-05
        tmp398 = tmp396 + tmp397
        tmp399 = tl.math.rsqrt(tmp398)
        tmp400 = tmp394 * tmp399
        tmp401 = tmp400.to(tl.float32)
        tmp403 = tmp401 * tmp402
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp403, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/aw/cawko3toronrlgo6fubw7hpytr6ov4ajng3qhh4lj2xmbczrcbtn.py
# Source Nodes: [add_1148, add_1149, add_1150, add_1151, add_882, add_966, add_968, float_6, mean_3, mul_1125, mul_1126, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1148 => add_1353
# add_1149 => add_1354
# add_1150 => add_1360
# add_1151 => add_1361
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# float_6 => convert_element_type_422
# mean_3 => mean_116
# mul_1125 => mul_1717
# mul_1126 => mul_1718
# mul_18 => mul_1737
# mul_19 => mul_1738
# mul_20 => mul_1739
# rsqrt_3 => rsqrt_116
# type_as_5 => convert_element_type_423
triton_red_fused__to_copy_add_mean_mul_rsqrt_58 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_58', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp16', 12: 'i32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_58', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(12, 13))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_58(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp7 = tl.load(in_ptr4 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp2 + tmp3
        tmp5 = tmp1 * tmp4
        tmp6 = tmp0 + tmp5
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp7 * tmp12
        tmp14 = tmp6 + tmp13
        tmp16 = tmp14 + tmp15
        tmp17 = tmp16.to(tl.float32)
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp16, rmask)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp20, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp22 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr8 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp23 = tmp22.to(tl.float32)
        tmp24 = 2048.0
        tmp25 = tmp20 / tmp24
        tmp26 = 1e-05
        tmp27 = tmp25 + tmp26
        tmp28 = tl.math.rsqrt(tmp27)
        tmp29 = tmp23 * tmp28
        tmp30 = tmp29.to(tl.float32)
        tmp32 = tmp30 * tmp31
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/rh/crh55obpwcfi2nq7qary6bss3w3kt5jkae42tmgwtkbhe4lc2qwj.py
# Source Nodes: [add_1152], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_1152 => add_1362
triton_red_fused_add_div_mul_pow_sum_59 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_59', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_59', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_59(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp9 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tmp8 * tmp9
        tmp11 = -0.5
        tmp12 = tmp6 * tmp11
        tmp13 = tmp9 * tmp9
        tmp14 = tmp13 * tmp9
        tmp15 = tmp12 * tmp14
        tmp16 = 2048.0
        tmp17 = tmp15 / tmp16
        tmp20 = tmp18 + tmp19
        tmp21 = 2.0
        tmp22 = tmp20 * tmp21
        tmp23 = tmp17 * tmp22
        tmp24 = tmp10 + tmp23
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/yi/cyilgn7wi7ma3jmwcz7bqfkew2ixt6gao62vdu7glnc2lac3mn3y.py
# Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
# silu => convert_element_type_424, convert_element_type_425, mul_1740, sigmoid_23
triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60 = async_compile.triton('triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[67108864], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]})
@triton.jit
def triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60(in_out_ptr0, in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 34603008
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0), None).to(tl.float32)
    tmp7 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tmp1.to(tl.float32)
    tmp3 = tl.sigmoid(tmp2)
    tmp4 = tmp2 * tmp3
    tmp5 = tmp4.to(tl.float32)
    tmp6 = tmp0 * tmp5
    tmp8 = tmp0 * tmp7
    tmp9 = tl.sigmoid(tmp1)
    tmp10 = 1.0
    tmp11 = tmp10 - tmp9
    tmp12 = tmp1 * tmp11
    tmp13 = tmp12 + tmp10
    tmp14 = tmp9 * tmp13
    tmp15 = tmp8 * tmp14
    tl.store(out_ptr0 + (x0), tmp6, None)
    tl.store(in_out_ptr0 + (x0), tmp15, None)
''')


# kernel path: /tmp/torchinductor_mengqy/k6/ck632shlub5apno5ck45pcpplbiqvmwiuueildeubd5on5apqzu2.py
# Source Nodes: [add_1151, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_1151 => add_1361
# float_6 => convert_element_type_422
# mean_3 => mean_116
# mul_18 => mul_1737
# mul_19 => mul_1738
# rsqrt_3 => rsqrt_116
# type_as_5 => convert_element_type_423
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr3 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp3.to(tl.float32)
        tmp6 = 2048.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-05
        tmp9 = tmp7 + tmp8
        tmp10 = tl.math.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp2 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp15, None)
''')


# kernel path: /tmp/torchinductor_mengqy/na/cnaq5ahpkjwol3xe6alm5ldntwi52lit5ntr7kbsqb64iajxarpn.py
# Source Nodes: [add_1151, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_1151 => add_1361
# float_6 => convert_element_type_422
# mean_3 => mean_116
# mul_18 => mul_1737
# rsqrt_3 => rsqrt_116
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp10 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp5 = tmp4.to(tl.float32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 * tmp7
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
        tmp11 = _tmp10 + tmp9
        _tmp10 = tl.where(rmask, tmp11, _tmp10)
    tmp10 = tl.sum(_tmp10, 1)[:, None]
    tmp19 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp12 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tmp13 + tmp14
        tmp17 = tmp15 * tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp20 = 2048.0
        tmp21 = tmp19 / tmp20
        tmp22 = 1e-05
        tmp23 = tmp21 + tmp22
        tmp24 = tl.math.rsqrt(tmp23)
        tmp25 = tmp18 * tmp24
        tmp26 = -0.5
        tmp27 = tmp10 * tmp26
        tmp28 = tmp24 * tmp24
        tmp29 = tmp28 * tmp24
        tmp30 = tmp27 * tmp29
        tmp31 = tmp30 / tmp20
        tmp33 = tmp32.to(tl.float32)
        tmp34 = tmp31 * tmp33
        tmp35 = tmp25 + tmp34
        tmp36 = tmp35 + tmp34
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp12 + tmp37
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp38, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/pq/cpqqv54pi3d7bykiak4b2kdveiuicyexumipajnizxq7yjhx4kim.py
# Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
# cross_entropy => scalar_tensor_25
triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63 = async_compile.triton('triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*i1', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp1 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    x2 = xindex % 2048
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr2 + (r1 + (2048*x2)), rmask, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp10 * tmp12
        tmp14 = tmp12 * tmp6
        tmp15 = tmp13 - tmp14
        tmp16 = tmp15.to(tl.float32)
        tmp17 = 0.0
        tmp18 = tl.where(tmp8, tmp16, tmp17)
        tmp19 = 0.08838834764831843
        tmp20 = tmp18 * tmp19
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp20, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/rl/crlditfrvwhd4db6xy3bg6eqwaunpmmakejr3bzywt5blczyabbo.py
# Source Nodes: [], Original ATen: [aten._to_copy]

triton_poi_fused__to_copy_64 = async_compile.triton('triton_poi_fused__to_copy_64', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[8192, 2048], tile_hint=TileHint.DEFAULT,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_64', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]})
@triton.jit
def triton_poi_fused__to_copy_64(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 6144
    xnumel = 2048
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex % 128
    x3 = (xindex // 128)
    y0 = yindex % 2048
    y1 = (yindex // 2048)
    x5 = xindex
    y4 = yindex
    tmp3 = tl.load(in_ptr0 + (2048 + y0 + (4096*(x2 % 64)) + (262144*x3) + (4194304*y1)), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr1 + ((2*(x2 % 64)) + (128*y0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr2 + ((2*(x2 % 64)) + (128*y0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr0 + (y0 + (4096*(x2 % 64)) + (262144*x3) + (4194304*y1)), None, eviction_policy='evict_last').to(tl.float32)
    tmp27 = tl.load(in_ptr3 + (1 + (2*(x2 % 64)) + (128*y0) + (262144*x3) + (4194304*y1)), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr3 + ((2*(x2 % 64)) + (128*y0) + (262144*x3) + (4194304*y1)), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = (x2 // 64)
    tmp1 = tl.full([1, 1], 0, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp4 = tmp3.to(tl.float32)
    tmp6 = tmp5.to(tl.float32)
    tmp7 = tmp4 * tmp6
    tmp8 = 0.0
    tmp9 = tl.where(tmp2, tmp7, tmp8)
    tmp10 = tl.full([1, 1], 1, tl.int32)
    tmp11 = tmp0 == tmp10
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp4 * tmp13
    tmp15 = tl.where(tmp11, tmp14, tmp8)
    tmp16 = tmp9 + tmp15
    tmp18 = tmp17.to(tl.float32)
    tmp19 = -tmp18
    tmp20 = tmp19 * tmp6
    tmp21 = tl.where(tmp11, tmp20, tmp8)
    tmp22 = tmp16 + tmp21
    tmp23 = tmp18 * tmp13
    tmp24 = tl.where(tmp2, tmp23, tmp8)
    tmp25 = tmp22 + tmp24
    tmp26 = tmp25.to(tl.float32)
    tmp28 = tmp27.to(tl.float32)
    tmp29 = tmp28 * tmp6
    tmp30 = tl.where(tmp2, tmp29, tmp8)
    tmp31 = tmp28 * tmp13
    tmp32 = tl.where(tmp11, tmp31, tmp8)
    tmp33 = tmp30 + tmp32
    tmp35 = tmp34.to(tl.float32)
    tmp36 = -tmp35
    tmp37 = tmp36 * tmp6
    tmp38 = tl.where(tmp11, tmp37, tmp8)
    tmp39 = tmp33 + tmp38
    tmp40 = tmp35 * tmp13
    tmp41 = tl.where(tmp2, tmp40, tmp8)
    tmp42 = tmp39 + tmp41
    tmp43 = tmp42.to(tl.float32)
    tl.store(out_ptr0 + (x5 + (2048*y4)), tmp26, None)
    tl.store(out_ptr1 + (x5 + (2048*y4)), tmp43, None)
''')


# kernel path: /tmp/torchinductor_mengqy/z2/cz25eadf5uujg5swzo5s3ilmm7gvpcvc3x3ou2zxtl2kyzwwrhns.py
# Source Nodes: [add_1127, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_1127 => add_1357
# mean_2 => mean_115
# mul_6 => mul_1725
# mul_7 => mul_1726
# rsqrt_2 => rsqrt_115
# type_as_2 => convert_element_type_415
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tl.load(in_ptr2 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp3 = 2048.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-05
        tmp6 = tmp4 + tmp5
        tmp7 = tl.math.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp0 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp12, None)
''')


# kernel path: /tmp/torchinductor_mengqy/n3/cn3oddn4sxps4rmjf4cyqsc2ld5yv32ghqiizj4yd6xfc7pnjygq.py
# Source Nodes: [add_1104, add_1127, add_128, add_162, add_198, add_200, add_242, add_288, add_336, add_338, add_392, add_450, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, mean_1, mean_2, mul_3, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_1104 => add_1356
# add_1127 => add_1357
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# mean_1 => mean_114
# mean_2 => mean_115
# mul_3 => mul_1722
# mul_6 => mul_1725
# rsqrt_1 => rsqrt_114
# rsqrt_2 => rsqrt_115
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_66 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_66', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: 'i32', 103: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_66', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(102, 103))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_66(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, out_ptr1, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, out_ptr46, out_ptr47, out_ptr48, out_ptr49, out_ptr50, out_ptr51, out_ptr52, out_ptr53, out_ptr54, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tmp34 = tmp33.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tmp44 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp70 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp62 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tmp40 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = 2048.0
        tmp46 = tmp44 / tmp45
        tmp47 = 1e-05
        tmp48 = tmp46 + tmp47
        tmp49 = tl.math.rsqrt(tmp48)
        tmp50 = tmp43 * tmp49
        tmp51 = -0.5
        tmp52 = tmp38 * tmp51
        tmp53 = tmp49 * tmp49
        tmp54 = tmp53 * tmp49
        tmp55 = tmp52 * tmp54
        tmp56 = tmp55 / tmp45
        tmp58 = tmp56 * tmp57
        tmp59 = tmp50 + tmp58
        tmp60 = tmp59 + tmp58
        tmp61 = tmp60.to(tl.float32)
        tmp65 = tmp63 + tmp64
        tmp67 = tmp65 + tmp66
        tmp68 = tmp62 * tmp67
        tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
        tmp71 = _tmp70 + tmp69
        _tmp70 = tl.where(rmask, tmp71, _tmp70)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp61, rmask)
    tmp70 = tl.sum(_tmp70, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp70, None)
    _tmp80 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp85 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp93 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp97 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp108 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp112 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp116 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp125 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp140 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp144 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp148 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp155 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp159 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp163 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp172 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp176 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp180 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp187 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp191 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp195 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp202 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp206 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp210 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp219 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp223 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp227 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp234 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp238 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp242 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp249 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp274 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp281 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp285 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp289 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp296 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp300 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp304 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp313 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp317 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp321 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp328 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp332 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp336 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp72 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp119 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp168 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp213 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp215 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp230 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp262 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp276 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp277 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp291 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp306 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp323 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp324 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp75 = tmp73 + tmp74
        tmp77 = tmp75 + tmp76
        tmp78 = tmp72 * tmp77
        tmp79 = tl.broadcast_to(tmp78, [XBLOCK, RBLOCK])
        tmp81 = _tmp80 + tmp79
        _tmp80 = tl.where(rmask, tmp81, _tmp80)
        tmp83 = tmp82 * tmp77
        tmp84 = tl.broadcast_to(tmp83, [XBLOCK, RBLOCK])
        tmp86 = _tmp85 + tmp84
        _tmp85 = tl.where(rmask, tmp86, _tmp85)
        tmp90 = tmp88 + tmp89
        tmp91 = tmp87 * tmp90
        tmp92 = tl.broadcast_to(tmp91, [XBLOCK, RBLOCK])
        tmp94 = _tmp93 + tmp92
        _tmp93 = tl.where(rmask, tmp94, _tmp93)
        tmp95 = tmp72 * tmp90
        tmp96 = tl.broadcast_to(tmp95, [XBLOCK, RBLOCK])
        tmp98 = _tmp97 + tmp96
        _tmp97 = tl.where(rmask, tmp98, _tmp97)
        tmp99 = tmp82 * tmp90
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tmp105 = tmp103 + tmp104
        tmp106 = tmp87 * tmp105
        tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
        tmp109 = _tmp108 + tmp107
        _tmp108 = tl.where(rmask, tmp109, _tmp108)
        tmp110 = tmp72 * tmp105
        tmp111 = tl.broadcast_to(tmp110, [XBLOCK, RBLOCK])
        tmp113 = _tmp112 + tmp111
        _tmp112 = tl.where(rmask, tmp113, _tmp112)
        tmp114 = tmp82 * tmp105
        tmp115 = tl.broadcast_to(tmp114, [XBLOCK, RBLOCK])
        tmp117 = _tmp116 + tmp115
        _tmp116 = tl.where(rmask, tmp117, _tmp116)
        tmp120 = tmp118 + tmp119
        tmp122 = tmp120 + tmp121
        tmp123 = tmp87 * tmp122
        tmp124 = tl.broadcast_to(tmp123, [XBLOCK, RBLOCK])
        tmp126 = _tmp125 + tmp124
        _tmp125 = tl.where(rmask, tmp126, _tmp125)
        tmp127 = tmp72 * tmp122
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp131 = tmp82 * tmp122
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp137 = tmp135 + tmp136
        tmp138 = tmp87 * tmp137
        tmp139 = tl.broadcast_to(tmp138, [XBLOCK, RBLOCK])
        tmp141 = _tmp140 + tmp139
        _tmp140 = tl.where(rmask, tmp141, _tmp140)
        tmp142 = tmp72 * tmp137
        tmp143 = tl.broadcast_to(tmp142, [XBLOCK, RBLOCK])
        tmp145 = _tmp144 + tmp143
        _tmp144 = tl.where(rmask, tmp145, _tmp144)
        tmp146 = tmp82 * tmp137
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
        tmp149 = _tmp148 + tmp147
        _tmp148 = tl.where(rmask, tmp149, _tmp148)
        tmp152 = tmp150 + tmp151
        tmp153 = tmp87 * tmp152
        tmp154 = tl.broadcast_to(tmp153, [XBLOCK, RBLOCK])
        tmp156 = _tmp155 + tmp154
        _tmp155 = tl.where(rmask, tmp156, _tmp155)
        tmp157 = tmp72 * tmp152
        tmp158 = tl.broadcast_to(tmp157, [XBLOCK, RBLOCK])
        tmp160 = _tmp159 + tmp158
        _tmp159 = tl.where(rmask, tmp160, _tmp159)
        tmp161 = tmp82 * tmp152
        tmp162 = tl.broadcast_to(tmp161, [XBLOCK, RBLOCK])
        tmp164 = _tmp163 + tmp162
        _tmp163 = tl.where(rmask, tmp164, _tmp163)
        tmp167 = tmp165 + tmp166
        tmp169 = tmp167 + tmp168
        tmp170 = tmp87 * tmp169
        tmp171 = tl.broadcast_to(tmp170, [XBLOCK, RBLOCK])
        tmp173 = _tmp172 + tmp171
        _tmp172 = tl.where(rmask, tmp173, _tmp172)
        tmp174 = tmp72 * tmp169
        tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
        tmp177 = _tmp176 + tmp175
        _tmp176 = tl.where(rmask, tmp177, _tmp176)
        tmp178 = tmp82 * tmp169
        tmp179 = tl.broadcast_to(tmp178, [XBLOCK, RBLOCK])
        tmp181 = _tmp180 + tmp179
        _tmp180 = tl.where(rmask, tmp181, _tmp180)
        tmp184 = tmp182 + tmp183
        tmp185 = tmp87 * tmp184
        tmp186 = tl.broadcast_to(tmp185, [XBLOCK, RBLOCK])
        tmp188 = _tmp187 + tmp186
        _tmp187 = tl.where(rmask, tmp188, _tmp187)
        tmp189 = tmp72 * tmp184
        tmp190 = tl.broadcast_to(tmp189, [XBLOCK, RBLOCK])
        tmp192 = _tmp191 + tmp190
        _tmp191 = tl.where(rmask, tmp192, _tmp191)
        tmp193 = tmp82 * tmp184
        tmp194 = tl.broadcast_to(tmp193, [XBLOCK, RBLOCK])
        tmp196 = _tmp195 + tmp194
        _tmp195 = tl.where(rmask, tmp196, _tmp195)
        tmp199 = tmp197 + tmp198
        tmp200 = tmp87 * tmp199
        tmp201 = tl.broadcast_to(tmp200, [XBLOCK, RBLOCK])
        tmp203 = _tmp202 + tmp201
        _tmp202 = tl.where(rmask, tmp203, _tmp202)
        tmp204 = tmp72 * tmp199
        tmp205 = tl.broadcast_to(tmp204, [XBLOCK, RBLOCK])
        tmp207 = _tmp206 + tmp205
        _tmp206 = tl.where(rmask, tmp207, _tmp206)
        tmp208 = tmp82 * tmp199
        tmp209 = tl.broadcast_to(tmp208, [XBLOCK, RBLOCK])
        tmp211 = _tmp210 + tmp209
        _tmp210 = tl.where(rmask, tmp211, _tmp210)
        tmp214 = tmp212 + tmp213
        tmp216 = tmp214 + tmp215
        tmp217 = tmp87 * tmp216
        tmp218 = tl.broadcast_to(tmp217, [XBLOCK, RBLOCK])
        tmp220 = _tmp219 + tmp218
        _tmp219 = tl.where(rmask, tmp220, _tmp219)
        tmp221 = tmp72 * tmp216
        tmp222 = tl.broadcast_to(tmp221, [XBLOCK, RBLOCK])
        tmp224 = _tmp223 + tmp222
        _tmp223 = tl.where(rmask, tmp224, _tmp223)
        tmp225 = tmp82 * tmp216
        tmp226 = tl.broadcast_to(tmp225, [XBLOCK, RBLOCK])
        tmp228 = _tmp227 + tmp226
        _tmp227 = tl.where(rmask, tmp228, _tmp227)
        tmp231 = tmp229 + tmp230
        tmp232 = tmp87 * tmp231
        tmp233 = tl.broadcast_to(tmp232, [XBLOCK, RBLOCK])
        tmp235 = _tmp234 + tmp233
        _tmp234 = tl.where(rmask, tmp235, _tmp234)
        tmp236 = tmp72 * tmp231
        tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
        tmp239 = _tmp238 + tmp237
        _tmp238 = tl.where(rmask, tmp239, _tmp238)
        tmp240 = tmp82 * tmp231
        tmp241 = tl.broadcast_to(tmp240, [XBLOCK, RBLOCK])
        tmp243 = _tmp242 + tmp241
        _tmp242 = tl.where(rmask, tmp243, _tmp242)
        tmp246 = tmp244 + tmp245
        tmp247 = tmp87 * tmp246
        tmp248 = tl.broadcast_to(tmp247, [XBLOCK, RBLOCK])
        tmp250 = _tmp249 + tmp248
        _tmp249 = tl.where(rmask, tmp250, _tmp249)
        tmp251 = tmp72 * tmp246
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp255 = tmp82 * tmp246
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp261 = tmp259 + tmp260
        tmp263 = tmp261 + tmp262
        tmp264 = tmp87 * tmp263
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tmp268 = tmp72 * tmp263
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp272 = tmp82 * tmp263
        tmp273 = tl.broadcast_to(tmp272, [XBLOCK, RBLOCK])
        tmp275 = _tmp274 + tmp273
        _tmp274 = tl.where(rmask, tmp275, _tmp274)
        tmp278 = tmp276 + tmp277
        tmp279 = tmp87 * tmp278
        tmp280 = tl.broadcast_to(tmp279, [XBLOCK, RBLOCK])
        tmp282 = _tmp281 + tmp280
        _tmp281 = tl.where(rmask, tmp282, _tmp281)
        tmp283 = tmp72 * tmp278
        tmp284 = tl.broadcast_to(tmp283, [XBLOCK, RBLOCK])
        tmp286 = _tmp285 + tmp284
        _tmp285 = tl.where(rmask, tmp286, _tmp285)
        tmp287 = tmp82 * tmp278
        tmp288 = tl.broadcast_to(tmp287, [XBLOCK, RBLOCK])
        tmp290 = _tmp289 + tmp288
        _tmp289 = tl.where(rmask, tmp290, _tmp289)
        tmp293 = tmp291 + tmp292
        tmp294 = tmp87 * tmp293
        tmp295 = tl.broadcast_to(tmp294, [XBLOCK, RBLOCK])
        tmp297 = _tmp296 + tmp295
        _tmp296 = tl.where(rmask, tmp297, _tmp296)
        tmp298 = tmp72 * tmp293
        tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
        tmp301 = _tmp300 + tmp299
        _tmp300 = tl.where(rmask, tmp301, _tmp300)
        tmp302 = tmp82 * tmp293
        tmp303 = tl.broadcast_to(tmp302, [XBLOCK, RBLOCK])
        tmp305 = _tmp304 + tmp303
        _tmp304 = tl.where(rmask, tmp305, _tmp304)
        tmp308 = tmp306 + tmp307
        tmp310 = tmp308 + tmp309
        tmp311 = tmp87 * tmp310
        tmp312 = tl.broadcast_to(tmp311, [XBLOCK, RBLOCK])
        tmp314 = _tmp313 + tmp312
        _tmp313 = tl.where(rmask, tmp314, _tmp313)
        tmp315 = tmp72 * tmp310
        tmp316 = tl.broadcast_to(tmp315, [XBLOCK, RBLOCK])
        tmp318 = _tmp317 + tmp316
        _tmp317 = tl.where(rmask, tmp318, _tmp317)
        tmp319 = tmp82 * tmp310
        tmp320 = tl.broadcast_to(tmp319, [XBLOCK, RBLOCK])
        tmp322 = _tmp321 + tmp320
        _tmp321 = tl.where(rmask, tmp322, _tmp321)
        tmp325 = tmp323 + tmp324
        tmp326 = tmp87 * tmp325
        tmp327 = tl.broadcast_to(tmp326, [XBLOCK, RBLOCK])
        tmp329 = _tmp328 + tmp327
        _tmp328 = tl.where(rmask, tmp329, _tmp328)
        tmp330 = tmp72 * tmp325
        tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
        tmp333 = _tmp332 + tmp331
        _tmp332 = tl.where(rmask, tmp333, _tmp332)
        tmp334 = tmp82 * tmp325
        tmp335 = tl.broadcast_to(tmp334, [XBLOCK, RBLOCK])
        tmp337 = _tmp336 + tmp335
        _tmp336 = tl.where(rmask, tmp337, _tmp336)
    tmp80 = tl.sum(_tmp80, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp80, None)
    tmp85 = tl.sum(_tmp85, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp85, None)
    tmp93 = tl.sum(_tmp93, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp93, None)
    tmp97 = tl.sum(_tmp97, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp97, None)
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp101, None)
    tmp108 = tl.sum(_tmp108, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp108, None)
    tmp112 = tl.sum(_tmp112, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp112, None)
    tmp116 = tl.sum(_tmp116, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp116, None)
    tmp125 = tl.sum(_tmp125, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp125, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp129, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp133, None)
    tmp140 = tl.sum(_tmp140, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp140, None)
    tmp144 = tl.sum(_tmp144, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp144, None)
    tmp148 = tl.sum(_tmp148, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp148, None)
    tmp155 = tl.sum(_tmp155, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp155, None)
    tmp159 = tl.sum(_tmp159, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp159, None)
    tmp163 = tl.sum(_tmp163, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp163, None)
    tmp172 = tl.sum(_tmp172, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp172, None)
    tmp176 = tl.sum(_tmp176, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp176, None)
    tmp180 = tl.sum(_tmp180, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp180, None)
    tmp187 = tl.sum(_tmp187, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp187, None)
    tmp191 = tl.sum(_tmp191, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp191, None)
    tmp195 = tl.sum(_tmp195, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp195, None)
    tmp202 = tl.sum(_tmp202, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp202, None)
    tmp206 = tl.sum(_tmp206, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp206, None)
    tmp210 = tl.sum(_tmp210, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp210, None)
    tmp219 = tl.sum(_tmp219, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp219, None)
    tmp223 = tl.sum(_tmp223, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp223, None)
    tmp227 = tl.sum(_tmp227, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp227, None)
    tmp234 = tl.sum(_tmp234, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp234, None)
    tmp238 = tl.sum(_tmp238, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp238, None)
    tmp242 = tl.sum(_tmp242, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp242, None)
    tmp249 = tl.sum(_tmp249, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp249, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp253, None)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp257, None)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp266, None)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp270, None)
    tmp274 = tl.sum(_tmp274, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp274, None)
    tmp281 = tl.sum(_tmp281, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp281, None)
    tmp285 = tl.sum(_tmp285, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp285, None)
    tmp289 = tl.sum(_tmp289, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp289, None)
    tmp296 = tl.sum(_tmp296, 1)[:, None]
    tl.store(out_ptr46 + (x0), tmp296, None)
    tmp300 = tl.sum(_tmp300, 1)[:, None]
    tl.store(out_ptr47 + (x0), tmp300, None)
    tmp304 = tl.sum(_tmp304, 1)[:, None]
    tl.store(out_ptr48 + (x0), tmp304, None)
    tmp313 = tl.sum(_tmp313, 1)[:, None]
    tl.store(out_ptr49 + (x0), tmp313, None)
    tmp317 = tl.sum(_tmp317, 1)[:, None]
    tl.store(out_ptr50 + (x0), tmp317, None)
    tmp321 = tl.sum(_tmp321, 1)[:, None]
    tl.store(out_ptr51 + (x0), tmp321, None)
    tmp328 = tl.sum(_tmp328, 1)[:, None]
    tl.store(out_ptr52 + (x0), tmp328, None)
    tmp332 = tl.sum(_tmp332, 1)[:, None]
    tl.store(out_ptr53 + (x0), tmp332, None)
    tmp336 = tl.sum(_tmp336, 1)[:, None]
    tl.store(out_ptr54 + (x0), tmp336, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yq/cyqz7qflq7hy7rs6marjnlffycusvkpl5ciipsj5h3yi322yzx5e.py
# Source Nodes: [add_1104, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_1104 => add_1356
# mean_1 => mean_114
# mul_3 => mul_1722
# mul_4 => mul_1723
# rsqrt_1 => rsqrt_114
# type_as_1 => convert_element_type_413
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0)
        tmp2 = tl.load(in_ptr2 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp3 = 2048.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-05
        tmp6 = tmp4 + tmp5
        tmp7 = tl.math.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp0 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp12, None)
''')


# kernel path: /tmp/torchinductor_mengqy/jw/cjwziba6gr5f7qfozhovjhilorbosukhch36z5six3bu757cvghd.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, mean, mul, mul_4, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1355
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# mean => mean_113
# mul => mul_1719
# mul_4 => mul_24
# rsqrt => rsqrt_113
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_68 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_68', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: 'i32', 82: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_68', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(81, 82))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_68(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 + tmp32
        tmp35 = tmp33 + tmp34
        tmp36 = tmp30 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp38, None)
    _tmp46 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp53 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp85 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp92 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp99 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp108 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp115 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp131 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp138 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp145 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp154 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp168 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp186 = tl.load(in_ptr51 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp197 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp48 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp134 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp141 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp147 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp173 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp193 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp201 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp43 = tmp41 + tmp42
        tmp44 = tmp40 * tmp43
        tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
        tmp47 = _tmp46 + tmp45
        _tmp46 = tl.where(rmask, tmp47, _tmp46)
        tmp50 = tmp48 + tmp49
        tmp51 = tmp40 * tmp50
        tmp52 = tl.broadcast_to(tmp51, [XBLOCK, RBLOCK])
        tmp54 = _tmp53 + tmp52
        _tmp53 = tl.where(rmask, tmp54, _tmp53)
        tmp57 = tmp55 + tmp56
        tmp59 = tmp57 + tmp58
        tmp60 = tmp40 * tmp59
        tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
        tmp63 = _tmp62 + tmp61
        _tmp62 = tl.where(rmask, tmp63, _tmp62)
        tmp66 = tmp64 + tmp65
        tmp67 = tmp40 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp73 = tmp71 + tmp72
        tmp74 = tmp40 * tmp73
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tmp80 = tmp78 + tmp79
        tmp82 = tmp80 + tmp81
        tmp83 = tmp40 * tmp82
        tmp84 = tl.broadcast_to(tmp83, [XBLOCK, RBLOCK])
        tmp86 = _tmp85 + tmp84
        _tmp85 = tl.where(rmask, tmp86, _tmp85)
        tmp89 = tmp87 + tmp88
        tmp90 = tmp40 * tmp89
        tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
        tmp93 = _tmp92 + tmp91
        _tmp92 = tl.where(rmask, tmp93, _tmp92)
        tmp96 = tmp94 + tmp95
        tmp97 = tmp40 * tmp96
        tmp98 = tl.broadcast_to(tmp97, [XBLOCK, RBLOCK])
        tmp100 = _tmp99 + tmp98
        _tmp99 = tl.where(rmask, tmp100, _tmp99)
        tmp103 = tmp101 + tmp102
        tmp105 = tmp103 + tmp104
        tmp106 = tmp40 * tmp105
        tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
        tmp109 = _tmp108 + tmp107
        _tmp108 = tl.where(rmask, tmp109, _tmp108)
        tmp112 = tmp110 + tmp111
        tmp113 = tmp40 * tmp112
        tmp114 = tl.broadcast_to(tmp113, [XBLOCK, RBLOCK])
        tmp116 = _tmp115 + tmp114
        _tmp115 = tl.where(rmask, tmp116, _tmp115)
        tmp119 = tmp117 + tmp118
        tmp120 = tmp40 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp126 = tmp124 + tmp125
        tmp128 = tmp126 + tmp127
        tmp129 = tmp40 * tmp128
        tmp130 = tl.broadcast_to(tmp129, [XBLOCK, RBLOCK])
        tmp132 = _tmp131 + tmp130
        _tmp131 = tl.where(rmask, tmp132, _tmp131)
        tmp135 = tmp133 + tmp134
        tmp136 = tmp40 * tmp135
        tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
        tmp139 = _tmp138 + tmp137
        _tmp138 = tl.where(rmask, tmp139, _tmp138)
        tmp142 = tmp140 + tmp141
        tmp143 = tmp40 * tmp142
        tmp144 = tl.broadcast_to(tmp143, [XBLOCK, RBLOCK])
        tmp146 = _tmp145 + tmp144
        _tmp145 = tl.where(rmask, tmp146, _tmp145)
        tmp149 = tmp147 + tmp148
        tmp151 = tmp149 + tmp150
        tmp152 = tmp40 * tmp151
        tmp153 = tl.broadcast_to(tmp152, [XBLOCK, RBLOCK])
        tmp155 = _tmp154 + tmp153
        _tmp154 = tl.where(rmask, tmp155, _tmp154)
        tmp158 = tmp156 + tmp157
        tmp159 = tmp40 * tmp158
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tmp165 = tmp163 + tmp164
        tmp166 = tmp40 * tmp165
        tmp167 = tl.broadcast_to(tmp166, [XBLOCK, RBLOCK])
        tmp169 = _tmp168 + tmp167
        _tmp168 = tl.where(rmask, tmp169, _tmp168)
        tmp172 = tmp170 + tmp171
        tmp174 = tmp172 + tmp173
        tmp175 = tmp40 * tmp174
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp181 = tmp179 + tmp180
        tmp182 = tmp40 * tmp181
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp188 = tmp186 * tmp187
        tmp189 = 0.0
        tmp190 = tmp188 + tmp189
        tmp192 = tmp190 + tmp191
        tmp194 = tmp192 + tmp193
        tmp195 = tmp40 * tmp194
        tmp196 = tl.broadcast_to(tmp195, [XBLOCK, RBLOCK])
        tmp198 = _tmp197 + tmp196
        _tmp197 = tl.where(rmask, tmp198, _tmp197)
        tmp200 = tmp187 + tmp199
        tmp202 = tmp200 + tmp201
        tmp203 = tmp40 * tmp202
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp40 * tmp187
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
    tmp46 = tl.sum(_tmp46, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp46, None)
    tmp53 = tl.sum(_tmp53, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp53, None)
    tmp62 = tl.sum(_tmp62, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp62, None)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp69, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp76, None)
    tmp85 = tl.sum(_tmp85, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp85, None)
    tmp92 = tl.sum(_tmp92, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp92, None)
    tmp99 = tl.sum(_tmp99, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp99, None)
    tmp108 = tl.sum(_tmp108, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp108, None)
    tmp115 = tl.sum(_tmp115, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp115, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp122, None)
    tmp131 = tl.sum(_tmp131, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp131, None)
    tmp138 = tl.sum(_tmp138, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp138, None)
    tmp145 = tl.sum(_tmp145, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp145, None)
    tmp154 = tl.sum(_tmp154, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp154, None)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp161, None)
    tmp168 = tl.sum(_tmp168, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp168, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp177, None)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp184, None)
    tmp197 = tl.sum(_tmp197, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp197, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp209, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ek/ceksr2hkguwazhckgwd5wivshsoxhvzsntnb6e2qedpapertls6c.py
# Source Nodes: [add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_50, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# mul_4 => mul_24
triton_red_fused_add_mul_sum_69 = async_compile.triton('triton_red_fused_add_mul_sum_69', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: 'i32', 35: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_sum_69', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(34, 35))]}
)
@triton.jit
def triton_red_fused_add_mul_sum_69(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp25 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp29 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp33 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp44 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp48 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp50 = tl.load(in_ptr10 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp61 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp65 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp77 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp81 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp85 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp89 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp93 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp97 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp9 = tmp8 * tmp3
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = _tmp11 + tmp10
        _tmp11 = tl.where(rmask, tmp12, _tmp11)
        tmp14 = tmp13 * tmp3
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp20 = tmp18 + tmp19
        tmp22 = tmp20 + tmp21
        tmp23 = tmp0 * tmp22
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK, RBLOCK])
        tmp26 = _tmp25 + tmp24
        _tmp25 = tl.where(rmask, tmp26, _tmp25)
        tmp27 = tmp8 * tmp22
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
        tmp30 = _tmp29 + tmp28
        _tmp29 = tl.where(rmask, tmp30, _tmp29)
        tmp31 = tmp13 * tmp22
        tmp32 = tl.broadcast_to(tmp31, [XBLOCK, RBLOCK])
        tmp34 = _tmp33 + tmp32
        _tmp33 = tl.where(rmask, tmp34, _tmp33)
        tmp37 = tmp35 + tmp36
        tmp38 = tmp0 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp42 = tmp8 * tmp37
        tmp43 = tl.broadcast_to(tmp42, [XBLOCK, RBLOCK])
        tmp45 = _tmp44 + tmp43
        _tmp44 = tl.where(rmask, tmp45, _tmp44)
        tmp46 = tmp13 * tmp37
        tmp47 = tl.broadcast_to(tmp46, [XBLOCK, RBLOCK])
        tmp49 = _tmp48 + tmp47
        _tmp48 = tl.where(rmask, tmp49, _tmp48)
        tmp52 = tmp50 * tmp51
        tmp53 = 0.0
        tmp54 = tmp52 + tmp53
        tmp56 = tmp54 + tmp55
        tmp58 = tmp56 + tmp57
        tmp59 = tmp0 * tmp58
        tmp60 = tl.broadcast_to(tmp59, [XBLOCK, RBLOCK])
        tmp62 = _tmp61 + tmp60
        _tmp61 = tl.where(rmask, tmp62, _tmp61)
        tmp63 = tmp8 * tmp58
        tmp64 = tl.broadcast_to(tmp63, [XBLOCK, RBLOCK])
        tmp66 = _tmp65 + tmp64
        _tmp65 = tl.where(rmask, tmp66, _tmp65)
        tmp67 = tmp13 * tmp58
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp72 = tmp51 + tmp71
        tmp74 = tmp72 + tmp73
        tmp75 = tmp0 * tmp74
        tmp76 = tl.broadcast_to(tmp75, [XBLOCK, RBLOCK])
        tmp78 = _tmp77 + tmp76
        _tmp77 = tl.where(rmask, tmp78, _tmp77)
        tmp79 = tmp8 * tmp74
        tmp80 = tl.broadcast_to(tmp79, [XBLOCK, RBLOCK])
        tmp82 = _tmp81 + tmp80
        _tmp81 = tl.where(rmask, tmp82, _tmp81)
        tmp83 = tmp13 * tmp74
        tmp84 = tl.broadcast_to(tmp83, [XBLOCK, RBLOCK])
        tmp86 = _tmp85 + tmp84
        _tmp85 = tl.where(rmask, tmp86, _tmp85)
        tmp87 = tmp0 * tmp51
        tmp88 = tl.broadcast_to(tmp87, [XBLOCK, RBLOCK])
        tmp90 = _tmp89 + tmp88
        _tmp89 = tl.where(rmask, tmp90, _tmp89)
        tmp91 = tmp13 * tmp51
        tmp92 = tl.broadcast_to(tmp91, [XBLOCK, RBLOCK])
        tmp94 = _tmp93 + tmp92
        _tmp93 = tl.where(rmask, tmp94, _tmp93)
        tmp95 = tmp8 * tmp51
        tmp96 = tl.broadcast_to(tmp95, [XBLOCK, RBLOCK])
        tmp98 = _tmp97 + tmp96
        _tmp97 = tl.where(rmask, tmp98, _tmp97)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp11 = tl.sum(_tmp11, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp11, None)
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp16, None)
    tmp25 = tl.sum(_tmp25, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp25, None)
    tmp29 = tl.sum(_tmp29, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp29, None)
    tmp33 = tl.sum(_tmp33, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp33, None)
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp40, None)
    tmp44 = tl.sum(_tmp44, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp44, None)
    tmp48 = tl.sum(_tmp48, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp48, None)
    tmp61 = tl.sum(_tmp61, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp61, None)
    tmp65 = tl.sum(_tmp65, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp65, None)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp69, None)
    tmp77 = tl.sum(_tmp77, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp77, None)
    tmp81 = tl.sum(_tmp81, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp81, None)
    tmp85 = tl.sum(_tmp85, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp85, None)
    tmp89 = tl.sum(_tmp89, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp89, None)
    tmp93 = tl.sum(_tmp93, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp93, None)
    tmp97 = tl.sum(_tmp97, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp97, None)
''')


# kernel path: /tmp/torchinductor_mengqy/u6/cu67dt5boijkaok6ecj2qnisku2fi25bn24zyhgr7tacouymhdjc.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_70 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_70', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_70', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(90,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_70(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, xnumel, XBLOCK : tl.constexpr):
    xnumel = 589824
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 147456)
    x0 = xindex % 24
    x1 = (xindex // 24) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp226 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp255 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp271 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp279 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp283 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp291 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp295 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp299 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp307 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp311 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp315 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp319 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp323 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp328 = tl.load(in_ptr69 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp332 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp340 = tl.load(in_ptr72 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp344 = tl.load(in_ptr73 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr74 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp352 = tl.load(in_ptr75 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp356 = tl.load(in_ptr76 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr77 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp364 = tl.load(in_ptr78 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp368 = tl.load(in_ptr79 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp372 = tl.load(in_ptr80 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp376 = tl.load(in_ptr81 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr82 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp384 = tl.load(in_ptr83 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp388 = tl.load(in_ptr84 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr85 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp396 = tl.load(in_ptr86 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp400 = tl.load(in_ptr87 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr88 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 22, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 21, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 20, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 19, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 18, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 17, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 16, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 15, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 14, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 13, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 12, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 11, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 10, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 9, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 8, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tl.full([1], 7, tl.int32)
    tmp95 = tmp3 == tmp94
    tmp97 = tl.where(tmp95, tmp96, tmp7)
    tmp98 = tl.where(tmp2, tmp97, tmp7)
    tmp99 = tmp93 + tmp98
    tmp100 = tl.full([1], 6, tl.int32)
    tmp101 = tmp3 == tmp100
    tmp103 = tl.where(tmp101, tmp102, tmp7)
    tmp104 = tl.where(tmp2, tmp103, tmp7)
    tmp105 = tmp99 + tmp104
    tmp106 = tl.full([1], 5, tl.int32)
    tmp107 = tmp3 == tmp106
    tmp109 = tl.where(tmp107, tmp108, tmp7)
    tmp110 = tl.where(tmp2, tmp109, tmp7)
    tmp111 = tmp105 + tmp110
    tmp112 = tl.full([1], 4, tl.int32)
    tmp113 = tmp3 == tmp112
    tmp115 = tl.where(tmp113, tmp114, tmp7)
    tmp116 = tl.where(tmp2, tmp115, tmp7)
    tmp117 = tmp111 + tmp116
    tmp118 = tmp3 == tmp1
    tmp120 = tl.where(tmp118, tmp119, tmp7)
    tmp121 = tl.where(tmp2, tmp120, tmp7)
    tmp122 = tmp117 + tmp121
    tmp123 = tl.full([1], 2, tl.int32)
    tmp124 = tmp3 == tmp123
    tmp126 = tl.where(tmp124, tmp125, tmp7)
    tmp127 = tl.where(tmp2, tmp126, tmp7)
    tmp128 = tmp122 + tmp127
    tmp129 = tl.full([1], 1, tl.int32)
    tmp130 = tmp3 == tmp129
    tmp132 = tl.where(tmp130, tmp131, tmp7)
    tmp133 = tl.where(tmp2, tmp132, tmp7)
    tmp134 = tmp128 + tmp133
    tmp135 = tl.full([1], 0, tl.int32)
    tmp136 = tmp3 == tmp135
    tmp138 = tl.where(tmp136, tmp137, tmp7)
    tmp139 = tl.where(tmp2, tmp138, tmp7)
    tmp140 = tmp134 + tmp139
    tmp141 = tmp0 == tmp123
    tmp143 = tl.where(tmp5, tmp142, tmp7)
    tmp144 = tl.where(tmp141, tmp143, tmp7)
    tmp145 = tmp140 + tmp144
    tmp147 = tl.where(tmp11, tmp146, tmp7)
    tmp148 = tl.where(tmp141, tmp147, tmp7)
    tmp149 = tmp145 + tmp148
    tmp151 = tl.where(tmp17, tmp150, tmp7)
    tmp152 = tl.where(tmp141, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp155 = tl.where(tmp23, tmp154, tmp7)
    tmp156 = tl.where(tmp141, tmp155, tmp7)
    tmp157 = tmp153 + tmp156
    tmp159 = tl.where(tmp29, tmp158, tmp7)
    tmp160 = tl.where(tmp141, tmp159, tmp7)
    tmp161 = tmp157 + tmp160
    tmp163 = tl.where(tmp35, tmp162, tmp7)
    tmp164 = tl.where(tmp141, tmp163, tmp7)
    tmp165 = tmp161 + tmp164
    tmp167 = tl.where(tmp41, tmp166, tmp7)
    tmp168 = tl.where(tmp141, tmp167, tmp7)
    tmp169 = tmp165 + tmp168
    tmp171 = tl.where(tmp47, tmp170, tmp7)
    tmp172 = tl.where(tmp141, tmp171, tmp7)
    tmp173 = tmp169 + tmp172
    tmp175 = tl.where(tmp53, tmp174, tmp7)
    tmp176 = tl.where(tmp141, tmp175, tmp7)
    tmp177 = tmp173 + tmp176
    tmp179 = tl.where(tmp59, tmp178, tmp7)
    tmp180 = tl.where(tmp141, tmp179, tmp7)
    tmp181 = tmp177 + tmp180
    tmp183 = tl.where(tmp65, tmp182, tmp7)
    tmp184 = tl.where(tmp141, tmp183, tmp7)
    tmp185 = tmp181 + tmp184
    tmp187 = tl.where(tmp71, tmp186, tmp7)
    tmp188 = tl.where(tmp141, tmp187, tmp7)
    tmp189 = tmp185 + tmp188
    tmp191 = tl.where(tmp77, tmp190, tmp7)
    tmp192 = tl.where(tmp141, tmp191, tmp7)
    tmp193 = tmp189 + tmp192
    tmp195 = tl.where(tmp83, tmp194, tmp7)
    tmp196 = tl.where(tmp141, tmp195, tmp7)
    tmp197 = tmp193 + tmp196
    tmp199 = tl.where(tmp89, tmp198, tmp7)
    tmp200 = tl.where(tmp141, tmp199, tmp7)
    tmp201 = tmp197 + tmp200
    tmp203 = tl.where(tmp95, tmp202, tmp7)
    tmp204 = tl.where(tmp141, tmp203, tmp7)
    tmp205 = tmp201 + tmp204
    tmp207 = tl.where(tmp101, tmp206, tmp7)
    tmp208 = tl.where(tmp141, tmp207, tmp7)
    tmp209 = tmp205 + tmp208
    tmp211 = tl.where(tmp107, tmp210, tmp7)
    tmp212 = tl.where(tmp141, tmp211, tmp7)
    tmp213 = tmp209 + tmp212
    tmp215 = tl.where(tmp113, tmp214, tmp7)
    tmp216 = tl.where(tmp141, tmp215, tmp7)
    tmp217 = tmp213 + tmp216
    tmp219 = tl.where(tmp118, tmp218, tmp7)
    tmp220 = tl.where(tmp141, tmp219, tmp7)
    tmp221 = tmp217 + tmp220
    tmp223 = tl.where(tmp124, tmp222, tmp7)
    tmp224 = tl.where(tmp141, tmp223, tmp7)
    tmp225 = tmp221 + tmp224
    tmp227 = tl.where(tmp130, tmp226, tmp7)
    tmp228 = tl.where(tmp141, tmp227, tmp7)
    tmp229 = tmp225 + tmp228
    tmp231 = tl.where(tmp136, tmp230, tmp7)
    tmp232 = tl.where(tmp141, tmp231, tmp7)
    tmp233 = tmp229 + tmp232
    tmp234 = tmp0 == tmp129
    tmp236 = tl.where(tmp5, tmp235, tmp7)
    tmp237 = tl.where(tmp234, tmp236, tmp7)
    tmp238 = tmp233 + tmp237
    tmp240 = tl.where(tmp11, tmp239, tmp7)
    tmp241 = tl.where(tmp234, tmp240, tmp7)
    tmp242 = tmp238 + tmp241
    tmp244 = tl.where(tmp17, tmp243, tmp7)
    tmp245 = tl.where(tmp234, tmp244, tmp7)
    tmp246 = tmp242 + tmp245
    tmp248 = tl.where(tmp23, tmp247, tmp7)
    tmp249 = tl.where(tmp234, tmp248, tmp7)
    tmp250 = tmp246 + tmp249
    tmp252 = tl.where(tmp29, tmp251, tmp7)
    tmp253 = tl.where(tmp234, tmp252, tmp7)
    tmp254 = tmp250 + tmp253
    tmp256 = tl.where(tmp35, tmp255, tmp7)
    tmp257 = tl.where(tmp234, tmp256, tmp7)
    tmp258 = tmp254 + tmp257
    tmp260 = tl.where(tmp41, tmp259, tmp7)
    tmp261 = tl.where(tmp234, tmp260, tmp7)
    tmp262 = tmp258 + tmp261
    tmp264 = tl.where(tmp47, tmp263, tmp7)
    tmp265 = tl.where(tmp234, tmp264, tmp7)
    tmp266 = tmp262 + tmp265
    tmp268 = tl.where(tmp53, tmp267, tmp7)
    tmp269 = tl.where(tmp234, tmp268, tmp7)
    tmp270 = tmp266 + tmp269
    tmp272 = tl.where(tmp59, tmp271, tmp7)
    tmp273 = tl.where(tmp234, tmp272, tmp7)
    tmp274 = tmp270 + tmp273
    tmp276 = tl.where(tmp65, tmp275, tmp7)
    tmp277 = tl.where(tmp234, tmp276, tmp7)
    tmp278 = tmp274 + tmp277
    tmp280 = tl.where(tmp71, tmp279, tmp7)
    tmp281 = tl.where(tmp234, tmp280, tmp7)
    tmp282 = tmp278 + tmp281
    tmp284 = tl.where(tmp77, tmp283, tmp7)
    tmp285 = tl.where(tmp234, tmp284, tmp7)
    tmp286 = tmp282 + tmp285
    tmp288 = tl.where(tmp83, tmp287, tmp7)
    tmp289 = tl.where(tmp234, tmp288, tmp7)
    tmp290 = tmp286 + tmp289
    tmp292 = tl.where(tmp89, tmp291, tmp7)
    tmp293 = tl.where(tmp234, tmp292, tmp7)
    tmp294 = tmp290 + tmp293
    tmp296 = tl.where(tmp95, tmp295, tmp7)
    tmp297 = tl.where(tmp234, tmp296, tmp7)
    tmp298 = tmp294 + tmp297
    tmp300 = tl.where(tmp101, tmp299, tmp7)
    tmp301 = tl.where(tmp234, tmp300, tmp7)
    tmp302 = tmp298 + tmp301
    tmp304 = tl.where(tmp107, tmp303, tmp7)
    tmp305 = tl.where(tmp234, tmp304, tmp7)
    tmp306 = tmp302 + tmp305
    tmp308 = tl.where(tmp113, tmp307, tmp7)
    tmp309 = tl.where(tmp234, tmp308, tmp7)
    tmp310 = tmp306 + tmp309
    tmp312 = tl.where(tmp118, tmp311, tmp7)
    tmp313 = tl.where(tmp234, tmp312, tmp7)
    tmp314 = tmp310 + tmp313
    tmp316 = tl.where(tmp124, tmp315, tmp7)
    tmp317 = tl.where(tmp234, tmp316, tmp7)
    tmp318 = tmp314 + tmp317
    tmp320 = tl.where(tmp130, tmp319, tmp7)
    tmp321 = tl.where(tmp234, tmp320, tmp7)
    tmp322 = tmp318 + tmp321
    tmp324 = tl.where(tmp136, tmp323, tmp7)
    tmp325 = tl.where(tmp234, tmp324, tmp7)
    tmp326 = tmp322 + tmp325
    tmp327 = tmp0 == tmp135
    tmp329 = tl.where(tmp5, tmp328, tmp7)
    tmp330 = tl.where(tmp327, tmp329, tmp7)
    tmp331 = tmp326 + tmp330
    tmp333 = tl.where(tmp11, tmp332, tmp7)
    tmp334 = tl.where(tmp327, tmp333, tmp7)
    tmp335 = tmp331 + tmp334
    tmp337 = tl.where(tmp17, tmp336, tmp7)
    tmp338 = tl.where(tmp327, tmp337, tmp7)
    tmp339 = tmp335 + tmp338
    tmp341 = tl.where(tmp23, tmp340, tmp7)
    tmp342 = tl.where(tmp327, tmp341, tmp7)
    tmp343 = tmp339 + tmp342
    tmp345 = tl.where(tmp29, tmp344, tmp7)
    tmp346 = tl.where(tmp327, tmp345, tmp7)
    tmp347 = tmp343 + tmp346
    tmp349 = tl.where(tmp35, tmp348, tmp7)
    tmp350 = tl.where(tmp327, tmp349, tmp7)
    tmp351 = tmp347 + tmp350
    tmp353 = tl.where(tmp41, tmp352, tmp7)
    tmp354 = tl.where(tmp327, tmp353, tmp7)
    tmp355 = tmp351 + tmp354
    tmp357 = tl.where(tmp47, tmp356, tmp7)
    tmp358 = tl.where(tmp327, tmp357, tmp7)
    tmp359 = tmp355 + tmp358
    tmp361 = tl.where(tmp53, tmp360, tmp7)
    tmp362 = tl.where(tmp327, tmp361, tmp7)
    tmp363 = tmp359 + tmp362
    tmp365 = tl.where(tmp59, tmp364, tmp7)
    tmp366 = tl.where(tmp327, tmp365, tmp7)
    tmp367 = tmp363 + tmp366
    tmp369 = tl.where(tmp65, tmp368, tmp7)
    tmp370 = tl.where(tmp327, tmp369, tmp7)
    tmp371 = tmp367 + tmp370
    tmp373 = tl.where(tmp71, tmp372, tmp7)
    tmp374 = tl.where(tmp327, tmp373, tmp7)
    tmp375 = tmp371 + tmp374
    tmp377 = tl.where(tmp77, tmp376, tmp7)
    tmp378 = tl.where(tmp327, tmp377, tmp7)
    tmp379 = tmp375 + tmp378
    tmp381 = tl.where(tmp83, tmp380, tmp7)
    tmp382 = tl.where(tmp327, tmp381, tmp7)
    tmp383 = tmp379 + tmp382
    tmp385 = tl.where(tmp89, tmp384, tmp7)
    tmp386 = tl.where(tmp327, tmp385, tmp7)
    tmp387 = tmp383 + tmp386
    tmp389 = tl.where(tmp95, tmp388, tmp7)
    tmp390 = tl.where(tmp327, tmp389, tmp7)
    tmp391 = tmp387 + tmp390
    tmp393 = tl.where(tmp101, tmp392, tmp7)
    tmp394 = tl.where(tmp327, tmp393, tmp7)
    tmp395 = tmp391 + tmp394
    tmp397 = tl.where(tmp107, tmp396, tmp7)
    tmp398 = tl.where(tmp327, tmp397, tmp7)
    tmp399 = tmp395 + tmp398
    tmp401 = tl.where(tmp113, tmp400, tmp7)
    tmp402 = tl.where(tmp327, tmp401, tmp7)
    tmp403 = tmp399 + tmp402
    tmp405 = tl.where(tmp118, tmp404, tmp7)
    tmp406 = tl.where(tmp327, tmp405, tmp7)
    tmp407 = tmp403 + tmp406
    tl.store(in_out_ptr0 + (x3), tmp407, None)
''')


# kernel path: /tmp/torchinductor_mengqy/s6/cs6d33u3v52hx23jy75okdwdle4xrl2b4id5iw6ksj76rm4px2nk.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_71 = async_compile.triton('triton_poi_fused_clone_71', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_71', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_71(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 589824
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 24
    x1 = (xindex // 24) % 4
    x2 = (xindex // 96)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (24*x2) + (147456*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/dq/cdqzjalafswsxcgjwteknlc2fofp6rxnvliwbghdvdx7fzx6b53u.py
# Source Nodes: [l__mod___dynamic_dense_22_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_22_act => add_1261, convert_element_type_408, erf_22, mul_1625
triton_poi_fused_gelu_gelu_backward_72 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_72', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_72', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_72(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 589824
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ml/cml72mlms7ewqghi4mifznzivihxca2jfkmya4zyg2wxnea77su5.py
# Source Nodes: [add_1058], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_1058 => add_1259
triton_red_fused_add_div_mul_pow_sum_73 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_73', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: 'i32', 150: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_73', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(149, 150))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_73(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr4 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr6 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr8 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr10 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr12 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp27 = tl.load(in_ptr13 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr14 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr15 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr16 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr17 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr18 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp43 = tl.load(in_ptr19 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr20 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr21 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr22 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr23 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr24 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr25 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr26 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr27 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr28 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr29 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr30 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr31 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr32 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr33 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp85 = tl.load(in_ptr34 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr35 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr36 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr37 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr38 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp99 = tl.load(in_ptr39 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr40 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr41 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr42 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr43 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr44 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr45 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr46 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr47 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr48 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr49 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr50 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr51 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr52 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr53 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr54 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr55 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr56 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr57 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr58 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr59 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr60 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr61 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr62 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr63 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr64 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr65 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr66 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr67 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr68 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr69 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr70 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr71 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr72 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr73 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr74 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr75 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr76 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr77 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr78 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr79 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr80 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr81 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr82 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr83 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr84 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr85 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr86 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr87 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr88 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr89 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr90 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr91 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr92 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr93 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr94 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr95 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr96 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp262 = tl.load(in_ptr97 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr98 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr99 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr100 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr101 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp276 = tl.load(in_ptr102 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp279 = tl.load(in_ptr103 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr104 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr105 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr106 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr107 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr108 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp295 = tl.load(in_ptr109 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr110 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp301 = tl.load(in_ptr111 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr112 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp307 = tl.load(in_ptr113 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp309 = tl.load(in_ptr114 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr115 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp315 = tl.load(in_ptr116 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr117 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr118 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp323 = tl.load(in_ptr119 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp326 = tl.load(in_ptr120 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp329 = tl.load(in_ptr121 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp332 = tl.load(in_ptr122 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp10 = tmp8 * tmp9
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp25 = tmp23 * tmp24
        tmp26 = tmp22 + tmp25
        tmp28 = tmp8 * tmp27
        tmp30 = tmp11 * tmp29
        tmp31 = tmp28 + tmp30
        tmp33 = tmp15 * tmp32
        tmp34 = tmp31 + tmp33
        tmp36 = tmp19 * tmp35
        tmp37 = tmp34 + tmp36
        tmp39 = tmp23 * tmp38
        tmp40 = tmp37 + tmp39
        tmp42 = tmp8 * tmp41
        tmp44 = tmp11 * tmp43
        tmp45 = tmp42 + tmp44
        tmp47 = tmp15 * tmp46
        tmp48 = tmp45 + tmp47
        tmp50 = tmp19 * tmp49
        tmp51 = tmp48 + tmp50
        tmp53 = tmp23 * tmp52
        tmp54 = tmp51 + tmp53
        tmp56 = tmp8 * tmp55
        tmp58 = tmp11 * tmp57
        tmp59 = tmp56 + tmp58
        tmp61 = tmp15 * tmp60
        tmp62 = tmp59 + tmp61
        tmp64 = tmp19 * tmp63
        tmp65 = tmp62 + tmp64
        tmp67 = tmp23 * tmp66
        tmp68 = tmp65 + tmp67
        tmp70 = tmp8 * tmp69
        tmp72 = tmp11 * tmp71
        tmp73 = tmp70 + tmp72
        tmp75 = tmp15 * tmp74
        tmp76 = tmp73 + tmp75
        tmp78 = tmp19 * tmp77
        tmp79 = tmp76 + tmp78
        tmp81 = tmp23 * tmp80
        tmp82 = tmp79 + tmp81
        tmp84 = tmp8 * tmp83
        tmp86 = tmp11 * tmp85
        tmp87 = tmp84 + tmp86
        tmp89 = tmp15 * tmp88
        tmp90 = tmp87 + tmp89
        tmp92 = tmp19 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp23 * tmp94
        tmp96 = tmp93 + tmp95
        tmp98 = tmp8 * tmp97
        tmp100 = tmp11 * tmp99
        tmp101 = tmp98 + tmp100
        tmp103 = tmp15 * tmp102
        tmp104 = tmp101 + tmp103
        tmp106 = tmp19 * tmp105
        tmp107 = tmp104 + tmp106
        tmp109 = tmp23 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp8 * tmp111
        tmp114 = tmp11 * tmp113
        tmp115 = tmp112 + tmp114
        tmp117 = tmp15 * tmp116
        tmp118 = tmp115 + tmp117
        tmp120 = tmp19 * tmp119
        tmp121 = tmp118 + tmp120
        tmp123 = tmp23 * tmp122
        tmp124 = tmp121 + tmp123
        tmp126 = tmp8 * tmp125
        tmp128 = tmp11 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp15 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp19 * tmp133
        tmp135 = tmp132 + tmp134
        tmp137 = tmp23 * tmp136
        tmp138 = tmp135 + tmp137
        tmp140 = tmp8 * tmp139
        tmp142 = tmp11 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp15 * tmp144
        tmp146 = tmp143 + tmp145
        tmp148 = tmp19 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp23 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp8 * tmp153
        tmp156 = tmp11 * tmp155
        tmp157 = tmp154 + tmp156
        tmp159 = tmp15 * tmp158
        tmp160 = tmp157 + tmp159
        tmp162 = tmp19 * tmp161
        tmp163 = tmp160 + tmp162
        tmp165 = tmp23 * tmp164
        tmp166 = tmp163 + tmp165
        tmp168 = tmp8 * tmp167
        tmp170 = tmp11 * tmp169
        tmp171 = tmp168 + tmp170
        tmp173 = tmp15 * tmp172
        tmp174 = tmp171 + tmp173
        tmp176 = tmp19 * tmp175
        tmp177 = tmp174 + tmp176
        tmp179 = tmp23 * tmp178
        tmp180 = tmp177 + tmp179
        tmp182 = tmp8 * tmp181
        tmp184 = tmp11 * tmp183
        tmp185 = tmp182 + tmp184
        tmp187 = tmp15 * tmp186
        tmp188 = tmp185 + tmp187
        tmp190 = tmp19 * tmp189
        tmp191 = tmp188 + tmp190
        tmp193 = tmp23 * tmp192
        tmp194 = tmp191 + tmp193
        tmp196 = tmp8 * tmp195
        tmp198 = tmp11 * tmp197
        tmp199 = tmp196 + tmp198
        tmp201 = tmp15 * tmp200
        tmp202 = tmp199 + tmp201
        tmp204 = tmp19 * tmp203
        tmp205 = tmp202 + tmp204
        tmp207 = tmp23 * tmp206
        tmp208 = tmp205 + tmp207
        tmp210 = tmp8 * tmp209
        tmp212 = tmp11 * tmp211
        tmp213 = tmp210 + tmp212
        tmp215 = tmp15 * tmp214
        tmp216 = tmp213 + tmp215
        tmp218 = tmp19 * tmp217
        tmp219 = tmp216 + tmp218
        tmp221 = tmp23 * tmp220
        tmp222 = tmp219 + tmp221
        tmp224 = tmp8 * tmp223
        tmp226 = tmp11 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp15 * tmp228
        tmp230 = tmp227 + tmp229
        tmp232 = tmp19 * tmp231
        tmp233 = tmp230 + tmp232
        tmp235 = tmp23 * tmp234
        tmp236 = tmp233 + tmp235
        tmp238 = tmp8 * tmp237
        tmp240 = tmp11 * tmp239
        tmp241 = tmp238 + tmp240
        tmp243 = tmp15 * tmp242
        tmp244 = tmp241 + tmp243
        tmp246 = tmp19 * tmp245
        tmp247 = tmp244 + tmp246
        tmp249 = tmp23 * tmp248
        tmp250 = tmp247 + tmp249
        tmp252 = tmp8 * tmp251
        tmp254 = tmp11 * tmp253
        tmp255 = tmp252 + tmp254
        tmp257 = tmp15 * tmp256
        tmp258 = tmp255 + tmp257
        tmp260 = tmp19 * tmp259
        tmp261 = tmp258 + tmp260
        tmp263 = tmp23 * tmp262
        tmp264 = tmp261 + tmp263
        tmp266 = tmp8 * tmp265
        tmp268 = tmp11 * tmp267
        tmp269 = tmp266 + tmp268
        tmp271 = tmp15 * tmp270
        tmp272 = tmp269 + tmp271
        tmp274 = tmp19 * tmp273
        tmp275 = tmp272 + tmp274
        tmp277 = tmp23 * tmp276
        tmp278 = tmp275 + tmp277
        tmp280 = tmp8 * tmp279
        tmp282 = tmp11 * tmp281
        tmp283 = tmp280 + tmp282
        tmp285 = tmp15 * tmp284
        tmp286 = tmp283 + tmp285
        tmp288 = tmp19 * tmp287
        tmp289 = tmp286 + tmp288
        tmp291 = tmp23 * tmp290
        tmp292 = tmp289 + tmp291
        tmp294 = tmp8 * tmp293
        tmp296 = tmp11 * tmp295
        tmp297 = tmp294 + tmp296
        tmp299 = tmp15 * tmp298
        tmp300 = tmp297 + tmp299
        tmp302 = tmp19 * tmp301
        tmp303 = tmp300 + tmp302
        tmp305 = tmp23 * tmp304
        tmp306 = tmp303 + tmp305
        tmp308 = tmp8 * tmp307
        tmp310 = tmp11 * tmp309
        tmp311 = tmp308 + tmp310
        tmp313 = tmp15 * tmp312
        tmp314 = tmp311 + tmp313
        tmp316 = tmp19 * tmp315
        tmp317 = tmp314 + tmp316
        tmp319 = tmp23 * tmp318
        tmp320 = tmp317 + tmp319
        tmp322 = tmp8 * tmp321
        tmp324 = tmp11 * tmp323
        tmp325 = tmp322 + tmp324
        tmp327 = tmp15 * tmp326
        tmp328 = tmp325 + tmp327
        tmp330 = tmp19 * tmp329
        tmp331 = tmp328 + tmp330
        tmp333 = tmp23 * tmp332
        tmp334 = tmp331 + tmp333
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp26, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp40, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp54, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp68, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp82, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp96, rmask)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp110, rmask)
        tl.store(out_ptr8 + (r1 + (2048*x0)), tmp124, rmask)
        tl.store(out_ptr9 + (r1 + (2048*x0)), tmp138, rmask)
        tl.store(out_ptr10 + (r1 + (2048*x0)), tmp152, rmask)
        tl.store(out_ptr11 + (r1 + (2048*x0)), tmp166, rmask)
        tl.store(out_ptr12 + (r1 + (2048*x0)), tmp180, rmask)
        tl.store(out_ptr13 + (r1 + (2048*x0)), tmp194, rmask)
        tl.store(out_ptr14 + (r1 + (2048*x0)), tmp208, rmask)
        tl.store(out_ptr15 + (r1 + (2048*x0)), tmp222, rmask)
        tl.store(out_ptr16 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(out_ptr17 + (r1 + (2048*x0)), tmp250, rmask)
        tl.store(out_ptr18 + (r1 + (2048*x0)), tmp264, rmask)
        tl.store(out_ptr19 + (r1 + (2048*x0)), tmp278, rmask)
        tl.store(out_ptr20 + (r1 + (2048*x0)), tmp292, rmask)
        tl.store(out_ptr21 + (r1 + (2048*x0)), tmp306, rmask)
        tl.store(out_ptr22 + (r1 + (2048*x0)), tmp320, rmask)
        tl.store(out_ptr23 + (r1 + (2048*x0)), tmp334, rmask)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp336 = tl.load(in_ptr123 + (25*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp339 = tl.load(in_ptr124 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp335 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp338 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp349 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp350 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp337 = tmp335 * tmp336
        tmp340 = tmp338 * tmp339
        tmp341 = tmp337 + tmp340
        tmp342 = -0.5
        tmp343 = tmp6 * tmp342
        tmp344 = tmp339 * tmp339
        tmp345 = tmp344 * tmp339
        tmp346 = tmp343 * tmp345
        tmp347 = 2048.0
        tmp348 = tmp346 / tmp347
        tmp351 = tmp349 + tmp350
        tmp352 = 2.0
        tmp353 = tmp351 * tmp352
        tmp354 = tmp348 * tmp353
        tmp355 = tmp341 + tmp354
        tl.store(out_ptr24 + (r1 + (2048*x0)), tmp355, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wo/cwowmhzxknrfvmdqu2dlyrksgf5oqhvyzckob4nfstnimtccvfh5.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_74 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_74', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_74', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_74(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4608
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 24
    x4 = (xindex // 24)
    x2 = (xindex // 1152)
    x1 = (xindex // 24) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (24*r3) + (3072*x4)), rmask & xmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/sl/csl6azq22ddihlnjnh5ipoiig5d7qqnphkrhmrhlpnaz4tqzwmtu.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_75 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_75', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_75', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_75(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 96
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 24
    x1 = (xindex // 24)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (24*r2) + (1152*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/mc/cmcza5qwwdeiriad5bwohryefis2jywez7kc5eww7p5pa2hg57hw.py
# Source Nodes: [], Original ATen: [aten.mul, aten.sum]

triton_red_fused_mul_sum_76 = async_compile.triton('triton_red_fused_mul_sum_76', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_mul_sum_76', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]}
)
@triton.jit
def triton_red_fused_mul_sum_76(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp4 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = _tmp4 + tmp3
        _tmp4 = tl.where(rmask, tmp5, _tmp4)
    tmp4 = tl.sum(_tmp4, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp4, None)
''')


# kernel path: /tmp/torchinductor_mengqy/tv/ctvaylijxihi2mwnkjbhsnvzljwhblropkojy4wzcqbk6frzaksp.py
# Source Nodes: [add_10, add_1011, add_1012, add_1033, add_1034, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, add_989, float_1, float_2, float_3, mean_1, mean_2, mul_1011, mul_3, mul_4, mul_6, mul_967, mul_989, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_1011 => add_1207
# add_1012 => add_1253
# add_1033 => add_1229
# add_1034 => add_1254
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_98 => add_155
# add_989 => add_1185
# float_1 => convert_element_type_392
# float_2 => convert_element_type_394
# float_3 => convert_element_type_396
# mean_1 => mean_109
# mean_2 => mean_110
# mul_1011 => mul_1577
# mul_3 => mul_1603
# mul_4 => mul_24
# mul_6 => mul_1606
# mul_967 => mul_1533
# mul_989 => mul_1555
# rsqrt_1 => rsqrt_109
# rsqrt_2 => rsqrt_110
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_77 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_77', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp32', 38: '*fp32', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp32', 152: '*fp16', 153: '*fp32', 154: '*fp32', 155: '*fp16', 156: '*fp16', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp16', 164: '*fp16', 165: '*fp16', 166: '*fp16', 167: '*fp16', 168: '*fp16', 169: '*fp16', 170: '*fp16', 171: '*fp16', 172: '*fp16', 173: '*fp16', 174: '*fp16', 175: '*fp16', 176: '*fp16', 177: 'i32', 178: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr17', 'in_out_ptr18', 'in_out_ptr19', 'in_out_ptr2', 'in_out_ptr20', 'in_out_ptr21', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_77', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(177, 178))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_77(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_out_ptr17, in_out_ptr18, in_out_ptr19, in_out_ptr20, in_out_ptr21, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp40, None)
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr16 + (x0), None, eviction_policy='evict_last')
    tmp83 = tl.load(in_ptr17 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr18 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr19 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr20 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr21 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr22 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr23 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr24 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr25 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr26 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr27 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr28 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr29 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr30 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr31 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr32 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr33 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr34 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr35 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr36 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr37 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr38 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr39 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr40 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr41 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr42 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr43 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr44 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr45 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr46 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr47 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr48 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr49 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr50 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr51 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr52 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr53 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr54 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr55 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr56 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr57 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr58 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr59 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr60 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp250 = tl.load(in_ptr61 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr62 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr63 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr64 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr65 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr66 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr67 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr68 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp277 = tl.load(in_ptr69 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr70 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp283 = tl.load(in_ptr71 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr72 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr73 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr74 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp297 = tl.load(in_ptr75 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr76 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr77 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp307 = tl.load(in_ptr78 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp310 = tl.load(in_ptr79 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr80 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp318 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp106 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp176 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp236 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp246 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp256 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp266 = tl.load(in_out_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp276 = tl.load(in_out_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_out_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp296 = tl.load(in_out_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp306 = tl.load(in_out_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp67 = tmp27 * tmp47
        tmp69 = tmp68 / tmp50
        tmp70 = tmp69 + tmp52
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp71 * tmp71
        tmp73 = tmp72 * tmp71
        tmp74 = tmp67 * tmp73
        tmp75 = tmp74 / tmp50
        tmp77 = tmp21 * tmp62
        tmp78 = tmp76 + tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp80 = tmp75 * tmp79
        tmp84 = tmp82 * tmp83
        tmp85 = tmp81 + tmp84
        tmp88 = tmp86 * tmp87
        tmp89 = tmp88.to(tl.float32)
        tmp90 = tmp89 * tmp54
        tmp91 = tmp90 + tmp66
        tmp92 = tmp91 + tmp66
        tmp93 = tmp92.to(tl.float32)
        tmp94 = tmp93 * tmp5
        tmp95 = tmp85 + tmp94
        tmp98 = tmp96 * tmp97
        tmp99 = tmp98.to(tl.float32)
        tmp100 = tmp99 * tmp71
        tmp101 = tmp100 + tmp80
        tmp102 = tmp101 + tmp80
        tmp103 = tmp102.to(tl.float32)
        tmp104 = tmp103 * tmp21
        tmp105 = tmp95 + tmp104
        tmp108 = tmp82 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp93 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp103 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp82 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp93 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp103 * tmp123
        tmp125 = tmp122 + tmp124
        tmp128 = tmp82 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp93 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp103 * tmp133
        tmp135 = tmp132 + tmp134
        tmp138 = tmp82 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp93 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp103 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp82 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp93 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp103 * tmp153
        tmp155 = tmp152 + tmp154
        tmp158 = tmp82 * tmp157
        tmp159 = tmp156 + tmp158
        tmp161 = tmp93 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp103 * tmp163
        tmp165 = tmp162 + tmp164
        tmp168 = tmp82 * tmp167
        tmp169 = tmp166 + tmp168
        tmp171 = tmp93 * tmp170
        tmp172 = tmp169 + tmp171
        tmp174 = tmp103 * tmp173
        tmp175 = tmp172 + tmp174
        tmp178 = tmp82 * tmp177
        tmp179 = tmp176 + tmp178
        tmp181 = tmp93 * tmp180
        tmp182 = tmp179 + tmp181
        tmp184 = tmp103 * tmp183
        tmp185 = tmp182 + tmp184
        tmp188 = tmp82 * tmp187
        tmp189 = tmp186 + tmp188
        tmp191 = tmp93 * tmp190
        tmp192 = tmp189 + tmp191
        tmp194 = tmp103 * tmp193
        tmp195 = tmp192 + tmp194
        tmp198 = tmp82 * tmp197
        tmp199 = tmp196 + tmp198
        tmp201 = tmp93 * tmp200
        tmp202 = tmp199 + tmp201
        tmp204 = tmp103 * tmp203
        tmp205 = tmp202 + tmp204
        tmp208 = tmp82 * tmp207
        tmp209 = tmp206 + tmp208
        tmp211 = tmp93 * tmp210
        tmp212 = tmp209 + tmp211
        tmp214 = tmp103 * tmp213
        tmp215 = tmp212 + tmp214
        tmp218 = tmp82 * tmp217
        tmp219 = tmp216 + tmp218
        tmp221 = tmp93 * tmp220
        tmp222 = tmp219 + tmp221
        tmp224 = tmp103 * tmp223
        tmp225 = tmp222 + tmp224
        tmp228 = tmp82 * tmp227
        tmp229 = tmp226 + tmp228
        tmp231 = tmp93 * tmp230
        tmp232 = tmp229 + tmp231
        tmp234 = tmp103 * tmp233
        tmp235 = tmp232 + tmp234
        tmp238 = tmp82 * tmp237
        tmp239 = tmp236 + tmp238
        tmp241 = tmp93 * tmp240
        tmp242 = tmp239 + tmp241
        tmp244 = tmp103 * tmp243
        tmp245 = tmp242 + tmp244
        tmp248 = tmp82 * tmp247
        tmp249 = tmp246 + tmp248
        tmp251 = tmp93 * tmp250
        tmp252 = tmp249 + tmp251
        tmp254 = tmp103 * tmp253
        tmp255 = tmp252 + tmp254
        tmp258 = tmp82 * tmp257
        tmp259 = tmp256 + tmp258
        tmp261 = tmp93 * tmp260
        tmp262 = tmp259 + tmp261
        tmp264 = tmp103 * tmp263
        tmp265 = tmp262 + tmp264
        tmp268 = tmp82 * tmp267
        tmp269 = tmp266 + tmp268
        tmp271 = tmp93 * tmp270
        tmp272 = tmp269 + tmp271
        tmp274 = tmp103 * tmp273
        tmp275 = tmp272 + tmp274
        tmp278 = tmp82 * tmp277
        tmp279 = tmp276 + tmp278
        tmp281 = tmp93 * tmp280
        tmp282 = tmp279 + tmp281
        tmp284 = tmp103 * tmp283
        tmp285 = tmp282 + tmp284
        tmp288 = tmp82 * tmp287
        tmp289 = tmp286 + tmp288
        tmp291 = tmp93 * tmp290
        tmp292 = tmp289 + tmp291
        tmp294 = tmp103 * tmp293
        tmp295 = tmp292 + tmp294
        tmp298 = tmp82 * tmp297
        tmp299 = tmp296 + tmp298
        tmp301 = tmp93 * tmp300
        tmp302 = tmp299 + tmp301
        tmp304 = tmp103 * tmp303
        tmp305 = tmp302 + tmp304
        tmp308 = tmp82 * tmp307
        tmp309 = tmp306 + tmp308
        tmp311 = tmp93 * tmp310
        tmp312 = tmp309 + tmp311
        tmp314 = tmp103 * tmp313
        tmp315 = tmp312 + tmp314
        tmp316 = tmp103 * tmp62
        tmp317 = tl.broadcast_to(tmp316, [XBLOCK, RBLOCK])
        tmp319 = _tmp318 + tmp317
        _tmp318 = tl.where(rmask, tmp319, _tmp318)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp80, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp105, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp125, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp135, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp155, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp165, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp175, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp185, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp195, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp205, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp215, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp225, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp235, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp245, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp255, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp265, rmask)
        tl.store(in_out_ptr17 + (r1 + (2048*x0)), tmp275, rmask)
        tl.store(in_out_ptr18 + (r1 + (2048*x0)), tmp285, rmask)
        tl.store(in_out_ptr19 + (r1 + (2048*x0)), tmp295, rmask)
        tl.store(in_out_ptr20 + (r1 + (2048*x0)), tmp305, rmask)
        tl.store(in_out_ptr21 + (r1 + (2048*x0)), tmp315, rmask)
    tmp318 = tl.sum(_tmp318, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp318, None)
    _tmp339 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp348 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp355 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp362 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp371 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp378 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp385 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp394 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp401 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp408 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp417 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp424 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp431 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp440 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp447 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp454 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp463 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp470 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp472 = tl.load(in_ptr123 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp483 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp491 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp495 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp320 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp330 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp334 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp335 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp342 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp344 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp350 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp351 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp357 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp358 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp365 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp367 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp374 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp380 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp381 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp387 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp388 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp390 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp396 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp397 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp403 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp404 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp410 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp411 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp413 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp426 = tl.load(in_ptr109 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp427 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp433 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp434 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp436 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp442 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp443 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp449 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp450 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp456 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp457 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp459 = tl.load(in_ptr120 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp465 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp466 = tl.load(in_ptr122 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp473 = tl.load(in_ptr124 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp477 = tl.load(in_ptr125 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp479 = tl.load(in_ptr126 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr127 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr128 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp322 = tmp320 * tmp321
        tmp323 = tmp322.to(tl.float32)
        tmp324 = 2048.0
        tmp325 = tmp68 / tmp324
        tmp326 = 1e-05
        tmp327 = tmp325 + tmp326
        tmp328 = tl.math.rsqrt(tmp327)
        tmp329 = tmp323 * tmp328
        tmp331 = tmp329 + tmp330
        tmp332 = tmp331 + tmp330
        tmp333 = tmp332.to(tl.float32)
        tmp336 = tmp334 + tmp335
        tmp337 = tmp333 * tmp336
        tmp338 = tl.broadcast_to(tmp337, [XBLOCK, RBLOCK])
        tmp340 = _tmp339 + tmp338
        _tmp339 = tl.where(rmask, tmp340, _tmp339)
        tmp343 = tmp341 + tmp342
        tmp345 = tmp343 + tmp344
        tmp346 = tmp333 * tmp345
        tmp347 = tl.broadcast_to(tmp346, [XBLOCK, RBLOCK])
        tmp349 = _tmp348 + tmp347
        _tmp348 = tl.where(rmask, tmp349, _tmp348)
        tmp352 = tmp350 + tmp351
        tmp353 = tmp333 * tmp352
        tmp354 = tl.broadcast_to(tmp353, [XBLOCK, RBLOCK])
        tmp356 = _tmp355 + tmp354
        _tmp355 = tl.where(rmask, tmp356, _tmp355)
        tmp359 = tmp357 + tmp358
        tmp360 = tmp333 * tmp359
        tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
        tmp363 = _tmp362 + tmp361
        _tmp362 = tl.where(rmask, tmp363, _tmp362)
        tmp366 = tmp364 + tmp365
        tmp368 = tmp366 + tmp367
        tmp369 = tmp333 * tmp368
        tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
        tmp372 = _tmp371 + tmp370
        _tmp371 = tl.where(rmask, tmp372, _tmp371)
        tmp375 = tmp373 + tmp374
        tmp376 = tmp333 * tmp375
        tmp377 = tl.broadcast_to(tmp376, [XBLOCK, RBLOCK])
        tmp379 = _tmp378 + tmp377
        _tmp378 = tl.where(rmask, tmp379, _tmp378)
        tmp382 = tmp380 + tmp381
        tmp383 = tmp333 * tmp382
        tmp384 = tl.broadcast_to(tmp383, [XBLOCK, RBLOCK])
        tmp386 = _tmp385 + tmp384
        _tmp385 = tl.where(rmask, tmp386, _tmp385)
        tmp389 = tmp387 + tmp388
        tmp391 = tmp389 + tmp390
        tmp392 = tmp333 * tmp391
        tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
        tmp395 = _tmp394 + tmp393
        _tmp394 = tl.where(rmask, tmp395, _tmp394)
        tmp398 = tmp396 + tmp397
        tmp399 = tmp333 * tmp398
        tmp400 = tl.broadcast_to(tmp399, [XBLOCK, RBLOCK])
        tmp402 = _tmp401 + tmp400
        _tmp401 = tl.where(rmask, tmp402, _tmp401)
        tmp405 = tmp403 + tmp404
        tmp406 = tmp333 * tmp405
        tmp407 = tl.broadcast_to(tmp406, [XBLOCK, RBLOCK])
        tmp409 = _tmp408 + tmp407
        _tmp408 = tl.where(rmask, tmp409, _tmp408)
        tmp412 = tmp410 + tmp411
        tmp414 = tmp412 + tmp413
        tmp415 = tmp333 * tmp414
        tmp416 = tl.broadcast_to(tmp415, [XBLOCK, RBLOCK])
        tmp418 = _tmp417 + tmp416
        _tmp417 = tl.where(rmask, tmp418, _tmp417)
        tmp421 = tmp419 + tmp420
        tmp422 = tmp333 * tmp421
        tmp423 = tl.broadcast_to(tmp422, [XBLOCK, RBLOCK])
        tmp425 = _tmp424 + tmp423
        _tmp424 = tl.where(rmask, tmp425, _tmp424)
        tmp428 = tmp426 + tmp427
        tmp429 = tmp333 * tmp428
        tmp430 = tl.broadcast_to(tmp429, [XBLOCK, RBLOCK])
        tmp432 = _tmp431 + tmp430
        _tmp431 = tl.where(rmask, tmp432, _tmp431)
        tmp435 = tmp433 + tmp434
        tmp437 = tmp435 + tmp436
        tmp438 = tmp333 * tmp437
        tmp439 = tl.broadcast_to(tmp438, [XBLOCK, RBLOCK])
        tmp441 = _tmp440 + tmp439
        _tmp440 = tl.where(rmask, tmp441, _tmp440)
        tmp444 = tmp442 + tmp443
        tmp445 = tmp333 * tmp444
        tmp446 = tl.broadcast_to(tmp445, [XBLOCK, RBLOCK])
        tmp448 = _tmp447 + tmp446
        _tmp447 = tl.where(rmask, tmp448, _tmp447)
        tmp451 = tmp449 + tmp450
        tmp452 = tmp333 * tmp451
        tmp453 = tl.broadcast_to(tmp452, [XBLOCK, RBLOCK])
        tmp455 = _tmp454 + tmp453
        _tmp454 = tl.where(rmask, tmp455, _tmp454)
        tmp458 = tmp456 + tmp457
        tmp460 = tmp458 + tmp459
        tmp461 = tmp333 * tmp460
        tmp462 = tl.broadcast_to(tmp461, [XBLOCK, RBLOCK])
        tmp464 = _tmp463 + tmp462
        _tmp463 = tl.where(rmask, tmp464, _tmp463)
        tmp467 = tmp465 + tmp466
        tmp468 = tmp333 * tmp467
        tmp469 = tl.broadcast_to(tmp468, [XBLOCK, RBLOCK])
        tmp471 = _tmp470 + tmp469
        _tmp470 = tl.where(rmask, tmp471, _tmp470)
        tmp474 = tmp472 * tmp473
        tmp475 = 0.0
        tmp476 = tmp474 + tmp475
        tmp478 = tmp476 + tmp477
        tmp480 = tmp478 + tmp479
        tmp481 = tmp333 * tmp480
        tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
        tmp484 = _tmp483 + tmp482
        _tmp483 = tl.where(rmask, tmp484, _tmp483)
        tmp486 = tmp473 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp333 * tmp488
        tmp490 = tl.broadcast_to(tmp489, [XBLOCK, RBLOCK])
        tmp492 = _tmp491 + tmp490
        _tmp491 = tl.where(rmask, tmp492, _tmp491)
        tmp493 = tmp333 * tmp473
        tmp494 = tl.broadcast_to(tmp493, [XBLOCK, RBLOCK])
        tmp496 = _tmp495 + tmp494
        _tmp495 = tl.where(rmask, tmp496, _tmp495)
    tmp339 = tl.sum(_tmp339, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp339, None)
    tmp348 = tl.sum(_tmp348, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp348, None)
    tmp355 = tl.sum(_tmp355, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp355, None)
    tmp362 = tl.sum(_tmp362, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp362, None)
    tmp371 = tl.sum(_tmp371, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp371, None)
    tmp378 = tl.sum(_tmp378, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp378, None)
    tmp385 = tl.sum(_tmp385, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp385, None)
    tmp394 = tl.sum(_tmp394, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp394, None)
    tmp401 = tl.sum(_tmp401, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp401, None)
    tmp408 = tl.sum(_tmp408, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp408, None)
    tmp417 = tl.sum(_tmp417, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp417, None)
    tmp424 = tl.sum(_tmp424, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp424, None)
    tmp431 = tl.sum(_tmp431, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp431, None)
    tmp440 = tl.sum(_tmp440, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp440, None)
    tmp447 = tl.sum(_tmp447, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp447, None)
    tmp454 = tl.sum(_tmp454, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp454, None)
    tmp463 = tl.sum(_tmp463, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp463, None)
    tmp470 = tl.sum(_tmp470, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp470, None)
    tmp483 = tl.sum(_tmp483, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp483, None)
    tmp491 = tl.sum(_tmp491, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp491, None)
    tmp495 = tl.sum(_tmp495, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp495, None)
''')


# kernel path: /tmp/torchinductor_mengqy/le/clemsdt5bo4rsm5ee2de2esniiggla57klautslpe52hoh5xwv5h.py
# Source Nodes: [], Original ATen: [aten.mul, aten.sum]

triton_red_fused_mul_sum_78 = async_compile.triton('triton_red_fused_mul_sum_78', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_mul_sum_78', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]}
)
@triton.jit
def triton_red_fused_mul_sum_78(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp4 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = _tmp4 + tmp3
        _tmp4 = tl.where(rmask, tmp5, _tmp4)
    tmp4 = tl.sum(_tmp4, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp4, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3q/c3qwzfezynpskm3pgmomc3ekpczlw6aocagslxoxykqxqft6dxt7.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, add_989, float_1, mean, mul, mul_4, mul_967, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1252
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_98 => add_155
# add_989 => add_1185
# float_1 => convert_element_type_392
# mean => mean_108
# mul => mul_1600
# mul_4 => mul_24
# mul_967 => mul_1533
# rsqrt => rsqrt_108
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_79 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_79', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp32', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: 'i32', 80: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_79', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(79, 80))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_79(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
    tmp14 = tl.load(in_ptr3 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp32 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp13 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = -0.5
        tmp2 = tmp0 * tmp1
        tmp4 = 2048.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = tl.math.rsqrt(tmp7)
        tmp9 = tmp8 * tmp8
        tmp10 = tmp9 * tmp8
        tmp11 = tmp2 * tmp10
        tmp12 = tmp11 / tmp4
        tmp17 = tmp15 + tmp16
        tmp18 = tmp14 * tmp17
        tmp19 = tmp13 + tmp18
        tmp20 = tmp19.to(tl.float32)
        tmp21 = tmp12 * tmp20
        tmp24 = tmp22 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp25 * tmp8
        tmp27 = tmp26 + tmp21
        tmp28 = tmp27 + tmp21
        tmp29 = tmp28.to(tl.float32)
        tmp30 = tmp29 * tmp17
        tmp31 = tl.broadcast_to(tmp30, [XBLOCK, RBLOCK])
        tmp33 = _tmp32 + tmp31
        _tmp32 = tl.where(rmask, tmp33, _tmp32)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp21, rmask)
    tmp32 = tl.sum(_tmp32, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp32, None)
    _tmp53 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp85 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp92 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp99 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp108 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp115 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp131 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp138 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp145 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp154 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp168 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp186 = tl.load(in_ptr50 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp197 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp34 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp44 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp48 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp134 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp141 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp147 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp173 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp193 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp201 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = 2048.0
        tmp39 = tmp3 / tmp38
        tmp40 = 1e-05
        tmp41 = tmp39 + tmp40
        tmp42 = tl.math.rsqrt(tmp41)
        tmp43 = tmp37 * tmp42
        tmp45 = tmp43 + tmp44
        tmp46 = tmp45 + tmp44
        tmp47 = tmp46.to(tl.float32)
        tmp50 = tmp48 + tmp49
        tmp51 = tmp47 * tmp50
        tmp52 = tl.broadcast_to(tmp51, [XBLOCK, RBLOCK])
        tmp54 = _tmp53 + tmp52
        _tmp53 = tl.where(rmask, tmp54, _tmp53)
        tmp57 = tmp55 + tmp56
        tmp59 = tmp57 + tmp58
        tmp60 = tmp47 * tmp59
        tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
        tmp63 = _tmp62 + tmp61
        _tmp62 = tl.where(rmask, tmp63, _tmp62)
        tmp66 = tmp64 + tmp65
        tmp67 = tmp47 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp73 = tmp71 + tmp72
        tmp74 = tmp47 * tmp73
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tmp80 = tmp78 + tmp79
        tmp82 = tmp80 + tmp81
        tmp83 = tmp47 * tmp82
        tmp84 = tl.broadcast_to(tmp83, [XBLOCK, RBLOCK])
        tmp86 = _tmp85 + tmp84
        _tmp85 = tl.where(rmask, tmp86, _tmp85)
        tmp89 = tmp87 + tmp88
        tmp90 = tmp47 * tmp89
        tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
        tmp93 = _tmp92 + tmp91
        _tmp92 = tl.where(rmask, tmp93, _tmp92)
        tmp96 = tmp94 + tmp95
        tmp97 = tmp47 * tmp96
        tmp98 = tl.broadcast_to(tmp97, [XBLOCK, RBLOCK])
        tmp100 = _tmp99 + tmp98
        _tmp99 = tl.where(rmask, tmp100, _tmp99)
        tmp103 = tmp101 + tmp102
        tmp105 = tmp103 + tmp104
        tmp106 = tmp47 * tmp105
        tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
        tmp109 = _tmp108 + tmp107
        _tmp108 = tl.where(rmask, tmp109, _tmp108)
        tmp112 = tmp110 + tmp111
        tmp113 = tmp47 * tmp112
        tmp114 = tl.broadcast_to(tmp113, [XBLOCK, RBLOCK])
        tmp116 = _tmp115 + tmp114
        _tmp115 = tl.where(rmask, tmp116, _tmp115)
        tmp119 = tmp117 + tmp118
        tmp120 = tmp47 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp126 = tmp124 + tmp125
        tmp128 = tmp126 + tmp127
        tmp129 = tmp47 * tmp128
        tmp130 = tl.broadcast_to(tmp129, [XBLOCK, RBLOCK])
        tmp132 = _tmp131 + tmp130
        _tmp131 = tl.where(rmask, tmp132, _tmp131)
        tmp135 = tmp133 + tmp134
        tmp136 = tmp47 * tmp135
        tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
        tmp139 = _tmp138 + tmp137
        _tmp138 = tl.where(rmask, tmp139, _tmp138)
        tmp142 = tmp140 + tmp141
        tmp143 = tmp47 * tmp142
        tmp144 = tl.broadcast_to(tmp143, [XBLOCK, RBLOCK])
        tmp146 = _tmp145 + tmp144
        _tmp145 = tl.where(rmask, tmp146, _tmp145)
        tmp149 = tmp147 + tmp148
        tmp151 = tmp149 + tmp150
        tmp152 = tmp47 * tmp151
        tmp153 = tl.broadcast_to(tmp152, [XBLOCK, RBLOCK])
        tmp155 = _tmp154 + tmp153
        _tmp154 = tl.where(rmask, tmp155, _tmp154)
        tmp158 = tmp156 + tmp157
        tmp159 = tmp47 * tmp158
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tmp165 = tmp163 + tmp164
        tmp166 = tmp47 * tmp165
        tmp167 = tl.broadcast_to(tmp166, [XBLOCK, RBLOCK])
        tmp169 = _tmp168 + tmp167
        _tmp168 = tl.where(rmask, tmp169, _tmp168)
        tmp172 = tmp170 + tmp171
        tmp174 = tmp172 + tmp173
        tmp175 = tmp47 * tmp174
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp181 = tmp179 + tmp180
        tmp182 = tmp47 * tmp181
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp188 = tmp186 * tmp187
        tmp189 = 0.0
        tmp190 = tmp188 + tmp189
        tmp192 = tmp190 + tmp191
        tmp194 = tmp192 + tmp193
        tmp195 = tmp47 * tmp194
        tmp196 = tl.broadcast_to(tmp195, [XBLOCK, RBLOCK])
        tmp198 = _tmp197 + tmp196
        _tmp197 = tl.where(rmask, tmp198, _tmp197)
        tmp200 = tmp187 + tmp199
        tmp202 = tmp200 + tmp201
        tmp203 = tmp47 * tmp202
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp47 * tmp187
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
    tmp53 = tl.sum(_tmp53, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp53, None)
    tmp62 = tl.sum(_tmp62, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp62, None)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp69, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp76, None)
    tmp85 = tl.sum(_tmp85, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp85, None)
    tmp92 = tl.sum(_tmp92, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp92, None)
    tmp99 = tl.sum(_tmp99, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp99, None)
    tmp108 = tl.sum(_tmp108, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp108, None)
    tmp115 = tl.sum(_tmp115, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp115, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp122, None)
    tmp131 = tl.sum(_tmp131, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp131, None)
    tmp138 = tl.sum(_tmp138, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp138, None)
    tmp145 = tl.sum(_tmp145, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp145, None)
    tmp154 = tl.sum(_tmp154, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp154, None)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp161, None)
    tmp168 = tl.sum(_tmp168, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp168, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp177, None)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp184, None)
    tmp197 = tl.sum(_tmp197, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp197, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp209, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yk/cyknhyeuzfslpj3mvu5kno776bwbwrttml55jxcla55tzv6ss77m.py
# Source Nodes: [add_10, add_1033, add_1034, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, float_3, mean_2, mul_1011, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_1033 => add_1229
# add_1034 => add_1254
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_96 => add_153
# add_98 => add_155
# float_3 => convert_element_type_396
# mean_2 => mean_110
# mul_1011 => mul_1577
# mul_4 => mul_24
# mul_6 => mul_1606
# rsqrt_2 => rsqrt_110
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_80 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_80', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp32', 52: '*fp32', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: 'i32', 99: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_80', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(98, 99))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_80(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp34 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp48 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp55 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp83 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp92 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp110 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp119 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp128 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp137 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp146 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp148 = tl.load(in_ptr46 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp158 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp164 = tl.load(in_ptr51 + (x0), None, eviction_policy='evict_last')
    _tmp180 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp204 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp208 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp212 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp216 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp220 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp224 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp228 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp232 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp244 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp248 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp252 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp256 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp260 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp264 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp268 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp122 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp130 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp131 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp152 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp154 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp160 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp161 = tl.load(in_ptr50 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0)
        tmp175 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp176 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp0 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp0 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp0 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 + tmp30
        tmp32 = tmp0 * tmp31
        tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
        tmp35 = _tmp34 + tmp33
        _tmp34 = tl.where(rmask, tmp35, _tmp34)
        tmp38 = tmp36 + tmp37
        tmp39 = tmp0 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tmp45 = tmp43 + tmp44
        tmp46 = tmp0 * tmp45
        tmp47 = tl.broadcast_to(tmp46, [XBLOCK, RBLOCK])
        tmp49 = _tmp48 + tmp47
        _tmp48 = tl.where(rmask, tmp49, _tmp48)
        tmp52 = tmp50 + tmp51
        tmp53 = tmp0 * tmp52
        tmp54 = tl.broadcast_to(tmp53, [XBLOCK, RBLOCK])
        tmp56 = _tmp55 + tmp54
        _tmp55 = tl.where(rmask, tmp56, _tmp55)
        tmp59 = tmp57 + tmp58
        tmp60 = tmp0 * tmp59
        tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
        tmp63 = _tmp62 + tmp61
        _tmp62 = tl.where(rmask, tmp63, _tmp62)
        tmp66 = tmp64 + tmp65
        tmp67 = tmp0 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp73 = tmp71 + tmp72
        tmp74 = tmp0 * tmp73
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tmp80 = tmp78 + tmp79
        tmp81 = tmp0 * tmp80
        tmp82 = tl.broadcast_to(tmp81, [XBLOCK, RBLOCK])
        tmp84 = _tmp83 + tmp82
        _tmp83 = tl.where(rmask, tmp84, _tmp83)
        tmp87 = tmp85 + tmp86
        tmp89 = tmp87 + tmp88
        tmp90 = tmp0 * tmp89
        tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
        tmp93 = _tmp92 + tmp91
        _tmp92 = tl.where(rmask, tmp93, _tmp92)
        tmp96 = tmp94 + tmp95
        tmp98 = tmp96 + tmp97
        tmp99 = tmp0 * tmp98
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tmp105 = tmp103 + tmp104
        tmp107 = tmp105 + tmp106
        tmp108 = tmp0 * tmp107
        tmp109 = tl.broadcast_to(tmp108, [XBLOCK, RBLOCK])
        tmp111 = _tmp110 + tmp109
        _tmp110 = tl.where(rmask, tmp111, _tmp110)
        tmp114 = tmp112 + tmp113
        tmp116 = tmp114 + tmp115
        tmp117 = tmp0 * tmp116
        tmp118 = tl.broadcast_to(tmp117, [XBLOCK, RBLOCK])
        tmp120 = _tmp119 + tmp118
        _tmp119 = tl.where(rmask, tmp120, _tmp119)
        tmp123 = tmp121 + tmp122
        tmp125 = tmp123 + tmp124
        tmp126 = tmp0 * tmp125
        tmp127 = tl.broadcast_to(tmp126, [XBLOCK, RBLOCK])
        tmp129 = _tmp128 + tmp127
        _tmp128 = tl.where(rmask, tmp129, _tmp128)
        tmp132 = tmp130 + tmp131
        tmp134 = tmp132 + tmp133
        tmp135 = tmp0 * tmp134
        tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
        tmp138 = _tmp137 + tmp136
        _tmp137 = tl.where(rmask, tmp138, _tmp137)
        tmp141 = tmp139 + tmp140
        tmp143 = tmp141 + tmp142
        tmp144 = tmp0 * tmp143
        tmp145 = tl.broadcast_to(tmp144, [XBLOCK, RBLOCK])
        tmp147 = _tmp146 + tmp145
        _tmp146 = tl.where(rmask, tmp147, _tmp146)
        tmp149 = tmp148 * tmp103
        tmp150 = 0.0
        tmp151 = tmp149 + tmp150
        tmp153 = tmp151 + tmp152
        tmp155 = tmp153 + tmp154
        tmp156 = tmp0 * tmp155
        tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
        tmp159 = _tmp158 + tmp157
        _tmp158 = tl.where(rmask, tmp159, _tmp158)
        tmp162 = tmp160 * tmp161
        tmp163 = tmp162.to(tl.float32)
        tmp165 = 2048.0
        tmp166 = tmp164 / tmp165
        tmp167 = 1e-05
        tmp168 = tmp166 + tmp167
        tmp169 = tl.math.rsqrt(tmp168)
        tmp170 = tmp163 * tmp169
        tmp172 = tmp170 + tmp171
        tmp173 = tmp172 + tmp171
        tmp174 = tmp173.to(tl.float32)
        tmp177 = tmp175 + tmp176
        tmp178 = tmp174 * tmp177
        tmp179 = tl.broadcast_to(tmp178, [XBLOCK, RBLOCK])
        tmp181 = _tmp180 + tmp179
        _tmp180 = tl.where(rmask, tmp181, _tmp180)
        tmp182 = tmp174 * tmp45
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp186 = tmp174 * tmp116
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp174 * tmp3
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp174 * tmp10
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp174 * tmp125
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp202 = tmp174 * tmp52
        tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
        tmp205 = _tmp204 + tmp203
        _tmp204 = tl.where(rmask, tmp205, _tmp204)
        tmp206 = tmp174 * tmp17
        tmp207 = tl.broadcast_to(tmp206, [XBLOCK, RBLOCK])
        tmp209 = _tmp208 + tmp207
        _tmp208 = tl.where(rmask, tmp209, _tmp208)
        tmp210 = tmp174 * tmp89
        tmp211 = tl.broadcast_to(tmp210, [XBLOCK, RBLOCK])
        tmp213 = _tmp212 + tmp211
        _tmp212 = tl.where(rmask, tmp213, _tmp212)
        tmp214 = tmp174 * tmp59
        tmp215 = tl.broadcast_to(tmp214, [XBLOCK, RBLOCK])
        tmp217 = _tmp216 + tmp215
        _tmp216 = tl.where(rmask, tmp217, _tmp216)
        tmp218 = tmp174 * tmp66
        tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
        tmp221 = _tmp220 + tmp219
        _tmp220 = tl.where(rmask, tmp221, _tmp220)
        tmp222 = tmp174 * tmp98
        tmp223 = tl.broadcast_to(tmp222, [XBLOCK, RBLOCK])
        tmp225 = _tmp224 + tmp223
        _tmp224 = tl.where(rmask, tmp225, _tmp224)
        tmp226 = tmp174 * tmp24
        tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
        tmp229 = _tmp228 + tmp227
        _tmp228 = tl.where(rmask, tmp229, _tmp228)
        tmp230 = tmp174 * tmp73
        tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
        tmp233 = _tmp232 + tmp231
        _tmp232 = tl.where(rmask, tmp233, _tmp232)
        tmp234 = tmp174 * tmp134
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp238 = tmp174 * tmp31
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tmp242 = tmp174 * tmp38
        tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
        tmp245 = _tmp244 + tmp243
        _tmp244 = tl.where(rmask, tmp245, _tmp244)
        tmp246 = tmp174 * tmp143
        tmp247 = tl.broadcast_to(tmp246, [XBLOCK, RBLOCK])
        tmp249 = _tmp248 + tmp247
        _tmp248 = tl.where(rmask, tmp249, _tmp248)
        tmp250 = tmp174 * tmp80
        tmp251 = tl.broadcast_to(tmp250, [XBLOCK, RBLOCK])
        tmp253 = _tmp252 + tmp251
        _tmp252 = tl.where(rmask, tmp253, _tmp252)
        tmp254 = tmp174 * tmp155
        tmp255 = tl.broadcast_to(tmp254, [XBLOCK, RBLOCK])
        tmp257 = _tmp256 + tmp255
        _tmp256 = tl.where(rmask, tmp257, _tmp256)
        tmp258 = tmp174 * tmp107
        tmp259 = tl.broadcast_to(tmp258, [XBLOCK, RBLOCK])
        tmp261 = _tmp260 + tmp259
        _tmp260 = tl.where(rmask, tmp261, _tmp260)
        tmp262 = tmp174 * tmp103
        tmp263 = tl.broadcast_to(tmp262, [XBLOCK, RBLOCK])
        tmp265 = _tmp264 + tmp263
        _tmp264 = tl.where(rmask, tmp265, _tmp264)
        tmp266 = tmp0 * tmp103
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
        tmp269 = _tmp268 + tmp267
        _tmp268 = tl.where(rmask, tmp269, _tmp268)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp13, None)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp20, None)
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp27, None)
    tmp34 = tl.sum(_tmp34, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp34, None)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp41, None)
    tmp48 = tl.sum(_tmp48, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp48, None)
    tmp55 = tl.sum(_tmp55, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp55, None)
    tmp62 = tl.sum(_tmp62, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp62, None)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp69, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp76, None)
    tmp83 = tl.sum(_tmp83, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp83, None)
    tmp92 = tl.sum(_tmp92, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp92, None)
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp101, None)
    tmp110 = tl.sum(_tmp110, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp110, None)
    tmp119 = tl.sum(_tmp119, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp119, None)
    tmp128 = tl.sum(_tmp128, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp128, None)
    tmp137 = tl.sum(_tmp137, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp137, None)
    tmp146 = tl.sum(_tmp146, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp146, None)
    tmp158 = tl.sum(_tmp158, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp158, None)
    tmp180 = tl.sum(_tmp180, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp180, None)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp184, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp200, None)
    tmp204 = tl.sum(_tmp204, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp204, None)
    tmp208 = tl.sum(_tmp208, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp208, None)
    tmp212 = tl.sum(_tmp212, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp212, None)
    tmp216 = tl.sum(_tmp216, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp216, None)
    tmp220 = tl.sum(_tmp220, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp220, None)
    tmp224 = tl.sum(_tmp224, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp224, None)
    tmp228 = tl.sum(_tmp228, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp228, None)
    tmp232 = tl.sum(_tmp232, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp232, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp236, None)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp240, None)
    tmp244 = tl.sum(_tmp244, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp244, None)
    tmp248 = tl.sum(_tmp248, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp248, None)
    tmp252 = tl.sum(_tmp252, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp252, None)
    tmp256 = tl.sum(_tmp256, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp256, None)
    tmp260 = tl.sum(_tmp260, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp260, None)
    tmp264 = tl.sum(_tmp264, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp264, None)
    tmp268 = tl.sum(_tmp268, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp268, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pg/cpgsohiwowixabm6xwwf6hgqaddldwfrf6yfx6b5kwgvp7hjnwon.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_81 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_81', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_81', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(86,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_81(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, xnumel, XBLOCK : tl.constexpr):
    xnumel = 565248
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 141312)
    x0 = xindex % 23
    x1 = (xindex // 23) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp229 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp261 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp277 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp285 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp289 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp297 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp301 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp305 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp309 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp314 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp322 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp326 = tl.load(in_ptr69 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp334 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp338 = tl.load(in_ptr72 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr73 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp346 = tl.load(in_ptr74 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp350 = tl.load(in_ptr75 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr76 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp358 = tl.load(in_ptr77 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp362 = tl.load(in_ptr78 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp366 = tl.load(in_ptr79 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp370 = tl.load(in_ptr80 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp374 = tl.load(in_ptr81 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp378 = tl.load(in_ptr82 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp382 = tl.load(in_ptr83 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr84 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 21, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 20, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 19, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 18, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 17, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 16, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 15, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 14, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 13, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 12, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 11, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 10, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 9, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 8, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 7, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tl.full([1], 6, tl.int32)
    tmp95 = tmp3 == tmp94
    tmp97 = tl.where(tmp95, tmp96, tmp7)
    tmp98 = tl.where(tmp2, tmp97, tmp7)
    tmp99 = tmp93 + tmp98
    tmp100 = tl.full([1], 5, tl.int32)
    tmp101 = tmp3 == tmp100
    tmp103 = tl.where(tmp101, tmp102, tmp7)
    tmp104 = tl.where(tmp2, tmp103, tmp7)
    tmp105 = tmp99 + tmp104
    tmp106 = tl.full([1], 4, tl.int32)
    tmp107 = tmp3 == tmp106
    tmp109 = tl.where(tmp107, tmp108, tmp7)
    tmp110 = tl.where(tmp2, tmp109, tmp7)
    tmp111 = tmp105 + tmp110
    tmp112 = tmp3 == tmp1
    tmp114 = tl.where(tmp112, tmp113, tmp7)
    tmp115 = tl.where(tmp2, tmp114, tmp7)
    tmp116 = tmp111 + tmp115
    tmp117 = tl.full([1], 2, tl.int32)
    tmp118 = tmp3 == tmp117
    tmp120 = tl.where(tmp118, tmp119, tmp7)
    tmp121 = tl.where(tmp2, tmp120, tmp7)
    tmp122 = tmp116 + tmp121
    tmp123 = tl.full([1], 1, tl.int32)
    tmp124 = tmp3 == tmp123
    tmp126 = tl.where(tmp124, tmp125, tmp7)
    tmp127 = tl.where(tmp2, tmp126, tmp7)
    tmp128 = tmp122 + tmp127
    tmp129 = tl.full([1], 0, tl.int32)
    tmp130 = tmp3 == tmp129
    tmp132 = tl.where(tmp130, tmp131, tmp7)
    tmp133 = tl.where(tmp2, tmp132, tmp7)
    tmp134 = tmp128 + tmp133
    tmp135 = tmp0 == tmp117
    tmp137 = tl.where(tmp5, tmp136, tmp7)
    tmp138 = tl.where(tmp135, tmp137, tmp7)
    tmp139 = tmp134 + tmp138
    tmp141 = tl.where(tmp11, tmp140, tmp7)
    tmp142 = tl.where(tmp135, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp145 = tl.where(tmp17, tmp144, tmp7)
    tmp146 = tl.where(tmp135, tmp145, tmp7)
    tmp147 = tmp143 + tmp146
    tmp149 = tl.where(tmp23, tmp148, tmp7)
    tmp150 = tl.where(tmp135, tmp149, tmp7)
    tmp151 = tmp147 + tmp150
    tmp153 = tl.where(tmp29, tmp152, tmp7)
    tmp154 = tl.where(tmp135, tmp153, tmp7)
    tmp155 = tmp151 + tmp154
    tmp157 = tl.where(tmp35, tmp156, tmp7)
    tmp158 = tl.where(tmp135, tmp157, tmp7)
    tmp159 = tmp155 + tmp158
    tmp161 = tl.where(tmp41, tmp160, tmp7)
    tmp162 = tl.where(tmp135, tmp161, tmp7)
    tmp163 = tmp159 + tmp162
    tmp165 = tl.where(tmp47, tmp164, tmp7)
    tmp166 = tl.where(tmp135, tmp165, tmp7)
    tmp167 = tmp163 + tmp166
    tmp169 = tl.where(tmp53, tmp168, tmp7)
    tmp170 = tl.where(tmp135, tmp169, tmp7)
    tmp171 = tmp167 + tmp170
    tmp173 = tl.where(tmp59, tmp172, tmp7)
    tmp174 = tl.where(tmp135, tmp173, tmp7)
    tmp175 = tmp171 + tmp174
    tmp177 = tl.where(tmp65, tmp176, tmp7)
    tmp178 = tl.where(tmp135, tmp177, tmp7)
    tmp179 = tmp175 + tmp178
    tmp181 = tl.where(tmp71, tmp180, tmp7)
    tmp182 = tl.where(tmp135, tmp181, tmp7)
    tmp183 = tmp179 + tmp182
    tmp185 = tl.where(tmp77, tmp184, tmp7)
    tmp186 = tl.where(tmp135, tmp185, tmp7)
    tmp187 = tmp183 + tmp186
    tmp189 = tl.where(tmp83, tmp188, tmp7)
    tmp190 = tl.where(tmp135, tmp189, tmp7)
    tmp191 = tmp187 + tmp190
    tmp193 = tl.where(tmp89, tmp192, tmp7)
    tmp194 = tl.where(tmp135, tmp193, tmp7)
    tmp195 = tmp191 + tmp194
    tmp197 = tl.where(tmp95, tmp196, tmp7)
    tmp198 = tl.where(tmp135, tmp197, tmp7)
    tmp199 = tmp195 + tmp198
    tmp201 = tl.where(tmp101, tmp200, tmp7)
    tmp202 = tl.where(tmp135, tmp201, tmp7)
    tmp203 = tmp199 + tmp202
    tmp205 = tl.where(tmp107, tmp204, tmp7)
    tmp206 = tl.where(tmp135, tmp205, tmp7)
    tmp207 = tmp203 + tmp206
    tmp209 = tl.where(tmp112, tmp208, tmp7)
    tmp210 = tl.where(tmp135, tmp209, tmp7)
    tmp211 = tmp207 + tmp210
    tmp213 = tl.where(tmp118, tmp212, tmp7)
    tmp214 = tl.where(tmp135, tmp213, tmp7)
    tmp215 = tmp211 + tmp214
    tmp217 = tl.where(tmp124, tmp216, tmp7)
    tmp218 = tl.where(tmp135, tmp217, tmp7)
    tmp219 = tmp215 + tmp218
    tmp221 = tl.where(tmp130, tmp220, tmp7)
    tmp222 = tl.where(tmp135, tmp221, tmp7)
    tmp223 = tmp219 + tmp222
    tmp224 = tmp0 == tmp123
    tmp226 = tl.where(tmp5, tmp225, tmp7)
    tmp227 = tl.where(tmp224, tmp226, tmp7)
    tmp228 = tmp223 + tmp227
    tmp230 = tl.where(tmp11, tmp229, tmp7)
    tmp231 = tl.where(tmp224, tmp230, tmp7)
    tmp232 = tmp228 + tmp231
    tmp234 = tl.where(tmp17, tmp233, tmp7)
    tmp235 = tl.where(tmp224, tmp234, tmp7)
    tmp236 = tmp232 + tmp235
    tmp238 = tl.where(tmp23, tmp237, tmp7)
    tmp239 = tl.where(tmp224, tmp238, tmp7)
    tmp240 = tmp236 + tmp239
    tmp242 = tl.where(tmp29, tmp241, tmp7)
    tmp243 = tl.where(tmp224, tmp242, tmp7)
    tmp244 = tmp240 + tmp243
    tmp246 = tl.where(tmp35, tmp245, tmp7)
    tmp247 = tl.where(tmp224, tmp246, tmp7)
    tmp248 = tmp244 + tmp247
    tmp250 = tl.where(tmp41, tmp249, tmp7)
    tmp251 = tl.where(tmp224, tmp250, tmp7)
    tmp252 = tmp248 + tmp251
    tmp254 = tl.where(tmp47, tmp253, tmp7)
    tmp255 = tl.where(tmp224, tmp254, tmp7)
    tmp256 = tmp252 + tmp255
    tmp258 = tl.where(tmp53, tmp257, tmp7)
    tmp259 = tl.where(tmp224, tmp258, tmp7)
    tmp260 = tmp256 + tmp259
    tmp262 = tl.where(tmp59, tmp261, tmp7)
    tmp263 = tl.where(tmp224, tmp262, tmp7)
    tmp264 = tmp260 + tmp263
    tmp266 = tl.where(tmp65, tmp265, tmp7)
    tmp267 = tl.where(tmp224, tmp266, tmp7)
    tmp268 = tmp264 + tmp267
    tmp270 = tl.where(tmp71, tmp269, tmp7)
    tmp271 = tl.where(tmp224, tmp270, tmp7)
    tmp272 = tmp268 + tmp271
    tmp274 = tl.where(tmp77, tmp273, tmp7)
    tmp275 = tl.where(tmp224, tmp274, tmp7)
    tmp276 = tmp272 + tmp275
    tmp278 = tl.where(tmp83, tmp277, tmp7)
    tmp279 = tl.where(tmp224, tmp278, tmp7)
    tmp280 = tmp276 + tmp279
    tmp282 = tl.where(tmp89, tmp281, tmp7)
    tmp283 = tl.where(tmp224, tmp282, tmp7)
    tmp284 = tmp280 + tmp283
    tmp286 = tl.where(tmp95, tmp285, tmp7)
    tmp287 = tl.where(tmp224, tmp286, tmp7)
    tmp288 = tmp284 + tmp287
    tmp290 = tl.where(tmp101, tmp289, tmp7)
    tmp291 = tl.where(tmp224, tmp290, tmp7)
    tmp292 = tmp288 + tmp291
    tmp294 = tl.where(tmp107, tmp293, tmp7)
    tmp295 = tl.where(tmp224, tmp294, tmp7)
    tmp296 = tmp292 + tmp295
    tmp298 = tl.where(tmp112, tmp297, tmp7)
    tmp299 = tl.where(tmp224, tmp298, tmp7)
    tmp300 = tmp296 + tmp299
    tmp302 = tl.where(tmp118, tmp301, tmp7)
    tmp303 = tl.where(tmp224, tmp302, tmp7)
    tmp304 = tmp300 + tmp303
    tmp306 = tl.where(tmp124, tmp305, tmp7)
    tmp307 = tl.where(tmp224, tmp306, tmp7)
    tmp308 = tmp304 + tmp307
    tmp310 = tl.where(tmp130, tmp309, tmp7)
    tmp311 = tl.where(tmp224, tmp310, tmp7)
    tmp312 = tmp308 + tmp311
    tmp313 = tmp0 == tmp129
    tmp315 = tl.where(tmp5, tmp314, tmp7)
    tmp316 = tl.where(tmp313, tmp315, tmp7)
    tmp317 = tmp312 + tmp316
    tmp319 = tl.where(tmp11, tmp318, tmp7)
    tmp320 = tl.where(tmp313, tmp319, tmp7)
    tmp321 = tmp317 + tmp320
    tmp323 = tl.where(tmp17, tmp322, tmp7)
    tmp324 = tl.where(tmp313, tmp323, tmp7)
    tmp325 = tmp321 + tmp324
    tmp327 = tl.where(tmp23, tmp326, tmp7)
    tmp328 = tl.where(tmp313, tmp327, tmp7)
    tmp329 = tmp325 + tmp328
    tmp331 = tl.where(tmp29, tmp330, tmp7)
    tmp332 = tl.where(tmp313, tmp331, tmp7)
    tmp333 = tmp329 + tmp332
    tmp335 = tl.where(tmp35, tmp334, tmp7)
    tmp336 = tl.where(tmp313, tmp335, tmp7)
    tmp337 = tmp333 + tmp336
    tmp339 = tl.where(tmp41, tmp338, tmp7)
    tmp340 = tl.where(tmp313, tmp339, tmp7)
    tmp341 = tmp337 + tmp340
    tmp343 = tl.where(tmp47, tmp342, tmp7)
    tmp344 = tl.where(tmp313, tmp343, tmp7)
    tmp345 = tmp341 + tmp344
    tmp347 = tl.where(tmp53, tmp346, tmp7)
    tmp348 = tl.where(tmp313, tmp347, tmp7)
    tmp349 = tmp345 + tmp348
    tmp351 = tl.where(tmp59, tmp350, tmp7)
    tmp352 = tl.where(tmp313, tmp351, tmp7)
    tmp353 = tmp349 + tmp352
    tmp355 = tl.where(tmp65, tmp354, tmp7)
    tmp356 = tl.where(tmp313, tmp355, tmp7)
    tmp357 = tmp353 + tmp356
    tmp359 = tl.where(tmp71, tmp358, tmp7)
    tmp360 = tl.where(tmp313, tmp359, tmp7)
    tmp361 = tmp357 + tmp360
    tmp363 = tl.where(tmp77, tmp362, tmp7)
    tmp364 = tl.where(tmp313, tmp363, tmp7)
    tmp365 = tmp361 + tmp364
    tmp367 = tl.where(tmp83, tmp366, tmp7)
    tmp368 = tl.where(tmp313, tmp367, tmp7)
    tmp369 = tmp365 + tmp368
    tmp371 = tl.where(tmp89, tmp370, tmp7)
    tmp372 = tl.where(tmp313, tmp371, tmp7)
    tmp373 = tmp369 + tmp372
    tmp375 = tl.where(tmp95, tmp374, tmp7)
    tmp376 = tl.where(tmp313, tmp375, tmp7)
    tmp377 = tmp373 + tmp376
    tmp379 = tl.where(tmp101, tmp378, tmp7)
    tmp380 = tl.where(tmp313, tmp379, tmp7)
    tmp381 = tmp377 + tmp380
    tmp383 = tl.where(tmp107, tmp382, tmp7)
    tmp384 = tl.where(tmp313, tmp383, tmp7)
    tmp385 = tmp381 + tmp384
    tmp387 = tl.where(tmp112, tmp386, tmp7)
    tmp388 = tl.where(tmp313, tmp387, tmp7)
    tmp389 = tmp385 + tmp388
    tl.store(in_out_ptr0 + (x3), tmp389, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ci/cci35fmrp67q2k3vteggym4rvwqme6f2dehsvknozd5bpe2md6ek.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_82 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_82', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_82', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_82(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4416
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 23
    x4 = (xindex // 23)
    x2 = (xindex // 1104)
    x1 = (xindex // 23) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (23*r3) + (2944*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/l4/cl4qnylmo6i6hkxmzwnhye2mabbfuaneoytlmp2zzaf6czzbox7k.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_83 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_83', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_83', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_83(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 92
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 23
    x1 = (xindex // 23)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (23*r2) + (1104*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/pd/cpdafzqezlcc4wgyrj4tokdzr76ahetq4pqblmhe75u347ft53p6.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_84 = async_compile.triton('triton_poi_fused_clone_84', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_84', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_84(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 565248
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 23
    x1 = (xindex // 23) % 4
    x2 = (xindex // 92)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (23*x2) + (141312*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/56/c56agqyqhqs5mf2r4e7m2gpipd5lyjmds4yenql2zqcmddnuqqkz.py
# Source Nodes: [l__mod___dynamic_dense_21_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_21_act => add_1162, convert_element_type_390, erf_21, mul_1510
triton_poi_fused_gelu_gelu_backward_85 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_85', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_85', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_85(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 565248
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = xindex
    x0 = xindex % 92
    x1 = (xindex // 92)
    tmp0 = tl.load(in_out_ptr0 + (x2), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0 + (96*x1)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x2), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5l/c5lcbkl42q3klbwn3shsw7vur4comwvjkhugnwuukpa5iv4a7nue.py
# Source Nodes: [add_966, add_968], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_966 => add_1158
# add_968 => add_1160
triton_red_fused_add_div_mul_pow_sum_86 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_86', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_86', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_86(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp25 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp15 = -0.5
        tmp16 = tmp8 * tmp15
        tmp17 = tmp12 * tmp12
        tmp18 = tmp17 * tmp12
        tmp19 = tmp16 * tmp18
        tmp20 = 2048.0
        tmp21 = tmp19 / tmp20
        tmp24 = tmp22 + tmp23
        tmp26 = tmp24 + tmp25
        tmp27 = 2.0
        tmp28 = tmp26 * tmp27
        tmp29 = tmp21 * tmp28
        tmp30 = tmp14 + tmp29
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp30, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/pk/cpk5qzbc53oy4lk3pwpx4l7bn7o37oynbwytbow5xxkfhb2es25b.py
# Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_966 => add_1158
# add_967 => add_1159
# float_6 => convert_element_type_386
# mean_3 => mean_106
# mul_18 => mul_1503
# mul_19 => mul_1504
# rsqrt_3 => rsqrt_106
# type_as_5 => convert_element_type_387
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp17 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr4 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp6 = tmp5.to(tl.float32)
        tmp8 = 2048.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = tl.math.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp14 = tmp13.to(tl.float32)
        tmp15 = tmp2 * tmp14
        tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
        tmp18 = _tmp17 + tmp16
        _tmp17 = tl.where(rmask, tmp18, _tmp17)
    tmp17 = tl.sum(_tmp17, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp17, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pp/cpp7pnfidsrs6hudgjctgi2bebnxta2uqxyfi4px5hjkstuqu2ah.py
# Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_966 => add_1158
# add_967 => add_1159
# float_6 => convert_element_type_386
# mean_3 => mean_106
# mul_18 => mul_1503
# rsqrt_3 => rsqrt_106
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp5 = tmp4.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp5 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp40 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tmp14 + tmp15
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp21 = 2048.0
        tmp22 = tmp20 / tmp21
        tmp23 = 1e-05
        tmp24 = tmp22 + tmp23
        tmp25 = tl.math.rsqrt(tmp24)
        tmp26 = tmp19 * tmp25
        tmp27 = -0.5
        tmp28 = tmp12 * tmp27
        tmp29 = tmp25 * tmp25
        tmp30 = tmp29 * tmp25
        tmp31 = tmp28 * tmp30
        tmp32 = tmp31 / tmp21
        tmp35 = tmp33 + tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp37 = tmp32 * tmp36
        tmp38 = tmp26 + tmp37
        tmp39 = tmp38 + tmp37
        tmp41 = tmp39.to(tl.float32)
        tmp42 = tmp40 + tmp41
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp42, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/24/c247nilwqqw6fv6673jhvv5zbidccwoklcg6vlkugbejvsekbkfb.py
# Source Nodes: [add_945, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_945 => add_1155
# float_3 => convert_element_type_378
# mean_2 => mean_105
# mul_6 => mul_1491
# mul_7 => mul_1492
# rsqrt_2 => rsqrt_105
# type_as_2 => convert_element_type_379
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp1.to(tl.float32)
        tmp4 = 2048.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = tl.math.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = tmp9.to(tl.float32)
        tmp11 = tmp0 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp13, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ey/ceywqtildy3wfzqer2qrskjkhxtmi25q5qsdfeljhio3hwvxi6fn.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_945, add_96, add_98, add_989, float_1, float_3, mean, mean_2, mul, mul_4, mul_6, mul_967, rsqrt, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1252
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_882 => add_1065
# add_945 => add_1155
# add_96 => add_153
# add_98 => add_155
# add_989 => add_1185
# float_1 => convert_element_type_392
# float_3 => convert_element_type_378
# mean => mean_108
# mean_2 => mean_105
# mul => mul_1600
# mul_4 => mul_24
# mul_6 => mul_1491
# mul_967 => mul_1533
# rsqrt => rsqrt_108
# rsqrt_2 => rsqrt_105
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_90 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_90', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp32', 25: '*fp16', 26: '*fp16', 27: '*fp32', 28: '*fp32', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp16', 155: '*fp16', 156: '*fp16', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp16', 164: '*fp16', 165: '*fp16', 166: '*fp16', 167: '*fp16', 168: '*fp16', 169: '*fp16', 170: '*fp16', 171: '*fp16', 172: '*fp16', 173: '*fp16', 174: '*fp16', 175: 'i32', 176: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr17', 'in_out_ptr18', 'in_out_ptr19', 'in_out_ptr2', 'in_out_ptr20', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_90', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(175, 176))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_90(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_out_ptr17, in_out_ptr18, in_out_ptr19, in_out_ptr20, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp38 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
    tmp47 = tl.load(in_ptr8 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp51 = tl.load(in_ptr10 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr11 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr12 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr13 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr14 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr15 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr16 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr17 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr18 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr19 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr20 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr21 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr22 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr23 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr24 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr25 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr26 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr27 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr28 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr29 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr30 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr31 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr32 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr33 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr34 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr35 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr36 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr37 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr38 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr39 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr40 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr41 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr42 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr43 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr44 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr45 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr46 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr47 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr48 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr49 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr50 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr51 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr52 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr53 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr54 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr55 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr56 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr57 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr58 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr59 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr60 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr61 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr62 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr63 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr64 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr65 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr66 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr67 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr68 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr69 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr70 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp254 = tl.load(in_ptr71 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp262 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0)
        tmp50 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp147 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp167 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp217 = tl.load(in_out_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_out_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_out_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_out_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp257 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp39 = tmp38 / tmp15
        tmp40 = tmp39 + tmp17
        tmp41 = tl.math.rsqrt(tmp40)
        tmp42 = tmp37 * tmp41
        tmp44 = tmp42 + tmp43
        tmp45 = tmp44 + tmp43
        tmp46 = tmp45.to(tl.float32)
        tmp48 = tmp46 * tmp47
        tmp49 = tmp33 + tmp48
        tmp52 = tmp50 * tmp51
        tmp53 = tmp49 + tmp52
        tmp55 = tmp32 * tmp54
        tmp56 = tmp53 + tmp55
        tmp59 = tmp46 * tmp58
        tmp60 = tmp57 + tmp59
        tmp62 = tmp50 * tmp61
        tmp63 = tmp60 + tmp62
        tmp65 = tmp32 * tmp64
        tmp66 = tmp63 + tmp65
        tmp69 = tmp46 * tmp68
        tmp70 = tmp67 + tmp69
        tmp72 = tmp50 * tmp71
        tmp73 = tmp70 + tmp72
        tmp75 = tmp32 * tmp74
        tmp76 = tmp73 + tmp75
        tmp79 = tmp46 * tmp78
        tmp80 = tmp77 + tmp79
        tmp82 = tmp50 * tmp81
        tmp83 = tmp80 + tmp82
        tmp85 = tmp32 * tmp84
        tmp86 = tmp83 + tmp85
        tmp89 = tmp46 * tmp88
        tmp90 = tmp87 + tmp89
        tmp92 = tmp50 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp32 * tmp94
        tmp96 = tmp93 + tmp95
        tmp99 = tmp46 * tmp98
        tmp100 = tmp97 + tmp99
        tmp102 = tmp50 * tmp101
        tmp103 = tmp100 + tmp102
        tmp105 = tmp32 * tmp104
        tmp106 = tmp103 + tmp105
        tmp109 = tmp46 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp50 * tmp111
        tmp113 = tmp110 + tmp112
        tmp115 = tmp32 * tmp114
        tmp116 = tmp113 + tmp115
        tmp119 = tmp46 * tmp118
        tmp120 = tmp117 + tmp119
        tmp122 = tmp50 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp32 * tmp124
        tmp126 = tmp123 + tmp125
        tmp129 = tmp46 * tmp128
        tmp130 = tmp127 + tmp129
        tmp132 = tmp50 * tmp131
        tmp133 = tmp130 + tmp132
        tmp135 = tmp32 * tmp134
        tmp136 = tmp133 + tmp135
        tmp139 = tmp46 * tmp138
        tmp140 = tmp137 + tmp139
        tmp142 = tmp50 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp32 * tmp144
        tmp146 = tmp143 + tmp145
        tmp149 = tmp46 * tmp148
        tmp150 = tmp147 + tmp149
        tmp152 = tmp50 * tmp151
        tmp153 = tmp150 + tmp152
        tmp155 = tmp32 * tmp154
        tmp156 = tmp153 + tmp155
        tmp159 = tmp46 * tmp158
        tmp160 = tmp157 + tmp159
        tmp162 = tmp50 * tmp161
        tmp163 = tmp160 + tmp162
        tmp165 = tmp32 * tmp164
        tmp166 = tmp163 + tmp165
        tmp169 = tmp46 * tmp168
        tmp170 = tmp167 + tmp169
        tmp172 = tmp50 * tmp171
        tmp173 = tmp170 + tmp172
        tmp175 = tmp32 * tmp174
        tmp176 = tmp173 + tmp175
        tmp179 = tmp46 * tmp178
        tmp180 = tmp177 + tmp179
        tmp182 = tmp50 * tmp181
        tmp183 = tmp180 + tmp182
        tmp185 = tmp32 * tmp184
        tmp186 = tmp183 + tmp185
        tmp189 = tmp46 * tmp188
        tmp190 = tmp187 + tmp189
        tmp192 = tmp50 * tmp191
        tmp193 = tmp190 + tmp192
        tmp195 = tmp32 * tmp194
        tmp196 = tmp193 + tmp195
        tmp199 = tmp46 * tmp198
        tmp200 = tmp197 + tmp199
        tmp202 = tmp50 * tmp201
        tmp203 = tmp200 + tmp202
        tmp205 = tmp32 * tmp204
        tmp206 = tmp203 + tmp205
        tmp209 = tmp46 * tmp208
        tmp210 = tmp207 + tmp209
        tmp212 = tmp50 * tmp211
        tmp213 = tmp210 + tmp212
        tmp215 = tmp32 * tmp214
        tmp216 = tmp213 + tmp215
        tmp219 = tmp46 * tmp218
        tmp220 = tmp217 + tmp219
        tmp222 = tmp50 * tmp221
        tmp223 = tmp220 + tmp222
        tmp225 = tmp32 * tmp224
        tmp226 = tmp223 + tmp225
        tmp229 = tmp46 * tmp228
        tmp230 = tmp227 + tmp229
        tmp232 = tmp50 * tmp231
        tmp233 = tmp230 + tmp232
        tmp235 = tmp32 * tmp234
        tmp236 = tmp233 + tmp235
        tmp239 = tmp46 * tmp238
        tmp240 = tmp237 + tmp239
        tmp242 = tmp50 * tmp241
        tmp243 = tmp240 + tmp242
        tmp245 = tmp32 * tmp244
        tmp246 = tmp243 + tmp245
        tmp249 = tmp46 * tmp248
        tmp250 = tmp247 + tmp249
        tmp252 = tmp50 * tmp251
        tmp253 = tmp250 + tmp252
        tmp255 = tmp32 * tmp254
        tmp256 = tmp253 + tmp255
        tmp259 = tmp257 + tmp258
        tmp260 = tmp50 * tmp259
        tmp261 = tl.broadcast_to(tmp260, [XBLOCK, RBLOCK])
        tmp263 = _tmp262 + tmp261
        _tmp262 = tl.where(rmask, tmp263, _tmp262)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp56, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp76, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp96, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp116, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp136, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp146, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp156, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp166, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp176, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp186, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp196, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp206, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp216, rmask)
        tl.store(in_out_ptr17 + (r1 + (2048*x0)), tmp226, rmask)
        tl.store(in_out_ptr18 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(in_out_ptr19 + (r1 + (2048*x0)), tmp246, rmask)
        tl.store(in_out_ptr20 + (r1 + (2048*x0)), tmp256, rmask)
    tmp262 = tl.sum(_tmp262, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp262, None)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp280 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp284 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp291 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp295 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp302 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp306 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp315 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp319 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp326 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp330 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp337 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp341 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp350 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp354 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp361 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp365 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp372 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp376 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp385 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp389 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp396 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp400 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp407 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp416 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp423 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp430 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp439 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp446 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp448 = tl.load(in_ptr114 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp459 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp467 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp471 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp264 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp265 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp266 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp273 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp274 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp276 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp287 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp297 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp311 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp322 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp332 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp343 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp344 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp346 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp356 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp357 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp367 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp368 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp378 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp379 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp381 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp391 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp392 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp402 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp403 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp409 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp410 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp412 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp418 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp425 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp426 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp432 = tl.load(in_ptr109 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp433 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp435 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp441 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp442 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp449 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp453 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp455 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp461 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp463 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp267 = tmp265 + tmp266
        tmp268 = tmp264 * tmp267
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp275 = tmp273 + tmp274
        tmp277 = tmp275 + tmp276
        tmp278 = tmp272 * tmp277
        tmp279 = tl.broadcast_to(tmp278, [XBLOCK, RBLOCK])
        tmp281 = _tmp280 + tmp279
        _tmp280 = tl.where(rmask, tmp281, _tmp280)
        tmp282 = tmp264 * tmp277
        tmp283 = tl.broadcast_to(tmp282, [XBLOCK, RBLOCK])
        tmp285 = _tmp284 + tmp283
        _tmp284 = tl.where(rmask, tmp285, _tmp284)
        tmp288 = tmp286 + tmp287
        tmp289 = tmp272 * tmp288
        tmp290 = tl.broadcast_to(tmp289, [XBLOCK, RBLOCK])
        tmp292 = _tmp291 + tmp290
        _tmp291 = tl.where(rmask, tmp292, _tmp291)
        tmp293 = tmp264 * tmp288
        tmp294 = tl.broadcast_to(tmp293, [XBLOCK, RBLOCK])
        tmp296 = _tmp295 + tmp294
        _tmp295 = tl.where(rmask, tmp296, _tmp295)
        tmp299 = tmp297 + tmp298
        tmp300 = tmp272 * tmp299
        tmp301 = tl.broadcast_to(tmp300, [XBLOCK, RBLOCK])
        tmp303 = _tmp302 + tmp301
        _tmp302 = tl.where(rmask, tmp303, _tmp302)
        tmp304 = tmp264 * tmp299
        tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
        tmp307 = _tmp306 + tmp305
        _tmp306 = tl.where(rmask, tmp307, _tmp306)
        tmp310 = tmp308 + tmp309
        tmp312 = tmp310 + tmp311
        tmp313 = tmp272 * tmp312
        tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
        tmp316 = _tmp315 + tmp314
        _tmp315 = tl.where(rmask, tmp316, _tmp315)
        tmp317 = tmp264 * tmp312
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK, RBLOCK])
        tmp320 = _tmp319 + tmp318
        _tmp319 = tl.where(rmask, tmp320, _tmp319)
        tmp323 = tmp321 + tmp322
        tmp324 = tmp272 * tmp323
        tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
        tmp327 = _tmp326 + tmp325
        _tmp326 = tl.where(rmask, tmp327, _tmp326)
        tmp328 = tmp264 * tmp323
        tmp329 = tl.broadcast_to(tmp328, [XBLOCK, RBLOCK])
        tmp331 = _tmp330 + tmp329
        _tmp330 = tl.where(rmask, tmp331, _tmp330)
        tmp334 = tmp332 + tmp333
        tmp335 = tmp272 * tmp334
        tmp336 = tl.broadcast_to(tmp335, [XBLOCK, RBLOCK])
        tmp338 = _tmp337 + tmp336
        _tmp337 = tl.where(rmask, tmp338, _tmp337)
        tmp339 = tmp264 * tmp334
        tmp340 = tl.broadcast_to(tmp339, [XBLOCK, RBLOCK])
        tmp342 = _tmp341 + tmp340
        _tmp341 = tl.where(rmask, tmp342, _tmp341)
        tmp345 = tmp343 + tmp344
        tmp347 = tmp345 + tmp346
        tmp348 = tmp272 * tmp347
        tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
        tmp351 = _tmp350 + tmp349
        _tmp350 = tl.where(rmask, tmp351, _tmp350)
        tmp352 = tmp264 * tmp347
        tmp353 = tl.broadcast_to(tmp352, [XBLOCK, RBLOCK])
        tmp355 = _tmp354 + tmp353
        _tmp354 = tl.where(rmask, tmp355, _tmp354)
        tmp358 = tmp356 + tmp357
        tmp359 = tmp272 * tmp358
        tmp360 = tl.broadcast_to(tmp359, [XBLOCK, RBLOCK])
        tmp362 = _tmp361 + tmp360
        _tmp361 = tl.where(rmask, tmp362, _tmp361)
        tmp363 = tmp264 * tmp358
        tmp364 = tl.broadcast_to(tmp363, [XBLOCK, RBLOCK])
        tmp366 = _tmp365 + tmp364
        _tmp365 = tl.where(rmask, tmp366, _tmp365)
        tmp369 = tmp367 + tmp368
        tmp370 = tmp272 * tmp369
        tmp371 = tl.broadcast_to(tmp370, [XBLOCK, RBLOCK])
        tmp373 = _tmp372 + tmp371
        _tmp372 = tl.where(rmask, tmp373, _tmp372)
        tmp374 = tmp264 * tmp369
        tmp375 = tl.broadcast_to(tmp374, [XBLOCK, RBLOCK])
        tmp377 = _tmp376 + tmp375
        _tmp376 = tl.where(rmask, tmp377, _tmp376)
        tmp380 = tmp378 + tmp379
        tmp382 = tmp380 + tmp381
        tmp383 = tmp272 * tmp382
        tmp384 = tl.broadcast_to(tmp383, [XBLOCK, RBLOCK])
        tmp386 = _tmp385 + tmp384
        _tmp385 = tl.where(rmask, tmp386, _tmp385)
        tmp387 = tmp264 * tmp382
        tmp388 = tl.broadcast_to(tmp387, [XBLOCK, RBLOCK])
        tmp390 = _tmp389 + tmp388
        _tmp389 = tl.where(rmask, tmp390, _tmp389)
        tmp393 = tmp391 + tmp392
        tmp394 = tmp272 * tmp393
        tmp395 = tl.broadcast_to(tmp394, [XBLOCK, RBLOCK])
        tmp397 = _tmp396 + tmp395
        _tmp396 = tl.where(rmask, tmp397, _tmp396)
        tmp398 = tmp264 * tmp393
        tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
        tmp401 = _tmp400 + tmp399
        _tmp400 = tl.where(rmask, tmp401, _tmp400)
        tmp404 = tmp402 + tmp403
        tmp405 = tmp272 * tmp404
        tmp406 = tl.broadcast_to(tmp405, [XBLOCK, RBLOCK])
        tmp408 = _tmp407 + tmp406
        _tmp407 = tl.where(rmask, tmp408, _tmp407)
        tmp411 = tmp409 + tmp410
        tmp413 = tmp411 + tmp412
        tmp414 = tmp272 * tmp413
        tmp415 = tl.broadcast_to(tmp414, [XBLOCK, RBLOCK])
        tmp417 = _tmp416 + tmp415
        _tmp416 = tl.where(rmask, tmp417, _tmp416)
        tmp420 = tmp418 + tmp419
        tmp421 = tmp272 * tmp420
        tmp422 = tl.broadcast_to(tmp421, [XBLOCK, RBLOCK])
        tmp424 = _tmp423 + tmp422
        _tmp423 = tl.where(rmask, tmp424, _tmp423)
        tmp427 = tmp425 + tmp426
        tmp428 = tmp272 * tmp427
        tmp429 = tl.broadcast_to(tmp428, [XBLOCK, RBLOCK])
        tmp431 = _tmp430 + tmp429
        _tmp430 = tl.where(rmask, tmp431, _tmp430)
        tmp434 = tmp432 + tmp433
        tmp436 = tmp434 + tmp435
        tmp437 = tmp272 * tmp436
        tmp438 = tl.broadcast_to(tmp437, [XBLOCK, RBLOCK])
        tmp440 = _tmp439 + tmp438
        _tmp439 = tl.where(rmask, tmp440, _tmp439)
        tmp443 = tmp441 + tmp442
        tmp444 = tmp272 * tmp443
        tmp445 = tl.broadcast_to(tmp444, [XBLOCK, RBLOCK])
        tmp447 = _tmp446 + tmp445
        _tmp446 = tl.where(rmask, tmp447, _tmp446)
        tmp450 = tmp448 * tmp449
        tmp451 = 0.0
        tmp452 = tmp450 + tmp451
        tmp454 = tmp452 + tmp453
        tmp456 = tmp454 + tmp455
        tmp457 = tmp272 * tmp456
        tmp458 = tl.broadcast_to(tmp457, [XBLOCK, RBLOCK])
        tmp460 = _tmp459 + tmp458
        _tmp459 = tl.where(rmask, tmp460, _tmp459)
        tmp462 = tmp449 + tmp461
        tmp464 = tmp462 + tmp463
        tmp465 = tmp272 * tmp464
        tmp466 = tl.broadcast_to(tmp465, [XBLOCK, RBLOCK])
        tmp468 = _tmp467 + tmp466
        _tmp467 = tl.where(rmask, tmp468, _tmp467)
        tmp469 = tmp272 * tmp449
        tmp470 = tl.broadcast_to(tmp469, [XBLOCK, RBLOCK])
        tmp472 = _tmp471 + tmp470
        _tmp471 = tl.where(rmask, tmp472, _tmp471)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp270, None)
    tmp280 = tl.sum(_tmp280, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp280, None)
    tmp284 = tl.sum(_tmp284, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp284, None)
    tmp291 = tl.sum(_tmp291, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp291, None)
    tmp295 = tl.sum(_tmp295, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp295, None)
    tmp302 = tl.sum(_tmp302, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp302, None)
    tmp306 = tl.sum(_tmp306, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp306, None)
    tmp315 = tl.sum(_tmp315, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp315, None)
    tmp319 = tl.sum(_tmp319, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp319, None)
    tmp326 = tl.sum(_tmp326, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp326, None)
    tmp330 = tl.sum(_tmp330, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp330, None)
    tmp337 = tl.sum(_tmp337, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp337, None)
    tmp341 = tl.sum(_tmp341, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp341, None)
    tmp350 = tl.sum(_tmp350, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp350, None)
    tmp354 = tl.sum(_tmp354, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp354, None)
    tmp361 = tl.sum(_tmp361, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp361, None)
    tmp365 = tl.sum(_tmp365, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp365, None)
    tmp372 = tl.sum(_tmp372, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp372, None)
    tmp376 = tl.sum(_tmp376, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp376, None)
    tmp385 = tl.sum(_tmp385, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp385, None)
    tmp389 = tl.sum(_tmp389, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp389, None)
    tmp396 = tl.sum(_tmp396, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp396, None)
    tmp400 = tl.sum(_tmp400, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp400, None)
    tmp407 = tl.sum(_tmp407, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp407, None)
    tmp416 = tl.sum(_tmp416, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp416, None)
    tmp423 = tl.sum(_tmp423, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp423, None)
    tmp430 = tl.sum(_tmp430, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp430, None)
    tmp439 = tl.sum(_tmp439, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp439, None)
    tmp446 = tl.sum(_tmp446, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp446, None)
    tmp459 = tl.sum(_tmp459, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp459, None)
    tmp467 = tl.sum(_tmp467, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp467, None)
    tmp471 = tl.sum(_tmp471, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp471, None)
''')


# kernel path: /tmp/torchinductor_mengqy/p7/cp732zz6ut23ens4fikcpr2yevsuci25xyks2abq2qqcc4nu44xy.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_924, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1153
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_800 => add_974
# add_924 => add_1154
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_374
# float_2 => convert_element_type_376
# mean => mean_103
# mean_1 => mean_104
# mul => mul_1485
# mul_3 => mul_1488
# mul_4 => mul_24
# rsqrt => rsqrt_103
# rsqrt_1 => rsqrt_104
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_91 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_91', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: 'i32', 111: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_91', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(110, 111))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_91(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, out_ptr1, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, out_ptr46, out_ptr47, out_ptr48, out_ptr49, out_ptr50, out_ptr51, out_ptr52, out_ptr53, out_ptr54, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp38 = tmp37.to(tl.float32)
        tmp39 = tmp36 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tmp47 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp71 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp43 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp46 = tmp45.to(tl.float32)
        tmp48 = 2048.0
        tmp49 = tmp47 / tmp48
        tmp50 = 1e-05
        tmp51 = tmp49 + tmp50
        tmp52 = tl.math.rsqrt(tmp51)
        tmp53 = tmp46 * tmp52
        tmp54 = -0.5
        tmp55 = tmp41 * tmp54
        tmp56 = tmp52 * tmp52
        tmp57 = tmp56 * tmp52
        tmp58 = tmp55 * tmp57
        tmp59 = tmp58 / tmp48
        tmp61 = tmp60.to(tl.float32)
        tmp62 = tmp59 * tmp61
        tmp63 = tmp53 + tmp62
        tmp64 = tmp63 + tmp62
        tmp65 = tmp64.to(tl.float32)
        tmp68 = tmp66 + tmp67
        tmp69 = tmp65 * tmp68
        tmp70 = tl.broadcast_to(tmp69, [XBLOCK, RBLOCK])
        tmp72 = _tmp71 + tmp70
        _tmp71 = tl.where(rmask, tmp72, _tmp71)
        tmp74 = tmp73 * tmp68
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp65, rmask)
    tmp71 = tl.sum(_tmp71, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp71, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp76, None)
    _tmp86 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp91 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp98 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp102 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp109 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp113 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp126 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp137 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp144 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp148 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp168 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp172 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp179 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp183 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp203 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp207 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp215 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp219 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp223 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp232 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp247 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp251 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp255 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp262 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp279 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp283 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp294 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp298 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp302 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp304 = tl.load(in_ptr51 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp315 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp319 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp323 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp331 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp335 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp339 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp343 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp347 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp351 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp78 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp105 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp128 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp174 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp175 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp185 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp188 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp209 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp210 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp211 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp225 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp228 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp242 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp243 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp257 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp273 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp289 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp290 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp305 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp311 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp325 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp327 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tmp79 + tmp80
        tmp83 = tmp81 + tmp82
        tmp84 = tmp78 * tmp83
        tmp85 = tl.broadcast_to(tmp84, [XBLOCK, RBLOCK])
        tmp87 = _tmp86 + tmp85
        _tmp86 = tl.where(rmask, tmp87, _tmp86)
        tmp89 = tmp88 * tmp83
        tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
        tmp92 = _tmp91 + tmp90
        _tmp91 = tl.where(rmask, tmp92, _tmp91)
        tmp95 = tmp93 + tmp94
        tmp96 = tmp78 * tmp95
        tmp97 = tl.broadcast_to(tmp96, [XBLOCK, RBLOCK])
        tmp99 = _tmp98 + tmp97
        _tmp98 = tl.where(rmask, tmp99, _tmp98)
        tmp100 = tmp88 * tmp95
        tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
        tmp103 = _tmp102 + tmp101
        _tmp102 = tl.where(rmask, tmp103, _tmp102)
        tmp106 = tmp104 + tmp105
        tmp107 = tmp78 * tmp106
        tmp108 = tl.broadcast_to(tmp107, [XBLOCK, RBLOCK])
        tmp110 = _tmp109 + tmp108
        _tmp109 = tl.where(rmask, tmp110, _tmp109)
        tmp111 = tmp88 * tmp106
        tmp112 = tl.broadcast_to(tmp111, [XBLOCK, RBLOCK])
        tmp114 = _tmp113 + tmp112
        _tmp113 = tl.where(rmask, tmp114, _tmp113)
        tmp117 = tmp115 + tmp116
        tmp119 = tmp117 + tmp118
        tmp120 = tmp78 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp124 = tmp88 * tmp119
        tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
        tmp127 = _tmp126 + tmp125
        _tmp126 = tl.where(rmask, tmp127, _tmp126)
        tmp130 = tmp128 + tmp129
        tmp131 = tmp78 * tmp130
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp135 = tmp88 * tmp130
        tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
        tmp138 = _tmp137 + tmp136
        _tmp137 = tl.where(rmask, tmp138, _tmp137)
        tmp141 = tmp139 + tmp140
        tmp142 = tmp78 * tmp141
        tmp143 = tl.broadcast_to(tmp142, [XBLOCK, RBLOCK])
        tmp145 = _tmp144 + tmp143
        _tmp144 = tl.where(rmask, tmp145, _tmp144)
        tmp146 = tmp88 * tmp141
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
        tmp149 = _tmp148 + tmp147
        _tmp148 = tl.where(rmask, tmp149, _tmp148)
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp78 * tmp154
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp159 = tmp88 * tmp154
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tmp165 = tmp163 + tmp164
        tmp166 = tmp78 * tmp165
        tmp167 = tl.broadcast_to(tmp166, [XBLOCK, RBLOCK])
        tmp169 = _tmp168 + tmp167
        _tmp168 = tl.where(rmask, tmp169, _tmp168)
        tmp170 = tmp88 * tmp165
        tmp171 = tl.broadcast_to(tmp170, [XBLOCK, RBLOCK])
        tmp173 = _tmp172 + tmp171
        _tmp172 = tl.where(rmask, tmp173, _tmp172)
        tmp176 = tmp174 + tmp175
        tmp177 = tmp78 * tmp176
        tmp178 = tl.broadcast_to(tmp177, [XBLOCK, RBLOCK])
        tmp180 = _tmp179 + tmp178
        _tmp179 = tl.where(rmask, tmp180, _tmp179)
        tmp181 = tmp88 * tmp176
        tmp182 = tl.broadcast_to(tmp181, [XBLOCK, RBLOCK])
        tmp184 = _tmp183 + tmp182
        _tmp183 = tl.where(rmask, tmp184, _tmp183)
        tmp187 = tmp185 + tmp186
        tmp189 = tmp187 + tmp188
        tmp190 = tmp78 * tmp189
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp88 * tmp189
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp200 = tmp198 + tmp199
        tmp201 = tmp78 * tmp200
        tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
        tmp204 = _tmp203 + tmp202
        _tmp203 = tl.where(rmask, tmp204, _tmp203)
        tmp205 = tmp88 * tmp200
        tmp206 = tl.broadcast_to(tmp205, [XBLOCK, RBLOCK])
        tmp208 = _tmp207 + tmp206
        _tmp207 = tl.where(rmask, tmp208, _tmp207)
        tmp212 = tmp210 + tmp211
        tmp213 = tmp209 * tmp212
        tmp214 = tl.broadcast_to(tmp213, [XBLOCK, RBLOCK])
        tmp216 = _tmp215 + tmp214
        _tmp215 = tl.where(rmask, tmp216, _tmp215)
        tmp217 = tmp78 * tmp212
        tmp218 = tl.broadcast_to(tmp217, [XBLOCK, RBLOCK])
        tmp220 = _tmp219 + tmp218
        _tmp219 = tl.where(rmask, tmp220, _tmp219)
        tmp221 = tmp88 * tmp212
        tmp222 = tl.broadcast_to(tmp221, [XBLOCK, RBLOCK])
        tmp224 = _tmp223 + tmp222
        _tmp223 = tl.where(rmask, tmp224, _tmp223)
        tmp227 = tmp225 + tmp226
        tmp229 = tmp227 + tmp228
        tmp230 = tmp209 * tmp229
        tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
        tmp233 = _tmp232 + tmp231
        _tmp232 = tl.where(rmask, tmp233, _tmp232)
        tmp234 = tmp78 * tmp229
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp238 = tmp88 * tmp229
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tmp244 = tmp242 + tmp243
        tmp245 = tmp209 * tmp244
        tmp246 = tl.broadcast_to(tmp245, [XBLOCK, RBLOCK])
        tmp248 = _tmp247 + tmp246
        _tmp247 = tl.where(rmask, tmp248, _tmp247)
        tmp249 = tmp78 * tmp244
        tmp250 = tl.broadcast_to(tmp249, [XBLOCK, RBLOCK])
        tmp252 = _tmp251 + tmp250
        _tmp251 = tl.where(rmask, tmp252, _tmp251)
        tmp253 = tmp88 * tmp244
        tmp254 = tl.broadcast_to(tmp253, [XBLOCK, RBLOCK])
        tmp256 = _tmp255 + tmp254
        _tmp255 = tl.where(rmask, tmp256, _tmp255)
        tmp259 = tmp257 + tmp258
        tmp260 = tmp209 * tmp259
        tmp261 = tl.broadcast_to(tmp260, [XBLOCK, RBLOCK])
        tmp263 = _tmp262 + tmp261
        _tmp262 = tl.where(rmask, tmp263, _tmp262)
        tmp264 = tmp78 * tmp259
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tmp268 = tmp88 * tmp259
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp274 = tmp272 + tmp273
        tmp276 = tmp274 + tmp275
        tmp277 = tmp209 * tmp276
        tmp278 = tl.broadcast_to(tmp277, [XBLOCK, RBLOCK])
        tmp280 = _tmp279 + tmp278
        _tmp279 = tl.where(rmask, tmp280, _tmp279)
        tmp281 = tmp78 * tmp276
        tmp282 = tl.broadcast_to(tmp281, [XBLOCK, RBLOCK])
        tmp284 = _tmp283 + tmp282
        _tmp283 = tl.where(rmask, tmp284, _tmp283)
        tmp285 = tmp88 * tmp276
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp291 = tmp289 + tmp290
        tmp292 = tmp209 * tmp291
        tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
        tmp295 = _tmp294 + tmp293
        _tmp294 = tl.where(rmask, tmp295, _tmp294)
        tmp296 = tmp78 * tmp291
        tmp297 = tl.broadcast_to(tmp296, [XBLOCK, RBLOCK])
        tmp299 = _tmp298 + tmp297
        _tmp298 = tl.where(rmask, tmp299, _tmp298)
        tmp300 = tmp88 * tmp291
        tmp301 = tl.broadcast_to(tmp300, [XBLOCK, RBLOCK])
        tmp303 = _tmp302 + tmp301
        _tmp302 = tl.where(rmask, tmp303, _tmp302)
        tmp306 = tmp304 * tmp305
        tmp307 = 0.0
        tmp308 = tmp306 + tmp307
        tmp310 = tmp308 + tmp309
        tmp312 = tmp310 + tmp311
        tmp313 = tmp209 * tmp312
        tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
        tmp316 = _tmp315 + tmp314
        _tmp315 = tl.where(rmask, tmp316, _tmp315)
        tmp317 = tmp78 * tmp312
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK, RBLOCK])
        tmp320 = _tmp319 + tmp318
        _tmp319 = tl.where(rmask, tmp320, _tmp319)
        tmp321 = tmp88 * tmp312
        tmp322 = tl.broadcast_to(tmp321, [XBLOCK, RBLOCK])
        tmp324 = _tmp323 + tmp322
        _tmp323 = tl.where(rmask, tmp324, _tmp323)
        tmp326 = tmp305 + tmp325
        tmp328 = tmp326 + tmp327
        tmp329 = tmp209 * tmp328
        tmp330 = tl.broadcast_to(tmp329, [XBLOCK, RBLOCK])
        tmp332 = _tmp331 + tmp330
        _tmp331 = tl.where(rmask, tmp332, _tmp331)
        tmp333 = tmp78 * tmp328
        tmp334 = tl.broadcast_to(tmp333, [XBLOCK, RBLOCK])
        tmp336 = _tmp335 + tmp334
        _tmp335 = tl.where(rmask, tmp336, _tmp335)
        tmp337 = tmp88 * tmp328
        tmp338 = tl.broadcast_to(tmp337, [XBLOCK, RBLOCK])
        tmp340 = _tmp339 + tmp338
        _tmp339 = tl.where(rmask, tmp340, _tmp339)
        tmp341 = tmp78 * tmp305
        tmp342 = tl.broadcast_to(tmp341, [XBLOCK, RBLOCK])
        tmp344 = _tmp343 + tmp342
        _tmp343 = tl.where(rmask, tmp344, _tmp343)
        tmp345 = tmp88 * tmp305
        tmp346 = tl.broadcast_to(tmp345, [XBLOCK, RBLOCK])
        tmp348 = _tmp347 + tmp346
        _tmp347 = tl.where(rmask, tmp348, _tmp347)
        tmp349 = tmp209 * tmp305
        tmp350 = tl.broadcast_to(tmp349, [XBLOCK, RBLOCK])
        tmp352 = _tmp351 + tmp350
        _tmp351 = tl.where(rmask, tmp352, _tmp351)
    tmp86 = tl.sum(_tmp86, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp86, None)
    tmp91 = tl.sum(_tmp91, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp91, None)
    tmp98 = tl.sum(_tmp98, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp98, None)
    tmp102 = tl.sum(_tmp102, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp102, None)
    tmp109 = tl.sum(_tmp109, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp109, None)
    tmp113 = tl.sum(_tmp113, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp113, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp122, None)
    tmp126 = tl.sum(_tmp126, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp126, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp133, None)
    tmp137 = tl.sum(_tmp137, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp137, None)
    tmp144 = tl.sum(_tmp144, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp144, None)
    tmp148 = tl.sum(_tmp148, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp148, None)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp157, None)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp161, None)
    tmp168 = tl.sum(_tmp168, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp168, None)
    tmp172 = tl.sum(_tmp172, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp172, None)
    tmp179 = tl.sum(_tmp179, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp179, None)
    tmp183 = tl.sum(_tmp183, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp183, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp196, None)
    tmp203 = tl.sum(_tmp203, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp203, None)
    tmp207 = tl.sum(_tmp207, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp207, None)
    tmp215 = tl.sum(_tmp215, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp215, None)
    tmp219 = tl.sum(_tmp219, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp219, None)
    tmp223 = tl.sum(_tmp223, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp223, None)
    tmp232 = tl.sum(_tmp232, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp232, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp236, None)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp240, None)
    tmp247 = tl.sum(_tmp247, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp247, None)
    tmp251 = tl.sum(_tmp251, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp251, None)
    tmp255 = tl.sum(_tmp255, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp255, None)
    tmp262 = tl.sum(_tmp262, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp262, None)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp266, None)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp270, None)
    tmp279 = tl.sum(_tmp279, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp279, None)
    tmp283 = tl.sum(_tmp283, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp283, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp287, None)
    tmp294 = tl.sum(_tmp294, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp294, None)
    tmp298 = tl.sum(_tmp298, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp298, None)
    tmp302 = tl.sum(_tmp302, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp302, None)
    tmp315 = tl.sum(_tmp315, 1)[:, None]
    tl.store(out_ptr46 + (x0), tmp315, None)
    tmp319 = tl.sum(_tmp319, 1)[:, None]
    tl.store(out_ptr47 + (x0), tmp319, None)
    tmp323 = tl.sum(_tmp323, 1)[:, None]
    tl.store(out_ptr48 + (x0), tmp323, None)
    tmp331 = tl.sum(_tmp331, 1)[:, None]
    tl.store(out_ptr49 + (x0), tmp331, None)
    tmp335 = tl.sum(_tmp335, 1)[:, None]
    tl.store(out_ptr50 + (x0), tmp335, None)
    tmp339 = tl.sum(_tmp339, 1)[:, None]
    tl.store(out_ptr51 + (x0), tmp339, None)
    tmp343 = tl.sum(_tmp343, 1)[:, None]
    tl.store(out_ptr52 + (x0), tmp343, None)
    tmp347 = tl.sum(_tmp347, 1)[:, None]
    tl.store(out_ptr53 + (x0), tmp347, None)
    tmp351 = tl.sum(_tmp351, 1)[:, None]
    tl.store(out_ptr54 + (x0), tmp351, None)
''')


# kernel path: /tmp/torchinductor_mengqy/jh/cjhmxaeex76tyhnwe5j4qe6wpkimnv65vyjgbqb4k2fn7atey2bi.py
# Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1153
# float_1 => convert_element_type_374
# mean => mean_103
# mul => mul_1485
# mul_1 => mul_1486
# rsqrt => rsqrt_103
# type_as => convert_element_type_375
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp1.to(tl.float32)
        tmp4 = 2048.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = tl.math.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp10 = tmp9.to(tl.float32)
        tmp11 = tmp0 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp13, None)
''')


# kernel path: /tmp/torchinductor_mengqy/nm/cnmditftppsbjmqo7ogn6e4bep2bsh7iovphsndun5u23xclui4o.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_93 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_93', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_93', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(82,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_93(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, xnumel, XBLOCK : tl.constexpr):
    xnumel = 540672
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 135168)
    x0 = xindex % 22
    x1 = (xindex // 22) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp255 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp271 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp279 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp283 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp291 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp295 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp308 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp316 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp320 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr69 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp328 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp332 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr72 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp340 = tl.load(in_ptr73 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp344 = tl.load(in_ptr74 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr75 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp352 = tl.load(in_ptr76 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp356 = tl.load(in_ptr77 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr78 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp364 = tl.load(in_ptr79 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp368 = tl.load(in_ptr80 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 20, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 19, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 18, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 17, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 16, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 15, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 14, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 13, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 12, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 11, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 10, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 9, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 8, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 7, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 6, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tl.full([1], 5, tl.int32)
    tmp95 = tmp3 == tmp94
    tmp97 = tl.where(tmp95, tmp96, tmp7)
    tmp98 = tl.where(tmp2, tmp97, tmp7)
    tmp99 = tmp93 + tmp98
    tmp100 = tl.full([1], 4, tl.int32)
    tmp101 = tmp3 == tmp100
    tmp103 = tl.where(tmp101, tmp102, tmp7)
    tmp104 = tl.where(tmp2, tmp103, tmp7)
    tmp105 = tmp99 + tmp104
    tmp106 = tmp3 == tmp1
    tmp108 = tl.where(tmp106, tmp107, tmp7)
    tmp109 = tl.where(tmp2, tmp108, tmp7)
    tmp110 = tmp105 + tmp109
    tmp111 = tl.full([1], 2, tl.int32)
    tmp112 = tmp3 == tmp111
    tmp114 = tl.where(tmp112, tmp113, tmp7)
    tmp115 = tl.where(tmp2, tmp114, tmp7)
    tmp116 = tmp110 + tmp115
    tmp117 = tl.full([1], 1, tl.int32)
    tmp118 = tmp3 == tmp117
    tmp120 = tl.where(tmp118, tmp119, tmp7)
    tmp121 = tl.where(tmp2, tmp120, tmp7)
    tmp122 = tmp116 + tmp121
    tmp123 = tl.full([1], 0, tl.int32)
    tmp124 = tmp3 == tmp123
    tmp126 = tl.where(tmp124, tmp125, tmp7)
    tmp127 = tl.where(tmp2, tmp126, tmp7)
    tmp128 = tmp122 + tmp127
    tmp129 = tmp0 == tmp111
    tmp131 = tl.where(tmp5, tmp130, tmp7)
    tmp132 = tl.where(tmp129, tmp131, tmp7)
    tmp133 = tmp128 + tmp132
    tmp135 = tl.where(tmp11, tmp134, tmp7)
    tmp136 = tl.where(tmp129, tmp135, tmp7)
    tmp137 = tmp133 + tmp136
    tmp139 = tl.where(tmp17, tmp138, tmp7)
    tmp140 = tl.where(tmp129, tmp139, tmp7)
    tmp141 = tmp137 + tmp140
    tmp143 = tl.where(tmp23, tmp142, tmp7)
    tmp144 = tl.where(tmp129, tmp143, tmp7)
    tmp145 = tmp141 + tmp144
    tmp147 = tl.where(tmp29, tmp146, tmp7)
    tmp148 = tl.where(tmp129, tmp147, tmp7)
    tmp149 = tmp145 + tmp148
    tmp151 = tl.where(tmp35, tmp150, tmp7)
    tmp152 = tl.where(tmp129, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp155 = tl.where(tmp41, tmp154, tmp7)
    tmp156 = tl.where(tmp129, tmp155, tmp7)
    tmp157 = tmp153 + tmp156
    tmp159 = tl.where(tmp47, tmp158, tmp7)
    tmp160 = tl.where(tmp129, tmp159, tmp7)
    tmp161 = tmp157 + tmp160
    tmp163 = tl.where(tmp53, tmp162, tmp7)
    tmp164 = tl.where(tmp129, tmp163, tmp7)
    tmp165 = tmp161 + tmp164
    tmp167 = tl.where(tmp59, tmp166, tmp7)
    tmp168 = tl.where(tmp129, tmp167, tmp7)
    tmp169 = tmp165 + tmp168
    tmp171 = tl.where(tmp65, tmp170, tmp7)
    tmp172 = tl.where(tmp129, tmp171, tmp7)
    tmp173 = tmp169 + tmp172
    tmp175 = tl.where(tmp71, tmp174, tmp7)
    tmp176 = tl.where(tmp129, tmp175, tmp7)
    tmp177 = tmp173 + tmp176
    tmp179 = tl.where(tmp77, tmp178, tmp7)
    tmp180 = tl.where(tmp129, tmp179, tmp7)
    tmp181 = tmp177 + tmp180
    tmp183 = tl.where(tmp83, tmp182, tmp7)
    tmp184 = tl.where(tmp129, tmp183, tmp7)
    tmp185 = tmp181 + tmp184
    tmp187 = tl.where(tmp89, tmp186, tmp7)
    tmp188 = tl.where(tmp129, tmp187, tmp7)
    tmp189 = tmp185 + tmp188
    tmp191 = tl.where(tmp95, tmp190, tmp7)
    tmp192 = tl.where(tmp129, tmp191, tmp7)
    tmp193 = tmp189 + tmp192
    tmp195 = tl.where(tmp101, tmp194, tmp7)
    tmp196 = tl.where(tmp129, tmp195, tmp7)
    tmp197 = tmp193 + tmp196
    tmp199 = tl.where(tmp106, tmp198, tmp7)
    tmp200 = tl.where(tmp129, tmp199, tmp7)
    tmp201 = tmp197 + tmp200
    tmp203 = tl.where(tmp112, tmp202, tmp7)
    tmp204 = tl.where(tmp129, tmp203, tmp7)
    tmp205 = tmp201 + tmp204
    tmp207 = tl.where(tmp118, tmp206, tmp7)
    tmp208 = tl.where(tmp129, tmp207, tmp7)
    tmp209 = tmp205 + tmp208
    tmp211 = tl.where(tmp124, tmp210, tmp7)
    tmp212 = tl.where(tmp129, tmp211, tmp7)
    tmp213 = tmp209 + tmp212
    tmp214 = tmp0 == tmp117
    tmp216 = tl.where(tmp5, tmp215, tmp7)
    tmp217 = tl.where(tmp214, tmp216, tmp7)
    tmp218 = tmp213 + tmp217
    tmp220 = tl.where(tmp11, tmp219, tmp7)
    tmp221 = tl.where(tmp214, tmp220, tmp7)
    tmp222 = tmp218 + tmp221
    tmp224 = tl.where(tmp17, tmp223, tmp7)
    tmp225 = tl.where(tmp214, tmp224, tmp7)
    tmp226 = tmp222 + tmp225
    tmp228 = tl.where(tmp23, tmp227, tmp7)
    tmp229 = tl.where(tmp214, tmp228, tmp7)
    tmp230 = tmp226 + tmp229
    tmp232 = tl.where(tmp29, tmp231, tmp7)
    tmp233 = tl.where(tmp214, tmp232, tmp7)
    tmp234 = tmp230 + tmp233
    tmp236 = tl.where(tmp35, tmp235, tmp7)
    tmp237 = tl.where(tmp214, tmp236, tmp7)
    tmp238 = tmp234 + tmp237
    tmp240 = tl.where(tmp41, tmp239, tmp7)
    tmp241 = tl.where(tmp214, tmp240, tmp7)
    tmp242 = tmp238 + tmp241
    tmp244 = tl.where(tmp47, tmp243, tmp7)
    tmp245 = tl.where(tmp214, tmp244, tmp7)
    tmp246 = tmp242 + tmp245
    tmp248 = tl.where(tmp53, tmp247, tmp7)
    tmp249 = tl.where(tmp214, tmp248, tmp7)
    tmp250 = tmp246 + tmp249
    tmp252 = tl.where(tmp59, tmp251, tmp7)
    tmp253 = tl.where(tmp214, tmp252, tmp7)
    tmp254 = tmp250 + tmp253
    tmp256 = tl.where(tmp65, tmp255, tmp7)
    tmp257 = tl.where(tmp214, tmp256, tmp7)
    tmp258 = tmp254 + tmp257
    tmp260 = tl.where(tmp71, tmp259, tmp7)
    tmp261 = tl.where(tmp214, tmp260, tmp7)
    tmp262 = tmp258 + tmp261
    tmp264 = tl.where(tmp77, tmp263, tmp7)
    tmp265 = tl.where(tmp214, tmp264, tmp7)
    tmp266 = tmp262 + tmp265
    tmp268 = tl.where(tmp83, tmp267, tmp7)
    tmp269 = tl.where(tmp214, tmp268, tmp7)
    tmp270 = tmp266 + tmp269
    tmp272 = tl.where(tmp89, tmp271, tmp7)
    tmp273 = tl.where(tmp214, tmp272, tmp7)
    tmp274 = tmp270 + tmp273
    tmp276 = tl.where(tmp95, tmp275, tmp7)
    tmp277 = tl.where(tmp214, tmp276, tmp7)
    tmp278 = tmp274 + tmp277
    tmp280 = tl.where(tmp101, tmp279, tmp7)
    tmp281 = tl.where(tmp214, tmp280, tmp7)
    tmp282 = tmp278 + tmp281
    tmp284 = tl.where(tmp106, tmp283, tmp7)
    tmp285 = tl.where(tmp214, tmp284, tmp7)
    tmp286 = tmp282 + tmp285
    tmp288 = tl.where(tmp112, tmp287, tmp7)
    tmp289 = tl.where(tmp214, tmp288, tmp7)
    tmp290 = tmp286 + tmp289
    tmp292 = tl.where(tmp118, tmp291, tmp7)
    tmp293 = tl.where(tmp214, tmp292, tmp7)
    tmp294 = tmp290 + tmp293
    tmp296 = tl.where(tmp124, tmp295, tmp7)
    tmp297 = tl.where(tmp214, tmp296, tmp7)
    tmp298 = tmp294 + tmp297
    tmp299 = tmp0 == tmp123
    tmp301 = tl.where(tmp5, tmp300, tmp7)
    tmp302 = tl.where(tmp299, tmp301, tmp7)
    tmp303 = tmp298 + tmp302
    tmp305 = tl.where(tmp11, tmp304, tmp7)
    tmp306 = tl.where(tmp299, tmp305, tmp7)
    tmp307 = tmp303 + tmp306
    tmp309 = tl.where(tmp17, tmp308, tmp7)
    tmp310 = tl.where(tmp299, tmp309, tmp7)
    tmp311 = tmp307 + tmp310
    tmp313 = tl.where(tmp23, tmp312, tmp7)
    tmp314 = tl.where(tmp299, tmp313, tmp7)
    tmp315 = tmp311 + tmp314
    tmp317 = tl.where(tmp29, tmp316, tmp7)
    tmp318 = tl.where(tmp299, tmp317, tmp7)
    tmp319 = tmp315 + tmp318
    tmp321 = tl.where(tmp35, tmp320, tmp7)
    tmp322 = tl.where(tmp299, tmp321, tmp7)
    tmp323 = tmp319 + tmp322
    tmp325 = tl.where(tmp41, tmp324, tmp7)
    tmp326 = tl.where(tmp299, tmp325, tmp7)
    tmp327 = tmp323 + tmp326
    tmp329 = tl.where(tmp47, tmp328, tmp7)
    tmp330 = tl.where(tmp299, tmp329, tmp7)
    tmp331 = tmp327 + tmp330
    tmp333 = tl.where(tmp53, tmp332, tmp7)
    tmp334 = tl.where(tmp299, tmp333, tmp7)
    tmp335 = tmp331 + tmp334
    tmp337 = tl.where(tmp59, tmp336, tmp7)
    tmp338 = tl.where(tmp299, tmp337, tmp7)
    tmp339 = tmp335 + tmp338
    tmp341 = tl.where(tmp65, tmp340, tmp7)
    tmp342 = tl.where(tmp299, tmp341, tmp7)
    tmp343 = tmp339 + tmp342
    tmp345 = tl.where(tmp71, tmp344, tmp7)
    tmp346 = tl.where(tmp299, tmp345, tmp7)
    tmp347 = tmp343 + tmp346
    tmp349 = tl.where(tmp77, tmp348, tmp7)
    tmp350 = tl.where(tmp299, tmp349, tmp7)
    tmp351 = tmp347 + tmp350
    tmp353 = tl.where(tmp83, tmp352, tmp7)
    tmp354 = tl.where(tmp299, tmp353, tmp7)
    tmp355 = tmp351 + tmp354
    tmp357 = tl.where(tmp89, tmp356, tmp7)
    tmp358 = tl.where(tmp299, tmp357, tmp7)
    tmp359 = tmp355 + tmp358
    tmp361 = tl.where(tmp95, tmp360, tmp7)
    tmp362 = tl.where(tmp299, tmp361, tmp7)
    tmp363 = tmp359 + tmp362
    tmp365 = tl.where(tmp101, tmp364, tmp7)
    tmp366 = tl.where(tmp299, tmp365, tmp7)
    tmp367 = tmp363 + tmp366
    tmp369 = tl.where(tmp106, tmp368, tmp7)
    tmp370 = tl.where(tmp299, tmp369, tmp7)
    tmp371 = tmp367 + tmp370
    tl.store(in_out_ptr0 + (x3), tmp371, None)
''')


# kernel path: /tmp/torchinductor_mengqy/35/c353exmryh5mr2kbmi7lcwxxbtcc6fb4tltszyl423foxtlqjtdu.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_94 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_94', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_94', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_94(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4224
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 22
    x4 = (xindex // 22)
    x2 = (xindex // 1056)
    x1 = (xindex // 22) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (22*r3) + (2816*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/be/cbecubxpu6uldwyxbrwpfuaand2tc4vsliqwepkv2r7qrclswerb.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_95 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_95', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_95', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_95(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 88
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 22
    x1 = (xindex // 22)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (22*r2) + (1056*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/lv/clvpnrbdrayvekdnhvyn5qw2d7p5mqkclct6gdnb7fpotxmnvaci.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_96 = async_compile.triton('triton_poi_fused_clone_96', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_96', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_96(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 540672
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 22
    x1 = (xindex // 22) % 4
    x2 = (xindex // 88)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (22*x2) + (135168*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/a2/ca2robaqudx5lgqfg3qfx6fohgbspf5vt6znzxwsm6sbdgarusjw.py
# Source Nodes: [l__mod___dynamic_dense_20_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_20_act => add_1067, convert_element_type_372, erf_20, mul_1399
triton_poi_fused_gelu_gelu_backward_97 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_97', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_97', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_97(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 540672
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5l/c5lbtg6aeirvircfezp7ydhxxsewuvhd4qpopy57ymvsyswao4l7.py
# Source Nodes: [add, add_882, add_989, float_1, mean, mul, mul_967, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
# add => add_1252
# add_882 => add_1065
# add_989 => add_1185
# float_1 => convert_element_type_392
# mean => mean_108
# mul => mul_1600
# mul_967 => mul_1533
# rsqrt => rsqrt_108
triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_98 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_98', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_98', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_98(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp13 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr7 + (23*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp27 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 + tmp20
        tmp22 = tmp21 + tmp20
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp23 * tmp24
        tmp26 = tmp8 + tmp25
        tmp29 = tmp27 * tmp28
        tmp30 = tmp26 + tmp29
        tmp31 = -0.5
        tmp32 = tmp6 * tmp31
        tmp33 = tmp28 * tmp28
        tmp34 = tmp33 * tmp28
        tmp35 = tmp32 * tmp34
        tmp36 = tmp35 / tmp14
        tmp39 = tmp37 + tmp38
        tmp40 = 2.0
        tmp41 = tmp39 * tmp40
        tmp42 = tmp36 * tmp41
        tmp43 = tmp30 + tmp42
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp43, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/sj/csjdfhmn5oemhobkugktutbawnrq324pqo46qkb2iip7474spqu5.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_860, add_96, add_98, mean_2, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_860 => add_1060
# add_96 => add_153
# add_98 => add_155
# mean_2 => mean_100
# mul_4 => mul_24
# mul_6 => mul_1380
# rsqrt_2 => rsqrt_100
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_99 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_99', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp32', 23: '*fp32', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp16', 155: '*fp16', 156: '*fp16', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp16', 164: '*fp16', 165: '*fp16', 166: '*fp16', 167: '*fp16', 168: '*fp16', 169: '*fp16', 170: '*fp16', 171: '*fp16', 172: '*fp16', 173: '*fp16', 174: '*fp16', 175: '*fp16', 176: '*fp16', 177: '*fp16', 178: '*fp16', 179: '*fp16', 180: '*fp16', 181: '*fp16', 182: '*fp16', 183: '*fp16', 184: '*fp16', 185: 'i32', 186: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr17', 'in_out_ptr18', 'in_out_ptr19', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_99', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(185, 186))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_99(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_out_ptr17, in_out_ptr18, in_out_ptr19, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, in_ptr130, in_ptr131, in_ptr132, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp33 = tl.load(in_ptr5 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr7 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr9 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr10 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr11 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp51 = tl.load(in_ptr12 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr13 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr14 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr15 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr16 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr17 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr18 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr19 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr20 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr21 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr22 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr23 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr24 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr25 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr26 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr27 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp103 = tl.load(in_ptr28 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr29 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp109 = tl.load(in_ptr30 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr31 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr32 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr33 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr34 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr35 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp129 = tl.load(in_ptr36 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr37 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp135 = tl.load(in_ptr38 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr39 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr40 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr41 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr42 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr43 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr44 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr45 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr46 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr47 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr48 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr49 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr50 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr51 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr52 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr53 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr54 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr55 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr56 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr57 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr58 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr59 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr60 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr61 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr62 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr63 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr64 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr65 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp226 = tl.load(in_ptr66 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr67 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr68 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr69 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr70 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr71 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp246 = tl.load(in_ptr72 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr73 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp252 = tl.load(in_ptr74 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr75 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr76 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp262 = tl.load(in_ptr77 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr78 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr79 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr80 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr81 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr82 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp282 = tl.load(in_ptr83 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp285 = tl.load(in_ptr84 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp288 = tl.load(in_ptr85 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp291 = tl.load(in_ptr86 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp301 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp40 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp190 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp203 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp242 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp255 = tl.load(in_out_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp268 = tl.load(in_out_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp281 = tl.load(in_out_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp295 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp297 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp34 = tmp32 * tmp33
        tmp35 = tmp31 + tmp34
        tmp38 = tmp36 * tmp37
        tmp39 = tmp35 + tmp38
        tmp42 = tmp40 * tmp41
        tmp43 = tmp39 + tmp42
        tmp45 = tmp30 * tmp44
        tmp46 = tmp43 + tmp45
        tmp49 = tmp32 * tmp48
        tmp50 = tmp47 + tmp49
        tmp52 = tmp36 * tmp51
        tmp53 = tmp50 + tmp52
        tmp55 = tmp40 * tmp54
        tmp56 = tmp53 + tmp55
        tmp58 = tmp30 * tmp57
        tmp59 = tmp56 + tmp58
        tmp62 = tmp32 * tmp61
        tmp63 = tmp60 + tmp62
        tmp65 = tmp36 * tmp64
        tmp66 = tmp63 + tmp65
        tmp68 = tmp40 * tmp67
        tmp69 = tmp66 + tmp68
        tmp71 = tmp30 * tmp70
        tmp72 = tmp69 + tmp71
        tmp75 = tmp32 * tmp74
        tmp76 = tmp73 + tmp75
        tmp78 = tmp36 * tmp77
        tmp79 = tmp76 + tmp78
        tmp81 = tmp40 * tmp80
        tmp82 = tmp79 + tmp81
        tmp84 = tmp30 * tmp83
        tmp85 = tmp82 + tmp84
        tmp88 = tmp32 * tmp87
        tmp89 = tmp86 + tmp88
        tmp91 = tmp36 * tmp90
        tmp92 = tmp89 + tmp91
        tmp94 = tmp40 * tmp93
        tmp95 = tmp92 + tmp94
        tmp97 = tmp30 * tmp96
        tmp98 = tmp95 + tmp97
        tmp101 = tmp32 * tmp100
        tmp102 = tmp99 + tmp101
        tmp104 = tmp36 * tmp103
        tmp105 = tmp102 + tmp104
        tmp107 = tmp40 * tmp106
        tmp108 = tmp105 + tmp107
        tmp110 = tmp30 * tmp109
        tmp111 = tmp108 + tmp110
        tmp114 = tmp32 * tmp113
        tmp115 = tmp112 + tmp114
        tmp117 = tmp36 * tmp116
        tmp118 = tmp115 + tmp117
        tmp120 = tmp40 * tmp119
        tmp121 = tmp118 + tmp120
        tmp123 = tmp30 * tmp122
        tmp124 = tmp121 + tmp123
        tmp127 = tmp32 * tmp126
        tmp128 = tmp125 + tmp127
        tmp130 = tmp36 * tmp129
        tmp131 = tmp128 + tmp130
        tmp133 = tmp40 * tmp132
        tmp134 = tmp131 + tmp133
        tmp136 = tmp30 * tmp135
        tmp137 = tmp134 + tmp136
        tmp140 = tmp32 * tmp139
        tmp141 = tmp138 + tmp140
        tmp143 = tmp36 * tmp142
        tmp144 = tmp141 + tmp143
        tmp146 = tmp40 * tmp145
        tmp147 = tmp144 + tmp146
        tmp149 = tmp30 * tmp148
        tmp150 = tmp147 + tmp149
        tmp153 = tmp32 * tmp152
        tmp154 = tmp151 + tmp153
        tmp156 = tmp36 * tmp155
        tmp157 = tmp154 + tmp156
        tmp159 = tmp40 * tmp158
        tmp160 = tmp157 + tmp159
        tmp162 = tmp30 * tmp161
        tmp163 = tmp160 + tmp162
        tmp166 = tmp32 * tmp165
        tmp167 = tmp164 + tmp166
        tmp169 = tmp36 * tmp168
        tmp170 = tmp167 + tmp169
        tmp172 = tmp40 * tmp171
        tmp173 = tmp170 + tmp172
        tmp175 = tmp30 * tmp174
        tmp176 = tmp173 + tmp175
        tmp179 = tmp32 * tmp178
        tmp180 = tmp177 + tmp179
        tmp182 = tmp36 * tmp181
        tmp183 = tmp180 + tmp182
        tmp185 = tmp40 * tmp184
        tmp186 = tmp183 + tmp185
        tmp188 = tmp30 * tmp187
        tmp189 = tmp186 + tmp188
        tmp192 = tmp32 * tmp191
        tmp193 = tmp190 + tmp192
        tmp195 = tmp36 * tmp194
        tmp196 = tmp193 + tmp195
        tmp198 = tmp40 * tmp197
        tmp199 = tmp196 + tmp198
        tmp201 = tmp30 * tmp200
        tmp202 = tmp199 + tmp201
        tmp205 = tmp32 * tmp204
        tmp206 = tmp203 + tmp205
        tmp208 = tmp36 * tmp207
        tmp209 = tmp206 + tmp208
        tmp211 = tmp40 * tmp210
        tmp212 = tmp209 + tmp211
        tmp214 = tmp30 * tmp213
        tmp215 = tmp212 + tmp214
        tmp218 = tmp32 * tmp217
        tmp219 = tmp216 + tmp218
        tmp221 = tmp36 * tmp220
        tmp222 = tmp219 + tmp221
        tmp224 = tmp40 * tmp223
        tmp225 = tmp222 + tmp224
        tmp227 = tmp30 * tmp226
        tmp228 = tmp225 + tmp227
        tmp231 = tmp32 * tmp230
        tmp232 = tmp229 + tmp231
        tmp234 = tmp36 * tmp233
        tmp235 = tmp232 + tmp234
        tmp237 = tmp40 * tmp236
        tmp238 = tmp235 + tmp237
        tmp240 = tmp30 * tmp239
        tmp241 = tmp238 + tmp240
        tmp244 = tmp32 * tmp243
        tmp245 = tmp242 + tmp244
        tmp247 = tmp36 * tmp246
        tmp248 = tmp245 + tmp247
        tmp250 = tmp40 * tmp249
        tmp251 = tmp248 + tmp250
        tmp253 = tmp30 * tmp252
        tmp254 = tmp251 + tmp253
        tmp257 = tmp32 * tmp256
        tmp258 = tmp255 + tmp257
        tmp260 = tmp36 * tmp259
        tmp261 = tmp258 + tmp260
        tmp263 = tmp40 * tmp262
        tmp264 = tmp261 + tmp263
        tmp266 = tmp30 * tmp265
        tmp267 = tmp264 + tmp266
        tmp270 = tmp32 * tmp269
        tmp271 = tmp268 + tmp270
        tmp273 = tmp36 * tmp272
        tmp274 = tmp271 + tmp273
        tmp276 = tmp40 * tmp275
        tmp277 = tmp274 + tmp276
        tmp279 = tmp30 * tmp278
        tmp280 = tmp277 + tmp279
        tmp283 = tmp32 * tmp282
        tmp284 = tmp281 + tmp283
        tmp286 = tmp36 * tmp285
        tmp287 = tmp284 + tmp286
        tmp289 = tmp40 * tmp288
        tmp290 = tmp287 + tmp289
        tmp292 = tmp30 * tmp291
        tmp293 = tmp290 + tmp292
        tmp296 = tmp294 + tmp295
        tmp298 = tmp296 + tmp297
        tmp299 = tmp40 * tmp298
        tmp300 = tl.broadcast_to(tmp299, [XBLOCK, RBLOCK])
        tmp302 = _tmp301 + tmp300
        _tmp301 = tl.where(rmask, tmp302, _tmp301)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp46, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp59, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp72, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp85, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp98, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp111, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp124, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp137, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp150, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp163, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp176, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp189, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp202, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp215, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp228, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp241, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp254, rmask)
        tl.store(in_out_ptr17 + (r1 + (2048*x0)), tmp267, rmask)
        tl.store(in_out_ptr18 + (r1 + (2048*x0)), tmp280, rmask)
        tl.store(in_out_ptr19 + (r1 + (2048*x0)), tmp293, rmask)
    tmp301 = tl.sum(_tmp301, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp301, None)
    _tmp311 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp319 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp323 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp330 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp334 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp343 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp347 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp354 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp358 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp365 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp369 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp378 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp382 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp389 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp393 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp400 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp404 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp413 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp417 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp424 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp428 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp435 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp444 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp451 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp458 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp467 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp474 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp476 = tl.load(in_ptr127 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp487 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp495 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp499 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp303 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp304 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp305 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp313 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp314 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp315 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp325 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp326 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp336 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp337 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp349 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp350 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp360 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp361 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp371 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp374 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp384 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp385 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp395 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp396 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp406 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp407 = tl.load(in_ptr109 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp409 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp430 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp437 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp438 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp440 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp446 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp447 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp453 = tl.load(in_ptr120 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp454 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp460 = tl.load(in_ptr122 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp461 = tl.load(in_ptr123 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp463 = tl.load(in_ptr124 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp469 = tl.load(in_ptr125 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp470 = tl.load(in_ptr126 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp477 = tl.load(in_ptr128 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp481 = tl.load(in_ptr129 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp483 = tl.load(in_ptr130 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp489 = tl.load(in_ptr131 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp491 = tl.load(in_ptr132 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp306 = tmp304 + tmp305
        tmp308 = tmp306 + tmp307
        tmp309 = tmp303 * tmp308
        tmp310 = tl.broadcast_to(tmp309, [XBLOCK, RBLOCK])
        tmp312 = _tmp311 + tmp310
        _tmp311 = tl.where(rmask, tmp312, _tmp311)
        tmp316 = tmp314 + tmp315
        tmp317 = tmp313 * tmp316
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK, RBLOCK])
        tmp320 = _tmp319 + tmp318
        _tmp319 = tl.where(rmask, tmp320, _tmp319)
        tmp321 = tmp303 * tmp316
        tmp322 = tl.broadcast_to(tmp321, [XBLOCK, RBLOCK])
        tmp324 = _tmp323 + tmp322
        _tmp323 = tl.where(rmask, tmp324, _tmp323)
        tmp327 = tmp325 + tmp326
        tmp328 = tmp313 * tmp327
        tmp329 = tl.broadcast_to(tmp328, [XBLOCK, RBLOCK])
        tmp331 = _tmp330 + tmp329
        _tmp330 = tl.where(rmask, tmp331, _tmp330)
        tmp332 = tmp303 * tmp327
        tmp333 = tl.broadcast_to(tmp332, [XBLOCK, RBLOCK])
        tmp335 = _tmp334 + tmp333
        _tmp334 = tl.where(rmask, tmp335, _tmp334)
        tmp338 = tmp336 + tmp337
        tmp340 = tmp338 + tmp339
        tmp341 = tmp313 * tmp340
        tmp342 = tl.broadcast_to(tmp341, [XBLOCK, RBLOCK])
        tmp344 = _tmp343 + tmp342
        _tmp343 = tl.where(rmask, tmp344, _tmp343)
        tmp345 = tmp303 * tmp340
        tmp346 = tl.broadcast_to(tmp345, [XBLOCK, RBLOCK])
        tmp348 = _tmp347 + tmp346
        _tmp347 = tl.where(rmask, tmp348, _tmp347)
        tmp351 = tmp349 + tmp350
        tmp352 = tmp313 * tmp351
        tmp353 = tl.broadcast_to(tmp352, [XBLOCK, RBLOCK])
        tmp355 = _tmp354 + tmp353
        _tmp354 = tl.where(rmask, tmp355, _tmp354)
        tmp356 = tmp303 * tmp351
        tmp357 = tl.broadcast_to(tmp356, [XBLOCK, RBLOCK])
        tmp359 = _tmp358 + tmp357
        _tmp358 = tl.where(rmask, tmp359, _tmp358)
        tmp362 = tmp360 + tmp361
        tmp363 = tmp313 * tmp362
        tmp364 = tl.broadcast_to(tmp363, [XBLOCK, RBLOCK])
        tmp366 = _tmp365 + tmp364
        _tmp365 = tl.where(rmask, tmp366, _tmp365)
        tmp367 = tmp303 * tmp362
        tmp368 = tl.broadcast_to(tmp367, [XBLOCK, RBLOCK])
        tmp370 = _tmp369 + tmp368
        _tmp369 = tl.where(rmask, tmp370, _tmp369)
        tmp373 = tmp371 + tmp372
        tmp375 = tmp373 + tmp374
        tmp376 = tmp313 * tmp375
        tmp377 = tl.broadcast_to(tmp376, [XBLOCK, RBLOCK])
        tmp379 = _tmp378 + tmp377
        _tmp378 = tl.where(rmask, tmp379, _tmp378)
        tmp380 = tmp303 * tmp375
        tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
        tmp383 = _tmp382 + tmp381
        _tmp382 = tl.where(rmask, tmp383, _tmp382)
        tmp386 = tmp384 + tmp385
        tmp387 = tmp313 * tmp386
        tmp388 = tl.broadcast_to(tmp387, [XBLOCK, RBLOCK])
        tmp390 = _tmp389 + tmp388
        _tmp389 = tl.where(rmask, tmp390, _tmp389)
        tmp391 = tmp303 * tmp386
        tmp392 = tl.broadcast_to(tmp391, [XBLOCK, RBLOCK])
        tmp394 = _tmp393 + tmp392
        _tmp393 = tl.where(rmask, tmp394, _tmp393)
        tmp397 = tmp395 + tmp396
        tmp398 = tmp313 * tmp397
        tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
        tmp401 = _tmp400 + tmp399
        _tmp400 = tl.where(rmask, tmp401, _tmp400)
        tmp402 = tmp303 * tmp397
        tmp403 = tl.broadcast_to(tmp402, [XBLOCK, RBLOCK])
        tmp405 = _tmp404 + tmp403
        _tmp404 = tl.where(rmask, tmp405, _tmp404)
        tmp408 = tmp406 + tmp407
        tmp410 = tmp408 + tmp409
        tmp411 = tmp313 * tmp410
        tmp412 = tl.broadcast_to(tmp411, [XBLOCK, RBLOCK])
        tmp414 = _tmp413 + tmp412
        _tmp413 = tl.where(rmask, tmp414, _tmp413)
        tmp415 = tmp303 * tmp410
        tmp416 = tl.broadcast_to(tmp415, [XBLOCK, RBLOCK])
        tmp418 = _tmp417 + tmp416
        _tmp417 = tl.where(rmask, tmp418, _tmp417)
        tmp421 = tmp419 + tmp420
        tmp422 = tmp313 * tmp421
        tmp423 = tl.broadcast_to(tmp422, [XBLOCK, RBLOCK])
        tmp425 = _tmp424 + tmp423
        _tmp424 = tl.where(rmask, tmp425, _tmp424)
        tmp426 = tmp303 * tmp421
        tmp427 = tl.broadcast_to(tmp426, [XBLOCK, RBLOCK])
        tmp429 = _tmp428 + tmp427
        _tmp428 = tl.where(rmask, tmp429, _tmp428)
        tmp432 = tmp430 + tmp431
        tmp433 = tmp313 * tmp432
        tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
        tmp436 = _tmp435 + tmp434
        _tmp435 = tl.where(rmask, tmp436, _tmp435)
        tmp439 = tmp437 + tmp438
        tmp441 = tmp439 + tmp440
        tmp442 = tmp313 * tmp441
        tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
        tmp445 = _tmp444 + tmp443
        _tmp444 = tl.where(rmask, tmp445, _tmp444)
        tmp448 = tmp446 + tmp447
        tmp449 = tmp313 * tmp448
        tmp450 = tl.broadcast_to(tmp449, [XBLOCK, RBLOCK])
        tmp452 = _tmp451 + tmp450
        _tmp451 = tl.where(rmask, tmp452, _tmp451)
        tmp455 = tmp453 + tmp454
        tmp456 = tmp313 * tmp455
        tmp457 = tl.broadcast_to(tmp456, [XBLOCK, RBLOCK])
        tmp459 = _tmp458 + tmp457
        _tmp458 = tl.where(rmask, tmp459, _tmp458)
        tmp462 = tmp460 + tmp461
        tmp464 = tmp462 + tmp463
        tmp465 = tmp313 * tmp464
        tmp466 = tl.broadcast_to(tmp465, [XBLOCK, RBLOCK])
        tmp468 = _tmp467 + tmp466
        _tmp467 = tl.where(rmask, tmp468, _tmp467)
        tmp471 = tmp469 + tmp470
        tmp472 = tmp313 * tmp471
        tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
        tmp475 = _tmp474 + tmp473
        _tmp474 = tl.where(rmask, tmp475, _tmp474)
        tmp478 = tmp476 * tmp477
        tmp479 = 0.0
        tmp480 = tmp478 + tmp479
        tmp482 = tmp480 + tmp481
        tmp484 = tmp482 + tmp483
        tmp485 = tmp313 * tmp484
        tmp486 = tl.broadcast_to(tmp485, [XBLOCK, RBLOCK])
        tmp488 = _tmp487 + tmp486
        _tmp487 = tl.where(rmask, tmp488, _tmp487)
        tmp490 = tmp477 + tmp489
        tmp492 = tmp490 + tmp491
        tmp493 = tmp313 * tmp492
        tmp494 = tl.broadcast_to(tmp493, [XBLOCK, RBLOCK])
        tmp496 = _tmp495 + tmp494
        _tmp495 = tl.where(rmask, tmp496, _tmp495)
        tmp497 = tmp313 * tmp477
        tmp498 = tl.broadcast_to(tmp497, [XBLOCK, RBLOCK])
        tmp500 = _tmp499 + tmp498
        _tmp499 = tl.where(rmask, tmp500, _tmp499)
    tmp311 = tl.sum(_tmp311, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp311, None)
    tmp319 = tl.sum(_tmp319, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp319, None)
    tmp323 = tl.sum(_tmp323, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp323, None)
    tmp330 = tl.sum(_tmp330, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp330, None)
    tmp334 = tl.sum(_tmp334, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp334, None)
    tmp343 = tl.sum(_tmp343, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp343, None)
    tmp347 = tl.sum(_tmp347, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp347, None)
    tmp354 = tl.sum(_tmp354, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp354, None)
    tmp358 = tl.sum(_tmp358, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp358, None)
    tmp365 = tl.sum(_tmp365, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp365, None)
    tmp369 = tl.sum(_tmp369, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp369, None)
    tmp378 = tl.sum(_tmp378, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp378, None)
    tmp382 = tl.sum(_tmp382, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp382, None)
    tmp389 = tl.sum(_tmp389, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp389, None)
    tmp393 = tl.sum(_tmp393, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp393, None)
    tmp400 = tl.sum(_tmp400, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp400, None)
    tmp404 = tl.sum(_tmp404, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp404, None)
    tmp413 = tl.sum(_tmp413, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp413, None)
    tmp417 = tl.sum(_tmp417, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp417, None)
    tmp424 = tl.sum(_tmp424, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp424, None)
    tmp428 = tl.sum(_tmp428, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp428, None)
    tmp435 = tl.sum(_tmp435, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp435, None)
    tmp444 = tl.sum(_tmp444, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp444, None)
    tmp451 = tl.sum(_tmp451, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp451, None)
    tmp458 = tl.sum(_tmp458, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp458, None)
    tmp467 = tl.sum(_tmp467, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp467, None)
    tmp474 = tl.sum(_tmp474, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp474, None)
    tmp487 = tl.sum(_tmp487, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp487, None)
    tmp495 = tl.sum(_tmp495, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp495, None)
    tmp499 = tl.sum(_tmp499, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp499, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zs/czs5hkylrzn6huehp5ohiwelswdmv3ovbzx47vzcghg35qlit6ab.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_840, add_96, add_98, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_1058
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_720 => add_885
# add_722 => add_887
# add_840 => add_1059
# add_96 => add_153
# add_98 => add_155
# mean => mean_98
# mean_1 => mean_99
# mul => mul_1374
# mul_3 => mul_1377
# mul_4 => mul_24
# rsqrt => rsqrt_98
# rsqrt_1 => rsqrt_99
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_100 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_100', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: 'i32', 107: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_100', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(106, 107))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_100(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, out_ptr1, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, out_ptr46, out_ptr47, out_ptr48, out_ptr49, out_ptr50, out_ptr51, out_ptr52, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tmp34 = tmp33.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tmp44 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp74 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp62 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tmp40 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = 2048.0
        tmp46 = tmp44 / tmp45
        tmp47 = 1e-05
        tmp48 = tmp46 + tmp47
        tmp49 = tl.math.rsqrt(tmp48)
        tmp50 = tmp43 * tmp49
        tmp51 = -0.5
        tmp52 = tmp38 * tmp51
        tmp53 = tmp49 * tmp49
        tmp54 = tmp53 * tmp49
        tmp55 = tmp52 * tmp54
        tmp56 = tmp55 / tmp45
        tmp58 = tmp56 * tmp57
        tmp59 = tmp50 + tmp58
        tmp60 = tmp59 + tmp58
        tmp61 = tmp60.to(tl.float32)
        tmp64 = tmp62 + tmp63
        tmp66 = tmp64 + tmp65
        tmp67 = tmp61 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp72 = tmp71 * tmp66
        tmp73 = tl.broadcast_to(tmp72, [XBLOCK, RBLOCK])
        tmp75 = _tmp74 + tmp73
        _tmp74 = tl.where(rmask, tmp75, _tmp74)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp61, rmask)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp69, None)
    tmp74 = tl.sum(_tmp74, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp74, None)
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp87 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp94 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp98 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp107 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp118 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp142 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp146 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp153 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp164 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp168 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp204 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp208 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp225 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp232 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp247 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp251 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp255 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp264 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp268 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp272 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp279 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp283 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp289 = tl.load(in_ptr49 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp300 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp304 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp308 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp316 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp320 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp324 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp328 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp332 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp336 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp76 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp100 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp160 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp173 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp184 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp210 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp211 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp213 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp228 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp242 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp243 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp257 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp274 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp290 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp296 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp310 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp312 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tmp77 + tmp78
        tmp80 = tmp76 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
        tmp85 = tmp84 * tmp79
        tmp86 = tl.broadcast_to(tmp85, [XBLOCK, RBLOCK])
        tmp88 = _tmp87 + tmp86
        _tmp87 = tl.where(rmask, tmp88, _tmp87)
        tmp91 = tmp89 + tmp90
        tmp92 = tmp76 * tmp91
        tmp93 = tl.broadcast_to(tmp92, [XBLOCK, RBLOCK])
        tmp95 = _tmp94 + tmp93
        _tmp94 = tl.where(rmask, tmp95, _tmp94)
        tmp96 = tmp84 * tmp91
        tmp97 = tl.broadcast_to(tmp96, [XBLOCK, RBLOCK])
        tmp99 = _tmp98 + tmp97
        _tmp98 = tl.where(rmask, tmp99, _tmp98)
        tmp102 = tmp100 + tmp101
        tmp104 = tmp102 + tmp103
        tmp105 = tmp76 * tmp104
        tmp106 = tl.broadcast_to(tmp105, [XBLOCK, RBLOCK])
        tmp108 = _tmp107 + tmp106
        _tmp107 = tl.where(rmask, tmp108, _tmp107)
        tmp109 = tmp84 * tmp104
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tmp115 = tmp113 + tmp114
        tmp116 = tmp76 * tmp115
        tmp117 = tl.broadcast_to(tmp116, [XBLOCK, RBLOCK])
        tmp119 = _tmp118 + tmp117
        _tmp118 = tl.where(rmask, tmp119, _tmp118)
        tmp120 = tmp84 * tmp115
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp126 = tmp124 + tmp125
        tmp127 = tmp76 * tmp126
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp131 = tmp84 * tmp126
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp137 = tmp135 + tmp136
        tmp139 = tmp137 + tmp138
        tmp140 = tmp76 * tmp139
        tmp141 = tl.broadcast_to(tmp140, [XBLOCK, RBLOCK])
        tmp143 = _tmp142 + tmp141
        _tmp142 = tl.where(rmask, tmp143, _tmp142)
        tmp144 = tmp84 * tmp139
        tmp145 = tl.broadcast_to(tmp144, [XBLOCK, RBLOCK])
        tmp147 = _tmp146 + tmp145
        _tmp146 = tl.where(rmask, tmp147, _tmp146)
        tmp150 = tmp148 + tmp149
        tmp151 = tmp76 * tmp150
        tmp152 = tl.broadcast_to(tmp151, [XBLOCK, RBLOCK])
        tmp154 = _tmp153 + tmp152
        _tmp153 = tl.where(rmask, tmp154, _tmp153)
        tmp155 = tmp84 * tmp150
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp161 = tmp159 + tmp160
        tmp162 = tmp76 * tmp161
        tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
        tmp165 = _tmp164 + tmp163
        _tmp164 = tl.where(rmask, tmp165, _tmp164)
        tmp166 = tmp84 * tmp161
        tmp167 = tl.broadcast_to(tmp166, [XBLOCK, RBLOCK])
        tmp169 = _tmp168 + tmp167
        _tmp168 = tl.where(rmask, tmp169, _tmp168)
        tmp172 = tmp170 + tmp171
        tmp174 = tmp172 + tmp173
        tmp175 = tmp76 * tmp174
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp179 = tmp84 * tmp174
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tmp185 = tmp183 + tmp184
        tmp186 = tmp76 * tmp185
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp84 * tmp185
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp202 = tmp76 * tmp197
        tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
        tmp205 = _tmp204 + tmp203
        _tmp204 = tl.where(rmask, tmp205, _tmp204)
        tmp206 = tmp84 * tmp197
        tmp207 = tl.broadcast_to(tmp206, [XBLOCK, RBLOCK])
        tmp209 = _tmp208 + tmp207
        _tmp208 = tl.where(rmask, tmp209, _tmp208)
        tmp212 = tmp210 + tmp211
        tmp214 = tmp212 + tmp213
        tmp215 = tmp194 * tmp214
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp219 = tmp76 * tmp214
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp223 = tmp84 * tmp214
        tmp224 = tl.broadcast_to(tmp223, [XBLOCK, RBLOCK])
        tmp226 = _tmp225 + tmp224
        _tmp225 = tl.where(rmask, tmp226, _tmp225)
        tmp229 = tmp227 + tmp228
        tmp230 = tmp194 * tmp229
        tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
        tmp233 = _tmp232 + tmp231
        _tmp232 = tl.where(rmask, tmp233, _tmp232)
        tmp234 = tmp76 * tmp229
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp238 = tmp84 * tmp229
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tmp244 = tmp242 + tmp243
        tmp245 = tmp194 * tmp244
        tmp246 = tl.broadcast_to(tmp245, [XBLOCK, RBLOCK])
        tmp248 = _tmp247 + tmp246
        _tmp247 = tl.where(rmask, tmp248, _tmp247)
        tmp249 = tmp76 * tmp244
        tmp250 = tl.broadcast_to(tmp249, [XBLOCK, RBLOCK])
        tmp252 = _tmp251 + tmp250
        _tmp251 = tl.where(rmask, tmp252, _tmp251)
        tmp253 = tmp84 * tmp244
        tmp254 = tl.broadcast_to(tmp253, [XBLOCK, RBLOCK])
        tmp256 = _tmp255 + tmp254
        _tmp255 = tl.where(rmask, tmp256, _tmp255)
        tmp259 = tmp257 + tmp258
        tmp261 = tmp259 + tmp260
        tmp262 = tmp194 * tmp261
        tmp263 = tl.broadcast_to(tmp262, [XBLOCK, RBLOCK])
        tmp265 = _tmp264 + tmp263
        _tmp264 = tl.where(rmask, tmp265, _tmp264)
        tmp266 = tmp76 * tmp261
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
        tmp269 = _tmp268 + tmp267
        _tmp268 = tl.where(rmask, tmp269, _tmp268)
        tmp270 = tmp84 * tmp261
        tmp271 = tl.broadcast_to(tmp270, [XBLOCK, RBLOCK])
        tmp273 = _tmp272 + tmp271
        _tmp272 = tl.where(rmask, tmp273, _tmp272)
        tmp276 = tmp274 + tmp275
        tmp277 = tmp194 * tmp276
        tmp278 = tl.broadcast_to(tmp277, [XBLOCK, RBLOCK])
        tmp280 = _tmp279 + tmp278
        _tmp279 = tl.where(rmask, tmp280, _tmp279)
        tmp281 = tmp76 * tmp276
        tmp282 = tl.broadcast_to(tmp281, [XBLOCK, RBLOCK])
        tmp284 = _tmp283 + tmp282
        _tmp283 = tl.where(rmask, tmp284, _tmp283)
        tmp285 = tmp84 * tmp276
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp291 = tmp289 * tmp290
        tmp292 = 0.0
        tmp293 = tmp291 + tmp292
        tmp295 = tmp293 + tmp294
        tmp297 = tmp295 + tmp296
        tmp298 = tmp194 * tmp297
        tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
        tmp301 = _tmp300 + tmp299
        _tmp300 = tl.where(rmask, tmp301, _tmp300)
        tmp302 = tmp76 * tmp297
        tmp303 = tl.broadcast_to(tmp302, [XBLOCK, RBLOCK])
        tmp305 = _tmp304 + tmp303
        _tmp304 = tl.where(rmask, tmp305, _tmp304)
        tmp306 = tmp84 * tmp297
        tmp307 = tl.broadcast_to(tmp306, [XBLOCK, RBLOCK])
        tmp309 = _tmp308 + tmp307
        _tmp308 = tl.where(rmask, tmp309, _tmp308)
        tmp311 = tmp290 + tmp310
        tmp313 = tmp311 + tmp312
        tmp314 = tmp194 * tmp313
        tmp315 = tl.broadcast_to(tmp314, [XBLOCK, RBLOCK])
        tmp317 = _tmp316 + tmp315
        _tmp316 = tl.where(rmask, tmp317, _tmp316)
        tmp318 = tmp76 * tmp313
        tmp319 = tl.broadcast_to(tmp318, [XBLOCK, RBLOCK])
        tmp321 = _tmp320 + tmp319
        _tmp320 = tl.where(rmask, tmp321, _tmp320)
        tmp322 = tmp84 * tmp313
        tmp323 = tl.broadcast_to(tmp322, [XBLOCK, RBLOCK])
        tmp325 = _tmp324 + tmp323
        _tmp324 = tl.where(rmask, tmp325, _tmp324)
        tmp326 = tmp76 * tmp290
        tmp327 = tl.broadcast_to(tmp326, [XBLOCK, RBLOCK])
        tmp329 = _tmp328 + tmp327
        _tmp328 = tl.where(rmask, tmp329, _tmp328)
        tmp330 = tmp84 * tmp290
        tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
        tmp333 = _tmp332 + tmp331
        _tmp332 = tl.where(rmask, tmp333, _tmp332)
        tmp334 = tmp194 * tmp290
        tmp335 = tl.broadcast_to(tmp334, [XBLOCK, RBLOCK])
        tmp337 = _tmp336 + tmp335
        _tmp336 = tl.where(rmask, tmp337, _tmp336)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp82, None)
    tmp87 = tl.sum(_tmp87, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp87, None)
    tmp94 = tl.sum(_tmp94, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp94, None)
    tmp98 = tl.sum(_tmp98, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp98, None)
    tmp107 = tl.sum(_tmp107, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp107, None)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp111, None)
    tmp118 = tl.sum(_tmp118, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp118, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp122, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp129, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp133, None)
    tmp142 = tl.sum(_tmp142, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp142, None)
    tmp146 = tl.sum(_tmp146, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp146, None)
    tmp153 = tl.sum(_tmp153, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp153, None)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp157, None)
    tmp164 = tl.sum(_tmp164, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp164, None)
    tmp168 = tl.sum(_tmp168, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp168, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp177, None)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp181, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp192, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp200, None)
    tmp204 = tl.sum(_tmp204, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp204, None)
    tmp208 = tl.sum(_tmp208, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp208, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp217, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp221, None)
    tmp225 = tl.sum(_tmp225, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp225, None)
    tmp232 = tl.sum(_tmp232, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp232, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp236, None)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp240, None)
    tmp247 = tl.sum(_tmp247, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp247, None)
    tmp251 = tl.sum(_tmp251, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp251, None)
    tmp255 = tl.sum(_tmp255, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp255, None)
    tmp264 = tl.sum(_tmp264, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp264, None)
    tmp268 = tl.sum(_tmp268, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp268, None)
    tmp272 = tl.sum(_tmp272, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp272, None)
    tmp279 = tl.sum(_tmp279, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp279, None)
    tmp283 = tl.sum(_tmp283, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp283, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp287, None)
    tmp300 = tl.sum(_tmp300, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp300, None)
    tmp304 = tl.sum(_tmp304, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp304, None)
    tmp308 = tl.sum(_tmp308, 1)[:, None]
    tl.store(out_ptr46 + (x0), tmp308, None)
    tmp316 = tl.sum(_tmp316, 1)[:, None]
    tl.store(out_ptr47 + (x0), tmp316, None)
    tmp320 = tl.sum(_tmp320, 1)[:, None]
    tl.store(out_ptr48 + (x0), tmp320, None)
    tmp324 = tl.sum(_tmp324, 1)[:, None]
    tl.store(out_ptr49 + (x0), tmp324, None)
    tmp328 = tl.sum(_tmp328, 1)[:, None]
    tl.store(out_ptr50 + (x0), tmp328, None)
    tmp332 = tl.sum(_tmp332, 1)[:, None]
    tl.store(out_ptr51 + (x0), tmp332, None)
    tmp336 = tl.sum(_tmp336, 1)[:, None]
    tl.store(out_ptr52 + (x0), tmp336, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hl/chlferzdjuutayopnder3gq5pg3t7oxp3k3so3yw7w5mnqsiiaxn.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_101 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_101', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_101', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(78,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_101(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, xnumel, XBLOCK : tl.constexpr):
    xnumel = 516096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 129024)
    x0 = xindex % 21
    x1 = (xindex // 21) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp205 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp229 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp261 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp277 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp281 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp294 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp302 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp310 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp314 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp322 = tl.load(in_ptr69 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp326 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp334 = tl.load(in_ptr72 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp338 = tl.load(in_ptr73 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr74 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp346 = tl.load(in_ptr75 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp350 = tl.load(in_ptr76 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 19, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 18, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 17, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 16, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 15, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 14, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 13, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 12, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 11, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 10, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 9, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 8, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 7, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 6, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 5, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tl.full([1], 4, tl.int32)
    tmp95 = tmp3 == tmp94
    tmp97 = tl.where(tmp95, tmp96, tmp7)
    tmp98 = tl.where(tmp2, tmp97, tmp7)
    tmp99 = tmp93 + tmp98
    tmp100 = tmp3 == tmp1
    tmp102 = tl.where(tmp100, tmp101, tmp7)
    tmp103 = tl.where(tmp2, tmp102, tmp7)
    tmp104 = tmp99 + tmp103
    tmp105 = tl.full([1], 2, tl.int32)
    tmp106 = tmp3 == tmp105
    tmp108 = tl.where(tmp106, tmp107, tmp7)
    tmp109 = tl.where(tmp2, tmp108, tmp7)
    tmp110 = tmp104 + tmp109
    tmp111 = tl.full([1], 1, tl.int32)
    tmp112 = tmp3 == tmp111
    tmp114 = tl.where(tmp112, tmp113, tmp7)
    tmp115 = tl.where(tmp2, tmp114, tmp7)
    tmp116 = tmp110 + tmp115
    tmp117 = tl.full([1], 0, tl.int32)
    tmp118 = tmp3 == tmp117
    tmp120 = tl.where(tmp118, tmp119, tmp7)
    tmp121 = tl.where(tmp2, tmp120, tmp7)
    tmp122 = tmp116 + tmp121
    tmp123 = tmp0 == tmp105
    tmp125 = tl.where(tmp5, tmp124, tmp7)
    tmp126 = tl.where(tmp123, tmp125, tmp7)
    tmp127 = tmp122 + tmp126
    tmp129 = tl.where(tmp11, tmp128, tmp7)
    tmp130 = tl.where(tmp123, tmp129, tmp7)
    tmp131 = tmp127 + tmp130
    tmp133 = tl.where(tmp17, tmp132, tmp7)
    tmp134 = tl.where(tmp123, tmp133, tmp7)
    tmp135 = tmp131 + tmp134
    tmp137 = tl.where(tmp23, tmp136, tmp7)
    tmp138 = tl.where(tmp123, tmp137, tmp7)
    tmp139 = tmp135 + tmp138
    tmp141 = tl.where(tmp29, tmp140, tmp7)
    tmp142 = tl.where(tmp123, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp145 = tl.where(tmp35, tmp144, tmp7)
    tmp146 = tl.where(tmp123, tmp145, tmp7)
    tmp147 = tmp143 + tmp146
    tmp149 = tl.where(tmp41, tmp148, tmp7)
    tmp150 = tl.where(tmp123, tmp149, tmp7)
    tmp151 = tmp147 + tmp150
    tmp153 = tl.where(tmp47, tmp152, tmp7)
    tmp154 = tl.where(tmp123, tmp153, tmp7)
    tmp155 = tmp151 + tmp154
    tmp157 = tl.where(tmp53, tmp156, tmp7)
    tmp158 = tl.where(tmp123, tmp157, tmp7)
    tmp159 = tmp155 + tmp158
    tmp161 = tl.where(tmp59, tmp160, tmp7)
    tmp162 = tl.where(tmp123, tmp161, tmp7)
    tmp163 = tmp159 + tmp162
    tmp165 = tl.where(tmp65, tmp164, tmp7)
    tmp166 = tl.where(tmp123, tmp165, tmp7)
    tmp167 = tmp163 + tmp166
    tmp169 = tl.where(tmp71, tmp168, tmp7)
    tmp170 = tl.where(tmp123, tmp169, tmp7)
    tmp171 = tmp167 + tmp170
    tmp173 = tl.where(tmp77, tmp172, tmp7)
    tmp174 = tl.where(tmp123, tmp173, tmp7)
    tmp175 = tmp171 + tmp174
    tmp177 = tl.where(tmp83, tmp176, tmp7)
    tmp178 = tl.where(tmp123, tmp177, tmp7)
    tmp179 = tmp175 + tmp178
    tmp181 = tl.where(tmp89, tmp180, tmp7)
    tmp182 = tl.where(tmp123, tmp181, tmp7)
    tmp183 = tmp179 + tmp182
    tmp185 = tl.where(tmp95, tmp184, tmp7)
    tmp186 = tl.where(tmp123, tmp185, tmp7)
    tmp187 = tmp183 + tmp186
    tmp189 = tl.where(tmp100, tmp188, tmp7)
    tmp190 = tl.where(tmp123, tmp189, tmp7)
    tmp191 = tmp187 + tmp190
    tmp193 = tl.where(tmp106, tmp192, tmp7)
    tmp194 = tl.where(tmp123, tmp193, tmp7)
    tmp195 = tmp191 + tmp194
    tmp197 = tl.where(tmp112, tmp196, tmp7)
    tmp198 = tl.where(tmp123, tmp197, tmp7)
    tmp199 = tmp195 + tmp198
    tmp201 = tl.where(tmp118, tmp200, tmp7)
    tmp202 = tl.where(tmp123, tmp201, tmp7)
    tmp203 = tmp199 + tmp202
    tmp204 = tmp0 == tmp111
    tmp206 = tl.where(tmp5, tmp205, tmp7)
    tmp207 = tl.where(tmp204, tmp206, tmp7)
    tmp208 = tmp203 + tmp207
    tmp210 = tl.where(tmp11, tmp209, tmp7)
    tmp211 = tl.where(tmp204, tmp210, tmp7)
    tmp212 = tmp208 + tmp211
    tmp214 = tl.where(tmp17, tmp213, tmp7)
    tmp215 = tl.where(tmp204, tmp214, tmp7)
    tmp216 = tmp212 + tmp215
    tmp218 = tl.where(tmp23, tmp217, tmp7)
    tmp219 = tl.where(tmp204, tmp218, tmp7)
    tmp220 = tmp216 + tmp219
    tmp222 = tl.where(tmp29, tmp221, tmp7)
    tmp223 = tl.where(tmp204, tmp222, tmp7)
    tmp224 = tmp220 + tmp223
    tmp226 = tl.where(tmp35, tmp225, tmp7)
    tmp227 = tl.where(tmp204, tmp226, tmp7)
    tmp228 = tmp224 + tmp227
    tmp230 = tl.where(tmp41, tmp229, tmp7)
    tmp231 = tl.where(tmp204, tmp230, tmp7)
    tmp232 = tmp228 + tmp231
    tmp234 = tl.where(tmp47, tmp233, tmp7)
    tmp235 = tl.where(tmp204, tmp234, tmp7)
    tmp236 = tmp232 + tmp235
    tmp238 = tl.where(tmp53, tmp237, tmp7)
    tmp239 = tl.where(tmp204, tmp238, tmp7)
    tmp240 = tmp236 + tmp239
    tmp242 = tl.where(tmp59, tmp241, tmp7)
    tmp243 = tl.where(tmp204, tmp242, tmp7)
    tmp244 = tmp240 + tmp243
    tmp246 = tl.where(tmp65, tmp245, tmp7)
    tmp247 = tl.where(tmp204, tmp246, tmp7)
    tmp248 = tmp244 + tmp247
    tmp250 = tl.where(tmp71, tmp249, tmp7)
    tmp251 = tl.where(tmp204, tmp250, tmp7)
    tmp252 = tmp248 + tmp251
    tmp254 = tl.where(tmp77, tmp253, tmp7)
    tmp255 = tl.where(tmp204, tmp254, tmp7)
    tmp256 = tmp252 + tmp255
    tmp258 = tl.where(tmp83, tmp257, tmp7)
    tmp259 = tl.where(tmp204, tmp258, tmp7)
    tmp260 = tmp256 + tmp259
    tmp262 = tl.where(tmp89, tmp261, tmp7)
    tmp263 = tl.where(tmp204, tmp262, tmp7)
    tmp264 = tmp260 + tmp263
    tmp266 = tl.where(tmp95, tmp265, tmp7)
    tmp267 = tl.where(tmp204, tmp266, tmp7)
    tmp268 = tmp264 + tmp267
    tmp270 = tl.where(tmp100, tmp269, tmp7)
    tmp271 = tl.where(tmp204, tmp270, tmp7)
    tmp272 = tmp268 + tmp271
    tmp274 = tl.where(tmp106, tmp273, tmp7)
    tmp275 = tl.where(tmp204, tmp274, tmp7)
    tmp276 = tmp272 + tmp275
    tmp278 = tl.where(tmp112, tmp277, tmp7)
    tmp279 = tl.where(tmp204, tmp278, tmp7)
    tmp280 = tmp276 + tmp279
    tmp282 = tl.where(tmp118, tmp281, tmp7)
    tmp283 = tl.where(tmp204, tmp282, tmp7)
    tmp284 = tmp280 + tmp283
    tmp285 = tmp0 == tmp117
    tmp287 = tl.where(tmp5, tmp286, tmp7)
    tmp288 = tl.where(tmp285, tmp287, tmp7)
    tmp289 = tmp284 + tmp288
    tmp291 = tl.where(tmp11, tmp290, tmp7)
    tmp292 = tl.where(tmp285, tmp291, tmp7)
    tmp293 = tmp289 + tmp292
    tmp295 = tl.where(tmp17, tmp294, tmp7)
    tmp296 = tl.where(tmp285, tmp295, tmp7)
    tmp297 = tmp293 + tmp296
    tmp299 = tl.where(tmp23, tmp298, tmp7)
    tmp300 = tl.where(tmp285, tmp299, tmp7)
    tmp301 = tmp297 + tmp300
    tmp303 = tl.where(tmp29, tmp302, tmp7)
    tmp304 = tl.where(tmp285, tmp303, tmp7)
    tmp305 = tmp301 + tmp304
    tmp307 = tl.where(tmp35, tmp306, tmp7)
    tmp308 = tl.where(tmp285, tmp307, tmp7)
    tmp309 = tmp305 + tmp308
    tmp311 = tl.where(tmp41, tmp310, tmp7)
    tmp312 = tl.where(tmp285, tmp311, tmp7)
    tmp313 = tmp309 + tmp312
    tmp315 = tl.where(tmp47, tmp314, tmp7)
    tmp316 = tl.where(tmp285, tmp315, tmp7)
    tmp317 = tmp313 + tmp316
    tmp319 = tl.where(tmp53, tmp318, tmp7)
    tmp320 = tl.where(tmp285, tmp319, tmp7)
    tmp321 = tmp317 + tmp320
    tmp323 = tl.where(tmp59, tmp322, tmp7)
    tmp324 = tl.where(tmp285, tmp323, tmp7)
    tmp325 = tmp321 + tmp324
    tmp327 = tl.where(tmp65, tmp326, tmp7)
    tmp328 = tl.where(tmp285, tmp327, tmp7)
    tmp329 = tmp325 + tmp328
    tmp331 = tl.where(tmp71, tmp330, tmp7)
    tmp332 = tl.where(tmp285, tmp331, tmp7)
    tmp333 = tmp329 + tmp332
    tmp335 = tl.where(tmp77, tmp334, tmp7)
    tmp336 = tl.where(tmp285, tmp335, tmp7)
    tmp337 = tmp333 + tmp336
    tmp339 = tl.where(tmp83, tmp338, tmp7)
    tmp340 = tl.where(tmp285, tmp339, tmp7)
    tmp341 = tmp337 + tmp340
    tmp343 = tl.where(tmp89, tmp342, tmp7)
    tmp344 = tl.where(tmp285, tmp343, tmp7)
    tmp345 = tmp341 + tmp344
    tmp347 = tl.where(tmp95, tmp346, tmp7)
    tmp348 = tl.where(tmp285, tmp347, tmp7)
    tmp349 = tmp345 + tmp348
    tmp351 = tl.where(tmp100, tmp350, tmp7)
    tmp352 = tl.where(tmp285, tmp351, tmp7)
    tmp353 = tmp349 + tmp352
    tl.store(in_out_ptr0 + (x3), tmp353, None)
''')


# kernel path: /tmp/torchinductor_mengqy/mc/cmckeyrpmbhbtop7hcotsqyqjfkx3xdzkjlixaeysnzyr53sydqj.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_102 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_102', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_102', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_102(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 4032
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 21
    x4 = (xindex // 21)
    x2 = (xindex // 1008)
    x1 = (xindex // 21) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (21*r3) + (2688*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/cg/ccghhsczjaq42k3tg5zppwm5h544a3mwnruuepf43yzjx7cyztb7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_103 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_103', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_103', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_103(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 84
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 21
    x1 = (xindex // 21)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (21*r2) + (1008*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/pw/cpwgqcnbcmauvfzyhen4nmevd4b6btyzhyzkavvdhaeyslrwxi2f.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_104 = async_compile.triton('triton_poi_fused_clone_104', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_104', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_104(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 516096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 21
    x1 = (xindex // 21) % 4
    x2 = (xindex // 84)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (21*x2) + (129024*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zm/czmojmlp7rfjjfwfxxjyopql4ywfhpwyzflb6qaueugtprxfjf26.py
# Source Nodes: [l__mod___dynamic_dense_19_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_19_act => add_976, convert_element_type_354, erf_19, mul_1292
triton_poi_fused_gelu_gelu_backward_105 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_105', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_105', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_105(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 516096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xe/cxeuv4ax6bft5iz4gjikr7vbmrlvpwvduzs55o64epxaevhwgvv7.py
# Source Nodes: [add_800], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_800 => add_974
triton_red_fused_add_div_mul_pow_sum_106 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_106', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: 'i32', 10: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_106', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9, 10))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_106(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp10 = tl.load(in_ptr4 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr6 + (22*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp8 + tmp11
        tmp15 = tmp13 * tmp14
        tmp16 = tmp12 + tmp15
        tmp19 = tmp17 * tmp18
        tmp20 = tmp16 + tmp19
        tmp21 = -0.5
        tmp22 = tmp6 * tmp21
        tmp23 = tmp18 * tmp18
        tmp24 = tmp23 * tmp18
        tmp25 = tmp22 * tmp24
        tmp26 = 2048.0
        tmp27 = tmp25 / tmp26
        tmp30 = tmp28 + tmp29
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tmp33 = tmp27 * tmp32
        tmp34 = tmp20 + tmp33
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp34, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/g7/cg7oq2fxurpk6s4fjmacz3ojdkiunit4kp6ndw24bafk5rf7wyys.py
# Source Nodes: [add, add_648, add_740, add_759, add_760, add_778, add_779, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_6, mul_721, mul_740, mul_759, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_967
# add_648 => add_804
# add_740 => add_909
# add_759 => add_928
# add_760 => add_968
# add_778 => add_947
# add_779 => add_969
# float_1 => convert_element_type_338
# float_2 => convert_element_type_340
# float_3 => convert_element_type_342
# mean => mean_93
# mean_1 => mean_94
# mean_2 => mean_95
# mul => mul_1267
# mul_3 => mul_1270
# mul_6 => mul_1273
# mul_721 => mul_1209
# mul_740 => mul_1228
# mul_759 => mul_1247
# rsqrt => rsqrt_93
# rsqrt_1 => rsqrt_94
# rsqrt_2 => rsqrt_95
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_107 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_107', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp32', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp32', 113: '*fp32', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp32', 152: '*fp32', 153: '*fp32', 154: 'i32', 155: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr17', 'in_out_ptr18', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_107', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(154, 155))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_107(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_out_ptr17, in_out_ptr18, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, in_ptr126, in_ptr127, in_ptr128, in_ptr129, in_ptr130, out_ptr3, out_ptr4, out_ptr5, out_ptr6, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp69 = tl.load(in_ptr17 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr19 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr20 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr21 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr22 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr23 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr24 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr25 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr26 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr27 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr28 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr29 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr30 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr31 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr32 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr33 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr34 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr35 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr36 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr37 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr38 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr39 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr40 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr41 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp159 = tl.load(in_ptr42 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr43 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr44 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr45 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr46 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr47 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr48 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr49 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr50 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr51 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr52 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr53 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr54 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr55 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr56 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr57 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr58 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr59 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr60 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr61 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr62 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr63 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr64 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr65 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr66 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr67 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr68 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr69 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp250 = tl.load(in_ptr70 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr71 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr72 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr73 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr74 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr75 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp269 = tl.load(in_ptr76 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr77 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp276 = tl.load(in_ptr78 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp279 = tl.load(in_ptr79 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp282 = tl.load(in_ptr80 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr81 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp289 = tl.load(in_ptr82 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr83 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp295 = tl.load(in_ptr84 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp299 = tl.load(in_ptr85 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp302 = tl.load(in_ptr86 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp305 = tl.load(in_ptr87 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp308 = tl.load(in_ptr88 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr89 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp315 = tl.load(in_ptr90 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr91 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr92 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp325 = tl.load(in_ptr93 + (x0), None, eviction_policy='evict_last')
    tmp339 = tl.load(in_ptr94 + (x0), None, eviction_policy='evict_last')
    tmp372 = tl.load(in_ptr95 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp375 = tl.load(in_ptr96 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp378 = tl.load(in_ptr97 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp381 = tl.load(in_ptr98 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp384 = tl.load(in_ptr99 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp387 = tl.load(in_ptr100 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp390 = tl.load(in_ptr101 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp393 = tl.load(in_ptr102 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp396 = tl.load(in_ptr103 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp399 = tl.load(in_ptr104 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp402 = tl.load(in_ptr105 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp405 = tl.load(in_ptr106 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp408 = tl.load(in_ptr107 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp411 = tl.load(in_ptr108 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp414 = tl.load(in_ptr109 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp417 = tl.load(in_ptr110 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp420 = tl.load(in_ptr111 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp423 = tl.load(in_ptr112 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp426 = tl.load(in_ptr113 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp429 = tl.load(in_ptr114 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp432 = tl.load(in_ptr115 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp435 = tl.load(in_ptr116 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp438 = tl.load(in_ptr117 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp441 = tl.load(in_ptr118 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp444 = tl.load(in_ptr119 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp447 = tl.load(in_ptr120 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp450 = tl.load(in_ptr121 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp453 = tl.load(in_ptr122 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp456 = tl.load(in_ptr123 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp459 = tl.load(in_ptr124 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp462 = tl.load(in_ptr125 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp465 = tl.load(in_ptr126 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp468 = tl.load(in_ptr127 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp471 = tl.load(in_ptr128 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp474 = tl.load(in_ptr129 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp477 = tl.load(in_ptr130 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp90 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp155 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp168 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp220 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp233 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp246 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp285 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tl.load(in_out_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp311 = tl.load(in_out_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp347 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp352 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp353 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp362 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp70 = tmp68 * tmp69
        tmp71 = tmp67 + tmp70
        tmp74 = tmp72 * tmp73
        tmp75 = tmp71 + tmp74
        tmp78 = tmp76 * tmp77
        tmp79 = tmp75 + tmp78
        tmp82 = tmp80 * tmp81
        tmp83 = tmp82.to(tl.float32)
        tmp84 = tmp83 * tmp54
        tmp85 = tmp84 + tmp66
        tmp86 = tmp85 + tmp66
        tmp87 = tmp86.to(tl.float32)
        tmp88 = tmp87 * tmp5
        tmp89 = tmp79 + tmp88
        tmp92 = tmp68 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp72 * tmp94
        tmp96 = tmp93 + tmp95
        tmp98 = tmp76 * tmp97
        tmp99 = tmp96 + tmp98
        tmp101 = tmp87 * tmp100
        tmp102 = tmp99 + tmp101
        tmp105 = tmp68 * tmp104
        tmp106 = tmp103 + tmp105
        tmp108 = tmp72 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp76 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp87 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp68 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp72 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp76 * tmp123
        tmp125 = tmp122 + tmp124
        tmp127 = tmp87 * tmp126
        tmp128 = tmp125 + tmp127
        tmp131 = tmp68 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp72 * tmp133
        tmp135 = tmp132 + tmp134
        tmp137 = tmp76 * tmp136
        tmp138 = tmp135 + tmp137
        tmp140 = tmp87 * tmp139
        tmp141 = tmp138 + tmp140
        tmp144 = tmp68 * tmp143
        tmp145 = tmp142 + tmp144
        tmp147 = tmp72 * tmp146
        tmp148 = tmp145 + tmp147
        tmp150 = tmp76 * tmp149
        tmp151 = tmp148 + tmp150
        tmp153 = tmp87 * tmp152
        tmp154 = tmp151 + tmp153
        tmp157 = tmp68 * tmp156
        tmp158 = tmp155 + tmp157
        tmp160 = tmp72 * tmp159
        tmp161 = tmp158 + tmp160
        tmp163 = tmp76 * tmp162
        tmp164 = tmp161 + tmp163
        tmp166 = tmp87 * tmp165
        tmp167 = tmp164 + tmp166
        tmp170 = tmp68 * tmp169
        tmp171 = tmp168 + tmp170
        tmp173 = tmp72 * tmp172
        tmp174 = tmp171 + tmp173
        tmp176 = tmp76 * tmp175
        tmp177 = tmp174 + tmp176
        tmp179 = tmp87 * tmp178
        tmp180 = tmp177 + tmp179
        tmp183 = tmp68 * tmp182
        tmp184 = tmp181 + tmp183
        tmp186 = tmp72 * tmp185
        tmp187 = tmp184 + tmp186
        tmp189 = tmp76 * tmp188
        tmp190 = tmp187 + tmp189
        tmp192 = tmp87 * tmp191
        tmp193 = tmp190 + tmp192
        tmp196 = tmp68 * tmp195
        tmp197 = tmp194 + tmp196
        tmp199 = tmp72 * tmp198
        tmp200 = tmp197 + tmp199
        tmp202 = tmp76 * tmp201
        tmp203 = tmp200 + tmp202
        tmp205 = tmp87 * tmp204
        tmp206 = tmp203 + tmp205
        tmp209 = tmp68 * tmp208
        tmp210 = tmp207 + tmp209
        tmp212 = tmp72 * tmp211
        tmp213 = tmp210 + tmp212
        tmp215 = tmp76 * tmp214
        tmp216 = tmp213 + tmp215
        tmp218 = tmp87 * tmp217
        tmp219 = tmp216 + tmp218
        tmp222 = tmp68 * tmp221
        tmp223 = tmp220 + tmp222
        tmp225 = tmp72 * tmp224
        tmp226 = tmp223 + tmp225
        tmp228 = tmp76 * tmp227
        tmp229 = tmp226 + tmp228
        tmp231 = tmp87 * tmp230
        tmp232 = tmp229 + tmp231
        tmp235 = tmp68 * tmp234
        tmp236 = tmp233 + tmp235
        tmp238 = tmp72 * tmp237
        tmp239 = tmp236 + tmp238
        tmp241 = tmp76 * tmp240
        tmp242 = tmp239 + tmp241
        tmp244 = tmp87 * tmp243
        tmp245 = tmp242 + tmp244
        tmp248 = tmp68 * tmp247
        tmp249 = tmp246 + tmp248
        tmp251 = tmp72 * tmp250
        tmp252 = tmp249 + tmp251
        tmp254 = tmp76 * tmp253
        tmp255 = tmp252 + tmp254
        tmp257 = tmp87 * tmp256
        tmp258 = tmp255 + tmp257
        tmp261 = tmp68 * tmp260
        tmp262 = tmp259 + tmp261
        tmp264 = tmp72 * tmp263
        tmp265 = tmp262 + tmp264
        tmp267 = tmp76 * tmp266
        tmp268 = tmp265 + tmp267
        tmp270 = tmp87 * tmp269
        tmp271 = tmp268 + tmp270
        tmp274 = tmp68 * tmp273
        tmp275 = tmp272 + tmp274
        tmp277 = tmp72 * tmp276
        tmp278 = tmp275 + tmp277
        tmp280 = tmp76 * tmp279
        tmp281 = tmp278 + tmp280
        tmp283 = tmp87 * tmp282
        tmp284 = tmp281 + tmp283
        tmp287 = tmp68 * tmp286
        tmp288 = tmp285 + tmp287
        tmp290 = tmp72 * tmp289
        tmp291 = tmp288 + tmp290
        tmp293 = tmp76 * tmp292
        tmp294 = tmp291 + tmp293
        tmp296 = tmp87 * tmp295
        tmp297 = tmp294 + tmp296
        tmp300 = tmp68 * tmp299
        tmp301 = tmp298 + tmp300
        tmp303 = tmp72 * tmp302
        tmp304 = tmp301 + tmp303
        tmp306 = tmp76 * tmp305
        tmp307 = tmp304 + tmp306
        tmp309 = tmp87 * tmp308
        tmp310 = tmp307 + tmp309
        tmp313 = tmp68 * tmp312
        tmp314 = tmp311 + tmp313
        tmp316 = tmp72 * tmp315
        tmp317 = tmp314 + tmp316
        tmp319 = tmp76 * tmp318
        tmp320 = tmp317 + tmp319
        tmp322 = tmp87 * tmp321
        tmp323 = tmp320 + tmp322
        tmp324 = tmp27 * tmp47
        tmp326 = tmp325 / tmp50
        tmp327 = tmp326 + tmp52
        tmp328 = tl.math.rsqrt(tmp327)
        tmp329 = tmp328 * tmp328
        tmp330 = tmp329 * tmp328
        tmp331 = tmp324 * tmp330
        tmp332 = tmp331 / tmp50
        tmp334 = tmp21 * tmp62
        tmp335 = tmp333 + tmp334
        tmp336 = tmp335.to(tl.float32)
        tmp337 = tmp332 * tmp336
        tmp338 = tmp40 * tmp47
        tmp340 = tmp339 / tmp50
        tmp341 = tmp340 + tmp52
        tmp342 = tl.math.rsqrt(tmp341)
        tmp343 = tmp342 * tmp342
        tmp344 = tmp343 * tmp342
        tmp345 = tmp338 * tmp344
        tmp346 = tmp345 / tmp50
        tmp348 = tmp34 * tmp62
        tmp349 = tmp347 + tmp348
        tmp350 = tmp349.to(tl.float32)
        tmp351 = tmp346 * tmp350
        tmp354 = tmp352 * tmp353
        tmp355 = tmp354.to(tl.float32)
        tmp356 = tmp355 * tmp328
        tmp357 = tmp356 + tmp337
        tmp358 = tmp357 + tmp337
        tmp359 = tmp358.to(tl.float32)
        tmp360 = tmp359 * tmp21
        tmp361 = tmp89 + tmp360
        tmp364 = tmp362 * tmp363
        tmp365 = tmp364.to(tl.float32)
        tmp366 = tmp365 * tmp342
        tmp367 = tmp366 + tmp351
        tmp368 = tmp367 + tmp351
        tmp369 = tmp368.to(tl.float32)
        tmp370 = tmp369 * tmp34
        tmp371 = tmp361 + tmp370
        tmp373 = tmp359 * tmp372
        tmp374 = tmp102 + tmp373
        tmp376 = tmp369 * tmp375
        tmp377 = tmp374 + tmp376
        tmp379 = tmp359 * tmp378
        tmp380 = tmp115 + tmp379
        tmp382 = tmp369 * tmp381
        tmp383 = tmp380 + tmp382
        tmp385 = tmp359 * tmp384
        tmp386 = tmp128 + tmp385
        tmp388 = tmp369 * tmp387
        tmp389 = tmp386 + tmp388
        tmp391 = tmp359 * tmp390
        tmp392 = tmp141 + tmp391
        tmp394 = tmp369 * tmp393
        tmp395 = tmp392 + tmp394
        tmp397 = tmp359 * tmp396
        tmp398 = tmp154 + tmp397
        tmp400 = tmp369 * tmp399
        tmp401 = tmp398 + tmp400
        tmp403 = tmp359 * tmp402
        tmp404 = tmp167 + tmp403
        tmp406 = tmp369 * tmp405
        tmp407 = tmp404 + tmp406
        tmp409 = tmp359 * tmp408
        tmp410 = tmp180 + tmp409
        tmp412 = tmp369 * tmp411
        tmp413 = tmp410 + tmp412
        tmp415 = tmp359 * tmp414
        tmp416 = tmp193 + tmp415
        tmp418 = tmp369 * tmp417
        tmp419 = tmp416 + tmp418
        tmp421 = tmp359 * tmp420
        tmp422 = tmp206 + tmp421
        tmp424 = tmp369 * tmp423
        tmp425 = tmp422 + tmp424
        tmp427 = tmp359 * tmp426
        tmp428 = tmp219 + tmp427
        tmp430 = tmp369 * tmp429
        tmp431 = tmp428 + tmp430
        tmp433 = tmp359 * tmp432
        tmp434 = tmp232 + tmp433
        tmp436 = tmp369 * tmp435
        tmp437 = tmp434 + tmp436
        tmp439 = tmp359 * tmp438
        tmp440 = tmp245 + tmp439
        tmp442 = tmp369 * tmp441
        tmp443 = tmp440 + tmp442
        tmp445 = tmp359 * tmp444
        tmp446 = tmp258 + tmp445
        tmp448 = tmp369 * tmp447
        tmp449 = tmp446 + tmp448
        tmp451 = tmp359 * tmp450
        tmp452 = tmp271 + tmp451
        tmp454 = tmp369 * tmp453
        tmp455 = tmp452 + tmp454
        tmp457 = tmp359 * tmp456
        tmp458 = tmp284 + tmp457
        tmp460 = tmp369 * tmp459
        tmp461 = tmp458 + tmp460
        tmp463 = tmp359 * tmp462
        tmp464 = tmp297 + tmp463
        tmp466 = tmp369 * tmp465
        tmp467 = tmp464 + tmp466
        tmp469 = tmp359 * tmp468
        tmp470 = tmp310 + tmp469
        tmp472 = tmp369 * tmp471
        tmp473 = tmp470 + tmp472
        tmp475 = tmp359 * tmp474
        tmp476 = tmp323 + tmp475
        tmp478 = tmp369 * tmp477
        tmp479 = tmp476 + tmp478
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp337, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp351, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp371, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp377, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp383, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp389, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp395, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp401, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp407, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp413, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp419, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp425, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp431, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp437, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp443, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp449, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp455, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp461, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp467, rmask)
        tl.store(in_out_ptr17 + (r1 + (2048*x0)), tmp473, rmask)
        tl.store(in_out_ptr18 + (r1 + (2048*x0)), tmp479, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/vy/cvyroag2cd4phaa3h4dbaiz7bqafe7v2mimkrjvi3gndmh3gtxrr.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_778, add_779, add_96, add_98, float_3, mean_2, mul_4, mul_6, mul_759, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_778 => add_947
# add_779 => add_969
# add_96 => add_153
# add_98 => add_155
# float_3 => convert_element_type_342
# mean_2 => mean_95
# mul_4 => mul_24
# mul_6 => mul_1273
# mul_759 => mul_1247
# rsqrt_2 => rsqrt_95
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_108 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_108', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp32', 45: '*fp32', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: 'i32', 86: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_108', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(85, 86))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_108(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp34 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp48 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp55 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp78 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp87 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp96 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp105 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp114 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp123 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp125 = tl.load(in_ptr39 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp135 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp141 = tl.load(in_ptr44 + (x0), None, eviction_policy='evict_last')
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp165 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp173 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp185 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp189 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp193 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp197 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp201 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp213 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp225 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp229 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp233 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp119 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp131 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr43 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0)
        tmp152 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp0 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp0 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp0 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 + tmp30
        tmp32 = tmp0 * tmp31
        tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
        tmp35 = _tmp34 + tmp33
        _tmp34 = tl.where(rmask, tmp35, _tmp34)
        tmp38 = tmp36 + tmp37
        tmp39 = tmp0 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tmp45 = tmp43 + tmp44
        tmp46 = tmp0 * tmp45
        tmp47 = tl.broadcast_to(tmp46, [XBLOCK, RBLOCK])
        tmp49 = _tmp48 + tmp47
        _tmp48 = tl.where(rmask, tmp49, _tmp48)
        tmp52 = tmp50 + tmp51
        tmp53 = tmp0 * tmp52
        tmp54 = tl.broadcast_to(tmp53, [XBLOCK, RBLOCK])
        tmp56 = _tmp55 + tmp54
        _tmp55 = tl.where(rmask, tmp56, _tmp55)
        tmp59 = tmp57 + tmp58
        tmp60 = tmp0 * tmp59
        tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
        tmp63 = _tmp62 + tmp61
        _tmp62 = tl.where(rmask, tmp63, _tmp62)
        tmp66 = tmp64 + tmp65
        tmp67 = tmp0 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp73 = tmp71 + tmp72
        tmp75 = tmp73 + tmp74
        tmp76 = tmp0 * tmp75
        tmp77 = tl.broadcast_to(tmp76, [XBLOCK, RBLOCK])
        tmp79 = _tmp78 + tmp77
        _tmp78 = tl.where(rmask, tmp79, _tmp78)
        tmp82 = tmp80 + tmp81
        tmp84 = tmp82 + tmp83
        tmp85 = tmp0 * tmp84
        tmp86 = tl.broadcast_to(tmp85, [XBLOCK, RBLOCK])
        tmp88 = _tmp87 + tmp86
        _tmp87 = tl.where(rmask, tmp88, _tmp87)
        tmp91 = tmp89 + tmp90
        tmp93 = tmp91 + tmp92
        tmp94 = tmp0 * tmp93
        tmp95 = tl.broadcast_to(tmp94, [XBLOCK, RBLOCK])
        tmp97 = _tmp96 + tmp95
        _tmp96 = tl.where(rmask, tmp97, _tmp96)
        tmp100 = tmp98 + tmp99
        tmp102 = tmp100 + tmp101
        tmp103 = tmp0 * tmp102
        tmp104 = tl.broadcast_to(tmp103, [XBLOCK, RBLOCK])
        tmp106 = _tmp105 + tmp104
        _tmp105 = tl.where(rmask, tmp106, _tmp105)
        tmp109 = tmp107 + tmp108
        tmp111 = tmp109 + tmp110
        tmp112 = tmp0 * tmp111
        tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
        tmp115 = _tmp114 + tmp113
        _tmp114 = tl.where(rmask, tmp115, _tmp114)
        tmp118 = tmp116 + tmp117
        tmp120 = tmp118 + tmp119
        tmp121 = tmp0 * tmp120
        tmp122 = tl.broadcast_to(tmp121, [XBLOCK, RBLOCK])
        tmp124 = _tmp123 + tmp122
        _tmp123 = tl.where(rmask, tmp124, _tmp123)
        tmp126 = tmp125 * tmp71
        tmp127 = 0.0
        tmp128 = tmp126 + tmp127
        tmp130 = tmp128 + tmp129
        tmp132 = tmp130 + tmp131
        tmp133 = tmp0 * tmp132
        tmp134 = tl.broadcast_to(tmp133, [XBLOCK, RBLOCK])
        tmp136 = _tmp135 + tmp134
        _tmp135 = tl.where(rmask, tmp136, _tmp135)
        tmp139 = tmp137 * tmp138
        tmp140 = tmp139.to(tl.float32)
        tmp142 = 2048.0
        tmp143 = tmp141 / tmp142
        tmp144 = 1e-05
        tmp145 = tmp143 + tmp144
        tmp146 = tl.math.rsqrt(tmp145)
        tmp147 = tmp140 * tmp146
        tmp149 = tmp147 + tmp148
        tmp150 = tmp149 + tmp148
        tmp151 = tmp150.to(tl.float32)
        tmp154 = tmp152 + tmp153
        tmp155 = tmp151 * tmp154
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp159 = tmp151 * tmp66
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tmp163 = tmp151 * tmp120
        tmp164 = tl.broadcast_to(tmp163, [XBLOCK, RBLOCK])
        tmp166 = _tmp165 + tmp164
        _tmp165 = tl.where(rmask, tmp166, _tmp165)
        tmp167 = tmp151 * tmp59
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tmp171 = tmp151 * tmp52
        tmp172 = tl.broadcast_to(tmp171, [XBLOCK, RBLOCK])
        tmp174 = _tmp173 + tmp172
        _tmp173 = tl.where(rmask, tmp174, _tmp173)
        tmp175 = tmp151 * tmp111
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp179 = tmp151 * tmp45
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tmp183 = tmp151 * tmp38
        tmp184 = tl.broadcast_to(tmp183, [XBLOCK, RBLOCK])
        tmp186 = _tmp185 + tmp184
        _tmp185 = tl.where(rmask, tmp186, _tmp185)
        tmp187 = tmp151 * tmp102
        tmp188 = tl.broadcast_to(tmp187, [XBLOCK, RBLOCK])
        tmp190 = _tmp189 + tmp188
        _tmp189 = tl.where(rmask, tmp190, _tmp189)
        tmp191 = tmp151 * tmp31
        tmp192 = tl.broadcast_to(tmp191, [XBLOCK, RBLOCK])
        tmp194 = _tmp193 + tmp192
        _tmp193 = tl.where(rmask, tmp194, _tmp193)
        tmp195 = tmp151 * tmp24
        tmp196 = tl.broadcast_to(tmp195, [XBLOCK, RBLOCK])
        tmp198 = _tmp197 + tmp196
        _tmp197 = tl.where(rmask, tmp198, _tmp197)
        tmp199 = tmp151 * tmp93
        tmp200 = tl.broadcast_to(tmp199, [XBLOCK, RBLOCK])
        tmp202 = _tmp201 + tmp200
        _tmp201 = tl.where(rmask, tmp202, _tmp201)
        tmp203 = tmp151 * tmp10
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp151 * tmp17
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp211 = tmp151 * tmp84
        tmp212 = tl.broadcast_to(tmp211, [XBLOCK, RBLOCK])
        tmp214 = _tmp213 + tmp212
        _tmp213 = tl.where(rmask, tmp214, _tmp213)
        tmp215 = tmp151 * tmp3
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp219 = tmp151 * tmp132
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp223 = tmp151 * tmp75
        tmp224 = tl.broadcast_to(tmp223, [XBLOCK, RBLOCK])
        tmp226 = _tmp225 + tmp224
        _tmp225 = tl.where(rmask, tmp226, _tmp225)
        tmp227 = tmp151 * tmp71
        tmp228 = tl.broadcast_to(tmp227, [XBLOCK, RBLOCK])
        tmp230 = _tmp229 + tmp228
        _tmp229 = tl.where(rmask, tmp230, _tmp229)
        tmp231 = tmp0 * tmp71
        tmp232 = tl.broadcast_to(tmp231, [XBLOCK, RBLOCK])
        tmp234 = _tmp233 + tmp232
        _tmp233 = tl.where(rmask, tmp234, _tmp233)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp13, None)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp20, None)
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp27, None)
    tmp34 = tl.sum(_tmp34, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp34, None)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp41, None)
    tmp48 = tl.sum(_tmp48, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp48, None)
    tmp55 = tl.sum(_tmp55, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp55, None)
    tmp62 = tl.sum(_tmp62, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp62, None)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp69, None)
    tmp78 = tl.sum(_tmp78, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp78, None)
    tmp87 = tl.sum(_tmp87, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp87, None)
    tmp96 = tl.sum(_tmp96, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp96, None)
    tmp105 = tl.sum(_tmp105, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp105, None)
    tmp114 = tl.sum(_tmp114, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp114, None)
    tmp123 = tl.sum(_tmp123, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp123, None)
    tmp135 = tl.sum(_tmp135, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp135, None)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp157, None)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp161, None)
    tmp165 = tl.sum(_tmp165, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp165, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp169, None)
    tmp173 = tl.sum(_tmp173, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp173, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp177, None)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp181, None)
    tmp185 = tl.sum(_tmp185, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp185, None)
    tmp189 = tl.sum(_tmp189, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp189, None)
    tmp193 = tl.sum(_tmp193, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp193, None)
    tmp197 = tl.sum(_tmp197, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp197, None)
    tmp201 = tl.sum(_tmp201, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp201, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp209, None)
    tmp213 = tl.sum(_tmp213, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp213, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp217, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp221, None)
    tmp225 = tl.sum(_tmp225, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp225, None)
    tmp229 = tl.sum(_tmp229, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp229, None)
    tmp233 = tl.sum(_tmp233, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp233, None)
''')


# kernel path: /tmp/torchinductor_mengqy/tl/ctl2ls7q57zlbyytyo3jfuzpqjvijm3ktj4gyoolj3pqm525weik.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_740, add_759, add_760, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, mul_721, mul_740, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_967
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_804
# add_72 => add_120
# add_740 => add_909
# add_759 => add_928
# add_760 => add_968
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_338
# float_2 => convert_element_type_340
# mean => mean_93
# mean_1 => mean_94
# mul => mul_1267
# mul_3 => mul_1270
# mul_4 => mul_24
# mul_721 => mul_1209
# mul_740 => mul_1228
# rsqrt => rsqrt_93
# rsqrt_1 => rsqrt_94
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_109 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_109', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp32', 50: '*fp32', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: 'i32', 90: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_109', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(89, 90))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_109(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp36 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp43 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp50 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp59 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp66 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp73 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp89 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp96 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp105 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp112 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp119 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp128 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp135 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp137 = tl.load(in_ptr41 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp148 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp156 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp160 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp166 = tl.load(in_ptr49 + (x0), None, eviction_policy='evict_last')
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp185 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp189 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp193 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp197 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp201 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp213 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp225 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp229 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp233 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp241 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp249 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0)
        tmp15 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp45 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp46 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp52 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp62 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp75 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp91 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp122 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp130 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp131 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp152 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp162 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr48 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 2048.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = tl.math.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12 + tmp11
        tmp14 = tmp13.to(tl.float32)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp14 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp14 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 + tmp30
        tmp33 = tmp31 + tmp32
        tmp34 = tmp14 * tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = _tmp36 + tmp35
        _tmp36 = tl.where(rmask, tmp37, _tmp36)
        tmp40 = tmp38 + tmp39
        tmp41 = tmp14 * tmp40
        tmp42 = tl.broadcast_to(tmp41, [XBLOCK, RBLOCK])
        tmp44 = _tmp43 + tmp42
        _tmp43 = tl.where(rmask, tmp44, _tmp43)
        tmp47 = tmp45 + tmp46
        tmp48 = tmp14 * tmp47
        tmp49 = tl.broadcast_to(tmp48, [XBLOCK, RBLOCK])
        tmp51 = _tmp50 + tmp49
        _tmp50 = tl.where(rmask, tmp51, _tmp50)
        tmp54 = tmp52 + tmp53
        tmp56 = tmp54 + tmp55
        tmp57 = tmp14 * tmp56
        tmp58 = tl.broadcast_to(tmp57, [XBLOCK, RBLOCK])
        tmp60 = _tmp59 + tmp58
        _tmp59 = tl.where(rmask, tmp60, _tmp59)
        tmp63 = tmp61 + tmp62
        tmp64 = tmp14 * tmp63
        tmp65 = tl.broadcast_to(tmp64, [XBLOCK, RBLOCK])
        tmp67 = _tmp66 + tmp65
        _tmp66 = tl.where(rmask, tmp67, _tmp66)
        tmp70 = tmp68 + tmp69
        tmp71 = tmp14 * tmp70
        tmp72 = tl.broadcast_to(tmp71, [XBLOCK, RBLOCK])
        tmp74 = _tmp73 + tmp72
        _tmp73 = tl.where(rmask, tmp74, _tmp73)
        tmp77 = tmp75 + tmp76
        tmp79 = tmp77 + tmp78
        tmp80 = tmp14 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
        tmp86 = tmp84 + tmp85
        tmp87 = tmp14 * tmp86
        tmp88 = tl.broadcast_to(tmp87, [XBLOCK, RBLOCK])
        tmp90 = _tmp89 + tmp88
        _tmp89 = tl.where(rmask, tmp90, _tmp89)
        tmp93 = tmp91 + tmp92
        tmp94 = tmp14 * tmp93
        tmp95 = tl.broadcast_to(tmp94, [XBLOCK, RBLOCK])
        tmp97 = _tmp96 + tmp95
        _tmp96 = tl.where(rmask, tmp97, _tmp96)
        tmp100 = tmp98 + tmp99
        tmp102 = tmp100 + tmp101
        tmp103 = tmp14 * tmp102
        tmp104 = tl.broadcast_to(tmp103, [XBLOCK, RBLOCK])
        tmp106 = _tmp105 + tmp104
        _tmp105 = tl.where(rmask, tmp106, _tmp105)
        tmp109 = tmp107 + tmp108
        tmp110 = tmp14 * tmp109
        tmp111 = tl.broadcast_to(tmp110, [XBLOCK, RBLOCK])
        tmp113 = _tmp112 + tmp111
        _tmp112 = tl.where(rmask, tmp113, _tmp112)
        tmp116 = tmp114 + tmp115
        tmp117 = tmp14 * tmp116
        tmp118 = tl.broadcast_to(tmp117, [XBLOCK, RBLOCK])
        tmp120 = _tmp119 + tmp118
        _tmp119 = tl.where(rmask, tmp120, _tmp119)
        tmp123 = tmp121 + tmp122
        tmp125 = tmp123 + tmp124
        tmp126 = tmp14 * tmp125
        tmp127 = tl.broadcast_to(tmp126, [XBLOCK, RBLOCK])
        tmp129 = _tmp128 + tmp127
        _tmp128 = tl.where(rmask, tmp129, _tmp128)
        tmp132 = tmp130 + tmp131
        tmp133 = tmp14 * tmp132
        tmp134 = tl.broadcast_to(tmp133, [XBLOCK, RBLOCK])
        tmp136 = _tmp135 + tmp134
        _tmp135 = tl.where(rmask, tmp136, _tmp135)
        tmp139 = tmp137 * tmp138
        tmp140 = 0.0
        tmp141 = tmp139 + tmp140
        tmp143 = tmp141 + tmp142
        tmp145 = tmp143 + tmp144
        tmp146 = tmp14 * tmp145
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
        tmp149 = _tmp148 + tmp147
        _tmp148 = tl.where(rmask, tmp149, _tmp148)
        tmp151 = tmp138 + tmp150
        tmp153 = tmp151 + tmp152
        tmp154 = tmp14 * tmp153
        tmp155 = tl.broadcast_to(tmp154, [XBLOCK, RBLOCK])
        tmp157 = _tmp156 + tmp155
        _tmp156 = tl.where(rmask, tmp157, _tmp156)
        tmp158 = tmp14 * tmp138
        tmp159 = tl.broadcast_to(tmp158, [XBLOCK, RBLOCK])
        tmp161 = _tmp160 + tmp159
        _tmp160 = tl.where(rmask, tmp161, _tmp160)
        tmp164 = tmp162 * tmp163
        tmp165 = tmp164.to(tl.float32)
        tmp167 = tmp166 / tmp5
        tmp168 = tmp167 + tmp7
        tmp169 = tl.math.rsqrt(tmp168)
        tmp170 = tmp165 * tmp169
        tmp172 = tmp170 + tmp171
        tmp173 = tmp172 + tmp171
        tmp174 = tmp173.to(tl.float32)
        tmp175 = tmp174 * tmp17
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp179 = tmp174 * tmp24
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tmp183 = tmp174 * tmp33
        tmp184 = tl.broadcast_to(tmp183, [XBLOCK, RBLOCK])
        tmp186 = _tmp185 + tmp184
        _tmp185 = tl.where(rmask, tmp186, _tmp185)
        tmp187 = tmp174 * tmp40
        tmp188 = tl.broadcast_to(tmp187, [XBLOCK, RBLOCK])
        tmp190 = _tmp189 + tmp188
        _tmp189 = tl.where(rmask, tmp190, _tmp189)
        tmp191 = tmp174 * tmp47
        tmp192 = tl.broadcast_to(tmp191, [XBLOCK, RBLOCK])
        tmp194 = _tmp193 + tmp192
        _tmp193 = tl.where(rmask, tmp194, _tmp193)
        tmp195 = tmp174 * tmp56
        tmp196 = tl.broadcast_to(tmp195, [XBLOCK, RBLOCK])
        tmp198 = _tmp197 + tmp196
        _tmp197 = tl.where(rmask, tmp198, _tmp197)
        tmp199 = tmp174 * tmp63
        tmp200 = tl.broadcast_to(tmp199, [XBLOCK, RBLOCK])
        tmp202 = _tmp201 + tmp200
        _tmp201 = tl.where(rmask, tmp202, _tmp201)
        tmp203 = tmp174 * tmp70
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp174 * tmp79
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp211 = tmp174 * tmp86
        tmp212 = tl.broadcast_to(tmp211, [XBLOCK, RBLOCK])
        tmp214 = _tmp213 + tmp212
        _tmp213 = tl.where(rmask, tmp214, _tmp213)
        tmp215 = tmp174 * tmp93
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp219 = tmp174 * tmp102
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp223 = tmp174 * tmp109
        tmp224 = tl.broadcast_to(tmp223, [XBLOCK, RBLOCK])
        tmp226 = _tmp225 + tmp224
        _tmp225 = tl.where(rmask, tmp226, _tmp225)
        tmp227 = tmp174 * tmp116
        tmp228 = tl.broadcast_to(tmp227, [XBLOCK, RBLOCK])
        tmp230 = _tmp229 + tmp228
        _tmp229 = tl.where(rmask, tmp230, _tmp229)
        tmp231 = tmp174 * tmp125
        tmp232 = tl.broadcast_to(tmp231, [XBLOCK, RBLOCK])
        tmp234 = _tmp233 + tmp232
        _tmp233 = tl.where(rmask, tmp234, _tmp233)
        tmp235 = tmp174 * tmp132
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tmp239 = tmp174 * tmp145
        tmp240 = tl.broadcast_to(tmp239, [XBLOCK, RBLOCK])
        tmp242 = _tmp241 + tmp240
        _tmp241 = tl.where(rmask, tmp242, _tmp241)
        tmp243 = tmp174 * tmp153
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp247 = tmp174 * tmp138
        tmp248 = tl.broadcast_to(tmp247, [XBLOCK, RBLOCK])
        tmp250 = _tmp249 + tmp248
        _tmp249 = tl.where(rmask, tmp250, _tmp249)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp20, None)
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp27, None)
    tmp36 = tl.sum(_tmp36, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp36, None)
    tmp43 = tl.sum(_tmp43, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp43, None)
    tmp50 = tl.sum(_tmp50, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp50, None)
    tmp59 = tl.sum(_tmp59, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp59, None)
    tmp66 = tl.sum(_tmp66, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp66, None)
    tmp73 = tl.sum(_tmp73, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp73, None)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp82, None)
    tmp89 = tl.sum(_tmp89, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp89, None)
    tmp96 = tl.sum(_tmp96, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp96, None)
    tmp105 = tl.sum(_tmp105, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp105, None)
    tmp112 = tl.sum(_tmp112, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp112, None)
    tmp119 = tl.sum(_tmp119, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp119, None)
    tmp128 = tl.sum(_tmp128, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp128, None)
    tmp135 = tl.sum(_tmp135, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp135, None)
    tmp148 = tl.sum(_tmp148, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp148, None)
    tmp156 = tl.sum(_tmp156, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp156, None)
    tmp160 = tl.sum(_tmp160, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp160, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp177, None)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp181, None)
    tmp185 = tl.sum(_tmp185, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp185, None)
    tmp189 = tl.sum(_tmp189, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp189, None)
    tmp193 = tl.sum(_tmp193, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp193, None)
    tmp197 = tl.sum(_tmp197, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp197, None)
    tmp201 = tl.sum(_tmp201, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp201, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp209, None)
    tmp213 = tl.sum(_tmp213, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp213, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp217, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp221, None)
    tmp225 = tl.sum(_tmp225, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp225, None)
    tmp229 = tl.sum(_tmp229, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp229, None)
    tmp233 = tl.sum(_tmp233, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp233, None)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp237, None)
    tmp241 = tl.sum(_tmp241, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp241, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp245, None)
    tmp249 = tl.sum(_tmp249, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp249, None)
''')


# kernel path: /tmp/torchinductor_mengqy/x5/cx5zopa4jr4u3d6u46ntjkimsspsybz7wyafuhrig5vdod5xk5ci.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_110 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_110', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_110', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(74,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_110(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 122880)
    x0 = xindex % 20
    x1 = (xindex // 20) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp255 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp259 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp263 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp276 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp288 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp296 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp308 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp316 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp320 = tl.load(in_ptr69 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp328 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp332 = tl.load(in_ptr72 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 18, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 17, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 16, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 15, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 14, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 13, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 12, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 11, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 10, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 9, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 8, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 7, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 6, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 5, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tl.full([1], 4, tl.int32)
    tmp89 = tmp3 == tmp88
    tmp91 = tl.where(tmp89, tmp90, tmp7)
    tmp92 = tl.where(tmp2, tmp91, tmp7)
    tmp93 = tmp87 + tmp92
    tmp94 = tmp3 == tmp1
    tmp96 = tl.where(tmp94, tmp95, tmp7)
    tmp97 = tl.where(tmp2, tmp96, tmp7)
    tmp98 = tmp93 + tmp97
    tmp99 = tl.full([1], 2, tl.int32)
    tmp100 = tmp3 == tmp99
    tmp102 = tl.where(tmp100, tmp101, tmp7)
    tmp103 = tl.where(tmp2, tmp102, tmp7)
    tmp104 = tmp98 + tmp103
    tmp105 = tl.full([1], 1, tl.int32)
    tmp106 = tmp3 == tmp105
    tmp108 = tl.where(tmp106, tmp107, tmp7)
    tmp109 = tl.where(tmp2, tmp108, tmp7)
    tmp110 = tmp104 + tmp109
    tmp111 = tl.full([1], 0, tl.int32)
    tmp112 = tmp3 == tmp111
    tmp114 = tl.where(tmp112, tmp113, tmp7)
    tmp115 = tl.where(tmp2, tmp114, tmp7)
    tmp116 = tmp110 + tmp115
    tmp117 = tmp0 == tmp99
    tmp119 = tl.where(tmp5, tmp118, tmp7)
    tmp120 = tl.where(tmp117, tmp119, tmp7)
    tmp121 = tmp116 + tmp120
    tmp123 = tl.where(tmp11, tmp122, tmp7)
    tmp124 = tl.where(tmp117, tmp123, tmp7)
    tmp125 = tmp121 + tmp124
    tmp127 = tl.where(tmp17, tmp126, tmp7)
    tmp128 = tl.where(tmp117, tmp127, tmp7)
    tmp129 = tmp125 + tmp128
    tmp131 = tl.where(tmp23, tmp130, tmp7)
    tmp132 = tl.where(tmp117, tmp131, tmp7)
    tmp133 = tmp129 + tmp132
    tmp135 = tl.where(tmp29, tmp134, tmp7)
    tmp136 = tl.where(tmp117, tmp135, tmp7)
    tmp137 = tmp133 + tmp136
    tmp139 = tl.where(tmp35, tmp138, tmp7)
    tmp140 = tl.where(tmp117, tmp139, tmp7)
    tmp141 = tmp137 + tmp140
    tmp143 = tl.where(tmp41, tmp142, tmp7)
    tmp144 = tl.where(tmp117, tmp143, tmp7)
    tmp145 = tmp141 + tmp144
    tmp147 = tl.where(tmp47, tmp146, tmp7)
    tmp148 = tl.where(tmp117, tmp147, tmp7)
    tmp149 = tmp145 + tmp148
    tmp151 = tl.where(tmp53, tmp150, tmp7)
    tmp152 = tl.where(tmp117, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp155 = tl.where(tmp59, tmp154, tmp7)
    tmp156 = tl.where(tmp117, tmp155, tmp7)
    tmp157 = tmp153 + tmp156
    tmp159 = tl.where(tmp65, tmp158, tmp7)
    tmp160 = tl.where(tmp117, tmp159, tmp7)
    tmp161 = tmp157 + tmp160
    tmp163 = tl.where(tmp71, tmp162, tmp7)
    tmp164 = tl.where(tmp117, tmp163, tmp7)
    tmp165 = tmp161 + tmp164
    tmp167 = tl.where(tmp77, tmp166, tmp7)
    tmp168 = tl.where(tmp117, tmp167, tmp7)
    tmp169 = tmp165 + tmp168
    tmp171 = tl.where(tmp83, tmp170, tmp7)
    tmp172 = tl.where(tmp117, tmp171, tmp7)
    tmp173 = tmp169 + tmp172
    tmp175 = tl.where(tmp89, tmp174, tmp7)
    tmp176 = tl.where(tmp117, tmp175, tmp7)
    tmp177 = tmp173 + tmp176
    tmp179 = tl.where(tmp94, tmp178, tmp7)
    tmp180 = tl.where(tmp117, tmp179, tmp7)
    tmp181 = tmp177 + tmp180
    tmp183 = tl.where(tmp100, tmp182, tmp7)
    tmp184 = tl.where(tmp117, tmp183, tmp7)
    tmp185 = tmp181 + tmp184
    tmp187 = tl.where(tmp106, tmp186, tmp7)
    tmp188 = tl.where(tmp117, tmp187, tmp7)
    tmp189 = tmp185 + tmp188
    tmp191 = tl.where(tmp112, tmp190, tmp7)
    tmp192 = tl.where(tmp117, tmp191, tmp7)
    tmp193 = tmp189 + tmp192
    tmp194 = tmp0 == tmp105
    tmp196 = tl.where(tmp5, tmp195, tmp7)
    tmp197 = tl.where(tmp194, tmp196, tmp7)
    tmp198 = tmp193 + tmp197
    tmp200 = tl.where(tmp11, tmp199, tmp7)
    tmp201 = tl.where(tmp194, tmp200, tmp7)
    tmp202 = tmp198 + tmp201
    tmp204 = tl.where(tmp17, tmp203, tmp7)
    tmp205 = tl.where(tmp194, tmp204, tmp7)
    tmp206 = tmp202 + tmp205
    tmp208 = tl.where(tmp23, tmp207, tmp7)
    tmp209 = tl.where(tmp194, tmp208, tmp7)
    tmp210 = tmp206 + tmp209
    tmp212 = tl.where(tmp29, tmp211, tmp7)
    tmp213 = tl.where(tmp194, tmp212, tmp7)
    tmp214 = tmp210 + tmp213
    tmp216 = tl.where(tmp35, tmp215, tmp7)
    tmp217 = tl.where(tmp194, tmp216, tmp7)
    tmp218 = tmp214 + tmp217
    tmp220 = tl.where(tmp41, tmp219, tmp7)
    tmp221 = tl.where(tmp194, tmp220, tmp7)
    tmp222 = tmp218 + tmp221
    tmp224 = tl.where(tmp47, tmp223, tmp7)
    tmp225 = tl.where(tmp194, tmp224, tmp7)
    tmp226 = tmp222 + tmp225
    tmp228 = tl.where(tmp53, tmp227, tmp7)
    tmp229 = tl.where(tmp194, tmp228, tmp7)
    tmp230 = tmp226 + tmp229
    tmp232 = tl.where(tmp59, tmp231, tmp7)
    tmp233 = tl.where(tmp194, tmp232, tmp7)
    tmp234 = tmp230 + tmp233
    tmp236 = tl.where(tmp65, tmp235, tmp7)
    tmp237 = tl.where(tmp194, tmp236, tmp7)
    tmp238 = tmp234 + tmp237
    tmp240 = tl.where(tmp71, tmp239, tmp7)
    tmp241 = tl.where(tmp194, tmp240, tmp7)
    tmp242 = tmp238 + tmp241
    tmp244 = tl.where(tmp77, tmp243, tmp7)
    tmp245 = tl.where(tmp194, tmp244, tmp7)
    tmp246 = tmp242 + tmp245
    tmp248 = tl.where(tmp83, tmp247, tmp7)
    tmp249 = tl.where(tmp194, tmp248, tmp7)
    tmp250 = tmp246 + tmp249
    tmp252 = tl.where(tmp89, tmp251, tmp7)
    tmp253 = tl.where(tmp194, tmp252, tmp7)
    tmp254 = tmp250 + tmp253
    tmp256 = tl.where(tmp94, tmp255, tmp7)
    tmp257 = tl.where(tmp194, tmp256, tmp7)
    tmp258 = tmp254 + tmp257
    tmp260 = tl.where(tmp100, tmp259, tmp7)
    tmp261 = tl.where(tmp194, tmp260, tmp7)
    tmp262 = tmp258 + tmp261
    tmp264 = tl.where(tmp106, tmp263, tmp7)
    tmp265 = tl.where(tmp194, tmp264, tmp7)
    tmp266 = tmp262 + tmp265
    tmp268 = tl.where(tmp112, tmp267, tmp7)
    tmp269 = tl.where(tmp194, tmp268, tmp7)
    tmp270 = tmp266 + tmp269
    tmp271 = tmp0 == tmp111
    tmp273 = tl.where(tmp5, tmp272, tmp7)
    tmp274 = tl.where(tmp271, tmp273, tmp7)
    tmp275 = tmp270 + tmp274
    tmp277 = tl.where(tmp11, tmp276, tmp7)
    tmp278 = tl.where(tmp271, tmp277, tmp7)
    tmp279 = tmp275 + tmp278
    tmp281 = tl.where(tmp17, tmp280, tmp7)
    tmp282 = tl.where(tmp271, tmp281, tmp7)
    tmp283 = tmp279 + tmp282
    tmp285 = tl.where(tmp23, tmp284, tmp7)
    tmp286 = tl.where(tmp271, tmp285, tmp7)
    tmp287 = tmp283 + tmp286
    tmp289 = tl.where(tmp29, tmp288, tmp7)
    tmp290 = tl.where(tmp271, tmp289, tmp7)
    tmp291 = tmp287 + tmp290
    tmp293 = tl.where(tmp35, tmp292, tmp7)
    tmp294 = tl.where(tmp271, tmp293, tmp7)
    tmp295 = tmp291 + tmp294
    tmp297 = tl.where(tmp41, tmp296, tmp7)
    tmp298 = tl.where(tmp271, tmp297, tmp7)
    tmp299 = tmp295 + tmp298
    tmp301 = tl.where(tmp47, tmp300, tmp7)
    tmp302 = tl.where(tmp271, tmp301, tmp7)
    tmp303 = tmp299 + tmp302
    tmp305 = tl.where(tmp53, tmp304, tmp7)
    tmp306 = tl.where(tmp271, tmp305, tmp7)
    tmp307 = tmp303 + tmp306
    tmp309 = tl.where(tmp59, tmp308, tmp7)
    tmp310 = tl.where(tmp271, tmp309, tmp7)
    tmp311 = tmp307 + tmp310
    tmp313 = tl.where(tmp65, tmp312, tmp7)
    tmp314 = tl.where(tmp271, tmp313, tmp7)
    tmp315 = tmp311 + tmp314
    tmp317 = tl.where(tmp71, tmp316, tmp7)
    tmp318 = tl.where(tmp271, tmp317, tmp7)
    tmp319 = tmp315 + tmp318
    tmp321 = tl.where(tmp77, tmp320, tmp7)
    tmp322 = tl.where(tmp271, tmp321, tmp7)
    tmp323 = tmp319 + tmp322
    tmp325 = tl.where(tmp83, tmp324, tmp7)
    tmp326 = tl.where(tmp271, tmp325, tmp7)
    tmp327 = tmp323 + tmp326
    tmp329 = tl.where(tmp89, tmp328, tmp7)
    tmp330 = tl.where(tmp271, tmp329, tmp7)
    tmp331 = tmp327 + tmp330
    tmp333 = tl.where(tmp94, tmp332, tmp7)
    tmp334 = tl.where(tmp271, tmp333, tmp7)
    tmp335 = tmp331 + tmp334
    tl.store(in_out_ptr0 + (x3), tmp335, None)
''')


# kernel path: /tmp/torchinductor_mengqy/u3/cu3hxmgnsk55t3u3rzislgmynhy7lgy4wat4w57majlkjkngogel.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_111 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_111', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_111', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_111(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 3840
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 20
    x4 = (xindex // 20)
    x2 = (xindex // 960)
    x1 = (xindex // 20) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (20*r3) + (2560*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/6n/c6nxhb4h4doebnrz7daxmgg6jrhpcyi5bal5eov5i6h5cfsuwkjb.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_112 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_112', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_112', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_112(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 80
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 20
    x1 = (xindex // 20)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (20*r2) + (960*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ha/chaosubojflo47jrh4xxsyqna2ycf3w5kxs7atbrpk6dkgxfpgns.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_113 = async_compile.triton('triton_poi_fused_clone_113', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_113', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_113(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 20
    x1 = (xindex // 20) % 4
    x2 = (xindex // 80)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (20*x2) + (122880*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hk/chkjuleoqhp6dvj2ogyqofppfhwk75wmz4pzc3vtxsw46w6lwsjf.py
# Source Nodes: [l__mod___dynamic_dense_18_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_18_act => add_889, convert_element_type_336, erf_18, mul_1189
triton_poi_fused_gelu_gelu_backward_114 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_114', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_114', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_114(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xm/cxmacintqdxkpqgbn72nczcrxd25dybqh5rvdcergb7j3rrybgah.py
# Source Nodes: [add_720, add_722], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_720 => add_885
# add_722 => add_887
triton_red_fused_add_div_mul_pow_sum_115 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_115', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_115', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_115(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp12 = tl.load(in_ptr5 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr7 + (21*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp23 = -0.5
        tmp24 = tmp8 * tmp23
        tmp25 = tmp20 * tmp20
        tmp26 = tmp25 * tmp20
        tmp27 = tmp24 * tmp26
        tmp28 = 2048.0
        tmp29 = tmp27 / tmp28
        tmp32 = tmp30 + tmp31
        tmp34 = tmp32 + tmp33
        tmp35 = 2.0
        tmp36 = tmp34 * tmp35
        tmp37 = tmp29 * tmp36
        tmp38 = tmp22 + tmp37
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp38, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/cy/ccyqeqhd46ezmmg4b4u74x66hors4dssui242hxvivldao53y2fn.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_684, add_702, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_880
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_684 => add_881
# add_702 => add_882
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_320
# float_2 => convert_element_type_322
# float_3 => convert_element_type_324
# mean => mean_88
# mean_1 => mean_89
# mean_2 => mean_90
# mul => mul_1164
# mul_3 => mul_1167
# mul_4 => mul_24
# mul_6 => mul_1170
# rsqrt => rsqrt_88
# rsqrt_1 => rsqrt_89
# rsqrt_2 => rsqrt_90
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_116 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_116', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp16', 155: '*fp16', 156: '*fp16', 157: '*fp16', 158: '*fp16', 159: '*fp16', 160: '*fp16', 161: '*fp16', 162: '*fp16', 163: '*fp16', 164: '*fp16', 165: '*fp16', 166: '*fp16', 167: '*fp16', 168: '*fp16', 169: '*fp16', 170: '*fp16', 171: '*fp16', 172: '*fp16', 173: '*fp16', 174: '*fp16', 175: '*fp16', 176: '*fp16', 177: '*fp16', 178: '*fp16', 179: '*fp16', 180: 'i32', 181: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr17', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_116', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(180, 181))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_116(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_out_ptr17, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, in_ptr122, in_ptr123, in_ptr124, in_ptr125, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp18 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
        tmp19 = _tmp18 + tmp17
        _tmp18 = tl.where(rmask, tmp19, _tmp18)
        tmp22 = tmp20 * tmp21
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp23 * tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask, tmp29, _tmp28)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp18 = tl.sum(_tmp18, 1)[:, None]
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tmp34 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp77 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp95 = tl.load(in_ptr13 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr14 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr15 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr16 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr18 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr19 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr20 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr21 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr22 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr23 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr24 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr25 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr26 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr27 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr28 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr29 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr30 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr31 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr32 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr33 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr34 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr35 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr36 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr37 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr38 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr39 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr40 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr41 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr42 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr43 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr44 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr45 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr46 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp205 = tl.load(in_ptr47 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr48 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr49 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr50 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr51 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr52 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr53 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr54 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr55 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr56 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr57 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr58 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr59 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr60 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr61 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp254 = tl.load(in_ptr62 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr63 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr64 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp264 = tl.load(in_ptr65 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr66 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr67 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp273 = tl.load(in_ptr68 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp277 = tl.load(in_ptr69 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr70 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp283 = tl.load(in_ptr71 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr72 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr73 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr74 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp296 = tl.load(in_ptr75 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp299 = tl.load(in_ptr76 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr77 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr78 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp309 = tl.load(in_ptr79 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr80 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp316 = tl.load(in_ptr81 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp319 = tl.load(in_ptr82 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp322 = tl.load(in_ptr83 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp325 = tl.load(in_ptr84 + (19*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp333 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp30 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp54 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp107 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp185 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp211 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp224 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp276 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp289 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp302 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp315 = tl.load(in_out_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp328 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp329 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tmp30 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp35 = 2048.0
        tmp36 = tmp34 / tmp35
        tmp37 = 1e-05
        tmp38 = tmp36 + tmp37
        tmp39 = tl.math.rsqrt(tmp38)
        tmp40 = tmp33 * tmp39
        tmp41 = -0.5
        tmp42 = tmp8 * tmp41
        tmp43 = tmp39 * tmp39
        tmp44 = tmp43 * tmp39
        tmp45 = tmp42 * tmp44
        tmp46 = tmp45 / tmp35
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp46 * tmp48
        tmp50 = tmp40 + tmp49
        tmp51 = tmp50 + tmp49
        tmp52 = tmp51.to(tl.float32)
        tmp55 = tmp53 * tmp54
        tmp56 = tmp55.to(tl.float32)
        tmp58 = tmp57 / tmp35
        tmp59 = tmp58 + tmp37
        tmp60 = tl.math.rsqrt(tmp59)
        tmp61 = tmp56 * tmp60
        tmp62 = tmp28 * tmp41
        tmp63 = tmp60 * tmp60
        tmp64 = tmp63 * tmp60
        tmp65 = tmp62 * tmp64
        tmp66 = tmp65 / tmp35
        tmp68 = tmp67.to(tl.float32)
        tmp69 = tmp66 * tmp68
        tmp70 = tmp61 + tmp69
        tmp71 = tmp70 + tmp69
        tmp72 = tmp71.to(tl.float32)
        tmp75 = tmp73 * tmp74
        tmp76 = tmp75.to(tl.float32)
        tmp78 = tmp77 / tmp35
        tmp79 = tmp78 + tmp37
        tmp80 = tl.math.rsqrt(tmp79)
        tmp81 = tmp76 * tmp80
        tmp82 = tmp18 * tmp41
        tmp83 = tmp80 * tmp80
        tmp84 = tmp83 * tmp80
        tmp85 = tmp82 * tmp84
        tmp86 = tmp85 / tmp35
        tmp88 = tmp87.to(tl.float32)
        tmp89 = tmp86 * tmp88
        tmp90 = tmp81 + tmp89
        tmp91 = tmp90 + tmp89
        tmp92 = tmp91.to(tl.float32)
        tmp96 = tmp94 * tmp95
        tmp97 = tmp93 + tmp96
        tmp99 = tmp52 * tmp98
        tmp100 = tmp97 + tmp99
        tmp102 = tmp72 * tmp101
        tmp103 = tmp100 + tmp102
        tmp105 = tmp92 * tmp104
        tmp106 = tmp103 + tmp105
        tmp109 = tmp94 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp52 * tmp111
        tmp113 = tmp110 + tmp112
        tmp115 = tmp72 * tmp114
        tmp116 = tmp113 + tmp115
        tmp118 = tmp92 * tmp117
        tmp119 = tmp116 + tmp118
        tmp122 = tmp94 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp52 * tmp124
        tmp126 = tmp123 + tmp125
        tmp128 = tmp72 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp92 * tmp130
        tmp132 = tmp129 + tmp131
        tmp135 = tmp94 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp52 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp72 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp92 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp94 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp52 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp72 * tmp153
        tmp155 = tmp152 + tmp154
        tmp157 = tmp92 * tmp156
        tmp158 = tmp155 + tmp157
        tmp161 = tmp94 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp52 * tmp163
        tmp165 = tmp162 + tmp164
        tmp167 = tmp72 * tmp166
        tmp168 = tmp165 + tmp167
        tmp170 = tmp92 * tmp169
        tmp171 = tmp168 + tmp170
        tmp174 = tmp94 * tmp173
        tmp175 = tmp172 + tmp174
        tmp177 = tmp52 * tmp176
        tmp178 = tmp175 + tmp177
        tmp180 = tmp72 * tmp179
        tmp181 = tmp178 + tmp180
        tmp183 = tmp92 * tmp182
        tmp184 = tmp181 + tmp183
        tmp187 = tmp94 * tmp186
        tmp188 = tmp185 + tmp187
        tmp190 = tmp52 * tmp189
        tmp191 = tmp188 + tmp190
        tmp193 = tmp72 * tmp192
        tmp194 = tmp191 + tmp193
        tmp196 = tmp92 * tmp195
        tmp197 = tmp194 + tmp196
        tmp200 = tmp94 * tmp199
        tmp201 = tmp198 + tmp200
        tmp203 = tmp52 * tmp202
        tmp204 = tmp201 + tmp203
        tmp206 = tmp72 * tmp205
        tmp207 = tmp204 + tmp206
        tmp209 = tmp92 * tmp208
        tmp210 = tmp207 + tmp209
        tmp213 = tmp94 * tmp212
        tmp214 = tmp211 + tmp213
        tmp216 = tmp52 * tmp215
        tmp217 = tmp214 + tmp216
        tmp219 = tmp72 * tmp218
        tmp220 = tmp217 + tmp219
        tmp222 = tmp92 * tmp221
        tmp223 = tmp220 + tmp222
        tmp226 = tmp94 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp52 * tmp228
        tmp230 = tmp227 + tmp229
        tmp232 = tmp72 * tmp231
        tmp233 = tmp230 + tmp232
        tmp235 = tmp92 * tmp234
        tmp236 = tmp233 + tmp235
        tmp239 = tmp94 * tmp238
        tmp240 = tmp237 + tmp239
        tmp242 = tmp52 * tmp241
        tmp243 = tmp240 + tmp242
        tmp245 = tmp72 * tmp244
        tmp246 = tmp243 + tmp245
        tmp248 = tmp92 * tmp247
        tmp249 = tmp246 + tmp248
        tmp252 = tmp94 * tmp251
        tmp253 = tmp250 + tmp252
        tmp255 = tmp52 * tmp254
        tmp256 = tmp253 + tmp255
        tmp258 = tmp72 * tmp257
        tmp259 = tmp256 + tmp258
        tmp261 = tmp92 * tmp260
        tmp262 = tmp259 + tmp261
        tmp265 = tmp94 * tmp264
        tmp266 = tmp263 + tmp265
        tmp268 = tmp52 * tmp267
        tmp269 = tmp266 + tmp268
        tmp271 = tmp72 * tmp270
        tmp272 = tmp269 + tmp271
        tmp274 = tmp92 * tmp273
        tmp275 = tmp272 + tmp274
        tmp278 = tmp94 * tmp277
        tmp279 = tmp276 + tmp278
        tmp281 = tmp52 * tmp280
        tmp282 = tmp279 + tmp281
        tmp284 = tmp72 * tmp283
        tmp285 = tmp282 + tmp284
        tmp287 = tmp92 * tmp286
        tmp288 = tmp285 + tmp287
        tmp291 = tmp94 * tmp290
        tmp292 = tmp289 + tmp291
        tmp294 = tmp52 * tmp293
        tmp295 = tmp292 + tmp294
        tmp297 = tmp72 * tmp296
        tmp298 = tmp295 + tmp297
        tmp300 = tmp92 * tmp299
        tmp301 = tmp298 + tmp300
        tmp304 = tmp94 * tmp303
        tmp305 = tmp302 + tmp304
        tmp307 = tmp52 * tmp306
        tmp308 = tmp305 + tmp307
        tmp310 = tmp72 * tmp309
        tmp311 = tmp308 + tmp310
        tmp313 = tmp92 * tmp312
        tmp314 = tmp311 + tmp313
        tmp317 = tmp94 * tmp316
        tmp318 = tmp315 + tmp317
        tmp320 = tmp52 * tmp319
        tmp321 = tmp318 + tmp320
        tmp323 = tmp72 * tmp322
        tmp324 = tmp321 + tmp323
        tmp326 = tmp92 * tmp325
        tmp327 = tmp324 + tmp326
        tmp330 = tmp328 + tmp329
        tmp331 = tmp92 * tmp330
        tmp332 = tl.broadcast_to(tmp331, [XBLOCK, RBLOCK])
        tmp334 = _tmp333 + tmp332
        _tmp333 = tl.where(rmask, tmp334, _tmp333)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp52, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp72, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp92, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp119, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp132, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp158, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp171, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp184, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp197, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp210, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp223, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp249, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp262, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp275, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp288, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp301, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp314, rmask)
        tl.store(in_out_ptr17 + (r1 + (2048*x0)), tmp327, rmask)
    tmp333 = tl.sum(_tmp333, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp333, None)
    _tmp343 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp350 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp357 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp366 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp373 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp380 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp389 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp396 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp403 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp412 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp419 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp426 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp435 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp442 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp444 = tl.load(in_ptr120 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp455 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp463 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp467 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp472 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp477 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp482 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp486 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp490 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp494 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp498 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp502 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp506 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp510 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp514 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp518 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp522 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp526 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp530 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp335 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp336 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp337 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp345 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp346 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp352 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp353 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp359 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp360 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp362 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp368 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp369 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp376 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp382 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp383 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp385 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp391 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp392 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp398 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp399 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp405 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp406 = tl.load(in_ptr109 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp408 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp414 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp415 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp421 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp422 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp437 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp438 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp445 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp449 = tl.load(in_ptr122 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp451 = tl.load(in_ptr123 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp457 = tl.load(in_ptr124 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp459 = tl.load(in_ptr125 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp469 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp474 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp479 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp338 = tmp336 + tmp337
        tmp340 = tmp338 + tmp339
        tmp341 = tmp335 * tmp340
        tmp342 = tl.broadcast_to(tmp341, [XBLOCK, RBLOCK])
        tmp344 = _tmp343 + tmp342
        _tmp343 = tl.where(rmask, tmp344, _tmp343)
        tmp347 = tmp345 + tmp346
        tmp348 = tmp335 * tmp347
        tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
        tmp351 = _tmp350 + tmp349
        _tmp350 = tl.where(rmask, tmp351, _tmp350)
        tmp354 = tmp352 + tmp353
        tmp355 = tmp335 * tmp354
        tmp356 = tl.broadcast_to(tmp355, [XBLOCK, RBLOCK])
        tmp358 = _tmp357 + tmp356
        _tmp357 = tl.where(rmask, tmp358, _tmp357)
        tmp361 = tmp359 + tmp360
        tmp363 = tmp361 + tmp362
        tmp364 = tmp335 * tmp363
        tmp365 = tl.broadcast_to(tmp364, [XBLOCK, RBLOCK])
        tmp367 = _tmp366 + tmp365
        _tmp366 = tl.where(rmask, tmp367, _tmp366)
        tmp370 = tmp368 + tmp369
        tmp371 = tmp335 * tmp370
        tmp372 = tl.broadcast_to(tmp371, [XBLOCK, RBLOCK])
        tmp374 = _tmp373 + tmp372
        _tmp373 = tl.where(rmask, tmp374, _tmp373)
        tmp377 = tmp375 + tmp376
        tmp378 = tmp335 * tmp377
        tmp379 = tl.broadcast_to(tmp378, [XBLOCK, RBLOCK])
        tmp381 = _tmp380 + tmp379
        _tmp380 = tl.where(rmask, tmp381, _tmp380)
        tmp384 = tmp382 + tmp383
        tmp386 = tmp384 + tmp385
        tmp387 = tmp335 * tmp386
        tmp388 = tl.broadcast_to(tmp387, [XBLOCK, RBLOCK])
        tmp390 = _tmp389 + tmp388
        _tmp389 = tl.where(rmask, tmp390, _tmp389)
        tmp393 = tmp391 + tmp392
        tmp394 = tmp335 * tmp393
        tmp395 = tl.broadcast_to(tmp394, [XBLOCK, RBLOCK])
        tmp397 = _tmp396 + tmp395
        _tmp396 = tl.where(rmask, tmp397, _tmp396)
        tmp400 = tmp398 + tmp399
        tmp401 = tmp335 * tmp400
        tmp402 = tl.broadcast_to(tmp401, [XBLOCK, RBLOCK])
        tmp404 = _tmp403 + tmp402
        _tmp403 = tl.where(rmask, tmp404, _tmp403)
        tmp407 = tmp405 + tmp406
        tmp409 = tmp407 + tmp408
        tmp410 = tmp335 * tmp409
        tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
        tmp413 = _tmp412 + tmp411
        _tmp412 = tl.where(rmask, tmp413, _tmp412)
        tmp416 = tmp414 + tmp415
        tmp417 = tmp335 * tmp416
        tmp418 = tl.broadcast_to(tmp417, [XBLOCK, RBLOCK])
        tmp420 = _tmp419 + tmp418
        _tmp419 = tl.where(rmask, tmp420, _tmp419)
        tmp423 = tmp421 + tmp422
        tmp424 = tmp335 * tmp423
        tmp425 = tl.broadcast_to(tmp424, [XBLOCK, RBLOCK])
        tmp427 = _tmp426 + tmp425
        _tmp426 = tl.where(rmask, tmp427, _tmp426)
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp335 * tmp432
        tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
        tmp436 = _tmp435 + tmp434
        _tmp435 = tl.where(rmask, tmp436, _tmp435)
        tmp439 = tmp437 + tmp438
        tmp440 = tmp335 * tmp439
        tmp441 = tl.broadcast_to(tmp440, [XBLOCK, RBLOCK])
        tmp443 = _tmp442 + tmp441
        _tmp442 = tl.where(rmask, tmp443, _tmp442)
        tmp446 = tmp444 * tmp445
        tmp447 = 0.0
        tmp448 = tmp446 + tmp447
        tmp450 = tmp448 + tmp449
        tmp452 = tmp450 + tmp451
        tmp453 = tmp335 * tmp452
        tmp454 = tl.broadcast_to(tmp453, [XBLOCK, RBLOCK])
        tmp456 = _tmp455 + tmp454
        _tmp455 = tl.where(rmask, tmp456, _tmp455)
        tmp458 = tmp445 + tmp457
        tmp460 = tmp458 + tmp459
        tmp461 = tmp335 * tmp460
        tmp462 = tl.broadcast_to(tmp461, [XBLOCK, RBLOCK])
        tmp464 = _tmp463 + tmp462
        _tmp463 = tl.where(rmask, tmp464, _tmp463)
        tmp465 = tmp335 * tmp445
        tmp466 = tl.broadcast_to(tmp465, [XBLOCK, RBLOCK])
        tmp468 = _tmp467 + tmp466
        _tmp467 = tl.where(rmask, tmp468, _tmp467)
        tmp470 = tmp469 * tmp432
        tmp471 = tl.broadcast_to(tmp470, [XBLOCK, RBLOCK])
        tmp473 = _tmp472 + tmp471
        _tmp472 = tl.where(rmask, tmp473, _tmp472)
        tmp475 = tmp474 * tmp432
        tmp476 = tl.broadcast_to(tmp475, [XBLOCK, RBLOCK])
        tmp478 = _tmp477 + tmp476
        _tmp477 = tl.where(rmask, tmp478, _tmp477)
        tmp480 = tmp479 * tmp432
        tmp481 = tl.broadcast_to(tmp480, [XBLOCK, RBLOCK])
        tmp483 = _tmp482 + tmp481
        _tmp482 = tl.where(rmask, tmp483, _tmp482)
        tmp484 = tmp469 * tmp439
        tmp485 = tl.broadcast_to(tmp484, [XBLOCK, RBLOCK])
        tmp487 = _tmp486 + tmp485
        _tmp486 = tl.where(rmask, tmp487, _tmp486)
        tmp488 = tmp474 * tmp439
        tmp489 = tl.broadcast_to(tmp488, [XBLOCK, RBLOCK])
        tmp491 = _tmp490 + tmp489
        _tmp490 = tl.where(rmask, tmp491, _tmp490)
        tmp492 = tmp479 * tmp439
        tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
        tmp495 = _tmp494 + tmp493
        _tmp494 = tl.where(rmask, tmp495, _tmp494)
        tmp496 = tmp469 * tmp452
        tmp497 = tl.broadcast_to(tmp496, [XBLOCK, RBLOCK])
        tmp499 = _tmp498 + tmp497
        _tmp498 = tl.where(rmask, tmp499, _tmp498)
        tmp500 = tmp474 * tmp452
        tmp501 = tl.broadcast_to(tmp500, [XBLOCK, RBLOCK])
        tmp503 = _tmp502 + tmp501
        _tmp502 = tl.where(rmask, tmp503, _tmp502)
        tmp504 = tmp479 * tmp452
        tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
        tmp507 = _tmp506 + tmp505
        _tmp506 = tl.where(rmask, tmp507, _tmp506)
        tmp508 = tmp469 * tmp460
        tmp509 = tl.broadcast_to(tmp508, [XBLOCK, RBLOCK])
        tmp511 = _tmp510 + tmp509
        _tmp510 = tl.where(rmask, tmp511, _tmp510)
        tmp512 = tmp474 * tmp460
        tmp513 = tl.broadcast_to(tmp512, [XBLOCK, RBLOCK])
        tmp515 = _tmp514 + tmp513
        _tmp514 = tl.where(rmask, tmp515, _tmp514)
        tmp516 = tmp479 * tmp460
        tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
        tmp519 = _tmp518 + tmp517
        _tmp518 = tl.where(rmask, tmp519, _tmp518)
        tmp520 = tmp474 * tmp445
        tmp521 = tl.broadcast_to(tmp520, [XBLOCK, RBLOCK])
        tmp523 = _tmp522 + tmp521
        _tmp522 = tl.where(rmask, tmp523, _tmp522)
        tmp524 = tmp469 * tmp445
        tmp525 = tl.broadcast_to(tmp524, [XBLOCK, RBLOCK])
        tmp527 = _tmp526 + tmp525
        _tmp526 = tl.where(rmask, tmp527, _tmp526)
        tmp528 = tmp479 * tmp445
        tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
        tmp531 = _tmp530 + tmp529
        _tmp530 = tl.where(rmask, tmp531, _tmp530)
    tmp343 = tl.sum(_tmp343, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp343, None)
    tmp350 = tl.sum(_tmp350, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp350, None)
    tmp357 = tl.sum(_tmp357, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp357, None)
    tmp366 = tl.sum(_tmp366, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp366, None)
    tmp373 = tl.sum(_tmp373, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp373, None)
    tmp380 = tl.sum(_tmp380, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp380, None)
    tmp389 = tl.sum(_tmp389, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp389, None)
    tmp396 = tl.sum(_tmp396, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp396, None)
    tmp403 = tl.sum(_tmp403, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp403, None)
    tmp412 = tl.sum(_tmp412, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp412, None)
    tmp419 = tl.sum(_tmp419, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp419, None)
    tmp426 = tl.sum(_tmp426, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp426, None)
    tmp435 = tl.sum(_tmp435, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp435, None)
    tmp442 = tl.sum(_tmp442, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp442, None)
    tmp455 = tl.sum(_tmp455, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp455, None)
    tmp463 = tl.sum(_tmp463, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp463, None)
    tmp467 = tl.sum(_tmp467, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp467, None)
    tmp472 = tl.sum(_tmp472, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp472, None)
    tmp477 = tl.sum(_tmp477, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp477, None)
    tmp482 = tl.sum(_tmp482, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp482, None)
    tmp486 = tl.sum(_tmp486, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp486, None)
    tmp490 = tl.sum(_tmp490, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp490, None)
    tmp494 = tl.sum(_tmp494, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp494, None)
    tmp498 = tl.sum(_tmp498, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp498, None)
    tmp502 = tl.sum(_tmp502, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp502, None)
    tmp506 = tl.sum(_tmp506, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp506, None)
    tmp510 = tl.sum(_tmp510, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp510, None)
    tmp514 = tl.sum(_tmp514, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp514, None)
    tmp518 = tl.sum(_tmp518, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp518, None)
    tmp522 = tl.sum(_tmp522, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp522, None)
    tmp526 = tl.sum(_tmp526, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp526, None)
    tmp530 = tl.sum(_tmp530, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp530, None)
''')


# kernel path: /tmp/torchinductor_mengqy/gy/cgyfkitghgnsekloollkdpzertueqxsbtk3v2376bl62m3mwyobd.py
# Source Nodes: [add_128, add_162, add_198, add_200, add_242, add_288, add_336, add_338, add_392, add_450, add_50, add_510, add_512, add_578, add_72, add_96, add_98], Original ATen: [aten.add, aten.mul, aten.sum]
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
triton_red_fused_add_mul_sum_117 = async_compile.triton('triton_red_fused_add_mul_sum_117', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: 'i32', 73: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_sum_117', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(72, 73))]}
)
@triton.jit
def triton_red_fused_add_mul_sum_117(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp25 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp29 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp33 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp44 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp48 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp55 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp59 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp63 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp72 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp80 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp87 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp91 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp95 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp102 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp106 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp110 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp119 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp123 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp127 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp134 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp138 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp142 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp149 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp153 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp166 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp170 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp174 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp185 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp189 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp204 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp130 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp160 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp162 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp176 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp9 = tmp8 * tmp3
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = _tmp11 + tmp10
        _tmp11 = tl.where(rmask, tmp12, _tmp11)
        tmp14 = tmp13 * tmp3
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp20 = tmp18 + tmp19
        tmp22 = tmp20 + tmp21
        tmp23 = tmp0 * tmp22
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK, RBLOCK])
        tmp26 = _tmp25 + tmp24
        _tmp25 = tl.where(rmask, tmp26, _tmp25)
        tmp27 = tmp8 * tmp22
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
        tmp30 = _tmp29 + tmp28
        _tmp29 = tl.where(rmask, tmp30, _tmp29)
        tmp31 = tmp13 * tmp22
        tmp32 = tl.broadcast_to(tmp31, [XBLOCK, RBLOCK])
        tmp34 = _tmp33 + tmp32
        _tmp33 = tl.where(rmask, tmp34, _tmp33)
        tmp37 = tmp35 + tmp36
        tmp38 = tmp0 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp42 = tmp8 * tmp37
        tmp43 = tl.broadcast_to(tmp42, [XBLOCK, RBLOCK])
        tmp45 = _tmp44 + tmp43
        _tmp44 = tl.where(rmask, tmp45, _tmp44)
        tmp46 = tmp13 * tmp37
        tmp47 = tl.broadcast_to(tmp46, [XBLOCK, RBLOCK])
        tmp49 = _tmp48 + tmp47
        _tmp48 = tl.where(rmask, tmp49, _tmp48)
        tmp52 = tmp50 + tmp51
        tmp53 = tmp0 * tmp52
        tmp54 = tl.broadcast_to(tmp53, [XBLOCK, RBLOCK])
        tmp56 = _tmp55 + tmp54
        _tmp55 = tl.where(rmask, tmp56, _tmp55)
        tmp57 = tmp8 * tmp52
        tmp58 = tl.broadcast_to(tmp57, [XBLOCK, RBLOCK])
        tmp60 = _tmp59 + tmp58
        _tmp59 = tl.where(rmask, tmp60, _tmp59)
        tmp61 = tmp13 * tmp52
        tmp62 = tl.broadcast_to(tmp61, [XBLOCK, RBLOCK])
        tmp64 = _tmp63 + tmp62
        _tmp63 = tl.where(rmask, tmp64, _tmp63)
        tmp67 = tmp65 + tmp66
        tmp69 = tmp67 + tmp68
        tmp70 = tmp0 * tmp69
        tmp71 = tl.broadcast_to(tmp70, [XBLOCK, RBLOCK])
        tmp73 = _tmp72 + tmp71
        _tmp72 = tl.where(rmask, tmp73, _tmp72)
        tmp74 = tmp8 * tmp69
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tmp78 = tmp13 * tmp69
        tmp79 = tl.broadcast_to(tmp78, [XBLOCK, RBLOCK])
        tmp81 = _tmp80 + tmp79
        _tmp80 = tl.where(rmask, tmp81, _tmp80)
        tmp84 = tmp82 + tmp83
        tmp85 = tmp0 * tmp84
        tmp86 = tl.broadcast_to(tmp85, [XBLOCK, RBLOCK])
        tmp88 = _tmp87 + tmp86
        _tmp87 = tl.where(rmask, tmp88, _tmp87)
        tmp89 = tmp8 * tmp84
        tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
        tmp92 = _tmp91 + tmp90
        _tmp91 = tl.where(rmask, tmp92, _tmp91)
        tmp93 = tmp13 * tmp84
        tmp94 = tl.broadcast_to(tmp93, [XBLOCK, RBLOCK])
        tmp96 = _tmp95 + tmp94
        _tmp95 = tl.where(rmask, tmp96, _tmp95)
        tmp99 = tmp97 + tmp98
        tmp100 = tmp0 * tmp99
        tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
        tmp103 = _tmp102 + tmp101
        _tmp102 = tl.where(rmask, tmp103, _tmp102)
        tmp104 = tmp8 * tmp99
        tmp105 = tl.broadcast_to(tmp104, [XBLOCK, RBLOCK])
        tmp107 = _tmp106 + tmp105
        _tmp106 = tl.where(rmask, tmp107, _tmp106)
        tmp108 = tmp13 * tmp99
        tmp109 = tl.broadcast_to(tmp108, [XBLOCK, RBLOCK])
        tmp111 = _tmp110 + tmp109
        _tmp110 = tl.where(rmask, tmp111, _tmp110)
        tmp114 = tmp112 + tmp113
        tmp116 = tmp114 + tmp115
        tmp117 = tmp0 * tmp116
        tmp118 = tl.broadcast_to(tmp117, [XBLOCK, RBLOCK])
        tmp120 = _tmp119 + tmp118
        _tmp119 = tl.where(rmask, tmp120, _tmp119)
        tmp121 = tmp8 * tmp116
        tmp122 = tl.broadcast_to(tmp121, [XBLOCK, RBLOCK])
        tmp124 = _tmp123 + tmp122
        _tmp123 = tl.where(rmask, tmp124, _tmp123)
        tmp125 = tmp13 * tmp116
        tmp126 = tl.broadcast_to(tmp125, [XBLOCK, RBLOCK])
        tmp128 = _tmp127 + tmp126
        _tmp127 = tl.where(rmask, tmp128, _tmp127)
        tmp131 = tmp129 + tmp130
        tmp132 = tmp0 * tmp131
        tmp133 = tl.broadcast_to(tmp132, [XBLOCK, RBLOCK])
        tmp135 = _tmp134 + tmp133
        _tmp134 = tl.where(rmask, tmp135, _tmp134)
        tmp136 = tmp8 * tmp131
        tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
        tmp139 = _tmp138 + tmp137
        _tmp138 = tl.where(rmask, tmp139, _tmp138)
        tmp140 = tmp13 * tmp131
        tmp141 = tl.broadcast_to(tmp140, [XBLOCK, RBLOCK])
        tmp143 = _tmp142 + tmp141
        _tmp142 = tl.where(rmask, tmp143, _tmp142)
        tmp146 = tmp144 + tmp145
        tmp147 = tmp0 * tmp146
        tmp148 = tl.broadcast_to(tmp147, [XBLOCK, RBLOCK])
        tmp150 = _tmp149 + tmp148
        _tmp149 = tl.where(rmask, tmp150, _tmp149)
        tmp151 = tmp8 * tmp146
        tmp152 = tl.broadcast_to(tmp151, [XBLOCK, RBLOCK])
        tmp154 = _tmp153 + tmp152
        _tmp153 = tl.where(rmask, tmp154, _tmp153)
        tmp155 = tmp13 * tmp146
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp161 = tmp159 + tmp160
        tmp163 = tmp161 + tmp162
        tmp164 = tmp0 * tmp163
        tmp165 = tl.broadcast_to(tmp164, [XBLOCK, RBLOCK])
        tmp167 = _tmp166 + tmp165
        _tmp166 = tl.where(rmask, tmp167, _tmp166)
        tmp168 = tmp8 * tmp163
        tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
        tmp171 = _tmp170 + tmp169
        _tmp170 = tl.where(rmask, tmp171, _tmp170)
        tmp172 = tmp13 * tmp163
        tmp173 = tl.broadcast_to(tmp172, [XBLOCK, RBLOCK])
        tmp175 = _tmp174 + tmp173
        _tmp174 = tl.where(rmask, tmp175, _tmp174)
        tmp178 = tmp176 + tmp177
        tmp179 = tmp0 * tmp178
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tmp183 = tmp8 * tmp178
        tmp184 = tl.broadcast_to(tmp183, [XBLOCK, RBLOCK])
        tmp186 = _tmp185 + tmp184
        _tmp185 = tl.where(rmask, tmp186, _tmp185)
        tmp187 = tmp13 * tmp178
        tmp188 = tl.broadcast_to(tmp187, [XBLOCK, RBLOCK])
        tmp190 = _tmp189 + tmp188
        _tmp189 = tl.where(rmask, tmp190, _tmp189)
        tmp193 = tmp191 + tmp192
        tmp194 = tmp0 * tmp193
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp8 * tmp193
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp202 = tmp13 * tmp193
        tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
        tmp205 = _tmp204 + tmp203
        _tmp204 = tl.where(rmask, tmp205, _tmp204)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp11 = tl.sum(_tmp11, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp11, None)
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp16, None)
    tmp25 = tl.sum(_tmp25, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp25, None)
    tmp29 = tl.sum(_tmp29, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp29, None)
    tmp33 = tl.sum(_tmp33, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp33, None)
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp40, None)
    tmp44 = tl.sum(_tmp44, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp44, None)
    tmp48 = tl.sum(_tmp48, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp48, None)
    tmp55 = tl.sum(_tmp55, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp55, None)
    tmp59 = tl.sum(_tmp59, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp59, None)
    tmp63 = tl.sum(_tmp63, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp63, None)
    tmp72 = tl.sum(_tmp72, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp72, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp76, None)
    tmp80 = tl.sum(_tmp80, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp80, None)
    tmp87 = tl.sum(_tmp87, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp87, None)
    tmp91 = tl.sum(_tmp91, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp91, None)
    tmp95 = tl.sum(_tmp95, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp95, None)
    tmp102 = tl.sum(_tmp102, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp102, None)
    tmp106 = tl.sum(_tmp106, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp106, None)
    tmp110 = tl.sum(_tmp110, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp110, None)
    tmp119 = tl.sum(_tmp119, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp119, None)
    tmp123 = tl.sum(_tmp123, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp123, None)
    tmp127 = tl.sum(_tmp127, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp127, None)
    tmp134 = tl.sum(_tmp134, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp134, None)
    tmp138 = tl.sum(_tmp138, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp138, None)
    tmp142 = tl.sum(_tmp142, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp142, None)
    tmp149 = tl.sum(_tmp149, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp149, None)
    tmp153 = tl.sum(_tmp153, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp153, None)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp157, None)
    tmp166 = tl.sum(_tmp166, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp166, None)
    tmp170 = tl.sum(_tmp170, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp170, None)
    tmp174 = tl.sum(_tmp174, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp174, None)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp181, None)
    tmp185 = tl.sum(_tmp185, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp185, None)
    tmp189 = tl.sum(_tmp189, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp189, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp200, None)
    tmp204 = tl.sum(_tmp204, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp204, None)
''')


# kernel path: /tmp/torchinductor_mengqy/tz/ctzxu5tx5ieruftk7hush6n7hguo2fbqtcrkasbdrccpwypd2fo4.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_118 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_118', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_118', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(70,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_118(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, xnumel, XBLOCK : tl.constexpr):
    xnumel = 466944
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 116736)
    x0 = xindex % 19
    x1 = (xindex // 19) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp205 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp229 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp258 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp262 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp282 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp294 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp302 = tl.load(in_ptr65 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp310 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp314 = tl.load(in_ptr68 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 17, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 16, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 15, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 14, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 13, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 12, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 11, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 10, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 9, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 8, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 7, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 6, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 5, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tl.full([1], 4, tl.int32)
    tmp83 = tmp3 == tmp82
    tmp85 = tl.where(tmp83, tmp84, tmp7)
    tmp86 = tl.where(tmp2, tmp85, tmp7)
    tmp87 = tmp81 + tmp86
    tmp88 = tmp3 == tmp1
    tmp90 = tl.where(tmp88, tmp89, tmp7)
    tmp91 = tl.where(tmp2, tmp90, tmp7)
    tmp92 = tmp87 + tmp91
    tmp93 = tl.full([1], 2, tl.int32)
    tmp94 = tmp3 == tmp93
    tmp96 = tl.where(tmp94, tmp95, tmp7)
    tmp97 = tl.where(tmp2, tmp96, tmp7)
    tmp98 = tmp92 + tmp97
    tmp99 = tl.full([1], 1, tl.int32)
    tmp100 = tmp3 == tmp99
    tmp102 = tl.where(tmp100, tmp101, tmp7)
    tmp103 = tl.where(tmp2, tmp102, tmp7)
    tmp104 = tmp98 + tmp103
    tmp105 = tl.full([1], 0, tl.int32)
    tmp106 = tmp3 == tmp105
    tmp108 = tl.where(tmp106, tmp107, tmp7)
    tmp109 = tl.where(tmp2, tmp108, tmp7)
    tmp110 = tmp104 + tmp109
    tmp111 = tmp0 == tmp93
    tmp113 = tl.where(tmp5, tmp112, tmp7)
    tmp114 = tl.where(tmp111, tmp113, tmp7)
    tmp115 = tmp110 + tmp114
    tmp117 = tl.where(tmp11, tmp116, tmp7)
    tmp118 = tl.where(tmp111, tmp117, tmp7)
    tmp119 = tmp115 + tmp118
    tmp121 = tl.where(tmp17, tmp120, tmp7)
    tmp122 = tl.where(tmp111, tmp121, tmp7)
    tmp123 = tmp119 + tmp122
    tmp125 = tl.where(tmp23, tmp124, tmp7)
    tmp126 = tl.where(tmp111, tmp125, tmp7)
    tmp127 = tmp123 + tmp126
    tmp129 = tl.where(tmp29, tmp128, tmp7)
    tmp130 = tl.where(tmp111, tmp129, tmp7)
    tmp131 = tmp127 + tmp130
    tmp133 = tl.where(tmp35, tmp132, tmp7)
    tmp134 = tl.where(tmp111, tmp133, tmp7)
    tmp135 = tmp131 + tmp134
    tmp137 = tl.where(tmp41, tmp136, tmp7)
    tmp138 = tl.where(tmp111, tmp137, tmp7)
    tmp139 = tmp135 + tmp138
    tmp141 = tl.where(tmp47, tmp140, tmp7)
    tmp142 = tl.where(tmp111, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp145 = tl.where(tmp53, tmp144, tmp7)
    tmp146 = tl.where(tmp111, tmp145, tmp7)
    tmp147 = tmp143 + tmp146
    tmp149 = tl.where(tmp59, tmp148, tmp7)
    tmp150 = tl.where(tmp111, tmp149, tmp7)
    tmp151 = tmp147 + tmp150
    tmp153 = tl.where(tmp65, tmp152, tmp7)
    tmp154 = tl.where(tmp111, tmp153, tmp7)
    tmp155 = tmp151 + tmp154
    tmp157 = tl.where(tmp71, tmp156, tmp7)
    tmp158 = tl.where(tmp111, tmp157, tmp7)
    tmp159 = tmp155 + tmp158
    tmp161 = tl.where(tmp77, tmp160, tmp7)
    tmp162 = tl.where(tmp111, tmp161, tmp7)
    tmp163 = tmp159 + tmp162
    tmp165 = tl.where(tmp83, tmp164, tmp7)
    tmp166 = tl.where(tmp111, tmp165, tmp7)
    tmp167 = tmp163 + tmp166
    tmp169 = tl.where(tmp88, tmp168, tmp7)
    tmp170 = tl.where(tmp111, tmp169, tmp7)
    tmp171 = tmp167 + tmp170
    tmp173 = tl.where(tmp94, tmp172, tmp7)
    tmp174 = tl.where(tmp111, tmp173, tmp7)
    tmp175 = tmp171 + tmp174
    tmp177 = tl.where(tmp100, tmp176, tmp7)
    tmp178 = tl.where(tmp111, tmp177, tmp7)
    tmp179 = tmp175 + tmp178
    tmp181 = tl.where(tmp106, tmp180, tmp7)
    tmp182 = tl.where(tmp111, tmp181, tmp7)
    tmp183 = tmp179 + tmp182
    tmp184 = tmp0 == tmp99
    tmp186 = tl.where(tmp5, tmp185, tmp7)
    tmp187 = tl.where(tmp184, tmp186, tmp7)
    tmp188 = tmp183 + tmp187
    tmp190 = tl.where(tmp11, tmp189, tmp7)
    tmp191 = tl.where(tmp184, tmp190, tmp7)
    tmp192 = tmp188 + tmp191
    tmp194 = tl.where(tmp17, tmp193, tmp7)
    tmp195 = tl.where(tmp184, tmp194, tmp7)
    tmp196 = tmp192 + tmp195
    tmp198 = tl.where(tmp23, tmp197, tmp7)
    tmp199 = tl.where(tmp184, tmp198, tmp7)
    tmp200 = tmp196 + tmp199
    tmp202 = tl.where(tmp29, tmp201, tmp7)
    tmp203 = tl.where(tmp184, tmp202, tmp7)
    tmp204 = tmp200 + tmp203
    tmp206 = tl.where(tmp35, tmp205, tmp7)
    tmp207 = tl.where(tmp184, tmp206, tmp7)
    tmp208 = tmp204 + tmp207
    tmp210 = tl.where(tmp41, tmp209, tmp7)
    tmp211 = tl.where(tmp184, tmp210, tmp7)
    tmp212 = tmp208 + tmp211
    tmp214 = tl.where(tmp47, tmp213, tmp7)
    tmp215 = tl.where(tmp184, tmp214, tmp7)
    tmp216 = tmp212 + tmp215
    tmp218 = tl.where(tmp53, tmp217, tmp7)
    tmp219 = tl.where(tmp184, tmp218, tmp7)
    tmp220 = tmp216 + tmp219
    tmp222 = tl.where(tmp59, tmp221, tmp7)
    tmp223 = tl.where(tmp184, tmp222, tmp7)
    tmp224 = tmp220 + tmp223
    tmp226 = tl.where(tmp65, tmp225, tmp7)
    tmp227 = tl.where(tmp184, tmp226, tmp7)
    tmp228 = tmp224 + tmp227
    tmp230 = tl.where(tmp71, tmp229, tmp7)
    tmp231 = tl.where(tmp184, tmp230, tmp7)
    tmp232 = tmp228 + tmp231
    tmp234 = tl.where(tmp77, tmp233, tmp7)
    tmp235 = tl.where(tmp184, tmp234, tmp7)
    tmp236 = tmp232 + tmp235
    tmp238 = tl.where(tmp83, tmp237, tmp7)
    tmp239 = tl.where(tmp184, tmp238, tmp7)
    tmp240 = tmp236 + tmp239
    tmp242 = tl.where(tmp88, tmp241, tmp7)
    tmp243 = tl.where(tmp184, tmp242, tmp7)
    tmp244 = tmp240 + tmp243
    tmp246 = tl.where(tmp94, tmp245, tmp7)
    tmp247 = tl.where(tmp184, tmp246, tmp7)
    tmp248 = tmp244 + tmp247
    tmp250 = tl.where(tmp100, tmp249, tmp7)
    tmp251 = tl.where(tmp184, tmp250, tmp7)
    tmp252 = tmp248 + tmp251
    tmp254 = tl.where(tmp106, tmp253, tmp7)
    tmp255 = tl.where(tmp184, tmp254, tmp7)
    tmp256 = tmp252 + tmp255
    tmp257 = tmp0 == tmp105
    tmp259 = tl.where(tmp5, tmp258, tmp7)
    tmp260 = tl.where(tmp257, tmp259, tmp7)
    tmp261 = tmp256 + tmp260
    tmp263 = tl.where(tmp11, tmp262, tmp7)
    tmp264 = tl.where(tmp257, tmp263, tmp7)
    tmp265 = tmp261 + tmp264
    tmp267 = tl.where(tmp17, tmp266, tmp7)
    tmp268 = tl.where(tmp257, tmp267, tmp7)
    tmp269 = tmp265 + tmp268
    tmp271 = tl.where(tmp23, tmp270, tmp7)
    tmp272 = tl.where(tmp257, tmp271, tmp7)
    tmp273 = tmp269 + tmp272
    tmp275 = tl.where(tmp29, tmp274, tmp7)
    tmp276 = tl.where(tmp257, tmp275, tmp7)
    tmp277 = tmp273 + tmp276
    tmp279 = tl.where(tmp35, tmp278, tmp7)
    tmp280 = tl.where(tmp257, tmp279, tmp7)
    tmp281 = tmp277 + tmp280
    tmp283 = tl.where(tmp41, tmp282, tmp7)
    tmp284 = tl.where(tmp257, tmp283, tmp7)
    tmp285 = tmp281 + tmp284
    tmp287 = tl.where(tmp47, tmp286, tmp7)
    tmp288 = tl.where(tmp257, tmp287, tmp7)
    tmp289 = tmp285 + tmp288
    tmp291 = tl.where(tmp53, tmp290, tmp7)
    tmp292 = tl.where(tmp257, tmp291, tmp7)
    tmp293 = tmp289 + tmp292
    tmp295 = tl.where(tmp59, tmp294, tmp7)
    tmp296 = tl.where(tmp257, tmp295, tmp7)
    tmp297 = tmp293 + tmp296
    tmp299 = tl.where(tmp65, tmp298, tmp7)
    tmp300 = tl.where(tmp257, tmp299, tmp7)
    tmp301 = tmp297 + tmp300
    tmp303 = tl.where(tmp71, tmp302, tmp7)
    tmp304 = tl.where(tmp257, tmp303, tmp7)
    tmp305 = tmp301 + tmp304
    tmp307 = tl.where(tmp77, tmp306, tmp7)
    tmp308 = tl.where(tmp257, tmp307, tmp7)
    tmp309 = tmp305 + tmp308
    tmp311 = tl.where(tmp83, tmp310, tmp7)
    tmp312 = tl.where(tmp257, tmp311, tmp7)
    tmp313 = tmp309 + tmp312
    tmp315 = tl.where(tmp88, tmp314, tmp7)
    tmp316 = tl.where(tmp257, tmp315, tmp7)
    tmp317 = tmp313 + tmp316
    tl.store(in_out_ptr0 + (x3), tmp317, None)
''')


# kernel path: /tmp/torchinductor_mengqy/7r/c7r3hz6ndldcrweespufnlwpogliq5c4guck4dmtojrx5txmxkqf.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_119 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_119', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_119', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_119(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 3648
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 19
    x4 = (xindex // 19)
    x2 = (xindex // 912)
    x1 = (xindex // 19) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (19*r3) + (2432*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/fc/cfcipzgr6amrhqsm6hnc72t5amo5hgs4gyu3uyeguix74xwg5vkq.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_120 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_120', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_120', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_120(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 76
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 19
    x1 = (xindex // 19)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (19*r2) + (912*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/uw/cuwyqrpqlvkbvjkjgmx7s5djnf2nrqivz6k44tcwvyisoq3kuuba.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_121 = async_compile.triton('triton_poi_fused_clone_121', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_121', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_121(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 466944
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 19
    x1 = (xindex // 19) % 4
    x2 = (xindex // 76)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (19*x2) + (116736*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/iw/ciw4ian5jz7vtmuvpjv5rrwkq7heb2pukbo46entl66su3ijc26z.py
# Source Nodes: [l__mod___dynamic_dense_17_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_17_act => add_806, convert_element_type_318, erf_17, mul_1090
triton_poi_fused_gelu_gelu_backward_122 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_122', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_122', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_122(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 466944
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/wn/cwn5qyldejymycnbqvmrrueh47lz23i7g3bwsxqepxy3pgyn6kq7.py
# Source Nodes: [add_648], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_648 => add_804
triton_red_fused_add_div_mul_pow_sum_123 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_123', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_123', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_123(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp8 + tmp11
        tmp13 = -0.5
        tmp14 = tmp6 * tmp13
        tmp15 = tmp10 * tmp10
        tmp16 = tmp15 * tmp10
        tmp17 = tmp14 * tmp16
        tmp18 = 2048.0
        tmp19 = tmp17 / tmp18
        tmp22 = tmp20 + tmp21
        tmp23 = 2.0
        tmp24 = tmp22 * tmp23
        tmp25 = tmp19 * tmp24
        tmp26 = tmp12 + tmp25
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp26, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/vs/cvssnif5koft4caescnh7itdymgirf2ooahsmiqr55dtfkh5co67.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_5, add_50, add_510, add_512, add_612, add_629, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_797
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_5 => add_12, add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_612 => add_798
# add_629 => add_799
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mean => mean_83
# mean_1 => mean_84
# mean_2 => mean_85
# mul => mul_1065
# mul_3 => mul_1068
# mul_4 => mul_24
# mul_6 => mul_1071
# rsqrt => rsqrt_83
# rsqrt_1 => rsqrt_84
# rsqrt_2 => rsqrt_85
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_124 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_124', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp32', 20: '*fp16', 21: '*fp16', 22: '*fp32', 23: '*fp16', 24: '*fp16', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: '*fp16', 153: '*fp16', 154: '*fp16', 155: '*fp16', 156: '*fp16', 157: 'i32', 158: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr16', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_124', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(157, 158))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_124(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_out_ptr16, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp25 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp18 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = tmp12 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp20 = tmp18 * tmp19
        tmp21 = tmp20.to(tl.float32)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK, RBLOCK])
        tmp26 = _tmp25 + tmp24
        _tmp25 = tl.where(rmask, tmp26, _tmp25)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tmp25 = tl.sum(_tmp25, 1)[:, None]
    tmp31 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp72 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr13 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr14 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr16 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr17 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr18 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr19 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr20 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr21 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr22 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr23 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr24 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr25 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr26 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr27 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr28 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr29 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr30 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr31 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr32 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr33 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr34 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr35 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr36 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr37 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr38 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr39 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr40 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr41 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr42 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr43 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr44 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr45 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr46 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr47 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr48 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr49 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr50 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr51 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr52 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr53 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr54 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr55 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr56 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp232 = tl.load(in_ptr57 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr58 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr59 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr60 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp245 = tl.load(in_ptr61 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr62 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp251 = tl.load(in_ptr63 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp254 = tl.load(in_ptr64 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp258 = tl.load(in_ptr65 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp261 = tl.load(in_ptr66 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp264 = tl.load(in_ptr67 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp267 = tl.load(in_ptr68 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp271 = tl.load(in_ptr69 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr70 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp277 = tl.load(in_ptr71 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr72 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr73 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp287 = tl.load(in_ptr74 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp290 = tl.load(in_ptr75 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp293 = tl.load(in_ptr76 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp297 = tl.load(in_ptr77 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr78 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr79 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr80 + (18*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp314 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp27 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp49 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0)
        tmp68 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp87 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp257 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp270 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp283 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp296 = tl.load(in_out_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp310 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tmp27 * tmp28
        tmp30 = tmp29.to(tl.float32)
        tmp32 = 2048.0
        tmp33 = tmp31 / tmp32
        tmp34 = 1e-05
        tmp35 = tmp33 + tmp34
        tmp36 = tl.math.rsqrt(tmp35)
        tmp37 = tmp30 * tmp36
        tmp38 = -0.5
        tmp39 = tmp7 * tmp38
        tmp40 = tmp36 * tmp36
        tmp41 = tmp40 * tmp36
        tmp42 = tmp39 * tmp41
        tmp43 = tmp42 / tmp32
        tmp45 = tmp43 * tmp44
        tmp46 = tmp37 + tmp45
        tmp47 = tmp46 + tmp45
        tmp48 = tmp47.to(tl.float32)
        tmp51 = tmp49 * tmp50
        tmp52 = tmp51.to(tl.float32)
        tmp54 = tmp53 / tmp32
        tmp55 = tmp54 + tmp34
        tmp56 = tl.math.rsqrt(tmp55)
        tmp57 = tmp52 * tmp56
        tmp58 = tmp25 * tmp38
        tmp59 = tmp56 * tmp56
        tmp60 = tmp59 * tmp56
        tmp61 = tmp58 * tmp60
        tmp62 = tmp61 / tmp32
        tmp64 = tmp62 * tmp63
        tmp65 = tmp57 + tmp64
        tmp66 = tmp65 + tmp64
        tmp67 = tmp66.to(tl.float32)
        tmp70 = tmp68 * tmp69
        tmp71 = tmp70.to(tl.float32)
        tmp73 = tmp72 / tmp32
        tmp74 = tmp73 + tmp34
        tmp75 = tl.math.rsqrt(tmp74)
        tmp76 = tmp71 * tmp75
        tmp77 = tmp16 * tmp38
        tmp78 = tmp75 * tmp75
        tmp79 = tmp78 * tmp75
        tmp80 = tmp77 * tmp79
        tmp81 = tmp80 / tmp32
        tmp83 = tmp81 * tmp82
        tmp84 = tmp76 + tmp83
        tmp85 = tmp84 + tmp83
        tmp86 = tmp85.to(tl.float32)
        tmp90 = tmp88 * tmp89
        tmp91 = tmp87 + tmp90
        tmp93 = tmp48 * tmp92
        tmp94 = tmp91 + tmp93
        tmp96 = tmp67 * tmp95
        tmp97 = tmp94 + tmp96
        tmp99 = tmp86 * tmp98
        tmp100 = tmp97 + tmp99
        tmp103 = tmp88 * tmp102
        tmp104 = tmp101 + tmp103
        tmp106 = tmp48 * tmp105
        tmp107 = tmp104 + tmp106
        tmp109 = tmp67 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp86 * tmp111
        tmp113 = tmp110 + tmp112
        tmp116 = tmp88 * tmp115
        tmp117 = tmp114 + tmp116
        tmp119 = tmp48 * tmp118
        tmp120 = tmp117 + tmp119
        tmp122 = tmp67 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp86 * tmp124
        tmp126 = tmp123 + tmp125
        tmp129 = tmp88 * tmp128
        tmp130 = tmp127 + tmp129
        tmp132 = tmp48 * tmp131
        tmp133 = tmp130 + tmp132
        tmp135 = tmp67 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp86 * tmp137
        tmp139 = tmp136 + tmp138
        tmp142 = tmp88 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp48 * tmp144
        tmp146 = tmp143 + tmp145
        tmp148 = tmp67 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp86 * tmp150
        tmp152 = tmp149 + tmp151
        tmp155 = tmp88 * tmp154
        tmp156 = tmp153 + tmp155
        tmp158 = tmp48 * tmp157
        tmp159 = tmp156 + tmp158
        tmp161 = tmp67 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp86 * tmp163
        tmp165 = tmp162 + tmp164
        tmp168 = tmp88 * tmp167
        tmp169 = tmp166 + tmp168
        tmp171 = tmp48 * tmp170
        tmp172 = tmp169 + tmp171
        tmp174 = tmp67 * tmp173
        tmp175 = tmp172 + tmp174
        tmp177 = tmp86 * tmp176
        tmp178 = tmp175 + tmp177
        tmp181 = tmp88 * tmp180
        tmp182 = tmp179 + tmp181
        tmp184 = tmp48 * tmp183
        tmp185 = tmp182 + tmp184
        tmp187 = tmp67 * tmp186
        tmp188 = tmp185 + tmp187
        tmp190 = tmp86 * tmp189
        tmp191 = tmp188 + tmp190
        tmp194 = tmp88 * tmp193
        tmp195 = tmp192 + tmp194
        tmp197 = tmp48 * tmp196
        tmp198 = tmp195 + tmp197
        tmp200 = tmp67 * tmp199
        tmp201 = tmp198 + tmp200
        tmp203 = tmp86 * tmp202
        tmp204 = tmp201 + tmp203
        tmp207 = tmp88 * tmp206
        tmp208 = tmp205 + tmp207
        tmp210 = tmp48 * tmp209
        tmp211 = tmp208 + tmp210
        tmp213 = tmp67 * tmp212
        tmp214 = tmp211 + tmp213
        tmp216 = tmp86 * tmp215
        tmp217 = tmp214 + tmp216
        tmp220 = tmp88 * tmp219
        tmp221 = tmp218 + tmp220
        tmp223 = tmp48 * tmp222
        tmp224 = tmp221 + tmp223
        tmp226 = tmp67 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp86 * tmp228
        tmp230 = tmp227 + tmp229
        tmp233 = tmp88 * tmp232
        tmp234 = tmp231 + tmp233
        tmp236 = tmp48 * tmp235
        tmp237 = tmp234 + tmp236
        tmp239 = tmp67 * tmp238
        tmp240 = tmp237 + tmp239
        tmp242 = tmp86 * tmp241
        tmp243 = tmp240 + tmp242
        tmp246 = tmp88 * tmp245
        tmp247 = tmp244 + tmp246
        tmp249 = tmp48 * tmp248
        tmp250 = tmp247 + tmp249
        tmp252 = tmp67 * tmp251
        tmp253 = tmp250 + tmp252
        tmp255 = tmp86 * tmp254
        tmp256 = tmp253 + tmp255
        tmp259 = tmp88 * tmp258
        tmp260 = tmp257 + tmp259
        tmp262 = tmp48 * tmp261
        tmp263 = tmp260 + tmp262
        tmp265 = tmp67 * tmp264
        tmp266 = tmp263 + tmp265
        tmp268 = tmp86 * tmp267
        tmp269 = tmp266 + tmp268
        tmp272 = tmp88 * tmp271
        tmp273 = tmp270 + tmp272
        tmp275 = tmp48 * tmp274
        tmp276 = tmp273 + tmp275
        tmp278 = tmp67 * tmp277
        tmp279 = tmp276 + tmp278
        tmp281 = tmp86 * tmp280
        tmp282 = tmp279 + tmp281
        tmp285 = tmp88 * tmp284
        tmp286 = tmp283 + tmp285
        tmp288 = tmp48 * tmp287
        tmp289 = tmp286 + tmp288
        tmp291 = tmp67 * tmp290
        tmp292 = tmp289 + tmp291
        tmp294 = tmp86 * tmp293
        tmp295 = tmp292 + tmp294
        tmp298 = tmp88 * tmp297
        tmp299 = tmp296 + tmp298
        tmp301 = tmp48 * tmp300
        tmp302 = tmp299 + tmp301
        tmp304 = tmp67 * tmp303
        tmp305 = tmp302 + tmp304
        tmp307 = tmp86 * tmp306
        tmp308 = tmp305 + tmp307
        tmp311 = tmp309 + tmp310
        tmp312 = tmp86 * tmp311
        tmp313 = tl.broadcast_to(tmp312, [XBLOCK, RBLOCK])
        tmp315 = _tmp314 + tmp313
        _tmp314 = tl.where(rmask, tmp315, _tmp314)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp48, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp67, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp100, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp113, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp139, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp152, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp165, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp178, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp191, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp204, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp217, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp230, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp243, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp256, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp269, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp282, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp295, rmask)
        tl.store(in_out_ptr16 + (r1 + (2048*x0)), tmp308, rmask)
    tmp314 = tl.sum(_tmp314, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp314, None)
    _tmp324 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp331 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp338 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp347 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp354 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp361 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp370 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp377 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp384 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp393 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp400 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp402 = tl.load(in_ptr109 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp413 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp421 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp425 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp435 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp440 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp445 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp449 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp316 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp318 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp320 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp326 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp327 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp334 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp340 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp343 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp349 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp350 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp356 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp357 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp366 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp379 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp380 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp386 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp387 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp389 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp395 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp396 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp403 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp407 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp409 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp415 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp417 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp427 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr116 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp437 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp442 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tmp317 + tmp318
        tmp321 = tmp319 + tmp320
        tmp322 = tmp316 * tmp321
        tmp323 = tl.broadcast_to(tmp322, [XBLOCK, RBLOCK])
        tmp325 = _tmp324 + tmp323
        _tmp324 = tl.where(rmask, tmp325, _tmp324)
        tmp328 = tmp326 + tmp327
        tmp329 = tmp316 * tmp328
        tmp330 = tl.broadcast_to(tmp329, [XBLOCK, RBLOCK])
        tmp332 = _tmp331 + tmp330
        _tmp331 = tl.where(rmask, tmp332, _tmp331)
        tmp335 = tmp333 + tmp334
        tmp336 = tmp316 * tmp335
        tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
        tmp339 = _tmp338 + tmp337
        _tmp338 = tl.where(rmask, tmp339, _tmp338)
        tmp342 = tmp340 + tmp341
        tmp344 = tmp342 + tmp343
        tmp345 = tmp316 * tmp344
        tmp346 = tl.broadcast_to(tmp345, [XBLOCK, RBLOCK])
        tmp348 = _tmp347 + tmp346
        _tmp347 = tl.where(rmask, tmp348, _tmp347)
        tmp351 = tmp349 + tmp350
        tmp352 = tmp316 * tmp351
        tmp353 = tl.broadcast_to(tmp352, [XBLOCK, RBLOCK])
        tmp355 = _tmp354 + tmp353
        _tmp354 = tl.where(rmask, tmp355, _tmp354)
        tmp358 = tmp356 + tmp357
        tmp359 = tmp316 * tmp358
        tmp360 = tl.broadcast_to(tmp359, [XBLOCK, RBLOCK])
        tmp362 = _tmp361 + tmp360
        _tmp361 = tl.where(rmask, tmp362, _tmp361)
        tmp365 = tmp363 + tmp364
        tmp367 = tmp365 + tmp366
        tmp368 = tmp316 * tmp367
        tmp369 = tl.broadcast_to(tmp368, [XBLOCK, RBLOCK])
        tmp371 = _tmp370 + tmp369
        _tmp370 = tl.where(rmask, tmp371, _tmp370)
        tmp374 = tmp372 + tmp373
        tmp375 = tmp316 * tmp374
        tmp376 = tl.broadcast_to(tmp375, [XBLOCK, RBLOCK])
        tmp378 = _tmp377 + tmp376
        _tmp377 = tl.where(rmask, tmp378, _tmp377)
        tmp381 = tmp379 + tmp380
        tmp382 = tmp316 * tmp381
        tmp383 = tl.broadcast_to(tmp382, [XBLOCK, RBLOCK])
        tmp385 = _tmp384 + tmp383
        _tmp384 = tl.where(rmask, tmp385, _tmp384)
        tmp388 = tmp386 + tmp387
        tmp390 = tmp388 + tmp389
        tmp391 = tmp316 * tmp390
        tmp392 = tl.broadcast_to(tmp391, [XBLOCK, RBLOCK])
        tmp394 = _tmp393 + tmp392
        _tmp393 = tl.where(rmask, tmp394, _tmp393)
        tmp397 = tmp395 + tmp396
        tmp398 = tmp316 * tmp397
        tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
        tmp401 = _tmp400 + tmp399
        _tmp400 = tl.where(rmask, tmp401, _tmp400)
        tmp404 = tmp402 * tmp403
        tmp405 = 0.0
        tmp406 = tmp404 + tmp405
        tmp408 = tmp406 + tmp407
        tmp410 = tmp408 + tmp409
        tmp411 = tmp316 * tmp410
        tmp412 = tl.broadcast_to(tmp411, [XBLOCK, RBLOCK])
        tmp414 = _tmp413 + tmp412
        _tmp413 = tl.where(rmask, tmp414, _tmp413)
        tmp416 = tmp403 + tmp415
        tmp418 = tmp416 + tmp417
        tmp419 = tmp316 * tmp418
        tmp420 = tl.broadcast_to(tmp419, [XBLOCK, RBLOCK])
        tmp422 = _tmp421 + tmp420
        _tmp421 = tl.where(rmask, tmp422, _tmp421)
        tmp423 = tmp316 * tmp403
        tmp424 = tl.broadcast_to(tmp423, [XBLOCK, RBLOCK])
        tmp426 = _tmp425 + tmp424
        _tmp425 = tl.where(rmask, tmp426, _tmp425)
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
        tmp436 = _tmp435 + tmp434
        _tmp435 = tl.where(rmask, tmp436, _tmp435)
        tmp438 = tmp437 * tmp432
        tmp439 = tl.broadcast_to(tmp438, [XBLOCK, RBLOCK])
        tmp441 = _tmp440 + tmp439
        _tmp440 = tl.where(rmask, tmp441, _tmp440)
        tmp443 = tmp442 * tmp432
        tmp444 = tl.broadcast_to(tmp443, [XBLOCK, RBLOCK])
        tmp446 = _tmp445 + tmp444
        _tmp445 = tl.where(rmask, tmp446, _tmp445)
        tmp447 = tmp316 * tmp432
        tmp448 = tl.broadcast_to(tmp447, [XBLOCK, RBLOCK])
        tmp450 = _tmp449 + tmp448
        _tmp449 = tl.where(rmask, tmp450, _tmp449)
    tmp324 = tl.sum(_tmp324, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp324, None)
    tmp331 = tl.sum(_tmp331, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp331, None)
    tmp338 = tl.sum(_tmp338, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp338, None)
    tmp347 = tl.sum(_tmp347, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp347, None)
    tmp354 = tl.sum(_tmp354, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp354, None)
    tmp361 = tl.sum(_tmp361, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp361, None)
    tmp370 = tl.sum(_tmp370, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp370, None)
    tmp377 = tl.sum(_tmp377, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp377, None)
    tmp384 = tl.sum(_tmp384, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp384, None)
    tmp393 = tl.sum(_tmp393, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp393, None)
    tmp400 = tl.sum(_tmp400, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp400, None)
    tmp413 = tl.sum(_tmp413, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp413, None)
    tmp421 = tl.sum(_tmp421, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp421, None)
    tmp425 = tl.sum(_tmp425, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp425, None)
    tmp435 = tl.sum(_tmp435, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp435, None)
    tmp440 = tl.sum(_tmp440, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp440, None)
    tmp445 = tl.sum(_tmp445, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp445, None)
    tmp449 = tl.sum(_tmp449, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp449, None)
''')


# kernel path: /tmp/torchinductor_mengqy/g6/cg6q5uiweonzrkailkk2qutj7syma5src7coiksvwjc6hpso77ez.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_72, add_96, add_98, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mul_4 => mul_24
triton_red_fused_add_mul_sum_125 = async_compile.triton('triton_red_fused_add_mul_sum_125', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: 'i32', 90: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_sum_125', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(89, 90))]}
)
@triton.jit
def triton_red_fused_add_mul_sum_125(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, out_ptr46, out_ptr47, out_ptr48, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp21 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp32 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp36 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp49 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp53 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp60 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp64 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp68 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp75 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp79 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp83 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp92 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp96 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp100 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp107 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp115 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp126 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp130 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp139 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp143 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp147 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp154 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp158 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp162 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp173 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp186 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp190 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp194 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp201 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp211 = tl.load(in_ptr34 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp222 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp226 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp230 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp238 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp242 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp246 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp250 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp254 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp258 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp132 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp234 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp9 = tmp8 * tmp3
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = _tmp11 + tmp10
        _tmp11 = tl.where(rmask, tmp12, _tmp11)
        tmp14 = tmp13 * tmp3
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp19 = tmp18 * tmp3
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
        tmp22 = _tmp21 + tmp20
        _tmp21 = tl.where(rmask, tmp22, _tmp21)
        tmp25 = tmp23 + tmp24
        tmp26 = tmp0 * tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask, tmp29, _tmp28)
        tmp30 = tmp8 * tmp25
        tmp31 = tl.broadcast_to(tmp30, [XBLOCK, RBLOCK])
        tmp33 = _tmp32 + tmp31
        _tmp32 = tl.where(rmask, tmp33, _tmp32)
        tmp34 = tmp13 * tmp25
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = _tmp36 + tmp35
        _tmp36 = tl.where(rmask, tmp37, _tmp36)
        tmp40 = tmp38 + tmp39
        tmp42 = tmp40 + tmp41
        tmp43 = tmp0 * tmp42
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
        tmp47 = tmp8 * tmp42
        tmp48 = tl.broadcast_to(tmp47, [XBLOCK, RBLOCK])
        tmp50 = _tmp49 + tmp48
        _tmp49 = tl.where(rmask, tmp50, _tmp49)
        tmp51 = tmp13 * tmp42
        tmp52 = tl.broadcast_to(tmp51, [XBLOCK, RBLOCK])
        tmp54 = _tmp53 + tmp52
        _tmp53 = tl.where(rmask, tmp54, _tmp53)
        tmp57 = tmp55 + tmp56
        tmp58 = tmp0 * tmp57
        tmp59 = tl.broadcast_to(tmp58, [XBLOCK, RBLOCK])
        tmp61 = _tmp60 + tmp59
        _tmp60 = tl.where(rmask, tmp61, _tmp60)
        tmp62 = tmp8 * tmp57
        tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
        tmp65 = _tmp64 + tmp63
        _tmp64 = tl.where(rmask, tmp65, _tmp64)
        tmp66 = tmp13 * tmp57
        tmp67 = tl.broadcast_to(tmp66, [XBLOCK, RBLOCK])
        tmp69 = _tmp68 + tmp67
        _tmp68 = tl.where(rmask, tmp69, _tmp68)
        tmp72 = tmp70 + tmp71
        tmp73 = tmp0 * tmp72
        tmp74 = tl.broadcast_to(tmp73, [XBLOCK, RBLOCK])
        tmp76 = _tmp75 + tmp74
        _tmp75 = tl.where(rmask, tmp76, _tmp75)
        tmp77 = tmp8 * tmp72
        tmp78 = tl.broadcast_to(tmp77, [XBLOCK, RBLOCK])
        tmp80 = _tmp79 + tmp78
        _tmp79 = tl.where(rmask, tmp80, _tmp79)
        tmp81 = tmp13 * tmp72
        tmp82 = tl.broadcast_to(tmp81, [XBLOCK, RBLOCK])
        tmp84 = _tmp83 + tmp82
        _tmp83 = tl.where(rmask, tmp84, _tmp83)
        tmp87 = tmp85 + tmp86
        tmp89 = tmp87 + tmp88
        tmp90 = tmp0 * tmp89
        tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
        tmp93 = _tmp92 + tmp91
        _tmp92 = tl.where(rmask, tmp93, _tmp92)
        tmp94 = tmp8 * tmp89
        tmp95 = tl.broadcast_to(tmp94, [XBLOCK, RBLOCK])
        tmp97 = _tmp96 + tmp95
        _tmp96 = tl.where(rmask, tmp97, _tmp96)
        tmp98 = tmp13 * tmp89
        tmp99 = tl.broadcast_to(tmp98, [XBLOCK, RBLOCK])
        tmp101 = _tmp100 + tmp99
        _tmp100 = tl.where(rmask, tmp101, _tmp100)
        tmp104 = tmp102 + tmp103
        tmp105 = tmp0 * tmp104
        tmp106 = tl.broadcast_to(tmp105, [XBLOCK, RBLOCK])
        tmp108 = _tmp107 + tmp106
        _tmp107 = tl.where(rmask, tmp108, _tmp107)
        tmp109 = tmp8 * tmp104
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tmp113 = tmp13 * tmp104
        tmp114 = tl.broadcast_to(tmp113, [XBLOCK, RBLOCK])
        tmp116 = _tmp115 + tmp114
        _tmp115 = tl.where(rmask, tmp116, _tmp115)
        tmp119 = tmp117 + tmp118
        tmp120 = tmp0 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp124 = tmp8 * tmp119
        tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
        tmp127 = _tmp126 + tmp125
        _tmp126 = tl.where(rmask, tmp127, _tmp126)
        tmp128 = tmp13 * tmp119
        tmp129 = tl.broadcast_to(tmp128, [XBLOCK, RBLOCK])
        tmp131 = _tmp130 + tmp129
        _tmp130 = tl.where(rmask, tmp131, _tmp130)
        tmp134 = tmp132 + tmp133
        tmp136 = tmp134 + tmp135
        tmp137 = tmp0 * tmp136
        tmp138 = tl.broadcast_to(tmp137, [XBLOCK, RBLOCK])
        tmp140 = _tmp139 + tmp138
        _tmp139 = tl.where(rmask, tmp140, _tmp139)
        tmp141 = tmp8 * tmp136
        tmp142 = tl.broadcast_to(tmp141, [XBLOCK, RBLOCK])
        tmp144 = _tmp143 + tmp142
        _tmp143 = tl.where(rmask, tmp144, _tmp143)
        tmp145 = tmp13 * tmp136
        tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
        tmp148 = _tmp147 + tmp146
        _tmp147 = tl.where(rmask, tmp148, _tmp147)
        tmp151 = tmp149 + tmp150
        tmp152 = tmp0 * tmp151
        tmp153 = tl.broadcast_to(tmp152, [XBLOCK, RBLOCK])
        tmp155 = _tmp154 + tmp153
        _tmp154 = tl.where(rmask, tmp155, _tmp154)
        tmp156 = tmp8 * tmp151
        tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
        tmp159 = _tmp158 + tmp157
        _tmp158 = tl.where(rmask, tmp159, _tmp158)
        tmp160 = tmp13 * tmp151
        tmp161 = tl.broadcast_to(tmp160, [XBLOCK, RBLOCK])
        tmp163 = _tmp162 + tmp161
        _tmp162 = tl.where(rmask, tmp163, _tmp162)
        tmp166 = tmp164 + tmp165
        tmp167 = tmp0 * tmp166
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tmp171 = tmp8 * tmp166
        tmp172 = tl.broadcast_to(tmp171, [XBLOCK, RBLOCK])
        tmp174 = _tmp173 + tmp172
        _tmp173 = tl.where(rmask, tmp174, _tmp173)
        tmp175 = tmp13 * tmp166
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp181 = tmp179 + tmp180
        tmp183 = tmp181 + tmp182
        tmp184 = tmp0 * tmp183
        tmp185 = tl.broadcast_to(tmp184, [XBLOCK, RBLOCK])
        tmp187 = _tmp186 + tmp185
        _tmp186 = tl.where(rmask, tmp187, _tmp186)
        tmp188 = tmp8 * tmp183
        tmp189 = tl.broadcast_to(tmp188, [XBLOCK, RBLOCK])
        tmp191 = _tmp190 + tmp189
        _tmp190 = tl.where(rmask, tmp191, _tmp190)
        tmp192 = tmp13 * tmp183
        tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
        tmp195 = _tmp194 + tmp193
        _tmp194 = tl.where(rmask, tmp195, _tmp194)
        tmp198 = tmp196 + tmp197
        tmp199 = tmp0 * tmp198
        tmp200 = tl.broadcast_to(tmp199, [XBLOCK, RBLOCK])
        tmp202 = _tmp201 + tmp200
        _tmp201 = tl.where(rmask, tmp202, _tmp201)
        tmp203 = tmp8 * tmp198
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp13 * tmp198
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp213 = tmp211 * tmp212
        tmp214 = 0.0
        tmp215 = tmp213 + tmp214
        tmp217 = tmp215 + tmp216
        tmp219 = tmp217 + tmp218
        tmp220 = tmp0 * tmp219
        tmp221 = tl.broadcast_to(tmp220, [XBLOCK, RBLOCK])
        tmp223 = _tmp222 + tmp221
        _tmp222 = tl.where(rmask, tmp223, _tmp222)
        tmp224 = tmp8 * tmp219
        tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
        tmp227 = _tmp226 + tmp225
        _tmp226 = tl.where(rmask, tmp227, _tmp226)
        tmp228 = tmp13 * tmp219
        tmp229 = tl.broadcast_to(tmp228, [XBLOCK, RBLOCK])
        tmp231 = _tmp230 + tmp229
        _tmp230 = tl.where(rmask, tmp231, _tmp230)
        tmp233 = tmp212 + tmp232
        tmp235 = tmp233 + tmp234
        tmp236 = tmp0 * tmp235
        tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
        tmp239 = _tmp238 + tmp237
        _tmp238 = tl.where(rmask, tmp239, _tmp238)
        tmp240 = tmp8 * tmp235
        tmp241 = tl.broadcast_to(tmp240, [XBLOCK, RBLOCK])
        tmp243 = _tmp242 + tmp241
        _tmp242 = tl.where(rmask, tmp243, _tmp242)
        tmp244 = tmp13 * tmp235
        tmp245 = tl.broadcast_to(tmp244, [XBLOCK, RBLOCK])
        tmp247 = _tmp246 + tmp245
        _tmp246 = tl.where(rmask, tmp247, _tmp246)
        tmp248 = tmp0 * tmp212
        tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
        tmp251 = _tmp250 + tmp249
        _tmp250 = tl.where(rmask, tmp251, _tmp250)
        tmp252 = tmp13 * tmp212
        tmp253 = tl.broadcast_to(tmp252, [XBLOCK, RBLOCK])
        tmp255 = _tmp254 + tmp253
        _tmp254 = tl.where(rmask, tmp255, _tmp254)
        tmp256 = tmp8 * tmp212
        tmp257 = tl.broadcast_to(tmp256, [XBLOCK, RBLOCK])
        tmp259 = _tmp258 + tmp257
        _tmp258 = tl.where(rmask, tmp259, _tmp258)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp11 = tl.sum(_tmp11, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp11, None)
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp16, None)
    tmp21 = tl.sum(_tmp21, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp21, None)
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp28, None)
    tmp32 = tl.sum(_tmp32, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp32, None)
    tmp36 = tl.sum(_tmp36, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp36, None)
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp45, None)
    tmp49 = tl.sum(_tmp49, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp49, None)
    tmp53 = tl.sum(_tmp53, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp53, None)
    tmp60 = tl.sum(_tmp60, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp60, None)
    tmp64 = tl.sum(_tmp64, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp64, None)
    tmp68 = tl.sum(_tmp68, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp68, None)
    tmp75 = tl.sum(_tmp75, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp75, None)
    tmp79 = tl.sum(_tmp79, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp79, None)
    tmp83 = tl.sum(_tmp83, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp83, None)
    tmp92 = tl.sum(_tmp92, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp92, None)
    tmp96 = tl.sum(_tmp96, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp96, None)
    tmp100 = tl.sum(_tmp100, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp100, None)
    tmp107 = tl.sum(_tmp107, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp107, None)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp111, None)
    tmp115 = tl.sum(_tmp115, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp115, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp122, None)
    tmp126 = tl.sum(_tmp126, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp126, None)
    tmp130 = tl.sum(_tmp130, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp130, None)
    tmp139 = tl.sum(_tmp139, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp139, None)
    tmp143 = tl.sum(_tmp143, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp143, None)
    tmp147 = tl.sum(_tmp147, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp147, None)
    tmp154 = tl.sum(_tmp154, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp154, None)
    tmp158 = tl.sum(_tmp158, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp158, None)
    tmp162 = tl.sum(_tmp162, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp162, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp169, None)
    tmp173 = tl.sum(_tmp173, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp173, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp177, None)
    tmp186 = tl.sum(_tmp186, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp186, None)
    tmp190 = tl.sum(_tmp190, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp190, None)
    tmp194 = tl.sum(_tmp194, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp194, None)
    tmp201 = tl.sum(_tmp201, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp201, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp209, None)
    tmp222 = tl.sum(_tmp222, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp222, None)
    tmp226 = tl.sum(_tmp226, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp226, None)
    tmp230 = tl.sum(_tmp230, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp230, None)
    tmp238 = tl.sum(_tmp238, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp238, None)
    tmp242 = tl.sum(_tmp242, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp242, None)
    tmp246 = tl.sum(_tmp246, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp246, None)
    tmp250 = tl.sum(_tmp250, 1)[:, None]
    tl.store(out_ptr46 + (x0), tmp250, None)
    tmp254 = tl.sum(_tmp254, 1)[:, None]
    tl.store(out_ptr47 + (x0), tmp254, None)
    tmp258 = tl.sum(_tmp258, 1)[:, None]
    tl.store(out_ptr48 + (x0), tmp258, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fm/cfmqeilp7r5x3ziianpgcnui6vlpgsjbupfqwaxidtbfm36ng3mh.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_126 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_126', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_126', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(66,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_126(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, xnumel, XBLOCK : tl.constexpr):
    xnumel = 442368
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 110592)
    x0 = xindex % 18
    x1 = (xindex // 18) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp239 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp252 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp264 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp272 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp276 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp284 = tl.load(in_ptr61 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp288 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp296 = tl.load(in_ptr64 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 16, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 15, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 14, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 13, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 12, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 11, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 10, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 9, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 8, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 7, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 6, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 5, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tl.full([1], 4, tl.int32)
    tmp77 = tmp3 == tmp76
    tmp79 = tl.where(tmp77, tmp78, tmp7)
    tmp80 = tl.where(tmp2, tmp79, tmp7)
    tmp81 = tmp75 + tmp80
    tmp82 = tmp3 == tmp1
    tmp84 = tl.where(tmp82, tmp83, tmp7)
    tmp85 = tl.where(tmp2, tmp84, tmp7)
    tmp86 = tmp81 + tmp85
    tmp87 = tl.full([1], 2, tl.int32)
    tmp88 = tmp3 == tmp87
    tmp90 = tl.where(tmp88, tmp89, tmp7)
    tmp91 = tl.where(tmp2, tmp90, tmp7)
    tmp92 = tmp86 + tmp91
    tmp93 = tl.full([1], 1, tl.int32)
    tmp94 = tmp3 == tmp93
    tmp96 = tl.where(tmp94, tmp95, tmp7)
    tmp97 = tl.where(tmp2, tmp96, tmp7)
    tmp98 = tmp92 + tmp97
    tmp99 = tl.full([1], 0, tl.int32)
    tmp100 = tmp3 == tmp99
    tmp102 = tl.where(tmp100, tmp101, tmp7)
    tmp103 = tl.where(tmp2, tmp102, tmp7)
    tmp104 = tmp98 + tmp103
    tmp105 = tmp0 == tmp87
    tmp107 = tl.where(tmp5, tmp106, tmp7)
    tmp108 = tl.where(tmp105, tmp107, tmp7)
    tmp109 = tmp104 + tmp108
    tmp111 = tl.where(tmp11, tmp110, tmp7)
    tmp112 = tl.where(tmp105, tmp111, tmp7)
    tmp113 = tmp109 + tmp112
    tmp115 = tl.where(tmp17, tmp114, tmp7)
    tmp116 = tl.where(tmp105, tmp115, tmp7)
    tmp117 = tmp113 + tmp116
    tmp119 = tl.where(tmp23, tmp118, tmp7)
    tmp120 = tl.where(tmp105, tmp119, tmp7)
    tmp121 = tmp117 + tmp120
    tmp123 = tl.where(tmp29, tmp122, tmp7)
    tmp124 = tl.where(tmp105, tmp123, tmp7)
    tmp125 = tmp121 + tmp124
    tmp127 = tl.where(tmp35, tmp126, tmp7)
    tmp128 = tl.where(tmp105, tmp127, tmp7)
    tmp129 = tmp125 + tmp128
    tmp131 = tl.where(tmp41, tmp130, tmp7)
    tmp132 = tl.where(tmp105, tmp131, tmp7)
    tmp133 = tmp129 + tmp132
    tmp135 = tl.where(tmp47, tmp134, tmp7)
    tmp136 = tl.where(tmp105, tmp135, tmp7)
    tmp137 = tmp133 + tmp136
    tmp139 = tl.where(tmp53, tmp138, tmp7)
    tmp140 = tl.where(tmp105, tmp139, tmp7)
    tmp141 = tmp137 + tmp140
    tmp143 = tl.where(tmp59, tmp142, tmp7)
    tmp144 = tl.where(tmp105, tmp143, tmp7)
    tmp145 = tmp141 + tmp144
    tmp147 = tl.where(tmp65, tmp146, tmp7)
    tmp148 = tl.where(tmp105, tmp147, tmp7)
    tmp149 = tmp145 + tmp148
    tmp151 = tl.where(tmp71, tmp150, tmp7)
    tmp152 = tl.where(tmp105, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp155 = tl.where(tmp77, tmp154, tmp7)
    tmp156 = tl.where(tmp105, tmp155, tmp7)
    tmp157 = tmp153 + tmp156
    tmp159 = tl.where(tmp82, tmp158, tmp7)
    tmp160 = tl.where(tmp105, tmp159, tmp7)
    tmp161 = tmp157 + tmp160
    tmp163 = tl.where(tmp88, tmp162, tmp7)
    tmp164 = tl.where(tmp105, tmp163, tmp7)
    tmp165 = tmp161 + tmp164
    tmp167 = tl.where(tmp94, tmp166, tmp7)
    tmp168 = tl.where(tmp105, tmp167, tmp7)
    tmp169 = tmp165 + tmp168
    tmp171 = tl.where(tmp100, tmp170, tmp7)
    tmp172 = tl.where(tmp105, tmp171, tmp7)
    tmp173 = tmp169 + tmp172
    tmp174 = tmp0 == tmp93
    tmp176 = tl.where(tmp5, tmp175, tmp7)
    tmp177 = tl.where(tmp174, tmp176, tmp7)
    tmp178 = tmp173 + tmp177
    tmp180 = tl.where(tmp11, tmp179, tmp7)
    tmp181 = tl.where(tmp174, tmp180, tmp7)
    tmp182 = tmp178 + tmp181
    tmp184 = tl.where(tmp17, tmp183, tmp7)
    tmp185 = tl.where(tmp174, tmp184, tmp7)
    tmp186 = tmp182 + tmp185
    tmp188 = tl.where(tmp23, tmp187, tmp7)
    tmp189 = tl.where(tmp174, tmp188, tmp7)
    tmp190 = tmp186 + tmp189
    tmp192 = tl.where(tmp29, tmp191, tmp7)
    tmp193 = tl.where(tmp174, tmp192, tmp7)
    tmp194 = tmp190 + tmp193
    tmp196 = tl.where(tmp35, tmp195, tmp7)
    tmp197 = tl.where(tmp174, tmp196, tmp7)
    tmp198 = tmp194 + tmp197
    tmp200 = tl.where(tmp41, tmp199, tmp7)
    tmp201 = tl.where(tmp174, tmp200, tmp7)
    tmp202 = tmp198 + tmp201
    tmp204 = tl.where(tmp47, tmp203, tmp7)
    tmp205 = tl.where(tmp174, tmp204, tmp7)
    tmp206 = tmp202 + tmp205
    tmp208 = tl.where(tmp53, tmp207, tmp7)
    tmp209 = tl.where(tmp174, tmp208, tmp7)
    tmp210 = tmp206 + tmp209
    tmp212 = tl.where(tmp59, tmp211, tmp7)
    tmp213 = tl.where(tmp174, tmp212, tmp7)
    tmp214 = tmp210 + tmp213
    tmp216 = tl.where(tmp65, tmp215, tmp7)
    tmp217 = tl.where(tmp174, tmp216, tmp7)
    tmp218 = tmp214 + tmp217
    tmp220 = tl.where(tmp71, tmp219, tmp7)
    tmp221 = tl.where(tmp174, tmp220, tmp7)
    tmp222 = tmp218 + tmp221
    tmp224 = tl.where(tmp77, tmp223, tmp7)
    tmp225 = tl.where(tmp174, tmp224, tmp7)
    tmp226 = tmp222 + tmp225
    tmp228 = tl.where(tmp82, tmp227, tmp7)
    tmp229 = tl.where(tmp174, tmp228, tmp7)
    tmp230 = tmp226 + tmp229
    tmp232 = tl.where(tmp88, tmp231, tmp7)
    tmp233 = tl.where(tmp174, tmp232, tmp7)
    tmp234 = tmp230 + tmp233
    tmp236 = tl.where(tmp94, tmp235, tmp7)
    tmp237 = tl.where(tmp174, tmp236, tmp7)
    tmp238 = tmp234 + tmp237
    tmp240 = tl.where(tmp100, tmp239, tmp7)
    tmp241 = tl.where(tmp174, tmp240, tmp7)
    tmp242 = tmp238 + tmp241
    tmp243 = tmp0 == tmp99
    tmp245 = tl.where(tmp5, tmp244, tmp7)
    tmp246 = tl.where(tmp243, tmp245, tmp7)
    tmp247 = tmp242 + tmp246
    tmp249 = tl.where(tmp11, tmp248, tmp7)
    tmp250 = tl.where(tmp243, tmp249, tmp7)
    tmp251 = tmp247 + tmp250
    tmp253 = tl.where(tmp17, tmp252, tmp7)
    tmp254 = tl.where(tmp243, tmp253, tmp7)
    tmp255 = tmp251 + tmp254
    tmp257 = tl.where(tmp23, tmp256, tmp7)
    tmp258 = tl.where(tmp243, tmp257, tmp7)
    tmp259 = tmp255 + tmp258
    tmp261 = tl.where(tmp29, tmp260, tmp7)
    tmp262 = tl.where(tmp243, tmp261, tmp7)
    tmp263 = tmp259 + tmp262
    tmp265 = tl.where(tmp35, tmp264, tmp7)
    tmp266 = tl.where(tmp243, tmp265, tmp7)
    tmp267 = tmp263 + tmp266
    tmp269 = tl.where(tmp41, tmp268, tmp7)
    tmp270 = tl.where(tmp243, tmp269, tmp7)
    tmp271 = tmp267 + tmp270
    tmp273 = tl.where(tmp47, tmp272, tmp7)
    tmp274 = tl.where(tmp243, tmp273, tmp7)
    tmp275 = tmp271 + tmp274
    tmp277 = tl.where(tmp53, tmp276, tmp7)
    tmp278 = tl.where(tmp243, tmp277, tmp7)
    tmp279 = tmp275 + tmp278
    tmp281 = tl.where(tmp59, tmp280, tmp7)
    tmp282 = tl.where(tmp243, tmp281, tmp7)
    tmp283 = tmp279 + tmp282
    tmp285 = tl.where(tmp65, tmp284, tmp7)
    tmp286 = tl.where(tmp243, tmp285, tmp7)
    tmp287 = tmp283 + tmp286
    tmp289 = tl.where(tmp71, tmp288, tmp7)
    tmp290 = tl.where(tmp243, tmp289, tmp7)
    tmp291 = tmp287 + tmp290
    tmp293 = tl.where(tmp77, tmp292, tmp7)
    tmp294 = tl.where(tmp243, tmp293, tmp7)
    tmp295 = tmp291 + tmp294
    tmp297 = tl.where(tmp82, tmp296, tmp7)
    tmp298 = tl.where(tmp243, tmp297, tmp7)
    tmp299 = tmp295 + tmp298
    tl.store(in_out_ptr0 + (x3), tmp299, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3f/c3fc3a3afwjkrqfy73ozdpjia2mbcohyels4hcgnacdgjxuj7doc.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_127 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_127', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_127', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_127(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 3456
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 18
    x4 = (xindex // 18)
    x2 = (xindex // 864)
    x1 = (xindex // 18) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (18*r3) + (2304*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/5f/c5fhv43uh3kuiwlteluilrd3p6tpwmr6nd5sixpze7blw5tk3pxw.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_128 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_128', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_128', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_128(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 72
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 18
    x1 = (xindex // 18)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (18*r2) + (864*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/zl/czljffr6mdoul5o2y3sj662phfiakt3hhvg6tph24n5uutmaajnp.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_129 = async_compile.triton('triton_poi_fused_clone_129', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_129', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_129(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 442368
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 18
    x1 = (xindex // 18) % 4
    x2 = (xindex // 72)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (18*x2) + (110592*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/on/conzjhds4yf2vrllgvnmyxtstahylhnsuyzksf3alrlvafpmooui.py
# Source Nodes: [l__mod___dynamic_dense_16_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_16_act => add_727, convert_element_type_300, erf_16, mul_995
triton_poi_fused_gelu_gelu_backward_130 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_130', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_130', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_130(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 442368
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/oh/coh6qbrobsbv4lxc7ujzuglosg4fcruwpc3egudu266547w5xuxv.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_527, add_543, add_544, add_559, add_560, add_72, add_96, add_98, float_1, float_2, float_3, mean_1, mean_2, mul_3, mul_4, mul_511, mul_527, mul_543, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_527 => add_669
# add_543 => add_685
# add_544 => add_719
# add_559 => add_701
# add_560 => add_720
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_284
# float_2 => convert_element_type_286
# float_3 => convert_element_type_288
# mean_1 => mean_79
# mean_2 => mean_80
# mul_3 => mul_973
# mul_4 => mul_24
# mul_511 => mul_921
# mul_527 => mul_937
# mul_543 => mul_953
# mul_6 => mul_976
# rsqrt_1 => rsqrt_79
# rsqrt_2 => rsqrt_80
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_131 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_131', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp32', 32: '*fp32', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp32', 114: '*fp16', 115: '*fp32', 116: '*fp32', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: 'i32', 149: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr15', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_131', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(148, 149))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_131(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_out_ptr15, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp40, None)
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr16 + (x0), None, eviction_policy='evict_last')
    tmp83 = tl.load(in_ptr17 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr18 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr19 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr20 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr21 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr22 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr23 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr24 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr25 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr26 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr27 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr28 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr29 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr30 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr31 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr32 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr33 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr34 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr35 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr36 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr37 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr38 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr39 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr40 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr41 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr42 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr43 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr44 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr45 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr46 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr47 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr48 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr49 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr50 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr51 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr52 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp223 = tl.load(in_ptr53 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr54 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr55 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp233 = tl.load(in_ptr56 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr57 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr58 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr59 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr60 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp250 = tl.load(in_ptr61 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp253 = tl.load(in_ptr62 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp261 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp268 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp275 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp282 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp289 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp296 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp303 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp310 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp319 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp328 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp337 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp346 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp355 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp357 = tl.load(in_ptr94 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp367 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp106 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp176 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp236 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp246 = tl.load(in_out_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp256 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp257 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp264 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp270 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp271 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp277 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp278 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp285 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp291 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp298 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp305 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp306 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp312 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp313 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp315 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp322 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp324 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp330 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp331 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp340 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp342 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp348 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp349 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp351 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp361 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp67 = tmp27 * tmp47
        tmp69 = tmp68 / tmp50
        tmp70 = tmp69 + tmp52
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp71 * tmp71
        tmp73 = tmp72 * tmp71
        tmp74 = tmp67 * tmp73
        tmp75 = tmp74 / tmp50
        tmp77 = tmp21 * tmp62
        tmp78 = tmp76 + tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp80 = tmp75 * tmp79
        tmp84 = tmp82 * tmp83
        tmp85 = tmp81 + tmp84
        tmp88 = tmp86 * tmp87
        tmp89 = tmp88.to(tl.float32)
        tmp90 = tmp89 * tmp54
        tmp91 = tmp90 + tmp66
        tmp92 = tmp91 + tmp66
        tmp93 = tmp92.to(tl.float32)
        tmp94 = tmp93 * tmp5
        tmp95 = tmp85 + tmp94
        tmp98 = tmp96 * tmp97
        tmp99 = tmp98.to(tl.float32)
        tmp100 = tmp99 * tmp71
        tmp101 = tmp100 + tmp80
        tmp102 = tmp101 + tmp80
        tmp103 = tmp102.to(tl.float32)
        tmp104 = tmp103 * tmp21
        tmp105 = tmp95 + tmp104
        tmp108 = tmp82 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp93 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp103 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp82 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp93 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp103 * tmp123
        tmp125 = tmp122 + tmp124
        tmp128 = tmp82 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp93 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp103 * tmp133
        tmp135 = tmp132 + tmp134
        tmp138 = tmp82 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp93 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp103 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp82 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp93 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp103 * tmp153
        tmp155 = tmp152 + tmp154
        tmp158 = tmp82 * tmp157
        tmp159 = tmp156 + tmp158
        tmp161 = tmp93 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp103 * tmp163
        tmp165 = tmp162 + tmp164
        tmp168 = tmp82 * tmp167
        tmp169 = tmp166 + tmp168
        tmp171 = tmp93 * tmp170
        tmp172 = tmp169 + tmp171
        tmp174 = tmp103 * tmp173
        tmp175 = tmp172 + tmp174
        tmp178 = tmp82 * tmp177
        tmp179 = tmp176 + tmp178
        tmp181 = tmp93 * tmp180
        tmp182 = tmp179 + tmp181
        tmp184 = tmp103 * tmp183
        tmp185 = tmp182 + tmp184
        tmp188 = tmp82 * tmp187
        tmp189 = tmp186 + tmp188
        tmp191 = tmp93 * tmp190
        tmp192 = tmp189 + tmp191
        tmp194 = tmp103 * tmp193
        tmp195 = tmp192 + tmp194
        tmp198 = tmp82 * tmp197
        tmp199 = tmp196 + tmp198
        tmp201 = tmp93 * tmp200
        tmp202 = tmp199 + tmp201
        tmp204 = tmp103 * tmp203
        tmp205 = tmp202 + tmp204
        tmp208 = tmp82 * tmp207
        tmp209 = tmp206 + tmp208
        tmp211 = tmp93 * tmp210
        tmp212 = tmp209 + tmp211
        tmp214 = tmp103 * tmp213
        tmp215 = tmp212 + tmp214
        tmp218 = tmp82 * tmp217
        tmp219 = tmp216 + tmp218
        tmp221 = tmp93 * tmp220
        tmp222 = tmp219 + tmp221
        tmp224 = tmp103 * tmp223
        tmp225 = tmp222 + tmp224
        tmp228 = tmp82 * tmp227
        tmp229 = tmp226 + tmp228
        tmp231 = tmp93 * tmp230
        tmp232 = tmp229 + tmp231
        tmp234 = tmp103 * tmp233
        tmp235 = tmp232 + tmp234
        tmp238 = tmp82 * tmp237
        tmp239 = tmp236 + tmp238
        tmp241 = tmp93 * tmp240
        tmp242 = tmp239 + tmp241
        tmp244 = tmp103 * tmp243
        tmp245 = tmp242 + tmp244
        tmp248 = tmp82 * tmp247
        tmp249 = tmp246 + tmp248
        tmp251 = tmp93 * tmp250
        tmp252 = tmp249 + tmp251
        tmp254 = tmp103 * tmp253
        tmp255 = tmp252 + tmp254
        tmp258 = tmp256 + tmp257
        tmp259 = tmp82 * tmp258
        tmp260 = tl.broadcast_to(tmp259, [XBLOCK, RBLOCK])
        tmp262 = _tmp261 + tmp260
        _tmp261 = tl.where(rmask, tmp262, _tmp261)
        tmp265 = tmp263 + tmp264
        tmp266 = tmp82 * tmp265
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
        tmp269 = _tmp268 + tmp267
        _tmp268 = tl.where(rmask, tmp269, _tmp268)
        tmp272 = tmp270 + tmp271
        tmp273 = tmp82 * tmp272
        tmp274 = tl.broadcast_to(tmp273, [XBLOCK, RBLOCK])
        tmp276 = _tmp275 + tmp274
        _tmp275 = tl.where(rmask, tmp276, _tmp275)
        tmp279 = tmp277 + tmp278
        tmp280 = tmp82 * tmp279
        tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
        tmp283 = _tmp282 + tmp281
        _tmp282 = tl.where(rmask, tmp283, _tmp282)
        tmp286 = tmp284 + tmp285
        tmp287 = tmp82 * tmp286
        tmp288 = tl.broadcast_to(tmp287, [XBLOCK, RBLOCK])
        tmp290 = _tmp289 + tmp288
        _tmp289 = tl.where(rmask, tmp290, _tmp289)
        tmp293 = tmp291 + tmp292
        tmp294 = tmp82 * tmp293
        tmp295 = tl.broadcast_to(tmp294, [XBLOCK, RBLOCK])
        tmp297 = _tmp296 + tmp295
        _tmp296 = tl.where(rmask, tmp297, _tmp296)
        tmp300 = tmp298 + tmp299
        tmp301 = tmp82 * tmp300
        tmp302 = tl.broadcast_to(tmp301, [XBLOCK, RBLOCK])
        tmp304 = _tmp303 + tmp302
        _tmp303 = tl.where(rmask, tmp304, _tmp303)
        tmp307 = tmp305 + tmp306
        tmp308 = tmp82 * tmp307
        tmp309 = tl.broadcast_to(tmp308, [XBLOCK, RBLOCK])
        tmp311 = _tmp310 + tmp309
        _tmp310 = tl.where(rmask, tmp311, _tmp310)
        tmp314 = tmp312 + tmp313
        tmp316 = tmp314 + tmp315
        tmp317 = tmp82 * tmp316
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK, RBLOCK])
        tmp320 = _tmp319 + tmp318
        _tmp319 = tl.where(rmask, tmp320, _tmp319)
        tmp323 = tmp321 + tmp322
        tmp325 = tmp323 + tmp324
        tmp326 = tmp82 * tmp325
        tmp327 = tl.broadcast_to(tmp326, [XBLOCK, RBLOCK])
        tmp329 = _tmp328 + tmp327
        _tmp328 = tl.where(rmask, tmp329, _tmp328)
        tmp332 = tmp330 + tmp331
        tmp334 = tmp332 + tmp333
        tmp335 = tmp82 * tmp334
        tmp336 = tl.broadcast_to(tmp335, [XBLOCK, RBLOCK])
        tmp338 = _tmp337 + tmp336
        _tmp337 = tl.where(rmask, tmp338, _tmp337)
        tmp341 = tmp339 + tmp340
        tmp343 = tmp341 + tmp342
        tmp344 = tmp82 * tmp343
        tmp345 = tl.broadcast_to(tmp344, [XBLOCK, RBLOCK])
        tmp347 = _tmp346 + tmp345
        _tmp346 = tl.where(rmask, tmp347, _tmp346)
        tmp350 = tmp348 + tmp349
        tmp352 = tmp350 + tmp351
        tmp353 = tmp82 * tmp352
        tmp354 = tl.broadcast_to(tmp353, [XBLOCK, RBLOCK])
        tmp356 = _tmp355 + tmp354
        _tmp355 = tl.where(rmask, tmp356, _tmp355)
        tmp358 = tmp357 * tmp348
        tmp359 = 0.0
        tmp360 = tmp358 + tmp359
        tmp362 = tmp360 + tmp361
        tmp364 = tmp362 + tmp363
        tmp365 = tmp82 * tmp364
        tmp366 = tl.broadcast_to(tmp365, [XBLOCK, RBLOCK])
        tmp368 = _tmp367 + tmp366
        _tmp367 = tl.where(rmask, tmp368, _tmp367)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp80, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp105, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp125, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp135, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp155, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp165, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp175, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp185, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp195, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp205, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp215, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp225, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp235, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp245, rmask)
        tl.store(in_out_ptr15 + (r1 + (2048*x0)), tmp255, rmask)
    tmp261 = tl.sum(_tmp261, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp261, None)
    tmp268 = tl.sum(_tmp268, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp268, None)
    tmp275 = tl.sum(_tmp275, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp275, None)
    tmp282 = tl.sum(_tmp282, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp282, None)
    tmp289 = tl.sum(_tmp289, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp289, None)
    tmp296 = tl.sum(_tmp296, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp296, None)
    tmp303 = tl.sum(_tmp303, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp303, None)
    tmp310 = tl.sum(_tmp310, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp310, None)
    tmp319 = tl.sum(_tmp319, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp319, None)
    tmp328 = tl.sum(_tmp328, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp328, None)
    tmp337 = tl.sum(_tmp337, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp337, None)
    tmp346 = tl.sum(_tmp346, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp346, None)
    tmp355 = tl.sum(_tmp355, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp355, None)
    tmp367 = tl.sum(_tmp367, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp367, None)
    _tmp388 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp395 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp404 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp411 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp418 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp427 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp434 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp441 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp450 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp457 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp464 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp473 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp480 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp492 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp500 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp504 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp509 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp369 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp370 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp379 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0)
        tmp383 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp384 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp390 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp391 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp397 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp398 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp400 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp406 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp407 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp413 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp414 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp421 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp423 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp430 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp436 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp437 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp443 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp444 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp446 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp452 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp453 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp459 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp460 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp466 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp467 = tl.load(in_ptr89 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp469 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp482 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp486 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp488 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp494 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp496 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp506 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp371 = tmp369 * tmp370
        tmp372 = tmp371.to(tl.float32)
        tmp373 = 2048.0
        tmp374 = tmp49 / tmp373
        tmp375 = 1e-05
        tmp376 = tmp374 + tmp375
        tmp377 = tl.math.rsqrt(tmp376)
        tmp378 = tmp372 * tmp377
        tmp380 = tmp378 + tmp379
        tmp381 = tmp380 + tmp379
        tmp382 = tmp381.to(tl.float32)
        tmp385 = tmp383 + tmp384
        tmp386 = tmp382 * tmp385
        tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
        tmp389 = _tmp388 + tmp387
        _tmp388 = tl.where(rmask, tmp389, _tmp388)
        tmp392 = tmp390 + tmp391
        tmp393 = tmp382 * tmp392
        tmp394 = tl.broadcast_to(tmp393, [XBLOCK, RBLOCK])
        tmp396 = _tmp395 + tmp394
        _tmp395 = tl.where(rmask, tmp396, _tmp395)
        tmp399 = tmp397 + tmp398
        tmp401 = tmp399 + tmp400
        tmp402 = tmp382 * tmp401
        tmp403 = tl.broadcast_to(tmp402, [XBLOCK, RBLOCK])
        tmp405 = _tmp404 + tmp403
        _tmp404 = tl.where(rmask, tmp405, _tmp404)
        tmp408 = tmp406 + tmp407
        tmp409 = tmp382 * tmp408
        tmp410 = tl.broadcast_to(tmp409, [XBLOCK, RBLOCK])
        tmp412 = _tmp411 + tmp410
        _tmp411 = tl.where(rmask, tmp412, _tmp411)
        tmp415 = tmp413 + tmp414
        tmp416 = tmp382 * tmp415
        tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
        tmp419 = _tmp418 + tmp417
        _tmp418 = tl.where(rmask, tmp419, _tmp418)
        tmp422 = tmp420 + tmp421
        tmp424 = tmp422 + tmp423
        tmp425 = tmp382 * tmp424
        tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
        tmp428 = _tmp427 + tmp426
        _tmp427 = tl.where(rmask, tmp428, _tmp427)
        tmp431 = tmp429 + tmp430
        tmp432 = tmp382 * tmp431
        tmp433 = tl.broadcast_to(tmp432, [XBLOCK, RBLOCK])
        tmp435 = _tmp434 + tmp433
        _tmp434 = tl.where(rmask, tmp435, _tmp434)
        tmp438 = tmp436 + tmp437
        tmp439 = tmp382 * tmp438
        tmp440 = tl.broadcast_to(tmp439, [XBLOCK, RBLOCK])
        tmp442 = _tmp441 + tmp440
        _tmp441 = tl.where(rmask, tmp442, _tmp441)
        tmp445 = tmp443 + tmp444
        tmp447 = tmp445 + tmp446
        tmp448 = tmp382 * tmp447
        tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
        tmp451 = _tmp450 + tmp449
        _tmp450 = tl.where(rmask, tmp451, _tmp450)
        tmp454 = tmp452 + tmp453
        tmp455 = tmp382 * tmp454
        tmp456 = tl.broadcast_to(tmp455, [XBLOCK, RBLOCK])
        tmp458 = _tmp457 + tmp456
        _tmp457 = tl.where(rmask, tmp458, _tmp457)
        tmp461 = tmp459 + tmp460
        tmp462 = tmp382 * tmp461
        tmp463 = tl.broadcast_to(tmp462, [XBLOCK, RBLOCK])
        tmp465 = _tmp464 + tmp463
        _tmp464 = tl.where(rmask, tmp465, _tmp464)
        tmp468 = tmp466 + tmp467
        tmp470 = tmp468 + tmp469
        tmp471 = tmp382 * tmp470
        tmp472 = tl.broadcast_to(tmp471, [XBLOCK, RBLOCK])
        tmp474 = _tmp473 + tmp472
        _tmp473 = tl.where(rmask, tmp474, _tmp473)
        tmp477 = tmp475 + tmp476
        tmp478 = tmp382 * tmp477
        tmp479 = tl.broadcast_to(tmp478, [XBLOCK, RBLOCK])
        tmp481 = _tmp480 + tmp479
        _tmp480 = tl.where(rmask, tmp481, _tmp480)
        tmp483 = tmp357 * tmp482
        tmp484 = 0.0
        tmp485 = tmp483 + tmp484
        tmp487 = tmp485 + tmp486
        tmp489 = tmp487 + tmp488
        tmp490 = tmp382 * tmp489
        tmp491 = tl.broadcast_to(tmp490, [XBLOCK, RBLOCK])
        tmp493 = _tmp492 + tmp491
        _tmp492 = tl.where(rmask, tmp493, _tmp492)
        tmp495 = tmp482 + tmp494
        tmp497 = tmp495 + tmp496
        tmp498 = tmp382 * tmp497
        tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
        tmp501 = _tmp500 + tmp499
        _tmp500 = tl.where(rmask, tmp501, _tmp500)
        tmp502 = tmp382 * tmp482
        tmp503 = tl.broadcast_to(tmp502, [XBLOCK, RBLOCK])
        tmp505 = _tmp504 + tmp503
        _tmp504 = tl.where(rmask, tmp505, _tmp504)
        tmp507 = tmp506 * tmp482
        tmp508 = tl.broadcast_to(tmp507, [XBLOCK, RBLOCK])
        tmp510 = _tmp509 + tmp508
        _tmp509 = tl.where(rmask, tmp510, _tmp509)
    tmp388 = tl.sum(_tmp388, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp388, None)
    tmp395 = tl.sum(_tmp395, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp395, None)
    tmp404 = tl.sum(_tmp404, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp404, None)
    tmp411 = tl.sum(_tmp411, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp411, None)
    tmp418 = tl.sum(_tmp418, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp418, None)
    tmp427 = tl.sum(_tmp427, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp427, None)
    tmp434 = tl.sum(_tmp434, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp434, None)
    tmp441 = tl.sum(_tmp441, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp441, None)
    tmp450 = tl.sum(_tmp450, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp450, None)
    tmp457 = tl.sum(_tmp457, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp457, None)
    tmp464 = tl.sum(_tmp464, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp464, None)
    tmp473 = tl.sum(_tmp473, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp473, None)
    tmp480 = tl.sum(_tmp480, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp480, None)
    tmp492 = tl.sum(_tmp492, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp492, None)
    tmp500 = tl.sum(_tmp500, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp500, None)
    tmp504 = tl.sum(_tmp504, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp504, None)
    tmp509 = tl.sum(_tmp509, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp509, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yk/cykbtrpamlio4ndw3nghcuqebtagzh2npn5qhh2rrfjc6har2bgi.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_527, add_543, add_544, add_72, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, mul_511, mul_527, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_718
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_5 => add_12, add_5
# add_50 => add_89
# add_527 => add_669
# add_543 => add_685
# add_544 => add_719
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_284
# float_2 => convert_element_type_286
# mean => mean_78
# mean_1 => mean_79
# mul => mul_970
# mul_3 => mul_973
# mul_4 => mul_24
# mul_511 => mul_921
# mul_527 => mul_937
# rsqrt => rsqrt_78
# rsqrt_1 => rsqrt_79
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_132 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_132', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp32', 9: '*fp32', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp32', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: 'i32', 80: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_132', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(79, 80))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_132(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
    tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
    tmp14 = tl.load(in_ptr3 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last')
    _tmp37 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp44 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp53 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp60 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp67 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp83 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp90 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp99 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp106 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp113 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp131 = tl.load(in_ptr38 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp142 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp150 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp154 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp13 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0)
        tmp39 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp40 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp46 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp62 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp109 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp116 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp132 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp146 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = -0.5
        tmp2 = tmp0 * tmp1
        tmp4 = 2048.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = tl.math.rsqrt(tmp7)
        tmp9 = tmp8 * tmp8
        tmp10 = tmp9 * tmp8
        tmp11 = tmp2 * tmp10
        tmp12 = tmp11 / tmp4
        tmp17 = tmp15 + tmp16
        tmp18 = tmp14 * tmp17
        tmp19 = tmp13 + tmp18
        tmp20 = tmp19.to(tl.float32)
        tmp21 = tmp12 * tmp20
        tmp24 = tmp22 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26 / tmp4
        tmp28 = tmp27 + tmp6
        tmp29 = tl.math.rsqrt(tmp28)
        tmp30 = tmp25 * tmp29
        tmp32 = tmp30 + tmp31
        tmp33 = tmp32 + tmp31
        tmp34 = tmp33.to(tl.float32)
        tmp35 = tmp34 * tmp17
        tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
        tmp38 = _tmp37 + tmp36
        _tmp37 = tl.where(rmask, tmp38, _tmp37)
        tmp41 = tmp39 + tmp40
        tmp42 = tmp34 * tmp41
        tmp43 = tl.broadcast_to(tmp42, [XBLOCK, RBLOCK])
        tmp45 = _tmp44 + tmp43
        _tmp44 = tl.where(rmask, tmp45, _tmp44)
        tmp48 = tmp46 + tmp47
        tmp50 = tmp48 + tmp49
        tmp51 = tmp34 * tmp50
        tmp52 = tl.broadcast_to(tmp51, [XBLOCK, RBLOCK])
        tmp54 = _tmp53 + tmp52
        _tmp53 = tl.where(rmask, tmp54, _tmp53)
        tmp57 = tmp55 + tmp56
        tmp58 = tmp34 * tmp57
        tmp59 = tl.broadcast_to(tmp58, [XBLOCK, RBLOCK])
        tmp61 = _tmp60 + tmp59
        _tmp60 = tl.where(rmask, tmp61, _tmp60)
        tmp64 = tmp62 + tmp63
        tmp65 = tmp34 * tmp64
        tmp66 = tl.broadcast_to(tmp65, [XBLOCK, RBLOCK])
        tmp68 = _tmp67 + tmp66
        _tmp67 = tl.where(rmask, tmp68, _tmp67)
        tmp71 = tmp69 + tmp70
        tmp73 = tmp71 + tmp72
        tmp74 = tmp34 * tmp73
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tmp80 = tmp78 + tmp79
        tmp81 = tmp34 * tmp80
        tmp82 = tl.broadcast_to(tmp81, [XBLOCK, RBLOCK])
        tmp84 = _tmp83 + tmp82
        _tmp83 = tl.where(rmask, tmp84, _tmp83)
        tmp87 = tmp85 + tmp86
        tmp88 = tmp34 * tmp87
        tmp89 = tl.broadcast_to(tmp88, [XBLOCK, RBLOCK])
        tmp91 = _tmp90 + tmp89
        _tmp90 = tl.where(rmask, tmp91, _tmp90)
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp34 * tmp96
        tmp98 = tl.broadcast_to(tmp97, [XBLOCK, RBLOCK])
        tmp100 = _tmp99 + tmp98
        _tmp99 = tl.where(rmask, tmp100, _tmp99)
        tmp103 = tmp101 + tmp102
        tmp104 = tmp34 * tmp103
        tmp105 = tl.broadcast_to(tmp104, [XBLOCK, RBLOCK])
        tmp107 = _tmp106 + tmp105
        _tmp106 = tl.where(rmask, tmp107, _tmp106)
        tmp110 = tmp108 + tmp109
        tmp111 = tmp34 * tmp110
        tmp112 = tl.broadcast_to(tmp111, [XBLOCK, RBLOCK])
        tmp114 = _tmp113 + tmp112
        _tmp113 = tl.where(rmask, tmp114, _tmp113)
        tmp117 = tmp115 + tmp116
        tmp119 = tmp117 + tmp118
        tmp120 = tmp34 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp126 = tmp124 + tmp125
        tmp127 = tmp34 * tmp126
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp133 = tmp131 * tmp132
        tmp134 = 0.0
        tmp135 = tmp133 + tmp134
        tmp137 = tmp135 + tmp136
        tmp139 = tmp137 + tmp138
        tmp140 = tmp34 * tmp139
        tmp141 = tl.broadcast_to(tmp140, [XBLOCK, RBLOCK])
        tmp143 = _tmp142 + tmp141
        _tmp142 = tl.where(rmask, tmp143, _tmp142)
        tmp145 = tmp132 + tmp144
        tmp147 = tmp145 + tmp146
        tmp148 = tmp34 * tmp147
        tmp149 = tl.broadcast_to(tmp148, [XBLOCK, RBLOCK])
        tmp151 = _tmp150 + tmp149
        _tmp150 = tl.where(rmask, tmp151, _tmp150)
        tmp152 = tmp34 * tmp132
        tmp153 = tl.broadcast_to(tmp152, [XBLOCK, RBLOCK])
        tmp155 = _tmp154 + tmp153
        _tmp154 = tl.where(rmask, tmp155, _tmp154)
        tl.store(out_ptr0 + (r1 + (2048*x0)), tmp21, rmask)
    tmp37 = tl.sum(_tmp37, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp37, None)
    tmp44 = tl.sum(_tmp44, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp44, None)
    tmp53 = tl.sum(_tmp53, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp53, None)
    tmp60 = tl.sum(_tmp60, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp60, None)
    tmp67 = tl.sum(_tmp67, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp67, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp76, None)
    tmp83 = tl.sum(_tmp83, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp83, None)
    tmp90 = tl.sum(_tmp90, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp90, None)
    tmp99 = tl.sum(_tmp99, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp99, None)
    tmp106 = tl.sum(_tmp106, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp106, None)
    tmp113 = tl.sum(_tmp113, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp113, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp122, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp129, None)
    tmp142 = tl.sum(_tmp142, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp142, None)
    tmp150 = tl.sum(_tmp150, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp150, None)
    tmp154 = tl.sum(_tmp154, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp154, None)
    _tmp175 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp182 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp191 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp198 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp214 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp228 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp244 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp251 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp260 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp267 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp279 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp291 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp156 = tl.load(in_ptr44 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_ptr45 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp166 = tl.load(out_ptr0 + (r1 + (2048*x0)), rmask, other=0)
        tmp170 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp171 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp178 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp184 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp185 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp193 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp200 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp201 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp208 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp210 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp217 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp223 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp224 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp230 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp233 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp240 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp246 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp254 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp256 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp262 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp269 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp273 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp281 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp283 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tmp156 * tmp157
        tmp159 = tmp158.to(tl.float32)
        tmp160 = 2048.0
        tmp161 = tmp3 / tmp160
        tmp162 = 1e-05
        tmp163 = tmp161 + tmp162
        tmp164 = tl.math.rsqrt(tmp163)
        tmp165 = tmp159 * tmp164
        tmp167 = tmp165 + tmp166
        tmp168 = tmp167 + tmp166
        tmp169 = tmp168.to(tl.float32)
        tmp172 = tmp170 + tmp171
        tmp173 = tmp169 * tmp172
        tmp174 = tl.broadcast_to(tmp173, [XBLOCK, RBLOCK])
        tmp176 = _tmp175 + tmp174
        _tmp175 = tl.where(rmask, tmp176, _tmp175)
        tmp179 = tmp177 + tmp178
        tmp180 = tmp169 * tmp179
        tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
        tmp183 = _tmp182 + tmp181
        _tmp182 = tl.where(rmask, tmp183, _tmp182)
        tmp186 = tmp184 + tmp185
        tmp188 = tmp186 + tmp187
        tmp189 = tmp169 * tmp188
        tmp190 = tl.broadcast_to(tmp189, [XBLOCK, RBLOCK])
        tmp192 = _tmp191 + tmp190
        _tmp191 = tl.where(rmask, tmp192, _tmp191)
        tmp195 = tmp193 + tmp194
        tmp196 = tmp169 * tmp195
        tmp197 = tl.broadcast_to(tmp196, [XBLOCK, RBLOCK])
        tmp199 = _tmp198 + tmp197
        _tmp198 = tl.where(rmask, tmp199, _tmp198)
        tmp202 = tmp200 + tmp201
        tmp203 = tmp169 * tmp202
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp209 = tmp207 + tmp208
        tmp211 = tmp209 + tmp210
        tmp212 = tmp169 * tmp211
        tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
        tmp215 = _tmp214 + tmp213
        _tmp214 = tl.where(rmask, tmp215, _tmp214)
        tmp218 = tmp216 + tmp217
        tmp219 = tmp169 * tmp218
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp225 = tmp223 + tmp224
        tmp226 = tmp169 * tmp225
        tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
        tmp229 = _tmp228 + tmp227
        _tmp228 = tl.where(rmask, tmp229, _tmp228)
        tmp232 = tmp230 + tmp231
        tmp234 = tmp232 + tmp233
        tmp235 = tmp169 * tmp234
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tmp241 = tmp239 + tmp240
        tmp242 = tmp169 * tmp241
        tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
        tmp245 = _tmp244 + tmp243
        _tmp244 = tl.where(rmask, tmp245, _tmp244)
        tmp248 = tmp246 + tmp247
        tmp249 = tmp169 * tmp248
        tmp250 = tl.broadcast_to(tmp249, [XBLOCK, RBLOCK])
        tmp252 = _tmp251 + tmp250
        _tmp251 = tl.where(rmask, tmp252, _tmp251)
        tmp255 = tmp253 + tmp254
        tmp257 = tmp255 + tmp256
        tmp258 = tmp169 * tmp257
        tmp259 = tl.broadcast_to(tmp258, [XBLOCK, RBLOCK])
        tmp261 = _tmp260 + tmp259
        _tmp260 = tl.where(rmask, tmp261, _tmp260)
        tmp264 = tmp262 + tmp263
        tmp265 = tmp169 * tmp264
        tmp266 = tl.broadcast_to(tmp265, [XBLOCK, RBLOCK])
        tmp268 = _tmp267 + tmp266
        _tmp267 = tl.where(rmask, tmp268, _tmp267)
        tmp270 = tmp131 * tmp269
        tmp271 = 0.0
        tmp272 = tmp270 + tmp271
        tmp274 = tmp272 + tmp273
        tmp276 = tmp274 + tmp275
        tmp277 = tmp169 * tmp276
        tmp278 = tl.broadcast_to(tmp277, [XBLOCK, RBLOCK])
        tmp280 = _tmp279 + tmp278
        _tmp279 = tl.where(rmask, tmp280, _tmp279)
        tmp282 = tmp269 + tmp281
        tmp284 = tmp282 + tmp283
        tmp285 = tmp169 * tmp284
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp289 = tmp169 * tmp269
        tmp290 = tl.broadcast_to(tmp289, [XBLOCK, RBLOCK])
        tmp292 = _tmp291 + tmp290
        _tmp291 = tl.where(rmask, tmp292, _tmp291)
    tmp175 = tl.sum(_tmp175, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp175, None)
    tmp182 = tl.sum(_tmp182, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp182, None)
    tmp191 = tl.sum(_tmp191, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp191, None)
    tmp198 = tl.sum(_tmp198, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp198, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp205, None)
    tmp214 = tl.sum(_tmp214, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp214, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp221, None)
    tmp228 = tl.sum(_tmp228, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp228, None)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp237, None)
    tmp244 = tl.sum(_tmp244, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp244, None)
    tmp251 = tl.sum(_tmp251, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp251, None)
    tmp260 = tl.sum(_tmp260, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp260, None)
    tmp267 = tl.sum(_tmp267, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp267, None)
    tmp279 = tl.sum(_tmp279, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp279, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp287, None)
    tmp291 = tl.sum(_tmp291, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp291, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lo/clo4dugu3fdz7j7xx2lezyyjbqzybsjrwiubldzmbcjgysbgwucm.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_133 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_133', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_133', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(62,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_133(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, xnumel, XBLOCK : tl.constexpr):
    xnumel = 417792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 104448)
    x0 = xindex % 17
    x1 = (xindex // 17) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp205 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp246 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp250 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp254 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp258 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp262 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr57 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp270 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp278 = tl.load(in_ptr60 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 15, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 14, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 13, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 12, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 11, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 10, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 9, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 8, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 7, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 6, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 5, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tl.full([1], 4, tl.int32)
    tmp71 = tmp3 == tmp70
    tmp73 = tl.where(tmp71, tmp72, tmp7)
    tmp74 = tl.where(tmp2, tmp73, tmp7)
    tmp75 = tmp69 + tmp74
    tmp76 = tmp3 == tmp1
    tmp78 = tl.where(tmp76, tmp77, tmp7)
    tmp79 = tl.where(tmp2, tmp78, tmp7)
    tmp80 = tmp75 + tmp79
    tmp81 = tl.full([1], 2, tl.int32)
    tmp82 = tmp3 == tmp81
    tmp84 = tl.where(tmp82, tmp83, tmp7)
    tmp85 = tl.where(tmp2, tmp84, tmp7)
    tmp86 = tmp80 + tmp85
    tmp87 = tl.full([1], 1, tl.int32)
    tmp88 = tmp3 == tmp87
    tmp90 = tl.where(tmp88, tmp89, tmp7)
    tmp91 = tl.where(tmp2, tmp90, tmp7)
    tmp92 = tmp86 + tmp91
    tmp93 = tl.full([1], 0, tl.int32)
    tmp94 = tmp3 == tmp93
    tmp96 = tl.where(tmp94, tmp95, tmp7)
    tmp97 = tl.where(tmp2, tmp96, tmp7)
    tmp98 = tmp92 + tmp97
    tmp99 = tmp0 == tmp81
    tmp101 = tl.where(tmp5, tmp100, tmp7)
    tmp102 = tl.where(tmp99, tmp101, tmp7)
    tmp103 = tmp98 + tmp102
    tmp105 = tl.where(tmp11, tmp104, tmp7)
    tmp106 = tl.where(tmp99, tmp105, tmp7)
    tmp107 = tmp103 + tmp106
    tmp109 = tl.where(tmp17, tmp108, tmp7)
    tmp110 = tl.where(tmp99, tmp109, tmp7)
    tmp111 = tmp107 + tmp110
    tmp113 = tl.where(tmp23, tmp112, tmp7)
    tmp114 = tl.where(tmp99, tmp113, tmp7)
    tmp115 = tmp111 + tmp114
    tmp117 = tl.where(tmp29, tmp116, tmp7)
    tmp118 = tl.where(tmp99, tmp117, tmp7)
    tmp119 = tmp115 + tmp118
    tmp121 = tl.where(tmp35, tmp120, tmp7)
    tmp122 = tl.where(tmp99, tmp121, tmp7)
    tmp123 = tmp119 + tmp122
    tmp125 = tl.where(tmp41, tmp124, tmp7)
    tmp126 = tl.where(tmp99, tmp125, tmp7)
    tmp127 = tmp123 + tmp126
    tmp129 = tl.where(tmp47, tmp128, tmp7)
    tmp130 = tl.where(tmp99, tmp129, tmp7)
    tmp131 = tmp127 + tmp130
    tmp133 = tl.where(tmp53, tmp132, tmp7)
    tmp134 = tl.where(tmp99, tmp133, tmp7)
    tmp135 = tmp131 + tmp134
    tmp137 = tl.where(tmp59, tmp136, tmp7)
    tmp138 = tl.where(tmp99, tmp137, tmp7)
    tmp139 = tmp135 + tmp138
    tmp141 = tl.where(tmp65, tmp140, tmp7)
    tmp142 = tl.where(tmp99, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp145 = tl.where(tmp71, tmp144, tmp7)
    tmp146 = tl.where(tmp99, tmp145, tmp7)
    tmp147 = tmp143 + tmp146
    tmp149 = tl.where(tmp76, tmp148, tmp7)
    tmp150 = tl.where(tmp99, tmp149, tmp7)
    tmp151 = tmp147 + tmp150
    tmp153 = tl.where(tmp82, tmp152, tmp7)
    tmp154 = tl.where(tmp99, tmp153, tmp7)
    tmp155 = tmp151 + tmp154
    tmp157 = tl.where(tmp88, tmp156, tmp7)
    tmp158 = tl.where(tmp99, tmp157, tmp7)
    tmp159 = tmp155 + tmp158
    tmp161 = tl.where(tmp94, tmp160, tmp7)
    tmp162 = tl.where(tmp99, tmp161, tmp7)
    tmp163 = tmp159 + tmp162
    tmp164 = tmp0 == tmp87
    tmp166 = tl.where(tmp5, tmp165, tmp7)
    tmp167 = tl.where(tmp164, tmp166, tmp7)
    tmp168 = tmp163 + tmp167
    tmp170 = tl.where(tmp11, tmp169, tmp7)
    tmp171 = tl.where(tmp164, tmp170, tmp7)
    tmp172 = tmp168 + tmp171
    tmp174 = tl.where(tmp17, tmp173, tmp7)
    tmp175 = tl.where(tmp164, tmp174, tmp7)
    tmp176 = tmp172 + tmp175
    tmp178 = tl.where(tmp23, tmp177, tmp7)
    tmp179 = tl.where(tmp164, tmp178, tmp7)
    tmp180 = tmp176 + tmp179
    tmp182 = tl.where(tmp29, tmp181, tmp7)
    tmp183 = tl.where(tmp164, tmp182, tmp7)
    tmp184 = tmp180 + tmp183
    tmp186 = tl.where(tmp35, tmp185, tmp7)
    tmp187 = tl.where(tmp164, tmp186, tmp7)
    tmp188 = tmp184 + tmp187
    tmp190 = tl.where(tmp41, tmp189, tmp7)
    tmp191 = tl.where(tmp164, tmp190, tmp7)
    tmp192 = tmp188 + tmp191
    tmp194 = tl.where(tmp47, tmp193, tmp7)
    tmp195 = tl.where(tmp164, tmp194, tmp7)
    tmp196 = tmp192 + tmp195
    tmp198 = tl.where(tmp53, tmp197, tmp7)
    tmp199 = tl.where(tmp164, tmp198, tmp7)
    tmp200 = tmp196 + tmp199
    tmp202 = tl.where(tmp59, tmp201, tmp7)
    tmp203 = tl.where(tmp164, tmp202, tmp7)
    tmp204 = tmp200 + tmp203
    tmp206 = tl.where(tmp65, tmp205, tmp7)
    tmp207 = tl.where(tmp164, tmp206, tmp7)
    tmp208 = tmp204 + tmp207
    tmp210 = tl.where(tmp71, tmp209, tmp7)
    tmp211 = tl.where(tmp164, tmp210, tmp7)
    tmp212 = tmp208 + tmp211
    tmp214 = tl.where(tmp76, tmp213, tmp7)
    tmp215 = tl.where(tmp164, tmp214, tmp7)
    tmp216 = tmp212 + tmp215
    tmp218 = tl.where(tmp82, tmp217, tmp7)
    tmp219 = tl.where(tmp164, tmp218, tmp7)
    tmp220 = tmp216 + tmp219
    tmp222 = tl.where(tmp88, tmp221, tmp7)
    tmp223 = tl.where(tmp164, tmp222, tmp7)
    tmp224 = tmp220 + tmp223
    tmp226 = tl.where(tmp94, tmp225, tmp7)
    tmp227 = tl.where(tmp164, tmp226, tmp7)
    tmp228 = tmp224 + tmp227
    tmp229 = tmp0 == tmp93
    tmp231 = tl.where(tmp5, tmp230, tmp7)
    tmp232 = tl.where(tmp229, tmp231, tmp7)
    tmp233 = tmp228 + tmp232
    tmp235 = tl.where(tmp11, tmp234, tmp7)
    tmp236 = tl.where(tmp229, tmp235, tmp7)
    tmp237 = tmp233 + tmp236
    tmp239 = tl.where(tmp17, tmp238, tmp7)
    tmp240 = tl.where(tmp229, tmp239, tmp7)
    tmp241 = tmp237 + tmp240
    tmp243 = tl.where(tmp23, tmp242, tmp7)
    tmp244 = tl.where(tmp229, tmp243, tmp7)
    tmp245 = tmp241 + tmp244
    tmp247 = tl.where(tmp29, tmp246, tmp7)
    tmp248 = tl.where(tmp229, tmp247, tmp7)
    tmp249 = tmp245 + tmp248
    tmp251 = tl.where(tmp35, tmp250, tmp7)
    tmp252 = tl.where(tmp229, tmp251, tmp7)
    tmp253 = tmp249 + tmp252
    tmp255 = tl.where(tmp41, tmp254, tmp7)
    tmp256 = tl.where(tmp229, tmp255, tmp7)
    tmp257 = tmp253 + tmp256
    tmp259 = tl.where(tmp47, tmp258, tmp7)
    tmp260 = tl.where(tmp229, tmp259, tmp7)
    tmp261 = tmp257 + tmp260
    tmp263 = tl.where(tmp53, tmp262, tmp7)
    tmp264 = tl.where(tmp229, tmp263, tmp7)
    tmp265 = tmp261 + tmp264
    tmp267 = tl.where(tmp59, tmp266, tmp7)
    tmp268 = tl.where(tmp229, tmp267, tmp7)
    tmp269 = tmp265 + tmp268
    tmp271 = tl.where(tmp65, tmp270, tmp7)
    tmp272 = tl.where(tmp229, tmp271, tmp7)
    tmp273 = tmp269 + tmp272
    tmp275 = tl.where(tmp71, tmp274, tmp7)
    tmp276 = tl.where(tmp229, tmp275, tmp7)
    tmp277 = tmp273 + tmp276
    tmp279 = tl.where(tmp76, tmp278, tmp7)
    tmp280 = tl.where(tmp229, tmp279, tmp7)
    tmp281 = tmp277 + tmp280
    tl.store(in_out_ptr0 + (x3), tmp281, None)
''')


# kernel path: /tmp/torchinductor_mengqy/mb/cmbqojx74bgrvdfhutmvezbykqdwxjmsutmd6tka63mf6spzs3ho.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_134 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_134', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_134', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_134(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 3264
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 17
    x4 = (xindex // 17)
    x2 = (xindex // 816)
    x1 = (xindex // 17) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (17*r3) + (2176*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ud/cudsu3mcm7c226vsxfdswuy237gglah6sli7wuml22mgut46e4b7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_135 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_135', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_135', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_135(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 68
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 17
    x1 = (xindex // 17)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (17*r2) + (816*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ts/ctsyngzipparciuscye6axnpatob2btpyxgoeviydihs7em7x4i5.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_136 = async_compile.triton('triton_poi_fused_clone_136', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_136', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_136(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 417792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 17
    x1 = (xindex // 17) % 4
    x2 = (xindex // 68)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (17*x2) + (104448*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2z/c2zomd7egsk34ng7z5achlzt5np7gbdb5trwkm6ag7ici25asyc5.py
# Source Nodes: [l__mod___dynamic_dense_15_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_15_act => add_652, convert_element_type_282, erf_15, mul_904
triton_poi_fused_gelu_gelu_backward_137 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_137', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_137', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_137(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 417792
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/m5/cm5ocrmhl7bigibhg36ircn55z6wqxuy2fdpexodqzv2mp44rytb.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_495, add_5, add_50, add_527, add_72, add_96, add_98, float_1, float_3, mean, mean_2, mul, mul_4, mul_511, mul_6, rsqrt, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_718
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_450 => add_579
# add_495 => add_645
# add_5 => add_12, add_5
# add_50 => add_89
# add_527 => add_669
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_284
# float_3 => convert_element_type_270
# mean => mean_78
# mean_2 => mean_75
# mul => mul_970
# mul_4 => mul_24
# mul_511 => mul_921
# mul_6 => mul_885
# rsqrt => rsqrt_78
# rsqrt_2 => rsqrt_75
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_138 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_138', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp32', 19: '*fp16', 20: '*fp16', 21: '*fp32', 22: '*fp32', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: 'i32', 128: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr14', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_138', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(127, 128))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_138(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_out_ptr14, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp38 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
    tmp47 = tl.load(in_ptr8 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp51 = tl.load(in_ptr10 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr11 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr12 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr13 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr14 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr15 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr16 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr17 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr18 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr19 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr20 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr21 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr22 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr23 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr24 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr25 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr26 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr27 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr28 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr29 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr30 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr31 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr32 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr33 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr34 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr35 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr36 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr37 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr38 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr39 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr40 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr41 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr42 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr43 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr44 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr45 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr46 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr47 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr48 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr49 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr50 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr51 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr52 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr53 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp202 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0)
        tmp50 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp87 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp97 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp147 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp157 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp167 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(in_out_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp39 = tmp38 / tmp15
        tmp40 = tmp39 + tmp17
        tmp41 = tl.math.rsqrt(tmp40)
        tmp42 = tmp37 * tmp41
        tmp44 = tmp42 + tmp43
        tmp45 = tmp44 + tmp43
        tmp46 = tmp45.to(tl.float32)
        tmp48 = tmp46 * tmp47
        tmp49 = tmp33 + tmp48
        tmp52 = tmp50 * tmp51
        tmp53 = tmp49 + tmp52
        tmp55 = tmp32 * tmp54
        tmp56 = tmp53 + tmp55
        tmp59 = tmp46 * tmp58
        tmp60 = tmp57 + tmp59
        tmp62 = tmp50 * tmp61
        tmp63 = tmp60 + tmp62
        tmp65 = tmp32 * tmp64
        tmp66 = tmp63 + tmp65
        tmp69 = tmp46 * tmp68
        tmp70 = tmp67 + tmp69
        tmp72 = tmp50 * tmp71
        tmp73 = tmp70 + tmp72
        tmp75 = tmp32 * tmp74
        tmp76 = tmp73 + tmp75
        tmp79 = tmp46 * tmp78
        tmp80 = tmp77 + tmp79
        tmp82 = tmp50 * tmp81
        tmp83 = tmp80 + tmp82
        tmp85 = tmp32 * tmp84
        tmp86 = tmp83 + tmp85
        tmp89 = tmp46 * tmp88
        tmp90 = tmp87 + tmp89
        tmp92 = tmp50 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp32 * tmp94
        tmp96 = tmp93 + tmp95
        tmp99 = tmp46 * tmp98
        tmp100 = tmp97 + tmp99
        tmp102 = tmp50 * tmp101
        tmp103 = tmp100 + tmp102
        tmp105 = tmp32 * tmp104
        tmp106 = tmp103 + tmp105
        tmp109 = tmp46 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp50 * tmp111
        tmp113 = tmp110 + tmp112
        tmp115 = tmp32 * tmp114
        tmp116 = tmp113 + tmp115
        tmp119 = tmp46 * tmp118
        tmp120 = tmp117 + tmp119
        tmp122 = tmp50 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp32 * tmp124
        tmp126 = tmp123 + tmp125
        tmp129 = tmp46 * tmp128
        tmp130 = tmp127 + tmp129
        tmp132 = tmp50 * tmp131
        tmp133 = tmp130 + tmp132
        tmp135 = tmp32 * tmp134
        tmp136 = tmp133 + tmp135
        tmp139 = tmp46 * tmp138
        tmp140 = tmp137 + tmp139
        tmp142 = tmp50 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp32 * tmp144
        tmp146 = tmp143 + tmp145
        tmp149 = tmp46 * tmp148
        tmp150 = tmp147 + tmp149
        tmp152 = tmp50 * tmp151
        tmp153 = tmp150 + tmp152
        tmp155 = tmp32 * tmp154
        tmp156 = tmp153 + tmp155
        tmp159 = tmp46 * tmp158
        tmp160 = tmp157 + tmp159
        tmp162 = tmp50 * tmp161
        tmp163 = tmp160 + tmp162
        tmp165 = tmp32 * tmp164
        tmp166 = tmp163 + tmp165
        tmp169 = tmp46 * tmp168
        tmp170 = tmp167 + tmp169
        tmp172 = tmp50 * tmp171
        tmp173 = tmp170 + tmp172
        tmp175 = tmp32 * tmp174
        tmp176 = tmp173 + tmp175
        tmp179 = tmp46 * tmp178
        tmp180 = tmp177 + tmp179
        tmp182 = tmp50 * tmp181
        tmp183 = tmp180 + tmp182
        tmp185 = tmp32 * tmp184
        tmp186 = tmp183 + tmp185
        tmp189 = tmp46 * tmp188
        tmp190 = tmp187 + tmp189
        tmp192 = tmp50 * tmp191
        tmp193 = tmp190 + tmp192
        tmp195 = tmp32 * tmp194
        tmp196 = tmp193 + tmp195
        tmp199 = tmp197 + tmp198
        tmp200 = tmp50 * tmp199
        tmp201 = tl.broadcast_to(tmp200, [XBLOCK, RBLOCK])
        tmp203 = _tmp202 + tmp201
        _tmp202 = tl.where(rmask, tmp203, _tmp202)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp56, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp76, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp96, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp116, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp136, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp146, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp156, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp166, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp176, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp186, rmask)
        tl.store(in_out_ptr14 + (r1 + (2048*x0)), tmp196, rmask)
    tmp202 = tl.sum(_tmp202, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp202, None)
    _tmp210 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp220 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp224 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp231 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp235 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp242 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp246 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp255 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp259 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp277 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp281 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp290 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp294 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp301 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp308 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp317 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp324 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp326 = tl.load(in_ptr82 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp337 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp345 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp349 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp204 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp213 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp214 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp248 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp249 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp262 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp273 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp283 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp286 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp296 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp297 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp303 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp304 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp310 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp311 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp313 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp320 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp327 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp331 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tmp205 + tmp206
        tmp208 = tmp204 * tmp207
        tmp209 = tl.broadcast_to(tmp208, [XBLOCK, RBLOCK])
        tmp211 = _tmp210 + tmp209
        _tmp210 = tl.where(rmask, tmp211, _tmp210)
        tmp215 = tmp213 + tmp214
        tmp217 = tmp215 + tmp216
        tmp218 = tmp212 * tmp217
        tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
        tmp221 = _tmp220 + tmp219
        _tmp220 = tl.where(rmask, tmp221, _tmp220)
        tmp222 = tmp204 * tmp217
        tmp223 = tl.broadcast_to(tmp222, [XBLOCK, RBLOCK])
        tmp225 = _tmp224 + tmp223
        _tmp224 = tl.where(rmask, tmp225, _tmp224)
        tmp228 = tmp226 + tmp227
        tmp229 = tmp212 * tmp228
        tmp230 = tl.broadcast_to(tmp229, [XBLOCK, RBLOCK])
        tmp232 = _tmp231 + tmp230
        _tmp231 = tl.where(rmask, tmp232, _tmp231)
        tmp233 = tmp204 * tmp228
        tmp234 = tl.broadcast_to(tmp233, [XBLOCK, RBLOCK])
        tmp236 = _tmp235 + tmp234
        _tmp235 = tl.where(rmask, tmp236, _tmp235)
        tmp239 = tmp237 + tmp238
        tmp240 = tmp212 * tmp239
        tmp241 = tl.broadcast_to(tmp240, [XBLOCK, RBLOCK])
        tmp243 = _tmp242 + tmp241
        _tmp242 = tl.where(rmask, tmp243, _tmp242)
        tmp244 = tmp204 * tmp239
        tmp245 = tl.broadcast_to(tmp244, [XBLOCK, RBLOCK])
        tmp247 = _tmp246 + tmp245
        _tmp246 = tl.where(rmask, tmp247, _tmp246)
        tmp250 = tmp248 + tmp249
        tmp252 = tmp250 + tmp251
        tmp253 = tmp212 * tmp252
        tmp254 = tl.broadcast_to(tmp253, [XBLOCK, RBLOCK])
        tmp256 = _tmp255 + tmp254
        _tmp255 = tl.where(rmask, tmp256, _tmp255)
        tmp257 = tmp204 * tmp252
        tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
        tmp260 = _tmp259 + tmp258
        _tmp259 = tl.where(rmask, tmp260, _tmp259)
        tmp263 = tmp261 + tmp262
        tmp264 = tmp212 * tmp263
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tmp268 = tmp204 * tmp263
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp274 = tmp272 + tmp273
        tmp275 = tmp212 * tmp274
        tmp276 = tl.broadcast_to(tmp275, [XBLOCK, RBLOCK])
        tmp278 = _tmp277 + tmp276
        _tmp277 = tl.where(rmask, tmp278, _tmp277)
        tmp279 = tmp204 * tmp274
        tmp280 = tl.broadcast_to(tmp279, [XBLOCK, RBLOCK])
        tmp282 = _tmp281 + tmp280
        _tmp281 = tl.where(rmask, tmp282, _tmp281)
        tmp285 = tmp283 + tmp284
        tmp287 = tmp285 + tmp286
        tmp288 = tmp212 * tmp287
        tmp289 = tl.broadcast_to(tmp288, [XBLOCK, RBLOCK])
        tmp291 = _tmp290 + tmp289
        _tmp290 = tl.where(rmask, tmp291, _tmp290)
        tmp292 = tmp204 * tmp287
        tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
        tmp295 = _tmp294 + tmp293
        _tmp294 = tl.where(rmask, tmp295, _tmp294)
        tmp298 = tmp296 + tmp297
        tmp299 = tmp212 * tmp298
        tmp300 = tl.broadcast_to(tmp299, [XBLOCK, RBLOCK])
        tmp302 = _tmp301 + tmp300
        _tmp301 = tl.where(rmask, tmp302, _tmp301)
        tmp305 = tmp303 + tmp304
        tmp306 = tmp212 * tmp305
        tmp307 = tl.broadcast_to(tmp306, [XBLOCK, RBLOCK])
        tmp309 = _tmp308 + tmp307
        _tmp308 = tl.where(rmask, tmp309, _tmp308)
        tmp312 = tmp310 + tmp311
        tmp314 = tmp312 + tmp313
        tmp315 = tmp212 * tmp314
        tmp316 = tl.broadcast_to(tmp315, [XBLOCK, RBLOCK])
        tmp318 = _tmp317 + tmp316
        _tmp317 = tl.where(rmask, tmp318, _tmp317)
        tmp321 = tmp319 + tmp320
        tmp322 = tmp212 * tmp321
        tmp323 = tl.broadcast_to(tmp322, [XBLOCK, RBLOCK])
        tmp325 = _tmp324 + tmp323
        _tmp324 = tl.where(rmask, tmp325, _tmp324)
        tmp328 = tmp326 * tmp327
        tmp329 = 0.0
        tmp330 = tmp328 + tmp329
        tmp332 = tmp330 + tmp331
        tmp334 = tmp332 + tmp333
        tmp335 = tmp212 * tmp334
        tmp336 = tl.broadcast_to(tmp335, [XBLOCK, RBLOCK])
        tmp338 = _tmp337 + tmp336
        _tmp337 = tl.where(rmask, tmp338, _tmp337)
        tmp340 = tmp327 + tmp339
        tmp342 = tmp340 + tmp341
        tmp343 = tmp212 * tmp342
        tmp344 = tl.broadcast_to(tmp343, [XBLOCK, RBLOCK])
        tmp346 = _tmp345 + tmp344
        _tmp345 = tl.where(rmask, tmp346, _tmp345)
        tmp347 = tmp212 * tmp327
        tmp348 = tl.broadcast_to(tmp347, [XBLOCK, RBLOCK])
        tmp350 = _tmp349 + tmp348
        _tmp349 = tl.where(rmask, tmp350, _tmp349)
    tmp210 = tl.sum(_tmp210, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp210, None)
    tmp220 = tl.sum(_tmp220, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp220, None)
    tmp224 = tl.sum(_tmp224, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp224, None)
    tmp231 = tl.sum(_tmp231, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp231, None)
    tmp235 = tl.sum(_tmp235, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp235, None)
    tmp242 = tl.sum(_tmp242, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp242, None)
    tmp246 = tl.sum(_tmp246, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp246, None)
    tmp255 = tl.sum(_tmp255, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp255, None)
    tmp259 = tl.sum(_tmp259, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp259, None)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp266, None)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp270, None)
    tmp277 = tl.sum(_tmp277, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp277, None)
    tmp281 = tl.sum(_tmp281, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp281, None)
    tmp290 = tl.sum(_tmp290, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp290, None)
    tmp294 = tl.sum(_tmp294, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp294, None)
    tmp301 = tl.sum(_tmp301, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp301, None)
    tmp308 = tl.sum(_tmp308, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp308, None)
    tmp317 = tl.sum(_tmp317, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp317, None)
    tmp324 = tl.sum(_tmp324, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp324, None)
    tmp337 = tl.sum(_tmp337, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp337, None)
    tmp345 = tl.sum(_tmp345, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp345, None)
    tmp349 = tl.sum(_tmp349, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp349, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hw/chwoacnkd36kna3kdamrno7suyqfe6uqlbv4co34lhif7rrg2ahk.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_480, add_5, add_50, add_72, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_643
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_392 => add_512
# add_480 => add_644
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_266
# float_2 => convert_element_type_268
# mean => mean_73
# mean_1 => mean_74
# mul => mul_879
# mul_3 => mul_882
# mul_4 => mul_24
# rsqrt => rsqrt_73
# rsqrt_1 => rsqrt_74
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_139 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_139', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: 'i32', 83: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_139', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(82, 83))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_139(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, out_ptr1, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp38 = tmp37.to(tl.float32)
        tmp39 = tmp36 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tmp47 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp71 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp76 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp43 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp46 = tmp45.to(tl.float32)
        tmp48 = 2048.0
        tmp49 = tmp47 / tmp48
        tmp50 = 1e-05
        tmp51 = tmp49 + tmp50
        tmp52 = tl.math.rsqrt(tmp51)
        tmp53 = tmp46 * tmp52
        tmp54 = -0.5
        tmp55 = tmp41 * tmp54
        tmp56 = tmp52 * tmp52
        tmp57 = tmp56 * tmp52
        tmp58 = tmp55 * tmp57
        tmp59 = tmp58 / tmp48
        tmp61 = tmp60.to(tl.float32)
        tmp62 = tmp59 * tmp61
        tmp63 = tmp53 + tmp62
        tmp64 = tmp63 + tmp62
        tmp65 = tmp64.to(tl.float32)
        tmp68 = tmp66 + tmp67
        tmp69 = tmp65 * tmp68
        tmp70 = tl.broadcast_to(tmp69, [XBLOCK, RBLOCK])
        tmp72 = _tmp71 + tmp70
        _tmp71 = tl.where(rmask, tmp72, _tmp71)
        tmp74 = tmp73 * tmp68
        tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
        tmp77 = _tmp76 + tmp75
        _tmp76 = tl.where(rmask, tmp77, _tmp76)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp65, rmask)
    tmp71 = tl.sum(_tmp71, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp71, None)
    tmp76 = tl.sum(_tmp76, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp76, None)
    _tmp86 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp91 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp98 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp102 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp109 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp113 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp126 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp137 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp144 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp148 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp173 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp201 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp216 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp220 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp224 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp226 = tl.load(in_ptr37 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp241 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp261 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp265 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp269 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp78 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp105 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp128 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp211 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp233 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp249 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tmp79 + tmp80
        tmp83 = tmp81 + tmp82
        tmp84 = tmp78 * tmp83
        tmp85 = tl.broadcast_to(tmp84, [XBLOCK, RBLOCK])
        tmp87 = _tmp86 + tmp85
        _tmp86 = tl.where(rmask, tmp87, _tmp86)
        tmp89 = tmp88 * tmp83
        tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
        tmp92 = _tmp91 + tmp90
        _tmp91 = tl.where(rmask, tmp92, _tmp91)
        tmp95 = tmp93 + tmp94
        tmp96 = tmp78 * tmp95
        tmp97 = tl.broadcast_to(tmp96, [XBLOCK, RBLOCK])
        tmp99 = _tmp98 + tmp97
        _tmp98 = tl.where(rmask, tmp99, _tmp98)
        tmp100 = tmp88 * tmp95
        tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
        tmp103 = _tmp102 + tmp101
        _tmp102 = tl.where(rmask, tmp103, _tmp102)
        tmp106 = tmp104 + tmp105
        tmp107 = tmp78 * tmp106
        tmp108 = tl.broadcast_to(tmp107, [XBLOCK, RBLOCK])
        tmp110 = _tmp109 + tmp108
        _tmp109 = tl.where(rmask, tmp110, _tmp109)
        tmp111 = tmp88 * tmp106
        tmp112 = tl.broadcast_to(tmp111, [XBLOCK, RBLOCK])
        tmp114 = _tmp113 + tmp112
        _tmp113 = tl.where(rmask, tmp114, _tmp113)
        tmp117 = tmp115 + tmp116
        tmp119 = tmp117 + tmp118
        tmp120 = tmp78 * tmp119
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp124 = tmp88 * tmp119
        tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
        tmp127 = _tmp126 + tmp125
        _tmp126 = tl.where(rmask, tmp127, _tmp126)
        tmp130 = tmp128 + tmp129
        tmp131 = tmp78 * tmp130
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp135 = tmp88 * tmp130
        tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
        tmp138 = _tmp137 + tmp136
        _tmp137 = tl.where(rmask, tmp138, _tmp137)
        tmp141 = tmp139 + tmp140
        tmp142 = tmp78 * tmp141
        tmp143 = tl.broadcast_to(tmp142, [XBLOCK, RBLOCK])
        tmp145 = _tmp144 + tmp143
        _tmp144 = tl.where(rmask, tmp145, _tmp144)
        tmp146 = tmp88 * tmp141
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
        tmp149 = _tmp148 + tmp147
        _tmp148 = tl.where(rmask, tmp149, _tmp148)
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp78 * tmp154
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp159 = tmp88 * tmp154
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tmp166 = tmp164 + tmp165
        tmp167 = tmp163 * tmp166
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tmp171 = tmp78 * tmp166
        tmp172 = tl.broadcast_to(tmp171, [XBLOCK, RBLOCK])
        tmp174 = _tmp173 + tmp172
        _tmp173 = tl.where(rmask, tmp174, _tmp173)
        tmp175 = tmp88 * tmp166
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp181 = tmp179 + tmp180
        tmp182 = tmp163 * tmp181
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp186 = tmp78 * tmp181
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp88 * tmp181
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp196 = tmp194 + tmp195
        tmp198 = tmp196 + tmp197
        tmp199 = tmp163 * tmp198
        tmp200 = tl.broadcast_to(tmp199, [XBLOCK, RBLOCK])
        tmp202 = _tmp201 + tmp200
        _tmp201 = tl.where(rmask, tmp202, _tmp201)
        tmp203 = tmp78 * tmp198
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp88 * tmp198
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp213 = tmp211 + tmp212
        tmp214 = tmp163 * tmp213
        tmp215 = tl.broadcast_to(tmp214, [XBLOCK, RBLOCK])
        tmp217 = _tmp216 + tmp215
        _tmp216 = tl.where(rmask, tmp217, _tmp216)
        tmp218 = tmp78 * tmp213
        tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
        tmp221 = _tmp220 + tmp219
        _tmp220 = tl.where(rmask, tmp221, _tmp220)
        tmp222 = tmp88 * tmp213
        tmp223 = tl.broadcast_to(tmp222, [XBLOCK, RBLOCK])
        tmp225 = _tmp224 + tmp223
        _tmp224 = tl.where(rmask, tmp225, _tmp224)
        tmp228 = tmp226 * tmp227
        tmp229 = 0.0
        tmp230 = tmp228 + tmp229
        tmp232 = tmp230 + tmp231
        tmp234 = tmp232 + tmp233
        tmp235 = tmp163 * tmp234
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tmp239 = tmp78 * tmp234
        tmp240 = tl.broadcast_to(tmp239, [XBLOCK, RBLOCK])
        tmp242 = _tmp241 + tmp240
        _tmp241 = tl.where(rmask, tmp242, _tmp241)
        tmp243 = tmp88 * tmp234
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp248 = tmp227 + tmp247
        tmp250 = tmp248 + tmp249
        tmp251 = tmp163 * tmp250
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp255 = tmp78 * tmp250
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp259 = tmp88 * tmp250
        tmp260 = tl.broadcast_to(tmp259, [XBLOCK, RBLOCK])
        tmp262 = _tmp261 + tmp260
        _tmp261 = tl.where(rmask, tmp262, _tmp261)
        tmp263 = tmp78 * tmp227
        tmp264 = tl.broadcast_to(tmp263, [XBLOCK, RBLOCK])
        tmp266 = _tmp265 + tmp264
        _tmp265 = tl.where(rmask, tmp266, _tmp265)
        tmp267 = tmp88 * tmp227
        tmp268 = tl.broadcast_to(tmp267, [XBLOCK, RBLOCK])
        tmp270 = _tmp269 + tmp268
        _tmp269 = tl.where(rmask, tmp270, _tmp269)
        tmp271 = tmp163 * tmp227
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
    tmp86 = tl.sum(_tmp86, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp86, None)
    tmp91 = tl.sum(_tmp91, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp91, None)
    tmp98 = tl.sum(_tmp98, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp98, None)
    tmp102 = tl.sum(_tmp102, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp102, None)
    tmp109 = tl.sum(_tmp109, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp109, None)
    tmp113 = tl.sum(_tmp113, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp113, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp122, None)
    tmp126 = tl.sum(_tmp126, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp126, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp133, None)
    tmp137 = tl.sum(_tmp137, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp137, None)
    tmp144 = tl.sum(_tmp144, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp144, None)
    tmp148 = tl.sum(_tmp148, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp148, None)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp157, None)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp161, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp169, None)
    tmp173 = tl.sum(_tmp173, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp173, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp177, None)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp184, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp192, None)
    tmp201 = tl.sum(_tmp201, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp201, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp209, None)
    tmp216 = tl.sum(_tmp216, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp216, None)
    tmp220 = tl.sum(_tmp220, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp220, None)
    tmp224 = tl.sum(_tmp224, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp224, None)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp237, None)
    tmp241 = tl.sum(_tmp241, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp241, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp245, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp253, None)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp257, None)
    tmp261 = tl.sum(_tmp261, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp261, None)
    tmp265 = tl.sum(_tmp265, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp265, None)
    tmp269 = tl.sum(_tmp269, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp269, None)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp273, None)
''')


# kernel path: /tmp/torchinductor_mengqy/gj/cgjocd6ahwoiwetum6mvdf5optdiqdrhoqtqevacesxblr7odd2l.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_140 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_140', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_140', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(58,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_140(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 98304)
    x0 = xindex % 16
    x1 = (xindex // 16) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp138 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp159 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp203 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp232 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr53 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp252 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp256 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp260 = tl.load(in_ptr56 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 14, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 13, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 12, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 11, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 10, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 9, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 8, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 7, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 6, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 5, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tl.full([1], 4, tl.int32)
    tmp65 = tmp3 == tmp64
    tmp67 = tl.where(tmp65, tmp66, tmp7)
    tmp68 = tl.where(tmp2, tmp67, tmp7)
    tmp69 = tmp63 + tmp68
    tmp70 = tmp3 == tmp1
    tmp72 = tl.where(tmp70, tmp71, tmp7)
    tmp73 = tl.where(tmp2, tmp72, tmp7)
    tmp74 = tmp69 + tmp73
    tmp75 = tl.full([1], 2, tl.int32)
    tmp76 = tmp3 == tmp75
    tmp78 = tl.where(tmp76, tmp77, tmp7)
    tmp79 = tl.where(tmp2, tmp78, tmp7)
    tmp80 = tmp74 + tmp79
    tmp81 = tl.full([1], 1, tl.int32)
    tmp82 = tmp3 == tmp81
    tmp84 = tl.where(tmp82, tmp83, tmp7)
    tmp85 = tl.where(tmp2, tmp84, tmp7)
    tmp86 = tmp80 + tmp85
    tmp87 = tl.full([1], 0, tl.int32)
    tmp88 = tmp3 == tmp87
    tmp90 = tl.where(tmp88, tmp89, tmp7)
    tmp91 = tl.where(tmp2, tmp90, tmp7)
    tmp92 = tmp86 + tmp91
    tmp93 = tmp0 == tmp75
    tmp95 = tl.where(tmp5, tmp94, tmp7)
    tmp96 = tl.where(tmp93, tmp95, tmp7)
    tmp97 = tmp92 + tmp96
    tmp99 = tl.where(tmp11, tmp98, tmp7)
    tmp100 = tl.where(tmp93, tmp99, tmp7)
    tmp101 = tmp97 + tmp100
    tmp103 = tl.where(tmp17, tmp102, tmp7)
    tmp104 = tl.where(tmp93, tmp103, tmp7)
    tmp105 = tmp101 + tmp104
    tmp107 = tl.where(tmp23, tmp106, tmp7)
    tmp108 = tl.where(tmp93, tmp107, tmp7)
    tmp109 = tmp105 + tmp108
    tmp111 = tl.where(tmp29, tmp110, tmp7)
    tmp112 = tl.where(tmp93, tmp111, tmp7)
    tmp113 = tmp109 + tmp112
    tmp115 = tl.where(tmp35, tmp114, tmp7)
    tmp116 = tl.where(tmp93, tmp115, tmp7)
    tmp117 = tmp113 + tmp116
    tmp119 = tl.where(tmp41, tmp118, tmp7)
    tmp120 = tl.where(tmp93, tmp119, tmp7)
    tmp121 = tmp117 + tmp120
    tmp123 = tl.where(tmp47, tmp122, tmp7)
    tmp124 = tl.where(tmp93, tmp123, tmp7)
    tmp125 = tmp121 + tmp124
    tmp127 = tl.where(tmp53, tmp126, tmp7)
    tmp128 = tl.where(tmp93, tmp127, tmp7)
    tmp129 = tmp125 + tmp128
    tmp131 = tl.where(tmp59, tmp130, tmp7)
    tmp132 = tl.where(tmp93, tmp131, tmp7)
    tmp133 = tmp129 + tmp132
    tmp135 = tl.where(tmp65, tmp134, tmp7)
    tmp136 = tl.where(tmp93, tmp135, tmp7)
    tmp137 = tmp133 + tmp136
    tmp139 = tl.where(tmp70, tmp138, tmp7)
    tmp140 = tl.where(tmp93, tmp139, tmp7)
    tmp141 = tmp137 + tmp140
    tmp143 = tl.where(tmp76, tmp142, tmp7)
    tmp144 = tl.where(tmp93, tmp143, tmp7)
    tmp145 = tmp141 + tmp144
    tmp147 = tl.where(tmp82, tmp146, tmp7)
    tmp148 = tl.where(tmp93, tmp147, tmp7)
    tmp149 = tmp145 + tmp148
    tmp151 = tl.where(tmp88, tmp150, tmp7)
    tmp152 = tl.where(tmp93, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp154 = tmp0 == tmp81
    tmp156 = tl.where(tmp5, tmp155, tmp7)
    tmp157 = tl.where(tmp154, tmp156, tmp7)
    tmp158 = tmp153 + tmp157
    tmp160 = tl.where(tmp11, tmp159, tmp7)
    tmp161 = tl.where(tmp154, tmp160, tmp7)
    tmp162 = tmp158 + tmp161
    tmp164 = tl.where(tmp17, tmp163, tmp7)
    tmp165 = tl.where(tmp154, tmp164, tmp7)
    tmp166 = tmp162 + tmp165
    tmp168 = tl.where(tmp23, tmp167, tmp7)
    tmp169 = tl.where(tmp154, tmp168, tmp7)
    tmp170 = tmp166 + tmp169
    tmp172 = tl.where(tmp29, tmp171, tmp7)
    tmp173 = tl.where(tmp154, tmp172, tmp7)
    tmp174 = tmp170 + tmp173
    tmp176 = tl.where(tmp35, tmp175, tmp7)
    tmp177 = tl.where(tmp154, tmp176, tmp7)
    tmp178 = tmp174 + tmp177
    tmp180 = tl.where(tmp41, tmp179, tmp7)
    tmp181 = tl.where(tmp154, tmp180, tmp7)
    tmp182 = tmp178 + tmp181
    tmp184 = tl.where(tmp47, tmp183, tmp7)
    tmp185 = tl.where(tmp154, tmp184, tmp7)
    tmp186 = tmp182 + tmp185
    tmp188 = tl.where(tmp53, tmp187, tmp7)
    tmp189 = tl.where(tmp154, tmp188, tmp7)
    tmp190 = tmp186 + tmp189
    tmp192 = tl.where(tmp59, tmp191, tmp7)
    tmp193 = tl.where(tmp154, tmp192, tmp7)
    tmp194 = tmp190 + tmp193
    tmp196 = tl.where(tmp65, tmp195, tmp7)
    tmp197 = tl.where(tmp154, tmp196, tmp7)
    tmp198 = tmp194 + tmp197
    tmp200 = tl.where(tmp70, tmp199, tmp7)
    tmp201 = tl.where(tmp154, tmp200, tmp7)
    tmp202 = tmp198 + tmp201
    tmp204 = tl.where(tmp76, tmp203, tmp7)
    tmp205 = tl.where(tmp154, tmp204, tmp7)
    tmp206 = tmp202 + tmp205
    tmp208 = tl.where(tmp82, tmp207, tmp7)
    tmp209 = tl.where(tmp154, tmp208, tmp7)
    tmp210 = tmp206 + tmp209
    tmp212 = tl.where(tmp88, tmp211, tmp7)
    tmp213 = tl.where(tmp154, tmp212, tmp7)
    tmp214 = tmp210 + tmp213
    tmp215 = tmp0 == tmp87
    tmp217 = tl.where(tmp5, tmp216, tmp7)
    tmp218 = tl.where(tmp215, tmp217, tmp7)
    tmp219 = tmp214 + tmp218
    tmp221 = tl.where(tmp11, tmp220, tmp7)
    tmp222 = tl.where(tmp215, tmp221, tmp7)
    tmp223 = tmp219 + tmp222
    tmp225 = tl.where(tmp17, tmp224, tmp7)
    tmp226 = tl.where(tmp215, tmp225, tmp7)
    tmp227 = tmp223 + tmp226
    tmp229 = tl.where(tmp23, tmp228, tmp7)
    tmp230 = tl.where(tmp215, tmp229, tmp7)
    tmp231 = tmp227 + tmp230
    tmp233 = tl.where(tmp29, tmp232, tmp7)
    tmp234 = tl.where(tmp215, tmp233, tmp7)
    tmp235 = tmp231 + tmp234
    tmp237 = tl.where(tmp35, tmp236, tmp7)
    tmp238 = tl.where(tmp215, tmp237, tmp7)
    tmp239 = tmp235 + tmp238
    tmp241 = tl.where(tmp41, tmp240, tmp7)
    tmp242 = tl.where(tmp215, tmp241, tmp7)
    tmp243 = tmp239 + tmp242
    tmp245 = tl.where(tmp47, tmp244, tmp7)
    tmp246 = tl.where(tmp215, tmp245, tmp7)
    tmp247 = tmp243 + tmp246
    tmp249 = tl.where(tmp53, tmp248, tmp7)
    tmp250 = tl.where(tmp215, tmp249, tmp7)
    tmp251 = tmp247 + tmp250
    tmp253 = tl.where(tmp59, tmp252, tmp7)
    tmp254 = tl.where(tmp215, tmp253, tmp7)
    tmp255 = tmp251 + tmp254
    tmp257 = tl.where(tmp65, tmp256, tmp7)
    tmp258 = tl.where(tmp215, tmp257, tmp7)
    tmp259 = tmp255 + tmp258
    tmp261 = tl.where(tmp70, tmp260, tmp7)
    tmp262 = tl.where(tmp215, tmp261, tmp7)
    tmp263 = tmp259 + tmp262
    tl.store(in_out_ptr0 + (x3), tmp263, None)
''')


# kernel path: /tmp/torchinductor_mengqy/7x/c7xfdgll33yzwawq2xbziy2rnptlphlv7n7whw4dj3gu24yq3xbv.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_141 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_141', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_141', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_141(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 3072
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 16
    x4 = (xindex // 16)
    x2 = (xindex // 768)
    x1 = (xindex // 16) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (16*r3) + (2048*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/yp/cyp77fpmqjhhqccvcomb2mimwewtydtpzt6bliuf4iacvipvkadv.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_142 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_142', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_142', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_142(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 16
    x1 = (xindex // 16)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (16*r2) + (768*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/bg/cbgcmx54femgr3vbuj3w4qazozcez6rosyqwrg6f3m56gvnp6ug7.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_143 = async_compile.triton('triton_poi_fused_clone_143', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_143', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_143(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 16
    x1 = (xindex // 16) % 4
    x2 = (xindex // 64)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (16*x2) + (98304*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hr/chrmcobhxjt4hg23fxy2wop573ck2fxz6ukv3leksqg5f45qoz6e.py
# Source Nodes: [l__mod___dynamic_dense_14_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_14_act => add_581, convert_element_type_264, erf_14, mul_817
triton_poi_fused_gelu_gelu_backward_144 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_144', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_144', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_144(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/p7/cp7ggapqax376vnzjwuubkbfyqe5l2ue6ssq64z72dic4aivzvmi.py
# Source Nodes: [add, add_450, add_527, float_1, mean, mul, mul_511, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
# add => add_718
# add_450 => add_579
# add_527 => add_669
# float_1 => convert_element_type_284
# mean => mean_78
# mul => mul_970
# mul_511 => mul_921
# rsqrt => rsqrt_78
triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_145 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_145', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_145', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_145(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp13 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr7 + (17*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp27 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 + tmp20
        tmp22 = tmp21 + tmp20
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp23 * tmp24
        tmp26 = tmp8 + tmp25
        tmp29 = tmp27 * tmp28
        tmp30 = tmp26 + tmp29
        tmp31 = -0.5
        tmp32 = tmp6 * tmp31
        tmp33 = tmp28 * tmp28
        tmp34 = tmp33 * tmp28
        tmp35 = tmp32 * tmp34
        tmp36 = tmp35 / tmp14
        tmp39 = tmp37 + tmp38
        tmp40 = 2.0
        tmp41 = tmp39 * tmp40
        tmp42 = tmp36 * tmp41
        tmp43 = tmp30 + tmp42
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp43, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ok/cok6so3kcgcuqmzplvikrq74e67a5kbt77vo2xsyu7hmyywftrsy.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_434, add_5, add_50, add_72, add_96, add_98, mean_2, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_434 => add_574
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mean_2 => mean_70
# mul_4 => mul_24
# mul_6 => mul_798
# rsqrt_2 => rsqrt_70
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_146 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_146', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp32', 17: '*fp32', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: 'i32', 132: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr13', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_146', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(131, 132))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_146(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_out_ptr13, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    tmp33 = tl.load(in_ptr5 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp37 = tl.load(in_ptr7 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr9 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr10 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr11 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp51 = tl.load(in_ptr12 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr13 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr14 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr15 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr16 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr17 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr18 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr19 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr20 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr21 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr22 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr23 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr24 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr25 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr26 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr27 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp103 = tl.load(in_ptr28 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr29 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp109 = tl.load(in_ptr30 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr31 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr32 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr33 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr34 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr35 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp129 = tl.load(in_ptr36 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr37 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp135 = tl.load(in_ptr38 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr39 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp142 = tl.load(in_ptr40 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr41 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr42 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr43 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr44 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr45 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr46 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr47 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr48 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr49 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr50 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr51 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr52 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr53 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr54 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr55 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr56 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr57 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr58 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr59 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp207 = tl.load(in_ptr60 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr61 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp213 = tl.load(in_ptr62 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp223 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp40 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp86 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp112 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp190 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp203 = tl.load(in_out_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp217 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp219 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp34 = tmp32 * tmp33
        tmp35 = tmp31 + tmp34
        tmp38 = tmp36 * tmp37
        tmp39 = tmp35 + tmp38
        tmp42 = tmp40 * tmp41
        tmp43 = tmp39 + tmp42
        tmp45 = tmp30 * tmp44
        tmp46 = tmp43 + tmp45
        tmp49 = tmp32 * tmp48
        tmp50 = tmp47 + tmp49
        tmp52 = tmp36 * tmp51
        tmp53 = tmp50 + tmp52
        tmp55 = tmp40 * tmp54
        tmp56 = tmp53 + tmp55
        tmp58 = tmp30 * tmp57
        tmp59 = tmp56 + tmp58
        tmp62 = tmp32 * tmp61
        tmp63 = tmp60 + tmp62
        tmp65 = tmp36 * tmp64
        tmp66 = tmp63 + tmp65
        tmp68 = tmp40 * tmp67
        tmp69 = tmp66 + tmp68
        tmp71 = tmp30 * tmp70
        tmp72 = tmp69 + tmp71
        tmp75 = tmp32 * tmp74
        tmp76 = tmp73 + tmp75
        tmp78 = tmp36 * tmp77
        tmp79 = tmp76 + tmp78
        tmp81 = tmp40 * tmp80
        tmp82 = tmp79 + tmp81
        tmp84 = tmp30 * tmp83
        tmp85 = tmp82 + tmp84
        tmp88 = tmp32 * tmp87
        tmp89 = tmp86 + tmp88
        tmp91 = tmp36 * tmp90
        tmp92 = tmp89 + tmp91
        tmp94 = tmp40 * tmp93
        tmp95 = tmp92 + tmp94
        tmp97 = tmp30 * tmp96
        tmp98 = tmp95 + tmp97
        tmp101 = tmp32 * tmp100
        tmp102 = tmp99 + tmp101
        tmp104 = tmp36 * tmp103
        tmp105 = tmp102 + tmp104
        tmp107 = tmp40 * tmp106
        tmp108 = tmp105 + tmp107
        tmp110 = tmp30 * tmp109
        tmp111 = tmp108 + tmp110
        tmp114 = tmp32 * tmp113
        tmp115 = tmp112 + tmp114
        tmp117 = tmp36 * tmp116
        tmp118 = tmp115 + tmp117
        tmp120 = tmp40 * tmp119
        tmp121 = tmp118 + tmp120
        tmp123 = tmp30 * tmp122
        tmp124 = tmp121 + tmp123
        tmp127 = tmp32 * tmp126
        tmp128 = tmp125 + tmp127
        tmp130 = tmp36 * tmp129
        tmp131 = tmp128 + tmp130
        tmp133 = tmp40 * tmp132
        tmp134 = tmp131 + tmp133
        tmp136 = tmp30 * tmp135
        tmp137 = tmp134 + tmp136
        tmp140 = tmp32 * tmp139
        tmp141 = tmp138 + tmp140
        tmp143 = tmp36 * tmp142
        tmp144 = tmp141 + tmp143
        tmp146 = tmp40 * tmp145
        tmp147 = tmp144 + tmp146
        tmp149 = tmp30 * tmp148
        tmp150 = tmp147 + tmp149
        tmp153 = tmp32 * tmp152
        tmp154 = tmp151 + tmp153
        tmp156 = tmp36 * tmp155
        tmp157 = tmp154 + tmp156
        tmp159 = tmp40 * tmp158
        tmp160 = tmp157 + tmp159
        tmp162 = tmp30 * tmp161
        tmp163 = tmp160 + tmp162
        tmp166 = tmp32 * tmp165
        tmp167 = tmp164 + tmp166
        tmp169 = tmp36 * tmp168
        tmp170 = tmp167 + tmp169
        tmp172 = tmp40 * tmp171
        tmp173 = tmp170 + tmp172
        tmp175 = tmp30 * tmp174
        tmp176 = tmp173 + tmp175
        tmp179 = tmp32 * tmp178
        tmp180 = tmp177 + tmp179
        tmp182 = tmp36 * tmp181
        tmp183 = tmp180 + tmp182
        tmp185 = tmp40 * tmp184
        tmp186 = tmp183 + tmp185
        tmp188 = tmp30 * tmp187
        tmp189 = tmp186 + tmp188
        tmp192 = tmp32 * tmp191
        tmp193 = tmp190 + tmp192
        tmp195 = tmp36 * tmp194
        tmp196 = tmp193 + tmp195
        tmp198 = tmp40 * tmp197
        tmp199 = tmp196 + tmp198
        tmp201 = tmp30 * tmp200
        tmp202 = tmp199 + tmp201
        tmp205 = tmp32 * tmp204
        tmp206 = tmp203 + tmp205
        tmp208 = tmp36 * tmp207
        tmp209 = tmp206 + tmp208
        tmp211 = tmp40 * tmp210
        tmp212 = tmp209 + tmp211
        tmp214 = tmp30 * tmp213
        tmp215 = tmp212 + tmp214
        tmp218 = tmp216 + tmp217
        tmp220 = tmp218 + tmp219
        tmp221 = tmp40 * tmp220
        tmp222 = tl.broadcast_to(tmp221, [XBLOCK, RBLOCK])
        tmp224 = _tmp223 + tmp222
        _tmp223 = tl.where(rmask, tmp224, _tmp223)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp46, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp59, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp72, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp85, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp98, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp111, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp124, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp137, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp150, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp163, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp176, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp189, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp202, rmask)
        tl.store(in_out_ptr13 + (r1 + (2048*x0)), tmp215, rmask)
    tmp223 = tl.sum(_tmp223, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp223, None)
    _tmp233 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp241 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp252 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp256 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp265 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp269 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp276 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp280 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp291 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp300 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp304 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp311 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp318 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp327 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp334 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp336 = tl.load(in_ptr89 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp347 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp355 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp359 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp225 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp235 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp236 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp248 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp271 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp272 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp282 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp283 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp293 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp294 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp296 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp306 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp313 = tl.load(in_ptr82 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp314 = tl.load(in_ptr83 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp320 = tl.load(in_ptr84 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr85 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp323 = tl.load(in_ptr86 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp329 = tl.load(in_ptr87 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp330 = tl.load(in_ptr88 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp337 = tl.load(in_ptr90 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp341 = tl.load(in_ptr91 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp343 = tl.load(in_ptr92 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp349 = tl.load(in_ptr93 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp351 = tl.load(in_ptr94 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp228 = tmp226 + tmp227
        tmp230 = tmp228 + tmp229
        tmp231 = tmp225 * tmp230
        tmp232 = tl.broadcast_to(tmp231, [XBLOCK, RBLOCK])
        tmp234 = _tmp233 + tmp232
        _tmp233 = tl.where(rmask, tmp234, _tmp233)
        tmp238 = tmp236 + tmp237
        tmp239 = tmp235 * tmp238
        tmp240 = tl.broadcast_to(tmp239, [XBLOCK, RBLOCK])
        tmp242 = _tmp241 + tmp240
        _tmp241 = tl.where(rmask, tmp242, _tmp241)
        tmp243 = tmp225 * tmp238
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp249 = tmp247 + tmp248
        tmp250 = tmp235 * tmp249
        tmp251 = tl.broadcast_to(tmp250, [XBLOCK, RBLOCK])
        tmp253 = _tmp252 + tmp251
        _tmp252 = tl.where(rmask, tmp253, _tmp252)
        tmp254 = tmp225 * tmp249
        tmp255 = tl.broadcast_to(tmp254, [XBLOCK, RBLOCK])
        tmp257 = _tmp256 + tmp255
        _tmp256 = tl.where(rmask, tmp257, _tmp256)
        tmp260 = tmp258 + tmp259
        tmp262 = tmp260 + tmp261
        tmp263 = tmp235 * tmp262
        tmp264 = tl.broadcast_to(tmp263, [XBLOCK, RBLOCK])
        tmp266 = _tmp265 + tmp264
        _tmp265 = tl.where(rmask, tmp266, _tmp265)
        tmp267 = tmp225 * tmp262
        tmp268 = tl.broadcast_to(tmp267, [XBLOCK, RBLOCK])
        tmp270 = _tmp269 + tmp268
        _tmp269 = tl.where(rmask, tmp270, _tmp269)
        tmp273 = tmp271 + tmp272
        tmp274 = tmp235 * tmp273
        tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
        tmp277 = _tmp276 + tmp275
        _tmp276 = tl.where(rmask, tmp277, _tmp276)
        tmp278 = tmp225 * tmp273
        tmp279 = tl.broadcast_to(tmp278, [XBLOCK, RBLOCK])
        tmp281 = _tmp280 + tmp279
        _tmp280 = tl.where(rmask, tmp281, _tmp280)
        tmp284 = tmp282 + tmp283
        tmp285 = tmp235 * tmp284
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp289 = tmp225 * tmp284
        tmp290 = tl.broadcast_to(tmp289, [XBLOCK, RBLOCK])
        tmp292 = _tmp291 + tmp290
        _tmp291 = tl.where(rmask, tmp292, _tmp291)
        tmp295 = tmp293 + tmp294
        tmp297 = tmp295 + tmp296
        tmp298 = tmp235 * tmp297
        tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
        tmp301 = _tmp300 + tmp299
        _tmp300 = tl.where(rmask, tmp301, _tmp300)
        tmp302 = tmp225 * tmp297
        tmp303 = tl.broadcast_to(tmp302, [XBLOCK, RBLOCK])
        tmp305 = _tmp304 + tmp303
        _tmp304 = tl.where(rmask, tmp305, _tmp304)
        tmp308 = tmp306 + tmp307
        tmp309 = tmp235 * tmp308
        tmp310 = tl.broadcast_to(tmp309, [XBLOCK, RBLOCK])
        tmp312 = _tmp311 + tmp310
        _tmp311 = tl.where(rmask, tmp312, _tmp311)
        tmp315 = tmp313 + tmp314
        tmp316 = tmp235 * tmp315
        tmp317 = tl.broadcast_to(tmp316, [XBLOCK, RBLOCK])
        tmp319 = _tmp318 + tmp317
        _tmp318 = tl.where(rmask, tmp319, _tmp318)
        tmp322 = tmp320 + tmp321
        tmp324 = tmp322 + tmp323
        tmp325 = tmp235 * tmp324
        tmp326 = tl.broadcast_to(tmp325, [XBLOCK, RBLOCK])
        tmp328 = _tmp327 + tmp326
        _tmp327 = tl.where(rmask, tmp328, _tmp327)
        tmp331 = tmp329 + tmp330
        tmp332 = tmp235 * tmp331
        tmp333 = tl.broadcast_to(tmp332, [XBLOCK, RBLOCK])
        tmp335 = _tmp334 + tmp333
        _tmp334 = tl.where(rmask, tmp335, _tmp334)
        tmp338 = tmp336 * tmp337
        tmp339 = 0.0
        tmp340 = tmp338 + tmp339
        tmp342 = tmp340 + tmp341
        tmp344 = tmp342 + tmp343
        tmp345 = tmp235 * tmp344
        tmp346 = tl.broadcast_to(tmp345, [XBLOCK, RBLOCK])
        tmp348 = _tmp347 + tmp346
        _tmp347 = tl.where(rmask, tmp348, _tmp347)
        tmp350 = tmp337 + tmp349
        tmp352 = tmp350 + tmp351
        tmp353 = tmp235 * tmp352
        tmp354 = tl.broadcast_to(tmp353, [XBLOCK, RBLOCK])
        tmp356 = _tmp355 + tmp354
        _tmp355 = tl.where(rmask, tmp356, _tmp355)
        tmp357 = tmp235 * tmp337
        tmp358 = tl.broadcast_to(tmp357, [XBLOCK, RBLOCK])
        tmp360 = _tmp359 + tmp358
        _tmp359 = tl.where(rmask, tmp360, _tmp359)
    tmp233 = tl.sum(_tmp233, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp233, None)
    tmp241 = tl.sum(_tmp241, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp241, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp245, None)
    tmp252 = tl.sum(_tmp252, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp252, None)
    tmp256 = tl.sum(_tmp256, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp256, None)
    tmp265 = tl.sum(_tmp265, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp265, None)
    tmp269 = tl.sum(_tmp269, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp269, None)
    tmp276 = tl.sum(_tmp276, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp276, None)
    tmp280 = tl.sum(_tmp280, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp280, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp287, None)
    tmp291 = tl.sum(_tmp291, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp291, None)
    tmp300 = tl.sum(_tmp300, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp300, None)
    tmp304 = tl.sum(_tmp304, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp304, None)
    tmp311 = tl.sum(_tmp311, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp311, None)
    tmp318 = tl.sum(_tmp318, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp318, None)
    tmp327 = tl.sum(_tmp327, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp327, None)
    tmp334 = tl.sum(_tmp334, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp334, None)
    tmp347 = tl.sum(_tmp347, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp347, None)
    tmp355 = tl.sum(_tmp355, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp355, None)
    tmp359 = tl.sum(_tmp359, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp359, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pl/cplikkgqw5h3gf5thn23u5ig5kqj3ynpcuzwtqrxjealywy7nw4w.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_420, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_572
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_336 => add_447
# add_338 => add_449
# add_420 => add_573
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mean => mean_68
# mean_1 => mean_69
# mul => mul_792
# mul_3 => mul_795
# mul_4 => mul_24
# rsqrt => rsqrt_68
# rsqrt_1 => rsqrt_69
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_147 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_147', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: 'i32', 79: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_147', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(78, 79))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_147(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, out_ptr1, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tmp34 = tmp33.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tmp44 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp74 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp62 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tmp40 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = 2048.0
        tmp46 = tmp44 / tmp45
        tmp47 = 1e-05
        tmp48 = tmp46 + tmp47
        tmp49 = tl.math.rsqrt(tmp48)
        tmp50 = tmp43 * tmp49
        tmp51 = -0.5
        tmp52 = tmp38 * tmp51
        tmp53 = tmp49 * tmp49
        tmp54 = tmp53 * tmp49
        tmp55 = tmp52 * tmp54
        tmp56 = tmp55 / tmp45
        tmp58 = tmp56 * tmp57
        tmp59 = tmp50 + tmp58
        tmp60 = tmp59 + tmp58
        tmp61 = tmp60.to(tl.float32)
        tmp64 = tmp62 + tmp63
        tmp66 = tmp64 + tmp65
        tmp67 = tmp61 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tmp72 = tmp71 * tmp66
        tmp73 = tl.broadcast_to(tmp72, [XBLOCK, RBLOCK])
        tmp75 = _tmp74 + tmp73
        _tmp74 = tl.where(rmask, tmp75, _tmp74)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp61, rmask)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp69, None)
    tmp74 = tl.sum(_tmp74, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp74, None)
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp87 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp94 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp98 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp107 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp118 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp122 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp142 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp146 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp154 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp158 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp162 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp173 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp186 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp190 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp194 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp201 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp211 = tl.load(in_ptr35 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp222 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp226 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp230 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp238 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp242 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp246 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp250 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp254 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp258 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp76 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp100 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp135 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp212 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp234 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tmp77 + tmp78
        tmp80 = tmp76 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
        tmp85 = tmp84 * tmp79
        tmp86 = tl.broadcast_to(tmp85, [XBLOCK, RBLOCK])
        tmp88 = _tmp87 + tmp86
        _tmp87 = tl.where(rmask, tmp88, _tmp87)
        tmp91 = tmp89 + tmp90
        tmp92 = tmp76 * tmp91
        tmp93 = tl.broadcast_to(tmp92, [XBLOCK, RBLOCK])
        tmp95 = _tmp94 + tmp93
        _tmp94 = tl.where(rmask, tmp95, _tmp94)
        tmp96 = tmp84 * tmp91
        tmp97 = tl.broadcast_to(tmp96, [XBLOCK, RBLOCK])
        tmp99 = _tmp98 + tmp97
        _tmp98 = tl.where(rmask, tmp99, _tmp98)
        tmp102 = tmp100 + tmp101
        tmp104 = tmp102 + tmp103
        tmp105 = tmp76 * tmp104
        tmp106 = tl.broadcast_to(tmp105, [XBLOCK, RBLOCK])
        tmp108 = _tmp107 + tmp106
        _tmp107 = tl.where(rmask, tmp108, _tmp107)
        tmp109 = tmp84 * tmp104
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tmp115 = tmp113 + tmp114
        tmp116 = tmp76 * tmp115
        tmp117 = tl.broadcast_to(tmp116, [XBLOCK, RBLOCK])
        tmp119 = _tmp118 + tmp117
        _tmp118 = tl.where(rmask, tmp119, _tmp118)
        tmp120 = tmp84 * tmp115
        tmp121 = tl.broadcast_to(tmp120, [XBLOCK, RBLOCK])
        tmp123 = _tmp122 + tmp121
        _tmp122 = tl.where(rmask, tmp123, _tmp122)
        tmp126 = tmp124 + tmp125
        tmp127 = tmp76 * tmp126
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp131 = tmp84 * tmp126
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp137 = tmp135 + tmp136
        tmp139 = tmp137 + tmp138
        tmp140 = tmp76 * tmp139
        tmp141 = tl.broadcast_to(tmp140, [XBLOCK, RBLOCK])
        tmp143 = _tmp142 + tmp141
        _tmp142 = tl.where(rmask, tmp143, _tmp142)
        tmp144 = tmp84 * tmp139
        tmp145 = tl.broadcast_to(tmp144, [XBLOCK, RBLOCK])
        tmp147 = _tmp146 + tmp145
        _tmp146 = tl.where(rmask, tmp147, _tmp146)
        tmp151 = tmp149 + tmp150
        tmp152 = tmp148 * tmp151
        tmp153 = tl.broadcast_to(tmp152, [XBLOCK, RBLOCK])
        tmp155 = _tmp154 + tmp153
        _tmp154 = tl.where(rmask, tmp155, _tmp154)
        tmp156 = tmp76 * tmp151
        tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
        tmp159 = _tmp158 + tmp157
        _tmp158 = tl.where(rmask, tmp159, _tmp158)
        tmp160 = tmp84 * tmp151
        tmp161 = tl.broadcast_to(tmp160, [XBLOCK, RBLOCK])
        tmp163 = _tmp162 + tmp161
        _tmp162 = tl.where(rmask, tmp163, _tmp162)
        tmp166 = tmp164 + tmp165
        tmp167 = tmp148 * tmp166
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tmp171 = tmp76 * tmp166
        tmp172 = tl.broadcast_to(tmp171, [XBLOCK, RBLOCK])
        tmp174 = _tmp173 + tmp172
        _tmp173 = tl.where(rmask, tmp174, _tmp173)
        tmp175 = tmp84 * tmp166
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp181 = tmp179 + tmp180
        tmp183 = tmp181 + tmp182
        tmp184 = tmp148 * tmp183
        tmp185 = tl.broadcast_to(tmp184, [XBLOCK, RBLOCK])
        tmp187 = _tmp186 + tmp185
        _tmp186 = tl.where(rmask, tmp187, _tmp186)
        tmp188 = tmp76 * tmp183
        tmp189 = tl.broadcast_to(tmp188, [XBLOCK, RBLOCK])
        tmp191 = _tmp190 + tmp189
        _tmp190 = tl.where(rmask, tmp191, _tmp190)
        tmp192 = tmp84 * tmp183
        tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
        tmp195 = _tmp194 + tmp193
        _tmp194 = tl.where(rmask, tmp195, _tmp194)
        tmp198 = tmp196 + tmp197
        tmp199 = tmp148 * tmp198
        tmp200 = tl.broadcast_to(tmp199, [XBLOCK, RBLOCK])
        tmp202 = _tmp201 + tmp200
        _tmp201 = tl.where(rmask, tmp202, _tmp201)
        tmp203 = tmp76 * tmp198
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp84 * tmp198
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp213 = tmp211 * tmp212
        tmp214 = 0.0
        tmp215 = tmp213 + tmp214
        tmp217 = tmp215 + tmp216
        tmp219 = tmp217 + tmp218
        tmp220 = tmp148 * tmp219
        tmp221 = tl.broadcast_to(tmp220, [XBLOCK, RBLOCK])
        tmp223 = _tmp222 + tmp221
        _tmp222 = tl.where(rmask, tmp223, _tmp222)
        tmp224 = tmp76 * tmp219
        tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
        tmp227 = _tmp226 + tmp225
        _tmp226 = tl.where(rmask, tmp227, _tmp226)
        tmp228 = tmp84 * tmp219
        tmp229 = tl.broadcast_to(tmp228, [XBLOCK, RBLOCK])
        tmp231 = _tmp230 + tmp229
        _tmp230 = tl.where(rmask, tmp231, _tmp230)
        tmp233 = tmp212 + tmp232
        tmp235 = tmp233 + tmp234
        tmp236 = tmp148 * tmp235
        tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
        tmp239 = _tmp238 + tmp237
        _tmp238 = tl.where(rmask, tmp239, _tmp238)
        tmp240 = tmp76 * tmp235
        tmp241 = tl.broadcast_to(tmp240, [XBLOCK, RBLOCK])
        tmp243 = _tmp242 + tmp241
        _tmp242 = tl.where(rmask, tmp243, _tmp242)
        tmp244 = tmp84 * tmp235
        tmp245 = tl.broadcast_to(tmp244, [XBLOCK, RBLOCK])
        tmp247 = _tmp246 + tmp245
        _tmp246 = tl.where(rmask, tmp247, _tmp246)
        tmp248 = tmp84 * tmp212
        tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
        tmp251 = _tmp250 + tmp249
        _tmp250 = tl.where(rmask, tmp251, _tmp250)
        tmp252 = tmp148 * tmp212
        tmp253 = tl.broadcast_to(tmp252, [XBLOCK, RBLOCK])
        tmp255 = _tmp254 + tmp253
        _tmp254 = tl.where(rmask, tmp255, _tmp254)
        tmp256 = tmp76 * tmp212
        tmp257 = tl.broadcast_to(tmp256, [XBLOCK, RBLOCK])
        tmp259 = _tmp258 + tmp257
        _tmp258 = tl.where(rmask, tmp259, _tmp258)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp82, None)
    tmp87 = tl.sum(_tmp87, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp87, None)
    tmp94 = tl.sum(_tmp94, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp94, None)
    tmp98 = tl.sum(_tmp98, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp98, None)
    tmp107 = tl.sum(_tmp107, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp107, None)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp111, None)
    tmp118 = tl.sum(_tmp118, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp118, None)
    tmp122 = tl.sum(_tmp122, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp122, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp129, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp133, None)
    tmp142 = tl.sum(_tmp142, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp142, None)
    tmp146 = tl.sum(_tmp146, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp146, None)
    tmp154 = tl.sum(_tmp154, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp154, None)
    tmp158 = tl.sum(_tmp158, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp158, None)
    tmp162 = tl.sum(_tmp162, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp162, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp169, None)
    tmp173 = tl.sum(_tmp173, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp173, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp177, None)
    tmp186 = tl.sum(_tmp186, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp186, None)
    tmp190 = tl.sum(_tmp190, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp190, None)
    tmp194 = tl.sum(_tmp194, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp194, None)
    tmp201 = tl.sum(_tmp201, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp201, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp209, None)
    tmp222 = tl.sum(_tmp222, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp222, None)
    tmp226 = tl.sum(_tmp226, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp226, None)
    tmp230 = tl.sum(_tmp230, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp230, None)
    tmp238 = tl.sum(_tmp238, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp238, None)
    tmp242 = tl.sum(_tmp242, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp242, None)
    tmp246 = tl.sum(_tmp246, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp246, None)
    tmp250 = tl.sum(_tmp250, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp250, None)
    tmp254 = tl.sum(_tmp254, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp254, None)
    tmp258 = tl.sum(_tmp258, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp258, None)
''')


# kernel path: /tmp/torchinductor_mengqy/gh/cghspbxlhnt6i46ozgnrpqunovaijowf2mj7c2bdfunv6stxyi33.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_148 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_148', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_148', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(54,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_148(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, xnumel, XBLOCK : tl.constexpr):
    xnumel = 368640
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 92160)
    x0 = xindex % 15
    x1 = (xindex // 15) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp181 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp210 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp226 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr49 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr52 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 13, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 12, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 11, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 10, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 9, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 8, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 7, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 6, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 5, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tl.full([1], 4, tl.int32)
    tmp59 = tmp3 == tmp58
    tmp61 = tl.where(tmp59, tmp60, tmp7)
    tmp62 = tl.where(tmp2, tmp61, tmp7)
    tmp63 = tmp57 + tmp62
    tmp64 = tmp3 == tmp1
    tmp66 = tl.where(tmp64, tmp65, tmp7)
    tmp67 = tl.where(tmp2, tmp66, tmp7)
    tmp68 = tmp63 + tmp67
    tmp69 = tl.full([1], 2, tl.int32)
    tmp70 = tmp3 == tmp69
    tmp72 = tl.where(tmp70, tmp71, tmp7)
    tmp73 = tl.where(tmp2, tmp72, tmp7)
    tmp74 = tmp68 + tmp73
    tmp75 = tl.full([1], 1, tl.int32)
    tmp76 = tmp3 == tmp75
    tmp78 = tl.where(tmp76, tmp77, tmp7)
    tmp79 = tl.where(tmp2, tmp78, tmp7)
    tmp80 = tmp74 + tmp79
    tmp81 = tl.full([1], 0, tl.int32)
    tmp82 = tmp3 == tmp81
    tmp84 = tl.where(tmp82, tmp83, tmp7)
    tmp85 = tl.where(tmp2, tmp84, tmp7)
    tmp86 = tmp80 + tmp85
    tmp87 = tmp0 == tmp69
    tmp89 = tl.where(tmp5, tmp88, tmp7)
    tmp90 = tl.where(tmp87, tmp89, tmp7)
    tmp91 = tmp86 + tmp90
    tmp93 = tl.where(tmp11, tmp92, tmp7)
    tmp94 = tl.where(tmp87, tmp93, tmp7)
    tmp95 = tmp91 + tmp94
    tmp97 = tl.where(tmp17, tmp96, tmp7)
    tmp98 = tl.where(tmp87, tmp97, tmp7)
    tmp99 = tmp95 + tmp98
    tmp101 = tl.where(tmp23, tmp100, tmp7)
    tmp102 = tl.where(tmp87, tmp101, tmp7)
    tmp103 = tmp99 + tmp102
    tmp105 = tl.where(tmp29, tmp104, tmp7)
    tmp106 = tl.where(tmp87, tmp105, tmp7)
    tmp107 = tmp103 + tmp106
    tmp109 = tl.where(tmp35, tmp108, tmp7)
    tmp110 = tl.where(tmp87, tmp109, tmp7)
    tmp111 = tmp107 + tmp110
    tmp113 = tl.where(tmp41, tmp112, tmp7)
    tmp114 = tl.where(tmp87, tmp113, tmp7)
    tmp115 = tmp111 + tmp114
    tmp117 = tl.where(tmp47, tmp116, tmp7)
    tmp118 = tl.where(tmp87, tmp117, tmp7)
    tmp119 = tmp115 + tmp118
    tmp121 = tl.where(tmp53, tmp120, tmp7)
    tmp122 = tl.where(tmp87, tmp121, tmp7)
    tmp123 = tmp119 + tmp122
    tmp125 = tl.where(tmp59, tmp124, tmp7)
    tmp126 = tl.where(tmp87, tmp125, tmp7)
    tmp127 = tmp123 + tmp126
    tmp129 = tl.where(tmp64, tmp128, tmp7)
    tmp130 = tl.where(tmp87, tmp129, tmp7)
    tmp131 = tmp127 + tmp130
    tmp133 = tl.where(tmp70, tmp132, tmp7)
    tmp134 = tl.where(tmp87, tmp133, tmp7)
    tmp135 = tmp131 + tmp134
    tmp137 = tl.where(tmp76, tmp136, tmp7)
    tmp138 = tl.where(tmp87, tmp137, tmp7)
    tmp139 = tmp135 + tmp138
    tmp141 = tl.where(tmp82, tmp140, tmp7)
    tmp142 = tl.where(tmp87, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp144 = tmp0 == tmp75
    tmp146 = tl.where(tmp5, tmp145, tmp7)
    tmp147 = tl.where(tmp144, tmp146, tmp7)
    tmp148 = tmp143 + tmp147
    tmp150 = tl.where(tmp11, tmp149, tmp7)
    tmp151 = tl.where(tmp144, tmp150, tmp7)
    tmp152 = tmp148 + tmp151
    tmp154 = tl.where(tmp17, tmp153, tmp7)
    tmp155 = tl.where(tmp144, tmp154, tmp7)
    tmp156 = tmp152 + tmp155
    tmp158 = tl.where(tmp23, tmp157, tmp7)
    tmp159 = tl.where(tmp144, tmp158, tmp7)
    tmp160 = tmp156 + tmp159
    tmp162 = tl.where(tmp29, tmp161, tmp7)
    tmp163 = tl.where(tmp144, tmp162, tmp7)
    tmp164 = tmp160 + tmp163
    tmp166 = tl.where(tmp35, tmp165, tmp7)
    tmp167 = tl.where(tmp144, tmp166, tmp7)
    tmp168 = tmp164 + tmp167
    tmp170 = tl.where(tmp41, tmp169, tmp7)
    tmp171 = tl.where(tmp144, tmp170, tmp7)
    tmp172 = tmp168 + tmp171
    tmp174 = tl.where(tmp47, tmp173, tmp7)
    tmp175 = tl.where(tmp144, tmp174, tmp7)
    tmp176 = tmp172 + tmp175
    tmp178 = tl.where(tmp53, tmp177, tmp7)
    tmp179 = tl.where(tmp144, tmp178, tmp7)
    tmp180 = tmp176 + tmp179
    tmp182 = tl.where(tmp59, tmp181, tmp7)
    tmp183 = tl.where(tmp144, tmp182, tmp7)
    tmp184 = tmp180 + tmp183
    tmp186 = tl.where(tmp64, tmp185, tmp7)
    tmp187 = tl.where(tmp144, tmp186, tmp7)
    tmp188 = tmp184 + tmp187
    tmp190 = tl.where(tmp70, tmp189, tmp7)
    tmp191 = tl.where(tmp144, tmp190, tmp7)
    tmp192 = tmp188 + tmp191
    tmp194 = tl.where(tmp76, tmp193, tmp7)
    tmp195 = tl.where(tmp144, tmp194, tmp7)
    tmp196 = tmp192 + tmp195
    tmp198 = tl.where(tmp82, tmp197, tmp7)
    tmp199 = tl.where(tmp144, tmp198, tmp7)
    tmp200 = tmp196 + tmp199
    tmp201 = tmp0 == tmp81
    tmp203 = tl.where(tmp5, tmp202, tmp7)
    tmp204 = tl.where(tmp201, tmp203, tmp7)
    tmp205 = tmp200 + tmp204
    tmp207 = tl.where(tmp11, tmp206, tmp7)
    tmp208 = tl.where(tmp201, tmp207, tmp7)
    tmp209 = tmp205 + tmp208
    tmp211 = tl.where(tmp17, tmp210, tmp7)
    tmp212 = tl.where(tmp201, tmp211, tmp7)
    tmp213 = tmp209 + tmp212
    tmp215 = tl.where(tmp23, tmp214, tmp7)
    tmp216 = tl.where(tmp201, tmp215, tmp7)
    tmp217 = tmp213 + tmp216
    tmp219 = tl.where(tmp29, tmp218, tmp7)
    tmp220 = tl.where(tmp201, tmp219, tmp7)
    tmp221 = tmp217 + tmp220
    tmp223 = tl.where(tmp35, tmp222, tmp7)
    tmp224 = tl.where(tmp201, tmp223, tmp7)
    tmp225 = tmp221 + tmp224
    tmp227 = tl.where(tmp41, tmp226, tmp7)
    tmp228 = tl.where(tmp201, tmp227, tmp7)
    tmp229 = tmp225 + tmp228
    tmp231 = tl.where(tmp47, tmp230, tmp7)
    tmp232 = tl.where(tmp201, tmp231, tmp7)
    tmp233 = tmp229 + tmp232
    tmp235 = tl.where(tmp53, tmp234, tmp7)
    tmp236 = tl.where(tmp201, tmp235, tmp7)
    tmp237 = tmp233 + tmp236
    tmp239 = tl.where(tmp59, tmp238, tmp7)
    tmp240 = tl.where(tmp201, tmp239, tmp7)
    tmp241 = tmp237 + tmp240
    tmp243 = tl.where(tmp64, tmp242, tmp7)
    tmp244 = tl.where(tmp201, tmp243, tmp7)
    tmp245 = tmp241 + tmp244
    tl.store(in_out_ptr0 + (x3), tmp245, None)
''')


# kernel path: /tmp/torchinductor_mengqy/iy/ciyi4iqkgxacedhrgna3wsxys27cposupgntd63fecfy6gkmu3tt.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_149 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_149', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_149', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_149(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 2880
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 15
    x4 = (xindex // 15)
    x2 = (xindex // 720)
    x1 = (xindex // 15) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (15*r3) + (1920*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ov/covpyf7fc6meqk2hkp5nel2ylms37fgqlzvm6rzcjsjvbwrdn34a.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_150 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_150', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_150', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_150(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 60
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 15
    x1 = (xindex // 15)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (15*r2) + (720*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/4j/c4jadaweasek6zbajsgzcuo5liqekkdbkwiuuk7l3li22kgpcbrz.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_151 = async_compile.triton('triton_poi_fused_clone_151', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_151', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_151(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 368640
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 15
    x1 = (xindex // 15) % 4
    x2 = (xindex // 60)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (15*x2) + (92160*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/e7/ce7od4vqz3uy33aswcvl4qa5ycce3bszqke5yur4wb3pzry7vzg5.py
# Source Nodes: [l__mod___dynamic_dense_13_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_13_act => add_514, convert_element_type_246, erf_13, mul_734
triton_poi_fused_gelu_gelu_backward_152 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_152', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_152', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_152(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 368640
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3t/c3tfikmnhnqwre5kw5olxbvsjmoe7hzoxxf6osf6rgyr6zd3cjjd.py
# Source Nodes: [add_392], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_392 => add_512
triton_red_fused_add_div_mul_pow_sum_153 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_153', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: 'i32', 10: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_153', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9, 10))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_153(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp10 = tl.load(in_ptr4 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr6 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp8 + tmp11
        tmp15 = tmp13 * tmp14
        tmp16 = tmp12 + tmp15
        tmp19 = tmp17 * tmp18
        tmp20 = tmp16 + tmp19
        tmp21 = -0.5
        tmp22 = tmp6 * tmp21
        tmp23 = tmp18 * tmp18
        tmp24 = tmp23 * tmp18
        tmp25 = tmp22 * tmp24
        tmp26 = 2048.0
        tmp27 = tmp25 / tmp26
        tmp30 = tmp28 + tmp29
        tmp31 = 2.0
        tmp32 = tmp30 * tmp31
        tmp33 = tmp27 * tmp32
        tmp34 = tmp20 + tmp33
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp34, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/no/cnoht7myny5fp26bhgq22hbrehrwxn6np2ubkssr2wanwsfipzgp.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_350, add_363, add_364, add_376, add_377, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_337, mul_350, mul_363, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_505
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_350 => add_465
# add_363 => add_478
# add_364 => add_506
# add_376 => add_491
# add_377 => add_507
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_230
# float_2 => convert_element_type_232
# float_3 => convert_element_type_234
# mean => mean_63
# mean_1 => mean_64
# mean_2 => mean_65
# mul => mul_709
# mul_3 => mul_712
# mul_337 => mul_669
# mul_350 => mul_682
# mul_363 => mul_695
# mul_4 => mul_24
# mul_6 => mul_715
# rsqrt => rsqrt_63
# rsqrt_1 => rsqrt_64
# rsqrt_2 => rsqrt_65
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_154 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_154', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp32', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp32', 83: '*fp32', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp32', 137: '*fp32', 138: '*fp32', 139: '*fp16', 140: '*fp16', 141: '*fp16', 142: '*fp16', 143: '*fp16', 144: '*fp16', 145: '*fp16', 146: '*fp16', 147: '*fp16', 148: '*fp16', 149: '*fp16', 150: '*fp16', 151: '*fp16', 152: 'i32', 153: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr12', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_154', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(152, 153))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_154(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_out_ptr12, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, in_ptr100, in_ptr101, in_ptr102, in_ptr103, in_ptr104, in_ptr105, in_ptr106, in_ptr107, in_ptr108, in_ptr109, in_ptr110, in_ptr111, in_ptr112, in_ptr113, in_ptr114, in_ptr115, in_ptr116, in_ptr117, in_ptr118, in_ptr119, in_ptr120, in_ptr121, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp69 = tl.load(in_ptr17 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr19 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr20 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr21 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr22 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr23 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr24 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr25 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr26 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr27 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr28 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr29 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr30 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr31 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr32 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr33 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr34 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr35 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr36 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr37 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr38 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr39 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr40 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr41 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp159 = tl.load(in_ptr42 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr43 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr44 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr45 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr46 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr47 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr48 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr49 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp185 = tl.load(in_ptr50 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr51 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp191 = tl.load(in_ptr52 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr53 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr54 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr55 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr56 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr57 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp211 = tl.load(in_ptr58 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp214 = tl.load(in_ptr59 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp217 = tl.load(in_ptr60 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr61 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr62 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp227 = tl.load(in_ptr63 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr64 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr65 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr66 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr67 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr68 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr69 + (x0), None, eviction_policy='evict_last')
    tmp261 = tl.load(in_ptr70 + (x0), None, eviction_policy='evict_last')
    tmp294 = tl.load(in_ptr71 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp297 = tl.load(in_ptr72 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp300 = tl.load(in_ptr73 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp303 = tl.load(in_ptr74 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr75 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp309 = tl.load(in_ptr76 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp312 = tl.load(in_ptr77 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp315 = tl.load(in_ptr78 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp318 = tl.load(in_ptr79 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr80 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr81 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp327 = tl.load(in_ptr82 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr83 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp333 = tl.load(in_ptr84 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr85 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp339 = tl.load(in_ptr86 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr87 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp345 = tl.load(in_ptr88 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr89 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp351 = tl.load(in_ptr90 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr91 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp357 = tl.load(in_ptr92 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr93 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp363 = tl.load(in_ptr94 + (14*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp368 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp90 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp155 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp168 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp194 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp220 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp233 = tl.load(in_out_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp255 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp269 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp274 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp284 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp285 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp70 = tmp68 * tmp69
        tmp71 = tmp67 + tmp70
        tmp74 = tmp72 * tmp73
        tmp75 = tmp71 + tmp74
        tmp78 = tmp76 * tmp77
        tmp79 = tmp75 + tmp78
        tmp82 = tmp80 * tmp81
        tmp83 = tmp82.to(tl.float32)
        tmp84 = tmp83 * tmp54
        tmp85 = tmp84 + tmp66
        tmp86 = tmp85 + tmp66
        tmp87 = tmp86.to(tl.float32)
        tmp88 = tmp87 * tmp5
        tmp89 = tmp79 + tmp88
        tmp92 = tmp68 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp72 * tmp94
        tmp96 = tmp93 + tmp95
        tmp98 = tmp76 * tmp97
        tmp99 = tmp96 + tmp98
        tmp101 = tmp87 * tmp100
        tmp102 = tmp99 + tmp101
        tmp105 = tmp68 * tmp104
        tmp106 = tmp103 + tmp105
        tmp108 = tmp72 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp76 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp87 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp68 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp72 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp76 * tmp123
        tmp125 = tmp122 + tmp124
        tmp127 = tmp87 * tmp126
        tmp128 = tmp125 + tmp127
        tmp131 = tmp68 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp72 * tmp133
        tmp135 = tmp132 + tmp134
        tmp137 = tmp76 * tmp136
        tmp138 = tmp135 + tmp137
        tmp140 = tmp87 * tmp139
        tmp141 = tmp138 + tmp140
        tmp144 = tmp68 * tmp143
        tmp145 = tmp142 + tmp144
        tmp147 = tmp72 * tmp146
        tmp148 = tmp145 + tmp147
        tmp150 = tmp76 * tmp149
        tmp151 = tmp148 + tmp150
        tmp153 = tmp87 * tmp152
        tmp154 = tmp151 + tmp153
        tmp157 = tmp68 * tmp156
        tmp158 = tmp155 + tmp157
        tmp160 = tmp72 * tmp159
        tmp161 = tmp158 + tmp160
        tmp163 = tmp76 * tmp162
        tmp164 = tmp161 + tmp163
        tmp166 = tmp87 * tmp165
        tmp167 = tmp164 + tmp166
        tmp170 = tmp68 * tmp169
        tmp171 = tmp168 + tmp170
        tmp173 = tmp72 * tmp172
        tmp174 = tmp171 + tmp173
        tmp176 = tmp76 * tmp175
        tmp177 = tmp174 + tmp176
        tmp179 = tmp87 * tmp178
        tmp180 = tmp177 + tmp179
        tmp183 = tmp68 * tmp182
        tmp184 = tmp181 + tmp183
        tmp186 = tmp72 * tmp185
        tmp187 = tmp184 + tmp186
        tmp189 = tmp76 * tmp188
        tmp190 = tmp187 + tmp189
        tmp192 = tmp87 * tmp191
        tmp193 = tmp190 + tmp192
        tmp196 = tmp68 * tmp195
        tmp197 = tmp194 + tmp196
        tmp199 = tmp72 * tmp198
        tmp200 = tmp197 + tmp199
        tmp202 = tmp76 * tmp201
        tmp203 = tmp200 + tmp202
        tmp205 = tmp87 * tmp204
        tmp206 = tmp203 + tmp205
        tmp209 = tmp68 * tmp208
        tmp210 = tmp207 + tmp209
        tmp212 = tmp72 * tmp211
        tmp213 = tmp210 + tmp212
        tmp215 = tmp76 * tmp214
        tmp216 = tmp213 + tmp215
        tmp218 = tmp87 * tmp217
        tmp219 = tmp216 + tmp218
        tmp222 = tmp68 * tmp221
        tmp223 = tmp220 + tmp222
        tmp225 = tmp72 * tmp224
        tmp226 = tmp223 + tmp225
        tmp228 = tmp76 * tmp227
        tmp229 = tmp226 + tmp228
        tmp231 = tmp87 * tmp230
        tmp232 = tmp229 + tmp231
        tmp235 = tmp68 * tmp234
        tmp236 = tmp233 + tmp235
        tmp238 = tmp72 * tmp237
        tmp239 = tmp236 + tmp238
        tmp241 = tmp76 * tmp240
        tmp242 = tmp239 + tmp241
        tmp244 = tmp87 * tmp243
        tmp245 = tmp242 + tmp244
        tmp246 = tmp27 * tmp47
        tmp248 = tmp247 / tmp50
        tmp249 = tmp248 + tmp52
        tmp250 = tl.math.rsqrt(tmp249)
        tmp251 = tmp250 * tmp250
        tmp252 = tmp251 * tmp250
        tmp253 = tmp246 * tmp252
        tmp254 = tmp253 / tmp50
        tmp256 = tmp21 * tmp62
        tmp257 = tmp255 + tmp256
        tmp258 = tmp257.to(tl.float32)
        tmp259 = tmp254 * tmp258
        tmp260 = tmp40 * tmp47
        tmp262 = tmp261 / tmp50
        tmp263 = tmp262 + tmp52
        tmp264 = tl.math.rsqrt(tmp263)
        tmp265 = tmp264 * tmp264
        tmp266 = tmp265 * tmp264
        tmp267 = tmp260 * tmp266
        tmp268 = tmp267 / tmp50
        tmp270 = tmp34 * tmp62
        tmp271 = tmp269 + tmp270
        tmp272 = tmp271.to(tl.float32)
        tmp273 = tmp268 * tmp272
        tmp276 = tmp274 * tmp275
        tmp277 = tmp276.to(tl.float32)
        tmp278 = tmp277 * tmp250
        tmp279 = tmp278 + tmp259
        tmp280 = tmp279 + tmp259
        tmp281 = tmp280.to(tl.float32)
        tmp282 = tmp281 * tmp21
        tmp283 = tmp89 + tmp282
        tmp286 = tmp284 * tmp285
        tmp287 = tmp286.to(tl.float32)
        tmp288 = tmp287 * tmp264
        tmp289 = tmp288 + tmp273
        tmp290 = tmp289 + tmp273
        tmp291 = tmp290.to(tl.float32)
        tmp292 = tmp291 * tmp34
        tmp293 = tmp283 + tmp292
        tmp295 = tmp281 * tmp294
        tmp296 = tmp102 + tmp295
        tmp298 = tmp291 * tmp297
        tmp299 = tmp296 + tmp298
        tmp301 = tmp281 * tmp300
        tmp302 = tmp115 + tmp301
        tmp304 = tmp291 * tmp303
        tmp305 = tmp302 + tmp304
        tmp307 = tmp281 * tmp306
        tmp308 = tmp128 + tmp307
        tmp310 = tmp291 * tmp309
        tmp311 = tmp308 + tmp310
        tmp313 = tmp281 * tmp312
        tmp314 = tmp141 + tmp313
        tmp316 = tmp291 * tmp315
        tmp317 = tmp314 + tmp316
        tmp319 = tmp281 * tmp318
        tmp320 = tmp154 + tmp319
        tmp322 = tmp291 * tmp321
        tmp323 = tmp320 + tmp322
        tmp325 = tmp281 * tmp324
        tmp326 = tmp167 + tmp325
        tmp328 = tmp291 * tmp327
        tmp329 = tmp326 + tmp328
        tmp331 = tmp281 * tmp330
        tmp332 = tmp180 + tmp331
        tmp334 = tmp291 * tmp333
        tmp335 = tmp332 + tmp334
        tmp337 = tmp281 * tmp336
        tmp338 = tmp193 + tmp337
        tmp340 = tmp291 * tmp339
        tmp341 = tmp338 + tmp340
        tmp343 = tmp281 * tmp342
        tmp344 = tmp206 + tmp343
        tmp346 = tmp291 * tmp345
        tmp347 = tmp344 + tmp346
        tmp349 = tmp281 * tmp348
        tmp350 = tmp219 + tmp349
        tmp352 = tmp291 * tmp351
        tmp353 = tmp350 + tmp352
        tmp355 = tmp281 * tmp354
        tmp356 = tmp232 + tmp355
        tmp358 = tmp291 * tmp357
        tmp359 = tmp356 + tmp358
        tmp361 = tmp281 * tmp360
        tmp362 = tmp245 + tmp361
        tmp364 = tmp291 * tmp363
        tmp365 = tmp362 + tmp364
        tmp366 = tmp291 * tmp62
        tmp367 = tl.broadcast_to(tmp366, [XBLOCK, RBLOCK])
        tmp369 = _tmp368 + tmp367
        _tmp368 = tl.where(rmask, tmp369, _tmp368)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp259, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp273, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp293, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp299, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp305, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp311, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp317, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp323, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp329, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp335, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp341, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp347, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp353, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp359, rmask)
        tl.store(in_out_ptr12 + (r1 + (2048*x0)), tmp365, rmask)
    tmp368 = tl.sum(_tmp368, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp368, None)
    _tmp389 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp398 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp405 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp412 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp421 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp428 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp435 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp444 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp451 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp453 = tl.load(in_ptr116 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp464 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp472 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp476 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp370 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp371 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp380 = tl.load(out_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp384 = tl.load(in_ptr95 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp385 = tl.load(in_ptr96 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp391 = tl.load(in_ptr97 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp392 = tl.load(in_ptr98 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp394 = tl.load(in_ptr99 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp400 = tl.load(in_ptr100 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp401 = tl.load(in_ptr101 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp407 = tl.load(in_ptr102 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp408 = tl.load(in_ptr103 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp414 = tl.load(in_ptr104 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp415 = tl.load(in_ptr105 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp417 = tl.load(in_ptr106 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp423 = tl.load(in_ptr107 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp424 = tl.load(in_ptr108 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp430 = tl.load(in_ptr109 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr110 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp437 = tl.load(in_ptr111 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp438 = tl.load(in_ptr112 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp440 = tl.load(in_ptr113 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp446 = tl.load(in_ptr114 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp447 = tl.load(in_ptr115 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp454 = tl.load(in_ptr117 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp458 = tl.load(in_ptr118 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp460 = tl.load(in_ptr119 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp466 = tl.load(in_ptr120 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp468 = tl.load(in_ptr121 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tmp370 * tmp371
        tmp373 = tmp372.to(tl.float32)
        tmp374 = 2048.0
        tmp375 = tmp261 / tmp374
        tmp376 = 1e-05
        tmp377 = tmp375 + tmp376
        tmp378 = tl.math.rsqrt(tmp377)
        tmp379 = tmp373 * tmp378
        tmp381 = tmp379 + tmp380
        tmp382 = tmp381 + tmp380
        tmp383 = tmp382.to(tl.float32)
        tmp386 = tmp384 + tmp385
        tmp387 = tmp383 * tmp386
        tmp388 = tl.broadcast_to(tmp387, [XBLOCK, RBLOCK])
        tmp390 = _tmp389 + tmp388
        _tmp389 = tl.where(rmask, tmp390, _tmp389)
        tmp393 = tmp391 + tmp392
        tmp395 = tmp393 + tmp394
        tmp396 = tmp383 * tmp395
        tmp397 = tl.broadcast_to(tmp396, [XBLOCK, RBLOCK])
        tmp399 = _tmp398 + tmp397
        _tmp398 = tl.where(rmask, tmp399, _tmp398)
        tmp402 = tmp400 + tmp401
        tmp403 = tmp383 * tmp402
        tmp404 = tl.broadcast_to(tmp403, [XBLOCK, RBLOCK])
        tmp406 = _tmp405 + tmp404
        _tmp405 = tl.where(rmask, tmp406, _tmp405)
        tmp409 = tmp407 + tmp408
        tmp410 = tmp383 * tmp409
        tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
        tmp413 = _tmp412 + tmp411
        _tmp412 = tl.where(rmask, tmp413, _tmp412)
        tmp416 = tmp414 + tmp415
        tmp418 = tmp416 + tmp417
        tmp419 = tmp383 * tmp418
        tmp420 = tl.broadcast_to(tmp419, [XBLOCK, RBLOCK])
        tmp422 = _tmp421 + tmp420
        _tmp421 = tl.where(rmask, tmp422, _tmp421)
        tmp425 = tmp423 + tmp424
        tmp426 = tmp383 * tmp425
        tmp427 = tl.broadcast_to(tmp426, [XBLOCK, RBLOCK])
        tmp429 = _tmp428 + tmp427
        _tmp428 = tl.where(rmask, tmp429, _tmp428)
        tmp432 = tmp430 + tmp431
        tmp433 = tmp383 * tmp432
        tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
        tmp436 = _tmp435 + tmp434
        _tmp435 = tl.where(rmask, tmp436, _tmp435)
        tmp439 = tmp437 + tmp438
        tmp441 = tmp439 + tmp440
        tmp442 = tmp383 * tmp441
        tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
        tmp445 = _tmp444 + tmp443
        _tmp444 = tl.where(rmask, tmp445, _tmp444)
        tmp448 = tmp446 + tmp447
        tmp449 = tmp383 * tmp448
        tmp450 = tl.broadcast_to(tmp449, [XBLOCK, RBLOCK])
        tmp452 = _tmp451 + tmp450
        _tmp451 = tl.where(rmask, tmp452, _tmp451)
        tmp455 = tmp453 * tmp454
        tmp456 = 0.0
        tmp457 = tmp455 + tmp456
        tmp459 = tmp457 + tmp458
        tmp461 = tmp459 + tmp460
        tmp462 = tmp383 * tmp461
        tmp463 = tl.broadcast_to(tmp462, [XBLOCK, RBLOCK])
        tmp465 = _tmp464 + tmp463
        _tmp464 = tl.where(rmask, tmp465, _tmp464)
        tmp467 = tmp454 + tmp466
        tmp469 = tmp467 + tmp468
        tmp470 = tmp383 * tmp469
        tmp471 = tl.broadcast_to(tmp470, [XBLOCK, RBLOCK])
        tmp473 = _tmp472 + tmp471
        _tmp472 = tl.where(rmask, tmp473, _tmp472)
        tmp474 = tmp383 * tmp454
        tmp475 = tl.broadcast_to(tmp474, [XBLOCK, RBLOCK])
        tmp477 = _tmp476 + tmp475
        _tmp476 = tl.where(rmask, tmp477, _tmp476)
    tmp389 = tl.sum(_tmp389, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp389, None)
    tmp398 = tl.sum(_tmp398, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp398, None)
    tmp405 = tl.sum(_tmp405, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp405, None)
    tmp412 = tl.sum(_tmp412, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp412, None)
    tmp421 = tl.sum(_tmp421, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp421, None)
    tmp428 = tl.sum(_tmp428, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp428, None)
    tmp435 = tl.sum(_tmp435, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp435, None)
    tmp444 = tl.sum(_tmp444, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp444, None)
    tmp451 = tl.sum(_tmp451, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp451, None)
    tmp464 = tl.sum(_tmp464, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp464, None)
    tmp472 = tl.sum(_tmp472, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp472, None)
    tmp476 = tl.sum(_tmp476, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp476, None)
''')


# kernel path: /tmp/torchinductor_mengqy/mt/cmtkdfrw4jx3mg5fw5xrzbkzxmfg6u5ocxda2okgrutad2zyuthv.py
# Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_363, add_364, add_376, add_377, add_5, add_50, add_72, add_96, add_98, float_2, float_3, mean_1, mean_2, mul_3, mul_350, mul_363, mul_4, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_363 => add_478
# add_364 => add_506
# add_376 => add_491
# add_377 => add_507
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_2 => convert_element_type_232
# float_3 => convert_element_type_234
# mean_1 => mean_64
# mean_2 => mean_65
# mul_3 => mul_712
# mul_350 => mul_682
# mul_363 => mul_695
# mul_4 => mul_24
# mul_6 => mul_715
# rsqrt_1 => rsqrt_64
# rsqrt_2 => rsqrt_65
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_155 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_155', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp32', 31: '*fp32', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp32', 37: '*fp32', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: 'i32', 77: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_155', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(76, 77))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_155(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp34 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp50 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp59 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp68 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp77 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp79 = tl.load(in_ptr25 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp89 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp95 = tl.load(in_ptr30 + (x0), None, eviction_policy='evict_last')
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp115 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp119 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp123 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp127 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp131 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp135 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp139 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp143 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp147 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp151 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp155 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp159 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp165 = tl.load(in_ptr36 + (x0), None, eviction_policy='evict_last')
    _tmp176 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp180 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp184 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp204 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp208 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp212 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp216 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp220 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp224 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp228 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp36 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp46 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp52 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp62 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp91 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr29 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp102 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0)
        tmp106 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp161 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp162 = tl.load(in_ptr35 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp0 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp0 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
        tmp21 = _tmp20 + tmp19
        _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp0 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 + tmp30
        tmp32 = tmp0 * tmp31
        tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
        tmp35 = _tmp34 + tmp33
        _tmp34 = tl.where(rmask, tmp35, _tmp34)
        tmp38 = tmp36 + tmp37
        tmp39 = tmp0 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tmp45 = tmp43 + tmp44
        tmp47 = tmp45 + tmp46
        tmp48 = tmp0 * tmp47
        tmp49 = tl.broadcast_to(tmp48, [XBLOCK, RBLOCK])
        tmp51 = _tmp50 + tmp49
        _tmp50 = tl.where(rmask, tmp51, _tmp50)
        tmp54 = tmp52 + tmp53
        tmp56 = tmp54 + tmp55
        tmp57 = tmp0 * tmp56
        tmp58 = tl.broadcast_to(tmp57, [XBLOCK, RBLOCK])
        tmp60 = _tmp59 + tmp58
        _tmp59 = tl.where(rmask, tmp60, _tmp59)
        tmp63 = tmp61 + tmp62
        tmp65 = tmp63 + tmp64
        tmp66 = tmp0 * tmp65
        tmp67 = tl.broadcast_to(tmp66, [XBLOCK, RBLOCK])
        tmp69 = _tmp68 + tmp67
        _tmp68 = tl.where(rmask, tmp69, _tmp68)
        tmp72 = tmp70 + tmp71
        tmp74 = tmp72 + tmp73
        tmp75 = tmp0 * tmp74
        tmp76 = tl.broadcast_to(tmp75, [XBLOCK, RBLOCK])
        tmp78 = _tmp77 + tmp76
        _tmp77 = tl.where(rmask, tmp78, _tmp77)
        tmp80 = tmp79 * tmp43
        tmp81 = 0.0
        tmp82 = tmp80 + tmp81
        tmp84 = tmp82 + tmp83
        tmp86 = tmp84 + tmp85
        tmp87 = tmp0 * tmp86
        tmp88 = tl.broadcast_to(tmp87, [XBLOCK, RBLOCK])
        tmp90 = _tmp89 + tmp88
        _tmp89 = tl.where(rmask, tmp90, _tmp89)
        tmp93 = tmp91 * tmp92
        tmp94 = tmp93.to(tl.float32)
        tmp96 = 2048.0
        tmp97 = tmp95 / tmp96
        tmp98 = 1e-05
        tmp99 = tmp97 + tmp98
        tmp100 = tl.math.rsqrt(tmp99)
        tmp101 = tmp94 * tmp100
        tmp103 = tmp101 + tmp102
        tmp104 = tmp103 + tmp102
        tmp105 = tmp104.to(tl.float32)
        tmp108 = tmp106 + tmp107
        tmp109 = tmp105 * tmp108
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tmp113 = tmp105 * tmp38
        tmp114 = tl.broadcast_to(tmp113, [XBLOCK, RBLOCK])
        tmp116 = _tmp115 + tmp114
        _tmp115 = tl.where(rmask, tmp116, _tmp115)
        tmp117 = tmp105 * tmp74
        tmp118 = tl.broadcast_to(tmp117, [XBLOCK, RBLOCK])
        tmp120 = _tmp119 + tmp118
        _tmp119 = tl.where(rmask, tmp120, _tmp119)
        tmp121 = tmp105 * tmp31
        tmp122 = tl.broadcast_to(tmp121, [XBLOCK, RBLOCK])
        tmp124 = _tmp123 + tmp122
        _tmp123 = tl.where(rmask, tmp124, _tmp123)
        tmp125 = tmp105 * tmp24
        tmp126 = tl.broadcast_to(tmp125, [XBLOCK, RBLOCK])
        tmp128 = _tmp127 + tmp126
        _tmp127 = tl.where(rmask, tmp128, _tmp127)
        tmp129 = tmp105 * tmp65
        tmp130 = tl.broadcast_to(tmp129, [XBLOCK, RBLOCK])
        tmp132 = _tmp131 + tmp130
        _tmp131 = tl.where(rmask, tmp132, _tmp131)
        tmp133 = tmp105 * tmp17
        tmp134 = tl.broadcast_to(tmp133, [XBLOCK, RBLOCK])
        tmp136 = _tmp135 + tmp134
        _tmp135 = tl.where(rmask, tmp136, _tmp135)
        tmp137 = tmp105 * tmp10
        tmp138 = tl.broadcast_to(tmp137, [XBLOCK, RBLOCK])
        tmp140 = _tmp139 + tmp138
        _tmp139 = tl.where(rmask, tmp140, _tmp139)
        tmp141 = tmp105 * tmp56
        tmp142 = tl.broadcast_to(tmp141, [XBLOCK, RBLOCK])
        tmp144 = _tmp143 + tmp142
        _tmp143 = tl.where(rmask, tmp144, _tmp143)
        tmp145 = tmp105 * tmp3
        tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
        tmp148 = _tmp147 + tmp146
        _tmp147 = tl.where(rmask, tmp148, _tmp147)
        tmp149 = tmp105 * tmp86
        tmp150 = tl.broadcast_to(tmp149, [XBLOCK, RBLOCK])
        tmp152 = _tmp151 + tmp150
        _tmp151 = tl.where(rmask, tmp152, _tmp151)
        tmp153 = tmp105 * tmp47
        tmp154 = tl.broadcast_to(tmp153, [XBLOCK, RBLOCK])
        tmp156 = _tmp155 + tmp154
        _tmp155 = tl.where(rmask, tmp156, _tmp155)
        tmp157 = tmp105 * tmp43
        tmp158 = tl.broadcast_to(tmp157, [XBLOCK, RBLOCK])
        tmp160 = _tmp159 + tmp158
        _tmp159 = tl.where(rmask, tmp160, _tmp159)
        tmp163 = tmp161 * tmp162
        tmp164 = tmp163.to(tl.float32)
        tmp166 = tmp165 / tmp96
        tmp167 = tmp166 + tmp98
        tmp168 = tl.math.rsqrt(tmp167)
        tmp169 = tmp164 * tmp168
        tmp171 = tmp169 + tmp170
        tmp172 = tmp171 + tmp170
        tmp173 = tmp172.to(tl.float32)
        tmp174 = tmp173 * tmp108
        tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
        tmp177 = _tmp176 + tmp175
        _tmp176 = tl.where(rmask, tmp177, _tmp176)
        tmp178 = tmp173 * tmp38
        tmp179 = tl.broadcast_to(tmp178, [XBLOCK, RBLOCK])
        tmp181 = _tmp180 + tmp179
        _tmp180 = tl.where(rmask, tmp181, _tmp180)
        tmp182 = tmp173 * tmp74
        tmp183 = tl.broadcast_to(tmp182, [XBLOCK, RBLOCK])
        tmp185 = _tmp184 + tmp183
        _tmp184 = tl.where(rmask, tmp185, _tmp184)
        tmp186 = tmp173 * tmp31
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp173 * tmp24
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp173 * tmp65
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp173 * tmp17
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp202 = tmp173 * tmp10
        tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
        tmp205 = _tmp204 + tmp203
        _tmp204 = tl.where(rmask, tmp205, _tmp204)
        tmp206 = tmp173 * tmp56
        tmp207 = tl.broadcast_to(tmp206, [XBLOCK, RBLOCK])
        tmp209 = _tmp208 + tmp207
        _tmp208 = tl.where(rmask, tmp209, _tmp208)
        tmp210 = tmp173 * tmp3
        tmp211 = tl.broadcast_to(tmp210, [XBLOCK, RBLOCK])
        tmp213 = _tmp212 + tmp211
        _tmp212 = tl.where(rmask, tmp213, _tmp212)
        tmp214 = tmp173 * tmp86
        tmp215 = tl.broadcast_to(tmp214, [XBLOCK, RBLOCK])
        tmp217 = _tmp216 + tmp215
        _tmp216 = tl.where(rmask, tmp217, _tmp216)
        tmp218 = tmp173 * tmp47
        tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
        tmp221 = _tmp220 + tmp219
        _tmp220 = tl.where(rmask, tmp221, _tmp220)
        tmp222 = tmp173 * tmp43
        tmp223 = tl.broadcast_to(tmp222, [XBLOCK, RBLOCK])
        tmp225 = _tmp224 + tmp223
        _tmp224 = tl.where(rmask, tmp225, _tmp224)
        tmp226 = tmp0 * tmp43
        tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
        tmp229 = _tmp228 + tmp227
        _tmp228 = tl.where(rmask, tmp229, _tmp228)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, None)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp13, None)
    tmp20 = tl.sum(_tmp20, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp20, None)
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp27, None)
    tmp34 = tl.sum(_tmp34, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp34, None)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp41, None)
    tmp50 = tl.sum(_tmp50, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp50, None)
    tmp59 = tl.sum(_tmp59, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp59, None)
    tmp68 = tl.sum(_tmp68, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp68, None)
    tmp77 = tl.sum(_tmp77, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp77, None)
    tmp89 = tl.sum(_tmp89, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp89, None)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp111, None)
    tmp115 = tl.sum(_tmp115, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp115, None)
    tmp119 = tl.sum(_tmp119, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp119, None)
    tmp123 = tl.sum(_tmp123, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp123, None)
    tmp127 = tl.sum(_tmp127, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp127, None)
    tmp131 = tl.sum(_tmp131, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp131, None)
    tmp135 = tl.sum(_tmp135, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp135, None)
    tmp139 = tl.sum(_tmp139, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp139, None)
    tmp143 = tl.sum(_tmp143, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp143, None)
    tmp147 = tl.sum(_tmp147, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp147, None)
    tmp151 = tl.sum(_tmp151, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp151, None)
    tmp155 = tl.sum(_tmp155, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp155, None)
    tmp159 = tl.sum(_tmp159, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp159, None)
    tmp176 = tl.sum(_tmp176, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp176, None)
    tmp180 = tl.sum(_tmp180, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp180, None)
    tmp184 = tl.sum(_tmp184, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp184, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp200, None)
    tmp204 = tl.sum(_tmp204, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp204, None)
    tmp208 = tl.sum(_tmp208, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp208, None)
    tmp212 = tl.sum(_tmp212, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp212, None)
    tmp216 = tl.sum(_tmp216, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp216, None)
    tmp220 = tl.sum(_tmp220, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp220, None)
    tmp224 = tl.sum(_tmp224, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp224, None)
    tmp228 = tl.sum(_tmp228, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp228, None)
''')


# kernel path: /tmp/torchinductor_mengqy/a2/ca2awnwi672bbs7ye3demojdn2ynnflmextyr5s26e76bpru63sc.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_156 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_156', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_156', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(50,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_156(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, xnumel, XBLOCK : tl.constexpr):
    xnumel = 344064
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 86016)
    x0 = xindex % 14
    x1 = (xindex // 14) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp135 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp159 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp171 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp200 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp204 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr45 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp216 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp220 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr48 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 12, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 11, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 10, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 9, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 8, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 7, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 6, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 5, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tl.full([1], 4, tl.int32)
    tmp53 = tmp3 == tmp52
    tmp55 = tl.where(tmp53, tmp54, tmp7)
    tmp56 = tl.where(tmp2, tmp55, tmp7)
    tmp57 = tmp51 + tmp56
    tmp58 = tmp3 == tmp1
    tmp60 = tl.where(tmp58, tmp59, tmp7)
    tmp61 = tl.where(tmp2, tmp60, tmp7)
    tmp62 = tmp57 + tmp61
    tmp63 = tl.full([1], 2, tl.int32)
    tmp64 = tmp3 == tmp63
    tmp66 = tl.where(tmp64, tmp65, tmp7)
    tmp67 = tl.where(tmp2, tmp66, tmp7)
    tmp68 = tmp62 + tmp67
    tmp69 = tl.full([1], 1, tl.int32)
    tmp70 = tmp3 == tmp69
    tmp72 = tl.where(tmp70, tmp71, tmp7)
    tmp73 = tl.where(tmp2, tmp72, tmp7)
    tmp74 = tmp68 + tmp73
    tmp75 = tl.full([1], 0, tl.int32)
    tmp76 = tmp3 == tmp75
    tmp78 = tl.where(tmp76, tmp77, tmp7)
    tmp79 = tl.where(tmp2, tmp78, tmp7)
    tmp80 = tmp74 + tmp79
    tmp81 = tmp0 == tmp63
    tmp83 = tl.where(tmp5, tmp82, tmp7)
    tmp84 = tl.where(tmp81, tmp83, tmp7)
    tmp85 = tmp80 + tmp84
    tmp87 = tl.where(tmp11, tmp86, tmp7)
    tmp88 = tl.where(tmp81, tmp87, tmp7)
    tmp89 = tmp85 + tmp88
    tmp91 = tl.where(tmp17, tmp90, tmp7)
    tmp92 = tl.where(tmp81, tmp91, tmp7)
    tmp93 = tmp89 + tmp92
    tmp95 = tl.where(tmp23, tmp94, tmp7)
    tmp96 = tl.where(tmp81, tmp95, tmp7)
    tmp97 = tmp93 + tmp96
    tmp99 = tl.where(tmp29, tmp98, tmp7)
    tmp100 = tl.where(tmp81, tmp99, tmp7)
    tmp101 = tmp97 + tmp100
    tmp103 = tl.where(tmp35, tmp102, tmp7)
    tmp104 = tl.where(tmp81, tmp103, tmp7)
    tmp105 = tmp101 + tmp104
    tmp107 = tl.where(tmp41, tmp106, tmp7)
    tmp108 = tl.where(tmp81, tmp107, tmp7)
    tmp109 = tmp105 + tmp108
    tmp111 = tl.where(tmp47, tmp110, tmp7)
    tmp112 = tl.where(tmp81, tmp111, tmp7)
    tmp113 = tmp109 + tmp112
    tmp115 = tl.where(tmp53, tmp114, tmp7)
    tmp116 = tl.where(tmp81, tmp115, tmp7)
    tmp117 = tmp113 + tmp116
    tmp119 = tl.where(tmp58, tmp118, tmp7)
    tmp120 = tl.where(tmp81, tmp119, tmp7)
    tmp121 = tmp117 + tmp120
    tmp123 = tl.where(tmp64, tmp122, tmp7)
    tmp124 = tl.where(tmp81, tmp123, tmp7)
    tmp125 = tmp121 + tmp124
    tmp127 = tl.where(tmp70, tmp126, tmp7)
    tmp128 = tl.where(tmp81, tmp127, tmp7)
    tmp129 = tmp125 + tmp128
    tmp131 = tl.where(tmp76, tmp130, tmp7)
    tmp132 = tl.where(tmp81, tmp131, tmp7)
    tmp133 = tmp129 + tmp132
    tmp134 = tmp0 == tmp69
    tmp136 = tl.where(tmp5, tmp135, tmp7)
    tmp137 = tl.where(tmp134, tmp136, tmp7)
    tmp138 = tmp133 + tmp137
    tmp140 = tl.where(tmp11, tmp139, tmp7)
    tmp141 = tl.where(tmp134, tmp140, tmp7)
    tmp142 = tmp138 + tmp141
    tmp144 = tl.where(tmp17, tmp143, tmp7)
    tmp145 = tl.where(tmp134, tmp144, tmp7)
    tmp146 = tmp142 + tmp145
    tmp148 = tl.where(tmp23, tmp147, tmp7)
    tmp149 = tl.where(tmp134, tmp148, tmp7)
    tmp150 = tmp146 + tmp149
    tmp152 = tl.where(tmp29, tmp151, tmp7)
    tmp153 = tl.where(tmp134, tmp152, tmp7)
    tmp154 = tmp150 + tmp153
    tmp156 = tl.where(tmp35, tmp155, tmp7)
    tmp157 = tl.where(tmp134, tmp156, tmp7)
    tmp158 = tmp154 + tmp157
    tmp160 = tl.where(tmp41, tmp159, tmp7)
    tmp161 = tl.where(tmp134, tmp160, tmp7)
    tmp162 = tmp158 + tmp161
    tmp164 = tl.where(tmp47, tmp163, tmp7)
    tmp165 = tl.where(tmp134, tmp164, tmp7)
    tmp166 = tmp162 + tmp165
    tmp168 = tl.where(tmp53, tmp167, tmp7)
    tmp169 = tl.where(tmp134, tmp168, tmp7)
    tmp170 = tmp166 + tmp169
    tmp172 = tl.where(tmp58, tmp171, tmp7)
    tmp173 = tl.where(tmp134, tmp172, tmp7)
    tmp174 = tmp170 + tmp173
    tmp176 = tl.where(tmp64, tmp175, tmp7)
    tmp177 = tl.where(tmp134, tmp176, tmp7)
    tmp178 = tmp174 + tmp177
    tmp180 = tl.where(tmp70, tmp179, tmp7)
    tmp181 = tl.where(tmp134, tmp180, tmp7)
    tmp182 = tmp178 + tmp181
    tmp184 = tl.where(tmp76, tmp183, tmp7)
    tmp185 = tl.where(tmp134, tmp184, tmp7)
    tmp186 = tmp182 + tmp185
    tmp187 = tmp0 == tmp75
    tmp189 = tl.where(tmp5, tmp188, tmp7)
    tmp190 = tl.where(tmp187, tmp189, tmp7)
    tmp191 = tmp186 + tmp190
    tmp193 = tl.where(tmp11, tmp192, tmp7)
    tmp194 = tl.where(tmp187, tmp193, tmp7)
    tmp195 = tmp191 + tmp194
    tmp197 = tl.where(tmp17, tmp196, tmp7)
    tmp198 = tl.where(tmp187, tmp197, tmp7)
    tmp199 = tmp195 + tmp198
    tmp201 = tl.where(tmp23, tmp200, tmp7)
    tmp202 = tl.where(tmp187, tmp201, tmp7)
    tmp203 = tmp199 + tmp202
    tmp205 = tl.where(tmp29, tmp204, tmp7)
    tmp206 = tl.where(tmp187, tmp205, tmp7)
    tmp207 = tmp203 + tmp206
    tmp209 = tl.where(tmp35, tmp208, tmp7)
    tmp210 = tl.where(tmp187, tmp209, tmp7)
    tmp211 = tmp207 + tmp210
    tmp213 = tl.where(tmp41, tmp212, tmp7)
    tmp214 = tl.where(tmp187, tmp213, tmp7)
    tmp215 = tmp211 + tmp214
    tmp217 = tl.where(tmp47, tmp216, tmp7)
    tmp218 = tl.where(tmp187, tmp217, tmp7)
    tmp219 = tmp215 + tmp218
    tmp221 = tl.where(tmp53, tmp220, tmp7)
    tmp222 = tl.where(tmp187, tmp221, tmp7)
    tmp223 = tmp219 + tmp222
    tmp225 = tl.where(tmp58, tmp224, tmp7)
    tmp226 = tl.where(tmp187, tmp225, tmp7)
    tmp227 = tmp223 + tmp226
    tl.store(in_out_ptr0 + (x3), tmp227, None)
''')


# kernel path: /tmp/torchinductor_mengqy/z5/cz5hrklsa6rfkb5q5me4rkbryniallfelapb5jv2cak2pscrz7uw.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_157 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_157', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_157', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_157(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 2688
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 14
    x4 = (xindex // 14)
    x2 = (xindex // 672)
    x1 = (xindex // 14) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (14*r3) + (1792*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/5w/c5wjgxkshfpwb6fknzctut3ohapwhfhwffu63xnmkkugs6uxznd7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_158 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_158', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_158', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_158(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 56
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 14
    x1 = (xindex // 14)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (14*r2) + (672*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/fm/cfmn5nswvzgba4n75k6wyyn46hrwsqlfbpwplk34zldbcrhj2nnz.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_159 = async_compile.triton('triton_poi_fused_clone_159', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_159', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_159(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 344064
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 14
    x1 = (xindex // 14) % 4
    x2 = (xindex // 56)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (14*x2) + (86016*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/7m/c7msncqmkp6m3buzon425i7ojyepfllg4hvltxiv342guu5kx3x5.py
# Source Nodes: [l__mod___dynamic_dense_12_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_12_act => add_451, convert_element_type_228, erf_12, mul_655
triton_poi_fused_gelu_gelu_backward_160 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_160', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_160', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_160(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 344064
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hg/chgegr3czvhbhgnjzqmajvz7imdnyylu2ktxm7huqxivkicmerra.py
# Source Nodes: [add_336, add_338], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_336 => add_447
# add_338 => add_449
triton_red_fused_add_div_mul_pow_sum_161 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_161', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_161', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_161(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp12 = tl.load(in_ptr5 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr7 + (15*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp23 = -0.5
        tmp24 = tmp8 * tmp23
        tmp25 = tmp20 * tmp20
        tmp26 = tmp25 * tmp20
        tmp27 = tmp24 * tmp26
        tmp28 = 2048.0
        tmp29 = tmp27 / tmp28
        tmp32 = tmp30 + tmp31
        tmp34 = tmp32 + tmp33
        tmp35 = 2.0
        tmp36 = tmp34 * tmp35
        tmp37 = tmp29 * tmp36
        tmp38 = tmp22 + tmp37
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp38, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/en/cenpjrmcy3abnvsezuc5uoqjmyto6inyr3auazrkireuomkogk4t.py
# Source Nodes: [add, add_128, add_162, add_198, add_20, add_200, add_242, add_31, add_312, add_324, add_33, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_442
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_31 => add_60
# add_312 => add_443
# add_324 => add_444
# add_33 => add_62
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_212
# float_2 => convert_element_type_214
# float_3 => convert_element_type_216
# mean => mean_58
# mean_1 => mean_59
# mean_2 => mean_60
# mul => mul_630
# mul_3 => mul_633
# mul_6 => mul_636
# rsqrt => rsqrt_58
# rsqrt_1 => rsqrt_59
# rsqrt_2 => rsqrt_60
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_162 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_162', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: 'i32', 134: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr11', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_162', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(133, 134))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_162(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_out_ptr11, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp18 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
        tmp19 = _tmp18 + tmp17
        _tmp18 = tl.where(rmask, tmp19, _tmp18)
        tmp22 = tmp20 * tmp21
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp23 * tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask, tmp29, _tmp28)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp18 = tl.sum(_tmp18, 1)[:, None]
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tmp34 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp77 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp95 = tl.load(in_ptr13 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr14 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr15 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr16 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr18 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr19 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr20 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr21 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr22 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr23 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr24 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr25 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr26 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr27 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr28 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr29 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr30 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr31 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr32 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr33 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr34 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr35 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr36 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr37 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr38 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp179 = tl.load(in_ptr39 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr40 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr41 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr42 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr43 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr44 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr45 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr46 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp205 = tl.load(in_ptr47 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp208 = tl.load(in_ptr48 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr49 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr50 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr51 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp221 = tl.load(in_ptr52 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr53 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr54 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr55 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr56 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp238 = tl.load(in_ptr57 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp241 = tl.load(in_ptr58 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp244 = tl.load(in_ptr59 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp247 = tl.load(in_ptr60 + (13*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp255 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp30 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp54 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp107 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp185 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp211 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp224 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp237 = tl.load(in_out_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tmp30 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp35 = 2048.0
        tmp36 = tmp34 / tmp35
        tmp37 = 1e-05
        tmp38 = tmp36 + tmp37
        tmp39 = tl.math.rsqrt(tmp38)
        tmp40 = tmp33 * tmp39
        tmp41 = -0.5
        tmp42 = tmp8 * tmp41
        tmp43 = tmp39 * tmp39
        tmp44 = tmp43 * tmp39
        tmp45 = tmp42 * tmp44
        tmp46 = tmp45 / tmp35
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp46 * tmp48
        tmp50 = tmp40 + tmp49
        tmp51 = tmp50 + tmp49
        tmp52 = tmp51.to(tl.float32)
        tmp55 = tmp53 * tmp54
        tmp56 = tmp55.to(tl.float32)
        tmp58 = tmp57 / tmp35
        tmp59 = tmp58 + tmp37
        tmp60 = tl.math.rsqrt(tmp59)
        tmp61 = tmp56 * tmp60
        tmp62 = tmp28 * tmp41
        tmp63 = tmp60 * tmp60
        tmp64 = tmp63 * tmp60
        tmp65 = tmp62 * tmp64
        tmp66 = tmp65 / tmp35
        tmp68 = tmp67.to(tl.float32)
        tmp69 = tmp66 * tmp68
        tmp70 = tmp61 + tmp69
        tmp71 = tmp70 + tmp69
        tmp72 = tmp71.to(tl.float32)
        tmp75 = tmp73 * tmp74
        tmp76 = tmp75.to(tl.float32)
        tmp78 = tmp77 / tmp35
        tmp79 = tmp78 + tmp37
        tmp80 = tl.math.rsqrt(tmp79)
        tmp81 = tmp76 * tmp80
        tmp82 = tmp18 * tmp41
        tmp83 = tmp80 * tmp80
        tmp84 = tmp83 * tmp80
        tmp85 = tmp82 * tmp84
        tmp86 = tmp85 / tmp35
        tmp88 = tmp87.to(tl.float32)
        tmp89 = tmp86 * tmp88
        tmp90 = tmp81 + tmp89
        tmp91 = tmp90 + tmp89
        tmp92 = tmp91.to(tl.float32)
        tmp96 = tmp94 * tmp95
        tmp97 = tmp93 + tmp96
        tmp99 = tmp52 * tmp98
        tmp100 = tmp97 + tmp99
        tmp102 = tmp72 * tmp101
        tmp103 = tmp100 + tmp102
        tmp105 = tmp92 * tmp104
        tmp106 = tmp103 + tmp105
        tmp109 = tmp94 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp52 * tmp111
        tmp113 = tmp110 + tmp112
        tmp115 = tmp72 * tmp114
        tmp116 = tmp113 + tmp115
        tmp118 = tmp92 * tmp117
        tmp119 = tmp116 + tmp118
        tmp122 = tmp94 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp52 * tmp124
        tmp126 = tmp123 + tmp125
        tmp128 = tmp72 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp92 * tmp130
        tmp132 = tmp129 + tmp131
        tmp135 = tmp94 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp52 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp72 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp92 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp94 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp52 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp72 * tmp153
        tmp155 = tmp152 + tmp154
        tmp157 = tmp92 * tmp156
        tmp158 = tmp155 + tmp157
        tmp161 = tmp94 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp52 * tmp163
        tmp165 = tmp162 + tmp164
        tmp167 = tmp72 * tmp166
        tmp168 = tmp165 + tmp167
        tmp170 = tmp92 * tmp169
        tmp171 = tmp168 + tmp170
        tmp174 = tmp94 * tmp173
        tmp175 = tmp172 + tmp174
        tmp177 = tmp52 * tmp176
        tmp178 = tmp175 + tmp177
        tmp180 = tmp72 * tmp179
        tmp181 = tmp178 + tmp180
        tmp183 = tmp92 * tmp182
        tmp184 = tmp181 + tmp183
        tmp187 = tmp94 * tmp186
        tmp188 = tmp185 + tmp187
        tmp190 = tmp52 * tmp189
        tmp191 = tmp188 + tmp190
        tmp193 = tmp72 * tmp192
        tmp194 = tmp191 + tmp193
        tmp196 = tmp92 * tmp195
        tmp197 = tmp194 + tmp196
        tmp200 = tmp94 * tmp199
        tmp201 = tmp198 + tmp200
        tmp203 = tmp52 * tmp202
        tmp204 = tmp201 + tmp203
        tmp206 = tmp72 * tmp205
        tmp207 = tmp204 + tmp206
        tmp209 = tmp92 * tmp208
        tmp210 = tmp207 + tmp209
        tmp213 = tmp94 * tmp212
        tmp214 = tmp211 + tmp213
        tmp216 = tmp52 * tmp215
        tmp217 = tmp214 + tmp216
        tmp219 = tmp72 * tmp218
        tmp220 = tmp217 + tmp219
        tmp222 = tmp92 * tmp221
        tmp223 = tmp220 + tmp222
        tmp226 = tmp94 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp52 * tmp228
        tmp230 = tmp227 + tmp229
        tmp232 = tmp72 * tmp231
        tmp233 = tmp230 + tmp232
        tmp235 = tmp92 * tmp234
        tmp236 = tmp233 + tmp235
        tmp239 = tmp94 * tmp238
        tmp240 = tmp237 + tmp239
        tmp242 = tmp52 * tmp241
        tmp243 = tmp240 + tmp242
        tmp245 = tmp72 * tmp244
        tmp246 = tmp243 + tmp245
        tmp248 = tmp92 * tmp247
        tmp249 = tmp246 + tmp248
        tmp252 = tmp250 + tmp251
        tmp253 = tmp94 * tmp252
        tmp254 = tl.broadcast_to(tmp253, [XBLOCK, RBLOCK])
        tmp256 = _tmp255 + tmp254
        _tmp255 = tl.where(rmask, tmp256, _tmp255)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp52, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp72, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp92, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp119, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp132, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp158, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp171, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp184, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp197, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp210, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp223, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp236, rmask)
        tl.store(in_out_ptr11 + (r1 + (2048*x0)), tmp249, rmask)
    tmp255 = tl.sum(_tmp255, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp255, None)
    _tmp263 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp268 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp283 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp287 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp291 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp295 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp302 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp306 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp310 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp314 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp321 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp325 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp329 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp333 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp342 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp346 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp350 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp354 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp361 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp365 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp369 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp373 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp380 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp384 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp388 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp392 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp401 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp405 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp409 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp413 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp420 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp424 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp428 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp432 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp257 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp265 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp270 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp276 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp277 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp279 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp297 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp335 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp336 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp338 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp356 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp357 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp376 = tl.load(in_ptr76 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp394 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp395 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp397 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp415 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp416 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tmp258 + tmp259
        tmp261 = tmp257 * tmp260
        tmp262 = tl.broadcast_to(tmp261, [XBLOCK, RBLOCK])
        tmp264 = _tmp263 + tmp262
        _tmp263 = tl.where(rmask, tmp264, _tmp263)
        tmp266 = tmp265 * tmp260
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
        tmp269 = _tmp268 + tmp267
        _tmp268 = tl.where(rmask, tmp269, _tmp268)
        tmp271 = tmp270 * tmp260
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
        tmp278 = tmp276 + tmp277
        tmp280 = tmp278 + tmp279
        tmp281 = tmp275 * tmp280
        tmp282 = tl.broadcast_to(tmp281, [XBLOCK, RBLOCK])
        tmp284 = _tmp283 + tmp282
        _tmp283 = tl.where(rmask, tmp284, _tmp283)
        tmp285 = tmp257 * tmp280
        tmp286 = tl.broadcast_to(tmp285, [XBLOCK, RBLOCK])
        tmp288 = _tmp287 + tmp286
        _tmp287 = tl.where(rmask, tmp288, _tmp287)
        tmp289 = tmp265 * tmp280
        tmp290 = tl.broadcast_to(tmp289, [XBLOCK, RBLOCK])
        tmp292 = _tmp291 + tmp290
        _tmp291 = tl.where(rmask, tmp292, _tmp291)
        tmp293 = tmp270 * tmp280
        tmp294 = tl.broadcast_to(tmp293, [XBLOCK, RBLOCK])
        tmp296 = _tmp295 + tmp294
        _tmp295 = tl.where(rmask, tmp296, _tmp295)
        tmp299 = tmp297 + tmp298
        tmp300 = tmp275 * tmp299
        tmp301 = tl.broadcast_to(tmp300, [XBLOCK, RBLOCK])
        tmp303 = _tmp302 + tmp301
        _tmp302 = tl.where(rmask, tmp303, _tmp302)
        tmp304 = tmp257 * tmp299
        tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
        tmp307 = _tmp306 + tmp305
        _tmp306 = tl.where(rmask, tmp307, _tmp306)
        tmp308 = tmp265 * tmp299
        tmp309 = tl.broadcast_to(tmp308, [XBLOCK, RBLOCK])
        tmp311 = _tmp310 + tmp309
        _tmp310 = tl.where(rmask, tmp311, _tmp310)
        tmp312 = tmp270 * tmp299
        tmp313 = tl.broadcast_to(tmp312, [XBLOCK, RBLOCK])
        tmp315 = _tmp314 + tmp313
        _tmp314 = tl.where(rmask, tmp315, _tmp314)
        tmp318 = tmp316 + tmp317
        tmp319 = tmp275 * tmp318
        tmp320 = tl.broadcast_to(tmp319, [XBLOCK, RBLOCK])
        tmp322 = _tmp321 + tmp320
        _tmp321 = tl.where(rmask, tmp322, _tmp321)
        tmp323 = tmp257 * tmp318
        tmp324 = tl.broadcast_to(tmp323, [XBLOCK, RBLOCK])
        tmp326 = _tmp325 + tmp324
        _tmp325 = tl.where(rmask, tmp326, _tmp325)
        tmp327 = tmp265 * tmp318
        tmp328 = tl.broadcast_to(tmp327, [XBLOCK, RBLOCK])
        tmp330 = _tmp329 + tmp328
        _tmp329 = tl.where(rmask, tmp330, _tmp329)
        tmp331 = tmp270 * tmp318
        tmp332 = tl.broadcast_to(tmp331, [XBLOCK, RBLOCK])
        tmp334 = _tmp333 + tmp332
        _tmp333 = tl.where(rmask, tmp334, _tmp333)
        tmp337 = tmp335 + tmp336
        tmp339 = tmp337 + tmp338
        tmp340 = tmp275 * tmp339
        tmp341 = tl.broadcast_to(tmp340, [XBLOCK, RBLOCK])
        tmp343 = _tmp342 + tmp341
        _tmp342 = tl.where(rmask, tmp343, _tmp342)
        tmp344 = tmp257 * tmp339
        tmp345 = tl.broadcast_to(tmp344, [XBLOCK, RBLOCK])
        tmp347 = _tmp346 + tmp345
        _tmp346 = tl.where(rmask, tmp347, _tmp346)
        tmp348 = tmp265 * tmp339
        tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
        tmp351 = _tmp350 + tmp349
        _tmp350 = tl.where(rmask, tmp351, _tmp350)
        tmp352 = tmp270 * tmp339
        tmp353 = tl.broadcast_to(tmp352, [XBLOCK, RBLOCK])
        tmp355 = _tmp354 + tmp353
        _tmp354 = tl.where(rmask, tmp355, _tmp354)
        tmp358 = tmp356 + tmp357
        tmp359 = tmp275 * tmp358
        tmp360 = tl.broadcast_to(tmp359, [XBLOCK, RBLOCK])
        tmp362 = _tmp361 + tmp360
        _tmp361 = tl.where(rmask, tmp362, _tmp361)
        tmp363 = tmp257 * tmp358
        tmp364 = tl.broadcast_to(tmp363, [XBLOCK, RBLOCK])
        tmp366 = _tmp365 + tmp364
        _tmp365 = tl.where(rmask, tmp366, _tmp365)
        tmp367 = tmp265 * tmp358
        tmp368 = tl.broadcast_to(tmp367, [XBLOCK, RBLOCK])
        tmp370 = _tmp369 + tmp368
        _tmp369 = tl.where(rmask, tmp370, _tmp369)
        tmp371 = tmp270 * tmp358
        tmp372 = tl.broadcast_to(tmp371, [XBLOCK, RBLOCK])
        tmp374 = _tmp373 + tmp372
        _tmp373 = tl.where(rmask, tmp374, _tmp373)
        tmp377 = tmp375 + tmp376
        tmp378 = tmp275 * tmp377
        tmp379 = tl.broadcast_to(tmp378, [XBLOCK, RBLOCK])
        tmp381 = _tmp380 + tmp379
        _tmp380 = tl.where(rmask, tmp381, _tmp380)
        tmp382 = tmp257 * tmp377
        tmp383 = tl.broadcast_to(tmp382, [XBLOCK, RBLOCK])
        tmp385 = _tmp384 + tmp383
        _tmp384 = tl.where(rmask, tmp385, _tmp384)
        tmp386 = tmp265 * tmp377
        tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
        tmp389 = _tmp388 + tmp387
        _tmp388 = tl.where(rmask, tmp389, _tmp388)
        tmp390 = tmp270 * tmp377
        tmp391 = tl.broadcast_to(tmp390, [XBLOCK, RBLOCK])
        tmp393 = _tmp392 + tmp391
        _tmp392 = tl.where(rmask, tmp393, _tmp392)
        tmp396 = tmp394 + tmp395
        tmp398 = tmp396 + tmp397
        tmp399 = tmp275 * tmp398
        tmp400 = tl.broadcast_to(tmp399, [XBLOCK, RBLOCK])
        tmp402 = _tmp401 + tmp400
        _tmp401 = tl.where(rmask, tmp402, _tmp401)
        tmp403 = tmp257 * tmp398
        tmp404 = tl.broadcast_to(tmp403, [XBLOCK, RBLOCK])
        tmp406 = _tmp405 + tmp404
        _tmp405 = tl.where(rmask, tmp406, _tmp405)
        tmp407 = tmp265 * tmp398
        tmp408 = tl.broadcast_to(tmp407, [XBLOCK, RBLOCK])
        tmp410 = _tmp409 + tmp408
        _tmp409 = tl.where(rmask, tmp410, _tmp409)
        tmp411 = tmp270 * tmp398
        tmp412 = tl.broadcast_to(tmp411, [XBLOCK, RBLOCK])
        tmp414 = _tmp413 + tmp412
        _tmp413 = tl.where(rmask, tmp414, _tmp413)
        tmp417 = tmp415 + tmp416
        tmp418 = tmp275 * tmp417
        tmp419 = tl.broadcast_to(tmp418, [XBLOCK, RBLOCK])
        tmp421 = _tmp420 + tmp419
        _tmp420 = tl.where(rmask, tmp421, _tmp420)
        tmp422 = tmp257 * tmp417
        tmp423 = tl.broadcast_to(tmp422, [XBLOCK, RBLOCK])
        tmp425 = _tmp424 + tmp423
        _tmp424 = tl.where(rmask, tmp425, _tmp424)
        tmp426 = tmp265 * tmp417
        tmp427 = tl.broadcast_to(tmp426, [XBLOCK, RBLOCK])
        tmp429 = _tmp428 + tmp427
        _tmp428 = tl.where(rmask, tmp429, _tmp428)
        tmp430 = tmp270 * tmp417
        tmp431 = tl.broadcast_to(tmp430, [XBLOCK, RBLOCK])
        tmp433 = _tmp432 + tmp431
        _tmp432 = tl.where(rmask, tmp433, _tmp432)
    tmp263 = tl.sum(_tmp263, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp263, None)
    tmp268 = tl.sum(_tmp268, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp268, None)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp273, None)
    tmp283 = tl.sum(_tmp283, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp283, None)
    tmp287 = tl.sum(_tmp287, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp287, None)
    tmp291 = tl.sum(_tmp291, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp291, None)
    tmp295 = tl.sum(_tmp295, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp295, None)
    tmp302 = tl.sum(_tmp302, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp302, None)
    tmp306 = tl.sum(_tmp306, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp306, None)
    tmp310 = tl.sum(_tmp310, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp310, None)
    tmp314 = tl.sum(_tmp314, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp314, None)
    tmp321 = tl.sum(_tmp321, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp321, None)
    tmp325 = tl.sum(_tmp325, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp325, None)
    tmp329 = tl.sum(_tmp329, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp329, None)
    tmp333 = tl.sum(_tmp333, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp333, None)
    tmp342 = tl.sum(_tmp342, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp342, None)
    tmp346 = tl.sum(_tmp346, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp346, None)
    tmp350 = tl.sum(_tmp350, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp350, None)
    tmp354 = tl.sum(_tmp354, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp354, None)
    tmp361 = tl.sum(_tmp361, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp361, None)
    tmp365 = tl.sum(_tmp365, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp365, None)
    tmp369 = tl.sum(_tmp369, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp369, None)
    tmp373 = tl.sum(_tmp373, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp373, None)
    tmp380 = tl.sum(_tmp380, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp380, None)
    tmp384 = tl.sum(_tmp384, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp384, None)
    tmp388 = tl.sum(_tmp388, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp388, None)
    tmp392 = tl.sum(_tmp392, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp392, None)
    tmp401 = tl.sum(_tmp401, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp401, None)
    tmp405 = tl.sum(_tmp405, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp405, None)
    tmp409 = tl.sum(_tmp409, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp409, None)
    tmp413 = tl.sum(_tmp413, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp413, None)
    tmp420 = tl.sum(_tmp420, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp420, None)
    tmp424 = tl.sum(_tmp424, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp424, None)
    tmp428 = tl.sum(_tmp428, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp428, None)
    tmp432 = tl.sum(_tmp432, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp432, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3l/c3lt2wwtbg7ofpvd7zskgyldl4idruf2kfvvk3fzpbqorwmcaevj.py
# Source Nodes: [add_10, add_12, add_3, add_5, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_3 => add_3
# add_5 => add_12, add_5
# mul_4 => mul_24
triton_red_fused_add_mul_sum_163 = async_compile.triton('triton_red_fused_add_mul_sum_163', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: 'i32', 23: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mul_sum_163', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(22, 23))]}
)
@triton.jit
def triton_red_fused_add_mul_sum_163(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp17 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp22 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp35 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp39 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp43 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp47 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp51 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp55 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp59 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp63 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = 0.0
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp0 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tmp15 = tmp14 * tmp9
        tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
        tmp18 = _tmp17 + tmp16
        _tmp17 = tl.where(rmask, tmp18, _tmp17)
        tmp20 = tmp19 * tmp9
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = _tmp22 + tmp21
        _tmp22 = tl.where(rmask, tmp23, _tmp22)
        tmp25 = tmp24 * tmp9
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp30 = tmp2 + tmp29
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 * tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = _tmp35 + tmp34
        _tmp35 = tl.where(rmask, tmp36, _tmp35)
        tmp37 = tmp14 * tmp32
        tmp38 = tl.broadcast_to(tmp37, [XBLOCK, RBLOCK])
        tmp40 = _tmp39 + tmp38
        _tmp39 = tl.where(rmask, tmp40, _tmp39)
        tmp41 = tmp19 * tmp32
        tmp42 = tl.broadcast_to(tmp41, [XBLOCK, RBLOCK])
        tmp44 = _tmp43 + tmp42
        _tmp43 = tl.where(rmask, tmp44, _tmp43)
        tmp45 = tmp24 * tmp32
        tmp46 = tl.broadcast_to(tmp45, [XBLOCK, RBLOCK])
        tmp48 = _tmp47 + tmp46
        _tmp47 = tl.where(rmask, tmp48, _tmp47)
        tmp49 = tmp0 * tmp2
        tmp50 = tl.broadcast_to(tmp49, [XBLOCK, RBLOCK])
        tmp52 = _tmp51 + tmp50
        _tmp51 = tl.where(rmask, tmp52, _tmp51)
        tmp53 = tmp14 * tmp2
        tmp54 = tl.broadcast_to(tmp53, [XBLOCK, RBLOCK])
        tmp56 = _tmp55 + tmp54
        _tmp55 = tl.where(rmask, tmp56, _tmp55)
        tmp57 = tmp19 * tmp2
        tmp58 = tl.broadcast_to(tmp57, [XBLOCK, RBLOCK])
        tmp60 = _tmp59 + tmp58
        _tmp59 = tl.where(rmask, tmp60, _tmp59)
        tmp61 = tmp24 * tmp2
        tmp62 = tl.broadcast_to(tmp61, [XBLOCK, RBLOCK])
        tmp64 = _tmp63 + tmp62
        _tmp63 = tl.where(rmask, tmp64, _tmp63)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp12, None)
    tmp17 = tl.sum(_tmp17, 1)[:, None]
    tl.store(out_ptr1 + (x0), tmp17, None)
    tmp22 = tl.sum(_tmp22, 1)[:, None]
    tl.store(out_ptr2 + (x0), tmp22, None)
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp27, None)
    tmp35 = tl.sum(_tmp35, 1)[:, None]
    tl.store(out_ptr4 + (x0), tmp35, None)
    tmp39 = tl.sum(_tmp39, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp39, None)
    tmp43 = tl.sum(_tmp43, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp43, None)
    tmp47 = tl.sum(_tmp47, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp47, None)
    tmp51 = tl.sum(_tmp51, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp51, None)
    tmp55 = tl.sum(_tmp55, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp55, None)
    tmp59 = tl.sum(_tmp59, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp59, None)
    tmp63 = tl.sum(_tmp63, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp63, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qf/cqfin57zbvaqiz25245xl3t35c4aeyfkk56ej6xay3g2wwhy644s.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_164 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_164', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_164', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(46,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_164(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, xnumel, XBLOCK : tl.constexpr):
    xnumel = 319488
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 79872)
    x0 = xindex % 13
    x1 = (xindex // 13) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp53 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp129 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp161 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp178 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp182 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp194 = tl.load(in_ptr41 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp198 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr44 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 11, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 10, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 9, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 8, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 7, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 6, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 5, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tl.full([1], 4, tl.int32)
    tmp47 = tmp3 == tmp46
    tmp49 = tl.where(tmp47, tmp48, tmp7)
    tmp50 = tl.where(tmp2, tmp49, tmp7)
    tmp51 = tmp45 + tmp50
    tmp52 = tmp3 == tmp1
    tmp54 = tl.where(tmp52, tmp53, tmp7)
    tmp55 = tl.where(tmp2, tmp54, tmp7)
    tmp56 = tmp51 + tmp55
    tmp57 = tl.full([1], 2, tl.int32)
    tmp58 = tmp3 == tmp57
    tmp60 = tl.where(tmp58, tmp59, tmp7)
    tmp61 = tl.where(tmp2, tmp60, tmp7)
    tmp62 = tmp56 + tmp61
    tmp63 = tl.full([1], 1, tl.int32)
    tmp64 = tmp3 == tmp63
    tmp66 = tl.where(tmp64, tmp65, tmp7)
    tmp67 = tl.where(tmp2, tmp66, tmp7)
    tmp68 = tmp62 + tmp67
    tmp69 = tl.full([1], 0, tl.int32)
    tmp70 = tmp3 == tmp69
    tmp72 = tl.where(tmp70, tmp71, tmp7)
    tmp73 = tl.where(tmp2, tmp72, tmp7)
    tmp74 = tmp68 + tmp73
    tmp75 = tmp0 == tmp57
    tmp77 = tl.where(tmp5, tmp76, tmp7)
    tmp78 = tl.where(tmp75, tmp77, tmp7)
    tmp79 = tmp74 + tmp78
    tmp81 = tl.where(tmp11, tmp80, tmp7)
    tmp82 = tl.where(tmp75, tmp81, tmp7)
    tmp83 = tmp79 + tmp82
    tmp85 = tl.where(tmp17, tmp84, tmp7)
    tmp86 = tl.where(tmp75, tmp85, tmp7)
    tmp87 = tmp83 + tmp86
    tmp89 = tl.where(tmp23, tmp88, tmp7)
    tmp90 = tl.where(tmp75, tmp89, tmp7)
    tmp91 = tmp87 + tmp90
    tmp93 = tl.where(tmp29, tmp92, tmp7)
    tmp94 = tl.where(tmp75, tmp93, tmp7)
    tmp95 = tmp91 + tmp94
    tmp97 = tl.where(tmp35, tmp96, tmp7)
    tmp98 = tl.where(tmp75, tmp97, tmp7)
    tmp99 = tmp95 + tmp98
    tmp101 = tl.where(tmp41, tmp100, tmp7)
    tmp102 = tl.where(tmp75, tmp101, tmp7)
    tmp103 = tmp99 + tmp102
    tmp105 = tl.where(tmp47, tmp104, tmp7)
    tmp106 = tl.where(tmp75, tmp105, tmp7)
    tmp107 = tmp103 + tmp106
    tmp109 = tl.where(tmp52, tmp108, tmp7)
    tmp110 = tl.where(tmp75, tmp109, tmp7)
    tmp111 = tmp107 + tmp110
    tmp113 = tl.where(tmp58, tmp112, tmp7)
    tmp114 = tl.where(tmp75, tmp113, tmp7)
    tmp115 = tmp111 + tmp114
    tmp117 = tl.where(tmp64, tmp116, tmp7)
    tmp118 = tl.where(tmp75, tmp117, tmp7)
    tmp119 = tmp115 + tmp118
    tmp121 = tl.where(tmp70, tmp120, tmp7)
    tmp122 = tl.where(tmp75, tmp121, tmp7)
    tmp123 = tmp119 + tmp122
    tmp124 = tmp0 == tmp63
    tmp126 = tl.where(tmp5, tmp125, tmp7)
    tmp127 = tl.where(tmp124, tmp126, tmp7)
    tmp128 = tmp123 + tmp127
    tmp130 = tl.where(tmp11, tmp129, tmp7)
    tmp131 = tl.where(tmp124, tmp130, tmp7)
    tmp132 = tmp128 + tmp131
    tmp134 = tl.where(tmp17, tmp133, tmp7)
    tmp135 = tl.where(tmp124, tmp134, tmp7)
    tmp136 = tmp132 + tmp135
    tmp138 = tl.where(tmp23, tmp137, tmp7)
    tmp139 = tl.where(tmp124, tmp138, tmp7)
    tmp140 = tmp136 + tmp139
    tmp142 = tl.where(tmp29, tmp141, tmp7)
    tmp143 = tl.where(tmp124, tmp142, tmp7)
    tmp144 = tmp140 + tmp143
    tmp146 = tl.where(tmp35, tmp145, tmp7)
    tmp147 = tl.where(tmp124, tmp146, tmp7)
    tmp148 = tmp144 + tmp147
    tmp150 = tl.where(tmp41, tmp149, tmp7)
    tmp151 = tl.where(tmp124, tmp150, tmp7)
    tmp152 = tmp148 + tmp151
    tmp154 = tl.where(tmp47, tmp153, tmp7)
    tmp155 = tl.where(tmp124, tmp154, tmp7)
    tmp156 = tmp152 + tmp155
    tmp158 = tl.where(tmp52, tmp157, tmp7)
    tmp159 = tl.where(tmp124, tmp158, tmp7)
    tmp160 = tmp156 + tmp159
    tmp162 = tl.where(tmp58, tmp161, tmp7)
    tmp163 = tl.where(tmp124, tmp162, tmp7)
    tmp164 = tmp160 + tmp163
    tmp166 = tl.where(tmp64, tmp165, tmp7)
    tmp167 = tl.where(tmp124, tmp166, tmp7)
    tmp168 = tmp164 + tmp167
    tmp170 = tl.where(tmp70, tmp169, tmp7)
    tmp171 = tl.where(tmp124, tmp170, tmp7)
    tmp172 = tmp168 + tmp171
    tmp173 = tmp0 == tmp69
    tmp175 = tl.where(tmp5, tmp174, tmp7)
    tmp176 = tl.where(tmp173, tmp175, tmp7)
    tmp177 = tmp172 + tmp176
    tmp179 = tl.where(tmp11, tmp178, tmp7)
    tmp180 = tl.where(tmp173, tmp179, tmp7)
    tmp181 = tmp177 + tmp180
    tmp183 = tl.where(tmp17, tmp182, tmp7)
    tmp184 = tl.where(tmp173, tmp183, tmp7)
    tmp185 = tmp181 + tmp184
    tmp187 = tl.where(tmp23, tmp186, tmp7)
    tmp188 = tl.where(tmp173, tmp187, tmp7)
    tmp189 = tmp185 + tmp188
    tmp191 = tl.where(tmp29, tmp190, tmp7)
    tmp192 = tl.where(tmp173, tmp191, tmp7)
    tmp193 = tmp189 + tmp192
    tmp195 = tl.where(tmp35, tmp194, tmp7)
    tmp196 = tl.where(tmp173, tmp195, tmp7)
    tmp197 = tmp193 + tmp196
    tmp199 = tl.where(tmp41, tmp198, tmp7)
    tmp200 = tl.where(tmp173, tmp199, tmp7)
    tmp201 = tmp197 + tmp200
    tmp203 = tl.where(tmp47, tmp202, tmp7)
    tmp204 = tl.where(tmp173, tmp203, tmp7)
    tmp205 = tmp201 + tmp204
    tmp207 = tl.where(tmp52, tmp206, tmp7)
    tmp208 = tl.where(tmp173, tmp207, tmp7)
    tmp209 = tmp205 + tmp208
    tl.store(in_out_ptr0 + (x3), tmp209, None)
''')


# kernel path: /tmp/torchinductor_mengqy/44/c4475c5dkwrejo44lcinwx4ssqei62y75xbz6hons243rmukb3ch.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_165 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_165', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_165', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_165(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 2496
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 13
    x4 = (xindex // 13)
    x2 = (xindex // 624)
    x1 = (xindex // 13) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (13*r3) + (1664*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/fk/cfkxidds5a66b4dha2tzmtx6yzgoyceten234yyi37mlazk5qzb3.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_166 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_166', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_166', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_166(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 52
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 13
    x1 = (xindex // 13)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (13*r2) + (624*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ph/cph7f6goe6v7y2kheo7qshf2lhue2fdt5wy7koziyqeh3qqdt3jt.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_167 = async_compile.triton('triton_poi_fused_clone_167', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_167', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_167(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 319488
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 13
    x1 = (xindex // 13) % 4
    x2 = (xindex // 52)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (13*x2) + (79872*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/iq/ciqxw47elxoeguypwcgm54uamcffj4fhagcsm6p6siqaqccff3ti.py
# Source Nodes: [l__mod___dynamic_dense_11_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_11_act => add_392, convert_element_type_210, erf_11, mul_580
triton_poi_fused_gelu_gelu_backward_168 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_168', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_168', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_168(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 319488
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/r4/cr4gnp3doagirub5aaazmbe6bosfyyb2jdto5s65vzbztp4ccjpr.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_264, add_275, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_383
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_264 => add_384
# add_275 => add_385
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mean => mean_53
# mean_1 => mean_54
# mean_2 => mean_55
# mul => mul_555
# mul_3 => mul_558
# mul_4 => mul_24
# mul_6 => mul_561
# rsqrt => rsqrt_53
# rsqrt_1 => rsqrt_54
# rsqrt_2 => rsqrt_55
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_169 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_169', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp32', 14: '*fp16', 15: '*fp16', 16: '*fp32', 17: '*fp16', 18: '*fp16', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: '*fp16', 120: '*fp16', 121: '*fp16', 122: '*fp16', 123: '*fp16', 124: '*fp16', 125: '*fp16', 126: '*fp16', 127: '*fp16', 128: '*fp16', 129: '*fp16', 130: '*fp16', 131: '*fp16', 132: '*fp16', 133: '*fp16', 134: '*fp16', 135: '*fp16', 136: '*fp16', 137: '*fp16', 138: '*fp16', 139: '*fp16', 140: 'i32', 141: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr10', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_169', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(140, 141))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_169(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_out_ptr10, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, out_ptr46, out_ptr47, out_ptr48, out_ptr49, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp25 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp18 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = tmp12 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp20 = tmp18 * tmp19
        tmp21 = tmp20.to(tl.float32)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK, RBLOCK])
        tmp26 = _tmp25 + tmp24
        _tmp25 = tl.where(rmask, tmp26, _tmp25)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tmp25 = tl.sum(_tmp25, 1)[:, None]
    tmp31 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp72 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr13 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr14 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr16 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr17 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr18 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr19 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr20 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr21 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr22 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr23 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr24 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr25 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr26 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr27 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr28 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr29 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr30 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr31 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr32 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr33 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr34 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr35 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr36 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr37 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr38 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr39 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr40 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr41 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr42 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr43 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp189 = tl.load(in_ptr44 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr45 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp196 = tl.load(in_ptr46 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp199 = tl.load(in_ptr47 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr48 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr49 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr50 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr51 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr52 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr53 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr54 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr55 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr56 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp238 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp27 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp49 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0)
        tmp68 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp87 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_out_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp234 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tmp27 * tmp28
        tmp30 = tmp29.to(tl.float32)
        tmp32 = 2048.0
        tmp33 = tmp31 / tmp32
        tmp34 = 1e-05
        tmp35 = tmp33 + tmp34
        tmp36 = tl.math.rsqrt(tmp35)
        tmp37 = tmp30 * tmp36
        tmp38 = -0.5
        tmp39 = tmp7 * tmp38
        tmp40 = tmp36 * tmp36
        tmp41 = tmp40 * tmp36
        tmp42 = tmp39 * tmp41
        tmp43 = tmp42 / tmp32
        tmp45 = tmp43 * tmp44
        tmp46 = tmp37 + tmp45
        tmp47 = tmp46 + tmp45
        tmp48 = tmp47.to(tl.float32)
        tmp51 = tmp49 * tmp50
        tmp52 = tmp51.to(tl.float32)
        tmp54 = tmp53 / tmp32
        tmp55 = tmp54 + tmp34
        tmp56 = tl.math.rsqrt(tmp55)
        tmp57 = tmp52 * tmp56
        tmp58 = tmp25 * tmp38
        tmp59 = tmp56 * tmp56
        tmp60 = tmp59 * tmp56
        tmp61 = tmp58 * tmp60
        tmp62 = tmp61 / tmp32
        tmp64 = tmp62 * tmp63
        tmp65 = tmp57 + tmp64
        tmp66 = tmp65 + tmp64
        tmp67 = tmp66.to(tl.float32)
        tmp70 = tmp68 * tmp69
        tmp71 = tmp70.to(tl.float32)
        tmp73 = tmp72 / tmp32
        tmp74 = tmp73 + tmp34
        tmp75 = tl.math.rsqrt(tmp74)
        tmp76 = tmp71 * tmp75
        tmp77 = tmp16 * tmp38
        tmp78 = tmp75 * tmp75
        tmp79 = tmp78 * tmp75
        tmp80 = tmp77 * tmp79
        tmp81 = tmp80 / tmp32
        tmp83 = tmp81 * tmp82
        tmp84 = tmp76 + tmp83
        tmp85 = tmp84 + tmp83
        tmp86 = tmp85.to(tl.float32)
        tmp90 = tmp88 * tmp89
        tmp91 = tmp87 + tmp90
        tmp93 = tmp48 * tmp92
        tmp94 = tmp91 + tmp93
        tmp96 = tmp67 * tmp95
        tmp97 = tmp94 + tmp96
        tmp99 = tmp86 * tmp98
        tmp100 = tmp97 + tmp99
        tmp103 = tmp88 * tmp102
        tmp104 = tmp101 + tmp103
        tmp106 = tmp48 * tmp105
        tmp107 = tmp104 + tmp106
        tmp109 = tmp67 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp86 * tmp111
        tmp113 = tmp110 + tmp112
        tmp116 = tmp88 * tmp115
        tmp117 = tmp114 + tmp116
        tmp119 = tmp48 * tmp118
        tmp120 = tmp117 + tmp119
        tmp122 = tmp67 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp86 * tmp124
        tmp126 = tmp123 + tmp125
        tmp129 = tmp88 * tmp128
        tmp130 = tmp127 + tmp129
        tmp132 = tmp48 * tmp131
        tmp133 = tmp130 + tmp132
        tmp135 = tmp67 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp86 * tmp137
        tmp139 = tmp136 + tmp138
        tmp142 = tmp88 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp48 * tmp144
        tmp146 = tmp143 + tmp145
        tmp148 = tmp67 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp86 * tmp150
        tmp152 = tmp149 + tmp151
        tmp155 = tmp88 * tmp154
        tmp156 = tmp153 + tmp155
        tmp158 = tmp48 * tmp157
        tmp159 = tmp156 + tmp158
        tmp161 = tmp67 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp86 * tmp163
        tmp165 = tmp162 + tmp164
        tmp168 = tmp88 * tmp167
        tmp169 = tmp166 + tmp168
        tmp171 = tmp48 * tmp170
        tmp172 = tmp169 + tmp171
        tmp174 = tmp67 * tmp173
        tmp175 = tmp172 + tmp174
        tmp177 = tmp86 * tmp176
        tmp178 = tmp175 + tmp177
        tmp181 = tmp88 * tmp180
        tmp182 = tmp179 + tmp181
        tmp184 = tmp48 * tmp183
        tmp185 = tmp182 + tmp184
        tmp187 = tmp67 * tmp186
        tmp188 = tmp185 + tmp187
        tmp190 = tmp86 * tmp189
        tmp191 = tmp188 + tmp190
        tmp194 = tmp88 * tmp193
        tmp195 = tmp192 + tmp194
        tmp197 = tmp48 * tmp196
        tmp198 = tmp195 + tmp197
        tmp200 = tmp67 * tmp199
        tmp201 = tmp198 + tmp200
        tmp203 = tmp86 * tmp202
        tmp204 = tmp201 + tmp203
        tmp207 = tmp88 * tmp206
        tmp208 = tmp205 + tmp207
        tmp210 = tmp48 * tmp209
        tmp211 = tmp208 + tmp210
        tmp213 = tmp67 * tmp212
        tmp214 = tmp211 + tmp213
        tmp216 = tmp86 * tmp215
        tmp217 = tmp214 + tmp216
        tmp220 = tmp88 * tmp219
        tmp221 = tmp218 + tmp220
        tmp223 = tmp48 * tmp222
        tmp224 = tmp221 + tmp223
        tmp226 = tmp67 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp86 * tmp228
        tmp230 = tmp227 + tmp229
        tmp233 = tmp231 + tmp232
        tmp235 = tmp233 + tmp234
        tmp236 = tmp88 * tmp235
        tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
        tmp239 = _tmp238 + tmp237
        _tmp238 = tl.where(rmask, tmp239, _tmp238)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp48, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp67, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp100, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp113, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp139, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp152, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp165, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp178, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp191, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp204, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp217, rmask)
        tl.store(in_out_ptr10 + (r1 + (2048*x0)), tmp230, rmask)
    tmp238 = tl.sum(_tmp238, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp238, None)
    _tmp248 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp258 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp274 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp278 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp285 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp289 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp293 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp297 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp306 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp310 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp314 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp318 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp325 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp329 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp333 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp337 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp344 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp348 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp352 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp356 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp365 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp369 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp373 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp377 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp384 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp388 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp392 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp396 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp398 = tl.load(in_ptr76 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp409 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp413 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp417 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp421 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp429 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp433 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp437 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp441 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp445 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp449 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp453 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp457 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp240 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp241 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp242 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp244 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp255 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp262 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp280 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp281 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp300 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp302 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp320 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp339 = tl.load(in_ptr69 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp340 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp358 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp359 = tl.load(in_ptr72 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp361 = tl.load(in_ptr73 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp379 = tl.load(in_ptr74 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp380 = tl.load(in_ptr75 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp399 = tl.load(in_ptr77 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp403 = tl.load(in_ptr78 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp405 = tl.load(in_ptr79 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp423 = tl.load(in_ptr80 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp425 = tl.load(in_ptr81 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp243 = tmp241 + tmp242
        tmp245 = tmp243 + tmp244
        tmp246 = tmp240 * tmp245
        tmp247 = tl.broadcast_to(tmp246, [XBLOCK, RBLOCK])
        tmp249 = _tmp248 + tmp247
        _tmp248 = tl.where(rmask, tmp249, _tmp248)
        tmp251 = tmp250 * tmp245
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp256 = tmp255 * tmp245
        tmp257 = tl.broadcast_to(tmp256, [XBLOCK, RBLOCK])
        tmp259 = _tmp258 + tmp257
        _tmp258 = tl.where(rmask, tmp259, _tmp258)
        tmp263 = tmp261 + tmp262
        tmp264 = tmp260 * tmp263
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tmp268 = tmp240 * tmp263
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp272 = tmp250 * tmp263
        tmp273 = tl.broadcast_to(tmp272, [XBLOCK, RBLOCK])
        tmp275 = _tmp274 + tmp273
        _tmp274 = tl.where(rmask, tmp275, _tmp274)
        tmp276 = tmp255 * tmp263
        tmp277 = tl.broadcast_to(tmp276, [XBLOCK, RBLOCK])
        tmp279 = _tmp278 + tmp277
        _tmp278 = tl.where(rmask, tmp279, _tmp278)
        tmp282 = tmp280 + tmp281
        tmp283 = tmp260 * tmp282
        tmp284 = tl.broadcast_to(tmp283, [XBLOCK, RBLOCK])
        tmp286 = _tmp285 + tmp284
        _tmp285 = tl.where(rmask, tmp286, _tmp285)
        tmp287 = tmp240 * tmp282
        tmp288 = tl.broadcast_to(tmp287, [XBLOCK, RBLOCK])
        tmp290 = _tmp289 + tmp288
        _tmp289 = tl.where(rmask, tmp290, _tmp289)
        tmp291 = tmp250 * tmp282
        tmp292 = tl.broadcast_to(tmp291, [XBLOCK, RBLOCK])
        tmp294 = _tmp293 + tmp292
        _tmp293 = tl.where(rmask, tmp294, _tmp293)
        tmp295 = tmp255 * tmp282
        tmp296 = tl.broadcast_to(tmp295, [XBLOCK, RBLOCK])
        tmp298 = _tmp297 + tmp296
        _tmp297 = tl.where(rmask, tmp298, _tmp297)
        tmp301 = tmp299 + tmp300
        tmp303 = tmp301 + tmp302
        tmp304 = tmp260 * tmp303
        tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
        tmp307 = _tmp306 + tmp305
        _tmp306 = tl.where(rmask, tmp307, _tmp306)
        tmp308 = tmp240 * tmp303
        tmp309 = tl.broadcast_to(tmp308, [XBLOCK, RBLOCK])
        tmp311 = _tmp310 + tmp309
        _tmp310 = tl.where(rmask, tmp311, _tmp310)
        tmp312 = tmp250 * tmp303
        tmp313 = tl.broadcast_to(tmp312, [XBLOCK, RBLOCK])
        tmp315 = _tmp314 + tmp313
        _tmp314 = tl.where(rmask, tmp315, _tmp314)
        tmp316 = tmp255 * tmp303
        tmp317 = tl.broadcast_to(tmp316, [XBLOCK, RBLOCK])
        tmp319 = _tmp318 + tmp317
        _tmp318 = tl.where(rmask, tmp319, _tmp318)
        tmp322 = tmp320 + tmp321
        tmp323 = tmp260 * tmp322
        tmp324 = tl.broadcast_to(tmp323, [XBLOCK, RBLOCK])
        tmp326 = _tmp325 + tmp324
        _tmp325 = tl.where(rmask, tmp326, _tmp325)
        tmp327 = tmp240 * tmp322
        tmp328 = tl.broadcast_to(tmp327, [XBLOCK, RBLOCK])
        tmp330 = _tmp329 + tmp328
        _tmp329 = tl.where(rmask, tmp330, _tmp329)
        tmp331 = tmp250 * tmp322
        tmp332 = tl.broadcast_to(tmp331, [XBLOCK, RBLOCK])
        tmp334 = _tmp333 + tmp332
        _tmp333 = tl.where(rmask, tmp334, _tmp333)
        tmp335 = tmp255 * tmp322
        tmp336 = tl.broadcast_to(tmp335, [XBLOCK, RBLOCK])
        tmp338 = _tmp337 + tmp336
        _tmp337 = tl.where(rmask, tmp338, _tmp337)
        tmp341 = tmp339 + tmp340
        tmp342 = tmp260 * tmp341
        tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
        tmp345 = _tmp344 + tmp343
        _tmp344 = tl.where(rmask, tmp345, _tmp344)
        tmp346 = tmp240 * tmp341
        tmp347 = tl.broadcast_to(tmp346, [XBLOCK, RBLOCK])
        tmp349 = _tmp348 + tmp347
        _tmp348 = tl.where(rmask, tmp349, _tmp348)
        tmp350 = tmp250 * tmp341
        tmp351 = tl.broadcast_to(tmp350, [XBLOCK, RBLOCK])
        tmp353 = _tmp352 + tmp351
        _tmp352 = tl.where(rmask, tmp353, _tmp352)
        tmp354 = tmp255 * tmp341
        tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
        tmp357 = _tmp356 + tmp355
        _tmp356 = tl.where(rmask, tmp357, _tmp356)
        tmp360 = tmp358 + tmp359
        tmp362 = tmp360 + tmp361
        tmp363 = tmp260 * tmp362
        tmp364 = tl.broadcast_to(tmp363, [XBLOCK, RBLOCK])
        tmp366 = _tmp365 + tmp364
        _tmp365 = tl.where(rmask, tmp366, _tmp365)
        tmp367 = tmp240 * tmp362
        tmp368 = tl.broadcast_to(tmp367, [XBLOCK, RBLOCK])
        tmp370 = _tmp369 + tmp368
        _tmp369 = tl.where(rmask, tmp370, _tmp369)
        tmp371 = tmp250 * tmp362
        tmp372 = tl.broadcast_to(tmp371, [XBLOCK, RBLOCK])
        tmp374 = _tmp373 + tmp372
        _tmp373 = tl.where(rmask, tmp374, _tmp373)
        tmp375 = tmp255 * tmp362
        tmp376 = tl.broadcast_to(tmp375, [XBLOCK, RBLOCK])
        tmp378 = _tmp377 + tmp376
        _tmp377 = tl.where(rmask, tmp378, _tmp377)
        tmp381 = tmp379 + tmp380
        tmp382 = tmp260 * tmp381
        tmp383 = tl.broadcast_to(tmp382, [XBLOCK, RBLOCK])
        tmp385 = _tmp384 + tmp383
        _tmp384 = tl.where(rmask, tmp385, _tmp384)
        tmp386 = tmp240 * tmp381
        tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
        tmp389 = _tmp388 + tmp387
        _tmp388 = tl.where(rmask, tmp389, _tmp388)
        tmp390 = tmp250 * tmp381
        tmp391 = tl.broadcast_to(tmp390, [XBLOCK, RBLOCK])
        tmp393 = _tmp392 + tmp391
        _tmp392 = tl.where(rmask, tmp393, _tmp392)
        tmp394 = tmp255 * tmp381
        tmp395 = tl.broadcast_to(tmp394, [XBLOCK, RBLOCK])
        tmp397 = _tmp396 + tmp395
        _tmp396 = tl.where(rmask, tmp397, _tmp396)
        tmp400 = tmp398 * tmp399
        tmp401 = 0.0
        tmp402 = tmp400 + tmp401
        tmp404 = tmp402 + tmp403
        tmp406 = tmp404 + tmp405
        tmp407 = tmp260 * tmp406
        tmp408 = tl.broadcast_to(tmp407, [XBLOCK, RBLOCK])
        tmp410 = _tmp409 + tmp408
        _tmp409 = tl.where(rmask, tmp410, _tmp409)
        tmp411 = tmp240 * tmp406
        tmp412 = tl.broadcast_to(tmp411, [XBLOCK, RBLOCK])
        tmp414 = _tmp413 + tmp412
        _tmp413 = tl.where(rmask, tmp414, _tmp413)
        tmp415 = tmp250 * tmp406
        tmp416 = tl.broadcast_to(tmp415, [XBLOCK, RBLOCK])
        tmp418 = _tmp417 + tmp416
        _tmp417 = tl.where(rmask, tmp418, _tmp417)
        tmp419 = tmp255 * tmp406
        tmp420 = tl.broadcast_to(tmp419, [XBLOCK, RBLOCK])
        tmp422 = _tmp421 + tmp420
        _tmp421 = tl.where(rmask, tmp422, _tmp421)
        tmp424 = tmp399 + tmp423
        tmp426 = tmp424 + tmp425
        tmp427 = tmp260 * tmp426
        tmp428 = tl.broadcast_to(tmp427, [XBLOCK, RBLOCK])
        tmp430 = _tmp429 + tmp428
        _tmp429 = tl.where(rmask, tmp430, _tmp429)
        tmp431 = tmp240 * tmp426
        tmp432 = tl.broadcast_to(tmp431, [XBLOCK, RBLOCK])
        tmp434 = _tmp433 + tmp432
        _tmp433 = tl.where(rmask, tmp434, _tmp433)
        tmp435 = tmp250 * tmp426
        tmp436 = tl.broadcast_to(tmp435, [XBLOCK, RBLOCK])
        tmp438 = _tmp437 + tmp436
        _tmp437 = tl.where(rmask, tmp438, _tmp437)
        tmp439 = tmp255 * tmp426
        tmp440 = tl.broadcast_to(tmp439, [XBLOCK, RBLOCK])
        tmp442 = _tmp441 + tmp440
        _tmp441 = tl.where(rmask, tmp442, _tmp441)
        tmp443 = tmp260 * tmp399
        tmp444 = tl.broadcast_to(tmp443, [XBLOCK, RBLOCK])
        tmp446 = _tmp445 + tmp444
        _tmp445 = tl.where(rmask, tmp446, _tmp445)
        tmp447 = tmp250 * tmp399
        tmp448 = tl.broadcast_to(tmp447, [XBLOCK, RBLOCK])
        tmp450 = _tmp449 + tmp448
        _tmp449 = tl.where(rmask, tmp450, _tmp449)
        tmp451 = tmp240 * tmp399
        tmp452 = tl.broadcast_to(tmp451, [XBLOCK, RBLOCK])
        tmp454 = _tmp453 + tmp452
        _tmp453 = tl.where(rmask, tmp454, _tmp453)
        tmp455 = tmp255 * tmp399
        tmp456 = tl.broadcast_to(tmp455, [XBLOCK, RBLOCK])
        tmp458 = _tmp457 + tmp456
        _tmp457 = tl.where(rmask, tmp458, _tmp457)
    tmp248 = tl.sum(_tmp248, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp248, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp253, None)
    tmp258 = tl.sum(_tmp258, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp258, None)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp266, None)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp270, None)
    tmp274 = tl.sum(_tmp274, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp274, None)
    tmp278 = tl.sum(_tmp278, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp278, None)
    tmp285 = tl.sum(_tmp285, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp285, None)
    tmp289 = tl.sum(_tmp289, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp289, None)
    tmp293 = tl.sum(_tmp293, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp293, None)
    tmp297 = tl.sum(_tmp297, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp297, None)
    tmp306 = tl.sum(_tmp306, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp306, None)
    tmp310 = tl.sum(_tmp310, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp310, None)
    tmp314 = tl.sum(_tmp314, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp314, None)
    tmp318 = tl.sum(_tmp318, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp318, None)
    tmp325 = tl.sum(_tmp325, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp325, None)
    tmp329 = tl.sum(_tmp329, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp329, None)
    tmp333 = tl.sum(_tmp333, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp333, None)
    tmp337 = tl.sum(_tmp337, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp337, None)
    tmp344 = tl.sum(_tmp344, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp344, None)
    tmp348 = tl.sum(_tmp348, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp348, None)
    tmp352 = tl.sum(_tmp352, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp352, None)
    tmp356 = tl.sum(_tmp356, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp356, None)
    tmp365 = tl.sum(_tmp365, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp365, None)
    tmp369 = tl.sum(_tmp369, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp369, None)
    tmp373 = tl.sum(_tmp373, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp373, None)
    tmp377 = tl.sum(_tmp377, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp377, None)
    tmp384 = tl.sum(_tmp384, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp384, None)
    tmp388 = tl.sum(_tmp388, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp388, None)
    tmp392 = tl.sum(_tmp392, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp392, None)
    tmp396 = tl.sum(_tmp396, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp396, None)
    tmp409 = tl.sum(_tmp409, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp409, None)
    tmp413 = tl.sum(_tmp413, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp413, None)
    tmp417 = tl.sum(_tmp417, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp417, None)
    tmp421 = tl.sum(_tmp421, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp421, None)
    tmp429 = tl.sum(_tmp429, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp429, None)
    tmp433 = tl.sum(_tmp433, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp433, None)
    tmp437 = tl.sum(_tmp437, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp437, None)
    tmp441 = tl.sum(_tmp441, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp441, None)
    tmp445 = tl.sum(_tmp445, 1)[:, None]
    tl.store(out_ptr46 + (x0), tmp445, None)
    tmp449 = tl.sum(_tmp449, 1)[:, None]
    tl.store(out_ptr47 + (x0), tmp449, None)
    tmp453 = tl.sum(_tmp453, 1)[:, None]
    tl.store(out_ptr48 + (x0), tmp453, None)
    tmp457 = tl.sum(_tmp457, 1)[:, None]
    tl.store(out_ptr49 + (x0), tmp457, None)
''')


# kernel path: /tmp/torchinductor_mengqy/dd/cdd7emxtoaw3bivptyx7r5g344ctfvlqe6dk4im4mdx4l2sxo3y4.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_170 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_170', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_170', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(42,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_170(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, xnumel, XBLOCK : tl.constexpr):
    xnumel = 294912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 73728)
    x0 = xindex % 12
    x1 = (xindex // 12) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp47 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp53 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp135 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp151 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp164 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp172 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp176 = tl.load(in_ptr37 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp184 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp188 = tl.load(in_ptr40 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 10, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 9, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 8, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 7, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 6, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 5, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tl.full([1], 4, tl.int32)
    tmp41 = tmp3 == tmp40
    tmp43 = tl.where(tmp41, tmp42, tmp7)
    tmp44 = tl.where(tmp2, tmp43, tmp7)
    tmp45 = tmp39 + tmp44
    tmp46 = tmp3 == tmp1
    tmp48 = tl.where(tmp46, tmp47, tmp7)
    tmp49 = tl.where(tmp2, tmp48, tmp7)
    tmp50 = tmp45 + tmp49
    tmp51 = tl.full([1], 2, tl.int32)
    tmp52 = tmp3 == tmp51
    tmp54 = tl.where(tmp52, tmp53, tmp7)
    tmp55 = tl.where(tmp2, tmp54, tmp7)
    tmp56 = tmp50 + tmp55
    tmp57 = tl.full([1], 1, tl.int32)
    tmp58 = tmp3 == tmp57
    tmp60 = tl.where(tmp58, tmp59, tmp7)
    tmp61 = tl.where(tmp2, tmp60, tmp7)
    tmp62 = tmp56 + tmp61
    tmp63 = tl.full([1], 0, tl.int32)
    tmp64 = tmp3 == tmp63
    tmp66 = tl.where(tmp64, tmp65, tmp7)
    tmp67 = tl.where(tmp2, tmp66, tmp7)
    tmp68 = tmp62 + tmp67
    tmp69 = tmp0 == tmp51
    tmp71 = tl.where(tmp5, tmp70, tmp7)
    tmp72 = tl.where(tmp69, tmp71, tmp7)
    tmp73 = tmp68 + tmp72
    tmp75 = tl.where(tmp11, tmp74, tmp7)
    tmp76 = tl.where(tmp69, tmp75, tmp7)
    tmp77 = tmp73 + tmp76
    tmp79 = tl.where(tmp17, tmp78, tmp7)
    tmp80 = tl.where(tmp69, tmp79, tmp7)
    tmp81 = tmp77 + tmp80
    tmp83 = tl.where(tmp23, tmp82, tmp7)
    tmp84 = tl.where(tmp69, tmp83, tmp7)
    tmp85 = tmp81 + tmp84
    tmp87 = tl.where(tmp29, tmp86, tmp7)
    tmp88 = tl.where(tmp69, tmp87, tmp7)
    tmp89 = tmp85 + tmp88
    tmp91 = tl.where(tmp35, tmp90, tmp7)
    tmp92 = tl.where(tmp69, tmp91, tmp7)
    tmp93 = tmp89 + tmp92
    tmp95 = tl.where(tmp41, tmp94, tmp7)
    tmp96 = tl.where(tmp69, tmp95, tmp7)
    tmp97 = tmp93 + tmp96
    tmp99 = tl.where(tmp46, tmp98, tmp7)
    tmp100 = tl.where(tmp69, tmp99, tmp7)
    tmp101 = tmp97 + tmp100
    tmp103 = tl.where(tmp52, tmp102, tmp7)
    tmp104 = tl.where(tmp69, tmp103, tmp7)
    tmp105 = tmp101 + tmp104
    tmp107 = tl.where(tmp58, tmp106, tmp7)
    tmp108 = tl.where(tmp69, tmp107, tmp7)
    tmp109 = tmp105 + tmp108
    tmp111 = tl.where(tmp64, tmp110, tmp7)
    tmp112 = tl.where(tmp69, tmp111, tmp7)
    tmp113 = tmp109 + tmp112
    tmp114 = tmp0 == tmp57
    tmp116 = tl.where(tmp5, tmp115, tmp7)
    tmp117 = tl.where(tmp114, tmp116, tmp7)
    tmp118 = tmp113 + tmp117
    tmp120 = tl.where(tmp11, tmp119, tmp7)
    tmp121 = tl.where(tmp114, tmp120, tmp7)
    tmp122 = tmp118 + tmp121
    tmp124 = tl.where(tmp17, tmp123, tmp7)
    tmp125 = tl.where(tmp114, tmp124, tmp7)
    tmp126 = tmp122 + tmp125
    tmp128 = tl.where(tmp23, tmp127, tmp7)
    tmp129 = tl.where(tmp114, tmp128, tmp7)
    tmp130 = tmp126 + tmp129
    tmp132 = tl.where(tmp29, tmp131, tmp7)
    tmp133 = tl.where(tmp114, tmp132, tmp7)
    tmp134 = tmp130 + tmp133
    tmp136 = tl.where(tmp35, tmp135, tmp7)
    tmp137 = tl.where(tmp114, tmp136, tmp7)
    tmp138 = tmp134 + tmp137
    tmp140 = tl.where(tmp41, tmp139, tmp7)
    tmp141 = tl.where(tmp114, tmp140, tmp7)
    tmp142 = tmp138 + tmp141
    tmp144 = tl.where(tmp46, tmp143, tmp7)
    tmp145 = tl.where(tmp114, tmp144, tmp7)
    tmp146 = tmp142 + tmp145
    tmp148 = tl.where(tmp52, tmp147, tmp7)
    tmp149 = tl.where(tmp114, tmp148, tmp7)
    tmp150 = tmp146 + tmp149
    tmp152 = tl.where(tmp58, tmp151, tmp7)
    tmp153 = tl.where(tmp114, tmp152, tmp7)
    tmp154 = tmp150 + tmp153
    tmp156 = tl.where(tmp64, tmp155, tmp7)
    tmp157 = tl.where(tmp114, tmp156, tmp7)
    tmp158 = tmp154 + tmp157
    tmp159 = tmp0 == tmp63
    tmp161 = tl.where(tmp5, tmp160, tmp7)
    tmp162 = tl.where(tmp159, tmp161, tmp7)
    tmp163 = tmp158 + tmp162
    tmp165 = tl.where(tmp11, tmp164, tmp7)
    tmp166 = tl.where(tmp159, tmp165, tmp7)
    tmp167 = tmp163 + tmp166
    tmp169 = tl.where(tmp17, tmp168, tmp7)
    tmp170 = tl.where(tmp159, tmp169, tmp7)
    tmp171 = tmp167 + tmp170
    tmp173 = tl.where(tmp23, tmp172, tmp7)
    tmp174 = tl.where(tmp159, tmp173, tmp7)
    tmp175 = tmp171 + tmp174
    tmp177 = tl.where(tmp29, tmp176, tmp7)
    tmp178 = tl.where(tmp159, tmp177, tmp7)
    tmp179 = tmp175 + tmp178
    tmp181 = tl.where(tmp35, tmp180, tmp7)
    tmp182 = tl.where(tmp159, tmp181, tmp7)
    tmp183 = tmp179 + tmp182
    tmp185 = tl.where(tmp41, tmp184, tmp7)
    tmp186 = tl.where(tmp159, tmp185, tmp7)
    tmp187 = tmp183 + tmp186
    tmp189 = tl.where(tmp46, tmp188, tmp7)
    tmp190 = tl.where(tmp159, tmp189, tmp7)
    tmp191 = tmp187 + tmp190
    tl.store(in_out_ptr0 + (x3), tmp191, None)
''')


# kernel path: /tmp/torchinductor_mengqy/nl/cnltxuye2kekjw6n456uk3by7n2rrkxzf3pnfanpdxwisvegb6im.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_171 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_171', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_171', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_171(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 2304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 12
    x4 = (xindex // 12)
    x2 = (xindex // 576)
    x1 = (xindex // 12) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (12*r3) + (1536*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/t6/ct67ubigsl3aa5t6qravay3rd7vqhq3xcykldtrpirk4wxyyypek.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_172 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_172', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_172', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_172(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 48
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 12
    x1 = (xindex // 12)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (12*r2) + (576*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/kv/ckvtdffs4tptoa25fl4uq52cso44xfc5n5qjbysm65psbg7b5y5l.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_173 = async_compile.triton('triton_poi_fused_clone_173', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_173', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_173(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 294912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 12
    x1 = (xindex // 12) % 4
    x2 = (xindex // 48)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (12*x2) + (73728*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/w3/cw3qtyt3pxmsii53u3gxany5tdyxmiev67lse55kl2jagdfehose.py
# Source Nodes: [l__mod___dynamic_dense_10_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_10_act => add_337, convert_element_type_192, erf_10, mul_509
triton_poi_fused_gelu_gelu_backward_174 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_174', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_174', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_174(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 294912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/t5/ct5wa4ehhzfr4av6lmnhcmvbrzloagcpfip4ukk2bvsdtmfcrcug.py
# Source Nodes: [add, add_10, add_12, add_128, add_162, add_20, add_209, add_219, add_220, add_229, add_230, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_199, mul_209, mul_219, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_328
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_162 => add_237
# add_20 => add_39
# add_209 => add_297
# add_219 => add_307
# add_220 => add_329
# add_229 => add_317
# add_230 => add_330
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_176
# float_2 => convert_element_type_178
# float_3 => convert_element_type_180
# mean => mean_48
# mean_1 => mean_49
# mean_2 => mean_50
# mul => mul_484
# mul_199 => mul_453
# mul_209 => mul_463
# mul_219 => mul_473
# mul_3 => mul_487
# mul_4 => mul_24
# mul_6 => mul_490
# rsqrt => rsqrt_48
# rsqrt_1 => rsqrt_49
# rsqrt_2 => rsqrt_50
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_175 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_175', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp32', 26: '*fp32', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp32', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: '*fp16', 111: '*fp16', 112: '*fp16', 113: '*fp16', 114: '*fp16', 115: '*fp16', 116: '*fp16', 117: '*fp16', 118: '*fp16', 119: 'i32', 120: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_175', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(119, 120))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_175(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, out_ptr42, out_ptr43, out_ptr44, out_ptr45, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr16 + (x0), None, eviction_policy='evict_last')
    tmp83 = tl.load(in_ptr17 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr18 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr19 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr20 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr21 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr22 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr23 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr24 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr25 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr26 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr27 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr28 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr29 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr30 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr31 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr32 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp157 = tl.load(in_ptr33 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr34 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr35 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp167 = tl.load(in_ptr36 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr37 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp173 = tl.load(in_ptr38 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp177 = tl.load(in_ptr39 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr40 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp183 = tl.load(in_ptr41 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp187 = tl.load(in_ptr42 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp190 = tl.load(in_ptr43 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp193 = tl.load(in_ptr44 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp197 = tl.load(in_ptr45 + (x0), None, eviction_policy='evict_last')
    _tmp215 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp222 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp229 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp254 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp263 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp265 = tl.load(in_ptr63 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp275 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp106 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp156 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp176 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp210 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp211 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp217 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp218 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp224 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp225 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp231 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp241 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp247 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp248 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp250 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp256 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp257 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp269 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp271 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp67 = tmp27 * tmp47
        tmp69 = tmp68 / tmp50
        tmp70 = tmp69 + tmp52
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp71 * tmp71
        tmp73 = tmp72 * tmp71
        tmp74 = tmp67 * tmp73
        tmp75 = tmp74 / tmp50
        tmp77 = tmp21 * tmp62
        tmp78 = tmp76 + tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp80 = tmp75 * tmp79
        tmp84 = tmp82 * tmp83
        tmp85 = tmp81 + tmp84
        tmp88 = tmp86 * tmp87
        tmp89 = tmp88.to(tl.float32)
        tmp90 = tmp89 * tmp54
        tmp91 = tmp90 + tmp66
        tmp92 = tmp91 + tmp66
        tmp93 = tmp92.to(tl.float32)
        tmp94 = tmp93 * tmp5
        tmp95 = tmp85 + tmp94
        tmp98 = tmp96 * tmp97
        tmp99 = tmp98.to(tl.float32)
        tmp100 = tmp99 * tmp71
        tmp101 = tmp100 + tmp80
        tmp102 = tmp101 + tmp80
        tmp103 = tmp102.to(tl.float32)
        tmp104 = tmp103 * tmp21
        tmp105 = tmp95 + tmp104
        tmp108 = tmp82 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp93 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp103 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp82 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp93 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp103 * tmp123
        tmp125 = tmp122 + tmp124
        tmp128 = tmp82 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp93 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp103 * tmp133
        tmp135 = tmp132 + tmp134
        tmp138 = tmp82 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp93 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp103 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp82 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp93 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp103 * tmp153
        tmp155 = tmp152 + tmp154
        tmp158 = tmp82 * tmp157
        tmp159 = tmp156 + tmp158
        tmp161 = tmp93 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp103 * tmp163
        tmp165 = tmp162 + tmp164
        tmp168 = tmp82 * tmp167
        tmp169 = tmp166 + tmp168
        tmp171 = tmp93 * tmp170
        tmp172 = tmp169 + tmp171
        tmp174 = tmp103 * tmp173
        tmp175 = tmp172 + tmp174
        tmp178 = tmp82 * tmp177
        tmp179 = tmp176 + tmp178
        tmp181 = tmp93 * tmp180
        tmp182 = tmp179 + tmp181
        tmp184 = tmp103 * tmp183
        tmp185 = tmp182 + tmp184
        tmp188 = tmp82 * tmp187
        tmp189 = tmp186 + tmp188
        tmp191 = tmp93 * tmp190
        tmp192 = tmp189 + tmp191
        tmp194 = tmp103 * tmp193
        tmp195 = tmp192 + tmp194
        tmp196 = tmp40 * tmp47
        tmp198 = tmp197 / tmp50
        tmp199 = tmp198 + tmp52
        tmp200 = tl.math.rsqrt(tmp199)
        tmp201 = tmp200 * tmp200
        tmp202 = tmp201 * tmp200
        tmp203 = tmp196 * tmp202
        tmp204 = tmp203 / tmp50
        tmp206 = tmp34 * tmp62
        tmp207 = tmp205 + tmp206
        tmp208 = tmp207.to(tl.float32)
        tmp209 = tmp204 * tmp208
        tmp212 = tmp210 + tmp211
        tmp213 = tmp82 * tmp212
        tmp214 = tl.broadcast_to(tmp213, [XBLOCK, RBLOCK])
        tmp216 = _tmp215 + tmp214
        _tmp215 = tl.where(rmask, tmp216, _tmp215)
        tmp219 = tmp217 + tmp218
        tmp220 = tmp82 * tmp219
        tmp221 = tl.broadcast_to(tmp220, [XBLOCK, RBLOCK])
        tmp223 = _tmp222 + tmp221
        _tmp222 = tl.where(rmask, tmp223, _tmp222)
        tmp226 = tmp224 + tmp225
        tmp227 = tmp82 * tmp226
        tmp228 = tl.broadcast_to(tmp227, [XBLOCK, RBLOCK])
        tmp230 = _tmp229 + tmp228
        _tmp229 = tl.where(rmask, tmp230, _tmp229)
        tmp233 = tmp231 + tmp232
        tmp234 = tmp82 * tmp233
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp240 = tmp238 + tmp239
        tmp242 = tmp240 + tmp241
        tmp243 = tmp82 * tmp242
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp249 = tmp247 + tmp248
        tmp251 = tmp249 + tmp250
        tmp252 = tmp82 * tmp251
        tmp253 = tl.broadcast_to(tmp252, [XBLOCK, RBLOCK])
        tmp255 = _tmp254 + tmp253
        _tmp254 = tl.where(rmask, tmp255, _tmp254)
        tmp258 = tmp256 + tmp257
        tmp260 = tmp258 + tmp259
        tmp261 = tmp82 * tmp260
        tmp262 = tl.broadcast_to(tmp261, [XBLOCK, RBLOCK])
        tmp264 = _tmp263 + tmp262
        _tmp263 = tl.where(rmask, tmp264, _tmp263)
        tmp266 = tmp265 * tmp238
        tmp267 = 0.0
        tmp268 = tmp266 + tmp267
        tmp270 = tmp268 + tmp269
        tmp272 = tmp270 + tmp271
        tmp273 = tmp82 * tmp272
        tmp274 = tl.broadcast_to(tmp273, [XBLOCK, RBLOCK])
        tmp276 = _tmp275 + tmp274
        _tmp275 = tl.where(rmask, tmp276, _tmp275)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp80, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp105, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp125, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp135, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp155, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp165, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp175, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp185, rmask)
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp195, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp209, rmask)
    tmp215 = tl.sum(_tmp215, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp215, None)
    tmp222 = tl.sum(_tmp222, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp222, None)
    tmp229 = tl.sum(_tmp229, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp229, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp236, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp245, None)
    tmp254 = tl.sum(_tmp254, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp254, None)
    tmp263 = tl.sum(_tmp263, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp263, None)
    tmp275 = tl.sum(_tmp275, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp275, None)
    _tmp296 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp303 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp312 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp319 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp326 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp335 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp342 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp354 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp362 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp366 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp382 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp386 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp390 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp394 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp398 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp402 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp406 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp410 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp414 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp418 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp434 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp438 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp442 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp446 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp450 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp454 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp458 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp462 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp466 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp470 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp475 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp277 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp278 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp287 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0)
        tmp291 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp292 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tl.load(in_ptr50 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr51 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp305 = tl.load(in_ptr57 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp306 = tl.load(in_ptr58 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp314 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp315 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp321 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp322 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp328 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp329 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp331 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp337 = tl.load(in_ptr52 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp338 = tl.load(in_ptr53 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp344 = tl.load(in_ptr54 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp348 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp350 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp356 = tl.load(in_ptr55 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp358 = tl.load(in_ptr56 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp368 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp369 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp376 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp420 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp421 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp428 = tl.load(out_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp472 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp279 = tmp277 * tmp278
        tmp280 = tmp279.to(tl.float32)
        tmp281 = 2048.0
        tmp282 = tmp49 / tmp281
        tmp283 = 1e-05
        tmp284 = tmp282 + tmp283
        tmp285 = tl.math.rsqrt(tmp284)
        tmp286 = tmp280 * tmp285
        tmp288 = tmp286 + tmp287
        tmp289 = tmp288 + tmp287
        tmp290 = tmp289.to(tl.float32)
        tmp293 = tmp291 + tmp292
        tmp294 = tmp290 * tmp293
        tmp295 = tl.broadcast_to(tmp294, [XBLOCK, RBLOCK])
        tmp297 = _tmp296 + tmp295
        _tmp296 = tl.where(rmask, tmp297, _tmp296)
        tmp300 = tmp298 + tmp299
        tmp301 = tmp290 * tmp300
        tmp302 = tl.broadcast_to(tmp301, [XBLOCK, RBLOCK])
        tmp304 = _tmp303 + tmp302
        _tmp303 = tl.where(rmask, tmp304, _tmp303)
        tmp307 = tmp305 + tmp306
        tmp309 = tmp307 + tmp308
        tmp310 = tmp290 * tmp309
        tmp311 = tl.broadcast_to(tmp310, [XBLOCK, RBLOCK])
        tmp313 = _tmp312 + tmp311
        _tmp312 = tl.where(rmask, tmp313, _tmp312)
        tmp316 = tmp314 + tmp315
        tmp317 = tmp290 * tmp316
        tmp318 = tl.broadcast_to(tmp317, [XBLOCK, RBLOCK])
        tmp320 = _tmp319 + tmp318
        _tmp319 = tl.where(rmask, tmp320, _tmp319)
        tmp323 = tmp321 + tmp322
        tmp324 = tmp290 * tmp323
        tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
        tmp327 = _tmp326 + tmp325
        _tmp326 = tl.where(rmask, tmp327, _tmp326)
        tmp330 = tmp328 + tmp329
        tmp332 = tmp330 + tmp331
        tmp333 = tmp290 * tmp332
        tmp334 = tl.broadcast_to(tmp333, [XBLOCK, RBLOCK])
        tmp336 = _tmp335 + tmp334
        _tmp335 = tl.where(rmask, tmp336, _tmp335)
        tmp339 = tmp337 + tmp338
        tmp340 = tmp290 * tmp339
        tmp341 = tl.broadcast_to(tmp340, [XBLOCK, RBLOCK])
        tmp343 = _tmp342 + tmp341
        _tmp342 = tl.where(rmask, tmp343, _tmp342)
        tmp345 = tmp265 * tmp344
        tmp346 = 0.0
        tmp347 = tmp345 + tmp346
        tmp349 = tmp347 + tmp348
        tmp351 = tmp349 + tmp350
        tmp352 = tmp290 * tmp351
        tmp353 = tl.broadcast_to(tmp352, [XBLOCK, RBLOCK])
        tmp355 = _tmp354 + tmp353
        _tmp354 = tl.where(rmask, tmp355, _tmp354)
        tmp357 = tmp344 + tmp356
        tmp359 = tmp357 + tmp358
        tmp360 = tmp290 * tmp359
        tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
        tmp363 = _tmp362 + tmp361
        _tmp362 = tl.where(rmask, tmp363, _tmp362)
        tmp364 = tmp290 * tmp344
        tmp365 = tl.broadcast_to(tmp364, [XBLOCK, RBLOCK])
        tmp367 = _tmp366 + tmp365
        _tmp366 = tl.where(rmask, tmp367, _tmp366)
        tmp370 = tmp368 * tmp369
        tmp371 = tmp370.to(tl.float32)
        tmp372 = tmp68 / tmp281
        tmp373 = tmp372 + tmp283
        tmp374 = tl.math.rsqrt(tmp373)
        tmp375 = tmp371 * tmp374
        tmp377 = tmp375 + tmp376
        tmp378 = tmp377 + tmp376
        tmp379 = tmp378.to(tl.float32)
        tmp380 = tmp379 * tmp293
        tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
        tmp383 = _tmp382 + tmp381
        _tmp382 = tl.where(rmask, tmp383, _tmp382)
        tmp384 = tmp379 * tmp300
        tmp385 = tl.broadcast_to(tmp384, [XBLOCK, RBLOCK])
        tmp387 = _tmp386 + tmp385
        _tmp386 = tl.where(rmask, tmp387, _tmp386)
        tmp388 = tmp379 * tmp309
        tmp389 = tl.broadcast_to(tmp388, [XBLOCK, RBLOCK])
        tmp391 = _tmp390 + tmp389
        _tmp390 = tl.where(rmask, tmp391, _tmp390)
        tmp392 = tmp379 * tmp316
        tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
        tmp395 = _tmp394 + tmp393
        _tmp394 = tl.where(rmask, tmp395, _tmp394)
        tmp396 = tmp379 * tmp323
        tmp397 = tl.broadcast_to(tmp396, [XBLOCK, RBLOCK])
        tmp399 = _tmp398 + tmp397
        _tmp398 = tl.where(rmask, tmp399, _tmp398)
        tmp400 = tmp379 * tmp332
        tmp401 = tl.broadcast_to(tmp400, [XBLOCK, RBLOCK])
        tmp403 = _tmp402 + tmp401
        _tmp402 = tl.where(rmask, tmp403, _tmp402)
        tmp404 = tmp379 * tmp339
        tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
        tmp407 = _tmp406 + tmp405
        _tmp406 = tl.where(rmask, tmp407, _tmp406)
        tmp408 = tmp379 * tmp351
        tmp409 = tl.broadcast_to(tmp408, [XBLOCK, RBLOCK])
        tmp411 = _tmp410 + tmp409
        _tmp410 = tl.where(rmask, tmp411, _tmp410)
        tmp412 = tmp379 * tmp359
        tmp413 = tl.broadcast_to(tmp412, [XBLOCK, RBLOCK])
        tmp415 = _tmp414 + tmp413
        _tmp414 = tl.where(rmask, tmp415, _tmp414)
        tmp416 = tmp379 * tmp344
        tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
        tmp419 = _tmp418 + tmp417
        _tmp418 = tl.where(rmask, tmp419, _tmp418)
        tmp422 = tmp420 * tmp421
        tmp423 = tmp422.to(tl.float32)
        tmp424 = tmp197 / tmp281
        tmp425 = tmp424 + tmp283
        tmp426 = tl.math.rsqrt(tmp425)
        tmp427 = tmp423 * tmp426
        tmp429 = tmp427 + tmp428
        tmp430 = tmp429 + tmp428
        tmp431 = tmp430.to(tl.float32)
        tmp432 = tmp431 * tmp293
        tmp433 = tl.broadcast_to(tmp432, [XBLOCK, RBLOCK])
        tmp435 = _tmp434 + tmp433
        _tmp434 = tl.where(rmask, tmp435, _tmp434)
        tmp436 = tmp431 * tmp300
        tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
        tmp439 = _tmp438 + tmp437
        _tmp438 = tl.where(rmask, tmp439, _tmp438)
        tmp440 = tmp431 * tmp309
        tmp441 = tl.broadcast_to(tmp440, [XBLOCK, RBLOCK])
        tmp443 = _tmp442 + tmp441
        _tmp442 = tl.where(rmask, tmp443, _tmp442)
        tmp444 = tmp431 * tmp316
        tmp445 = tl.broadcast_to(tmp444, [XBLOCK, RBLOCK])
        tmp447 = _tmp446 + tmp445
        _tmp446 = tl.where(rmask, tmp447, _tmp446)
        tmp448 = tmp431 * tmp323
        tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
        tmp451 = _tmp450 + tmp449
        _tmp450 = tl.where(rmask, tmp451, _tmp450)
        tmp452 = tmp431 * tmp332
        tmp453 = tl.broadcast_to(tmp452, [XBLOCK, RBLOCK])
        tmp455 = _tmp454 + tmp453
        _tmp454 = tl.where(rmask, tmp455, _tmp454)
        tmp456 = tmp431 * tmp339
        tmp457 = tl.broadcast_to(tmp456, [XBLOCK, RBLOCK])
        tmp459 = _tmp458 + tmp457
        _tmp458 = tl.where(rmask, tmp459, _tmp458)
        tmp460 = tmp431 * tmp351
        tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
        tmp463 = _tmp462 + tmp461
        _tmp462 = tl.where(rmask, tmp463, _tmp462)
        tmp464 = tmp431 * tmp359
        tmp465 = tl.broadcast_to(tmp464, [XBLOCK, RBLOCK])
        tmp467 = _tmp466 + tmp465
        _tmp466 = tl.where(rmask, tmp467, _tmp466)
        tmp468 = tmp431 * tmp344
        tmp469 = tl.broadcast_to(tmp468, [XBLOCK, RBLOCK])
        tmp471 = _tmp470 + tmp469
        _tmp470 = tl.where(rmask, tmp471, _tmp470)
        tmp473 = tmp472 * tmp344
        tmp474 = tl.broadcast_to(tmp473, [XBLOCK, RBLOCK])
        tmp476 = _tmp475 + tmp474
        _tmp475 = tl.where(rmask, tmp476, _tmp475)
    tmp296 = tl.sum(_tmp296, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp296, None)
    tmp303 = tl.sum(_tmp303, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp303, None)
    tmp312 = tl.sum(_tmp312, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp312, None)
    tmp319 = tl.sum(_tmp319, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp319, None)
    tmp326 = tl.sum(_tmp326, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp326, None)
    tmp335 = tl.sum(_tmp335, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp335, None)
    tmp342 = tl.sum(_tmp342, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp342, None)
    tmp354 = tl.sum(_tmp354, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp354, None)
    tmp362 = tl.sum(_tmp362, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp362, None)
    tmp366 = tl.sum(_tmp366, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp366, None)
    tmp382 = tl.sum(_tmp382, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp382, None)
    tmp386 = tl.sum(_tmp386, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp386, None)
    tmp390 = tl.sum(_tmp390, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp390, None)
    tmp394 = tl.sum(_tmp394, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp394, None)
    tmp398 = tl.sum(_tmp398, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp398, None)
    tmp402 = tl.sum(_tmp402, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp402, None)
    tmp406 = tl.sum(_tmp406, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp406, None)
    tmp410 = tl.sum(_tmp410, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp410, None)
    tmp414 = tl.sum(_tmp414, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp414, None)
    tmp418 = tl.sum(_tmp418, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp418, None)
    tmp434 = tl.sum(_tmp434, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp434, None)
    tmp438 = tl.sum(_tmp438, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp438, None)
    tmp442 = tl.sum(_tmp442, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp442, None)
    tmp446 = tl.sum(_tmp446, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp446, None)
    tmp450 = tl.sum(_tmp450, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp450, None)
    tmp454 = tl.sum(_tmp454, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp454, None)
    tmp458 = tl.sum(_tmp458, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp458, None)
    tmp462 = tl.sum(_tmp462, 1)[:, None]
    tl.store(out_ptr42 + (x0), tmp462, None)
    tmp466 = tl.sum(_tmp466, 1)[:, None]
    tl.store(out_ptr43 + (x0), tmp466, None)
    tmp470 = tl.sum(_tmp470, 1)[:, None]
    tl.store(out_ptr44 + (x0), tmp470, None)
    tmp475 = tl.sum(_tmp475, 1)[:, None]
    tl.store(out_ptr45 + (x0), tmp475, None)
''')


# kernel path: /tmp/torchinductor_mengqy/j5/cj5i4ekt4jc5io3kqwqgk5beehwe3kg6yjlh6hwq6s3auv5ih7z7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_176 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_176', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_176', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(38,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_176(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, xnumel, XBLOCK : tl.constexpr):
    xnumel = 270336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 67584)
    x0 = xindex % 11
    x1 = (xindex // 11) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp47 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp53 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp88 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp109 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp125 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp129 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp154 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp158 = tl.load(in_ptr33 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp170 = tl.load(in_ptr36 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 9, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 8, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 7, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 6, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 5, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tl.full([1], 4, tl.int32)
    tmp35 = tmp3 == tmp34
    tmp37 = tl.where(tmp35, tmp36, tmp7)
    tmp38 = tl.where(tmp2, tmp37, tmp7)
    tmp39 = tmp33 + tmp38
    tmp40 = tmp3 == tmp1
    tmp42 = tl.where(tmp40, tmp41, tmp7)
    tmp43 = tl.where(tmp2, tmp42, tmp7)
    tmp44 = tmp39 + tmp43
    tmp45 = tl.full([1], 2, tl.int32)
    tmp46 = tmp3 == tmp45
    tmp48 = tl.where(tmp46, tmp47, tmp7)
    tmp49 = tl.where(tmp2, tmp48, tmp7)
    tmp50 = tmp44 + tmp49
    tmp51 = tl.full([1], 1, tl.int32)
    tmp52 = tmp3 == tmp51
    tmp54 = tl.where(tmp52, tmp53, tmp7)
    tmp55 = tl.where(tmp2, tmp54, tmp7)
    tmp56 = tmp50 + tmp55
    tmp57 = tl.full([1], 0, tl.int32)
    tmp58 = tmp3 == tmp57
    tmp60 = tl.where(tmp58, tmp59, tmp7)
    tmp61 = tl.where(tmp2, tmp60, tmp7)
    tmp62 = tmp56 + tmp61
    tmp63 = tmp0 == tmp45
    tmp65 = tl.where(tmp5, tmp64, tmp7)
    tmp66 = tl.where(tmp63, tmp65, tmp7)
    tmp67 = tmp62 + tmp66
    tmp69 = tl.where(tmp11, tmp68, tmp7)
    tmp70 = tl.where(tmp63, tmp69, tmp7)
    tmp71 = tmp67 + tmp70
    tmp73 = tl.where(tmp17, tmp72, tmp7)
    tmp74 = tl.where(tmp63, tmp73, tmp7)
    tmp75 = tmp71 + tmp74
    tmp77 = tl.where(tmp23, tmp76, tmp7)
    tmp78 = tl.where(tmp63, tmp77, tmp7)
    tmp79 = tmp75 + tmp78
    tmp81 = tl.where(tmp29, tmp80, tmp7)
    tmp82 = tl.where(tmp63, tmp81, tmp7)
    tmp83 = tmp79 + tmp82
    tmp85 = tl.where(tmp35, tmp84, tmp7)
    tmp86 = tl.where(tmp63, tmp85, tmp7)
    tmp87 = tmp83 + tmp86
    tmp89 = tl.where(tmp40, tmp88, tmp7)
    tmp90 = tl.where(tmp63, tmp89, tmp7)
    tmp91 = tmp87 + tmp90
    tmp93 = tl.where(tmp46, tmp92, tmp7)
    tmp94 = tl.where(tmp63, tmp93, tmp7)
    tmp95 = tmp91 + tmp94
    tmp97 = tl.where(tmp52, tmp96, tmp7)
    tmp98 = tl.where(tmp63, tmp97, tmp7)
    tmp99 = tmp95 + tmp98
    tmp101 = tl.where(tmp58, tmp100, tmp7)
    tmp102 = tl.where(tmp63, tmp101, tmp7)
    tmp103 = tmp99 + tmp102
    tmp104 = tmp0 == tmp51
    tmp106 = tl.where(tmp5, tmp105, tmp7)
    tmp107 = tl.where(tmp104, tmp106, tmp7)
    tmp108 = tmp103 + tmp107
    tmp110 = tl.where(tmp11, tmp109, tmp7)
    tmp111 = tl.where(tmp104, tmp110, tmp7)
    tmp112 = tmp108 + tmp111
    tmp114 = tl.where(tmp17, tmp113, tmp7)
    tmp115 = tl.where(tmp104, tmp114, tmp7)
    tmp116 = tmp112 + tmp115
    tmp118 = tl.where(tmp23, tmp117, tmp7)
    tmp119 = tl.where(tmp104, tmp118, tmp7)
    tmp120 = tmp116 + tmp119
    tmp122 = tl.where(tmp29, tmp121, tmp7)
    tmp123 = tl.where(tmp104, tmp122, tmp7)
    tmp124 = tmp120 + tmp123
    tmp126 = tl.where(tmp35, tmp125, tmp7)
    tmp127 = tl.where(tmp104, tmp126, tmp7)
    tmp128 = tmp124 + tmp127
    tmp130 = tl.where(tmp40, tmp129, tmp7)
    tmp131 = tl.where(tmp104, tmp130, tmp7)
    tmp132 = tmp128 + tmp131
    tmp134 = tl.where(tmp46, tmp133, tmp7)
    tmp135 = tl.where(tmp104, tmp134, tmp7)
    tmp136 = tmp132 + tmp135
    tmp138 = tl.where(tmp52, tmp137, tmp7)
    tmp139 = tl.where(tmp104, tmp138, tmp7)
    tmp140 = tmp136 + tmp139
    tmp142 = tl.where(tmp58, tmp141, tmp7)
    tmp143 = tl.where(tmp104, tmp142, tmp7)
    tmp144 = tmp140 + tmp143
    tmp145 = tmp0 == tmp57
    tmp147 = tl.where(tmp5, tmp146, tmp7)
    tmp148 = tl.where(tmp145, tmp147, tmp7)
    tmp149 = tmp144 + tmp148
    tmp151 = tl.where(tmp11, tmp150, tmp7)
    tmp152 = tl.where(tmp145, tmp151, tmp7)
    tmp153 = tmp149 + tmp152
    tmp155 = tl.where(tmp17, tmp154, tmp7)
    tmp156 = tl.where(tmp145, tmp155, tmp7)
    tmp157 = tmp153 + tmp156
    tmp159 = tl.where(tmp23, tmp158, tmp7)
    tmp160 = tl.where(tmp145, tmp159, tmp7)
    tmp161 = tmp157 + tmp160
    tmp163 = tl.where(tmp29, tmp162, tmp7)
    tmp164 = tl.where(tmp145, tmp163, tmp7)
    tmp165 = tmp161 + tmp164
    tmp167 = tl.where(tmp35, tmp166, tmp7)
    tmp168 = tl.where(tmp145, tmp167, tmp7)
    tmp169 = tmp165 + tmp168
    tmp171 = tl.where(tmp40, tmp170, tmp7)
    tmp172 = tl.where(tmp145, tmp171, tmp7)
    tmp173 = tmp169 + tmp172
    tl.store(in_out_ptr0 + (x3), tmp173, None)
''')


# kernel path: /tmp/torchinductor_mengqy/od/codpkiug2g7slpoiwcmzkglj564sjb67nxbqolnpkmsk4c4eq4ek.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_177 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_177', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[4096, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_177', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_177(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 2112
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 11
    x4 = (xindex // 11)
    x2 = (xindex // 528)
    x1 = (xindex // 11) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (11*r3) + (1408*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/4l/c4lica5i4iszee3tyboft3jqttfy4bhujcvmrjo4jioiyts7x2xb.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_178 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_178', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_178', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_178(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 44
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 11
    x1 = (xindex // 11)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (11*r2) + (528*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/63/c63sdrgcfvesmmy6pxhzrkdmd7lzimtwdgqie2w4rjvbc4wcsyxa.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_179 = async_compile.triton('triton_poi_fused_clone_179', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_179', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_179(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 270336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 11
    x1 = (xindex // 11) % 4
    x2 = (xindex // 44)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (11*x2) + (67584*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ev/cevu3j7nyt4jkq3dbns7oxpz2t5tho6fkwsvr7vjefxo4idntrh2.py
# Source Nodes: [l__mod___dynamic_dense_9_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_9_act => add_286, convert_element_type_174, erf_9, mul_442
triton_poi_fused_gelu_gelu_backward_180 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_180', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_180', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_180(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 270336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pj/cpju3cukh64qoksfeosbyc5sfjkgtyjbrv4u5e7n36uc2g427ukv.py
# Source Nodes: [add, add_10, add_12, add_128, add_180, add_189, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_277
# add_10 => add_18
# add_12 => add_20
# add_128 => add_194
# add_180 => add_278
# add_189 => add_279
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# float_1 => convert_element_type_158
# float_2 => convert_element_type_160
# float_3 => convert_element_type_162
# mean => mean_43
# mean_1 => mean_44
# mean_2 => mean_45
# mul => mul_417
# mul_3 => mul_420
# mul_4 => mul_24
# mul_6 => mul_423
# rsqrt => rsqrt_43
# rsqrt_1 => rsqrt_44
# rsqrt_2 => rsqrt_45
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_181 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_181', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp32', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: 'i32', 73: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_181', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(72, 73))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_181(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, out_ptr1, out_ptr3, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, out_ptr38, out_ptr39, out_ptr40, out_ptr41, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp38 = tmp37.to(tl.float32)
        tmp39 = tmp36 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tmp47 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp74 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp43 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp46 = tmp45.to(tl.float32)
        tmp48 = 2048.0
        tmp49 = tmp47 / tmp48
        tmp50 = 1e-05
        tmp51 = tmp49 + tmp50
        tmp52 = tl.math.rsqrt(tmp51)
        tmp53 = tmp46 * tmp52
        tmp54 = -0.5
        tmp55 = tmp41 * tmp54
        tmp56 = tmp52 * tmp52
        tmp57 = tmp56 * tmp52
        tmp58 = tmp55 * tmp57
        tmp59 = tmp58 / tmp48
        tmp61 = tmp60.to(tl.float32)
        tmp62 = tmp59 * tmp61
        tmp63 = tmp53 + tmp62
        tmp64 = tmp63 + tmp62
        tmp65 = tmp64.to(tl.float32)
        tmp68 = tmp66 * tmp67
        tmp69 = tmp68.to(tl.float32)
        tmp71 = tmp70.to(tl.float32)
        tmp72 = tmp69 * tmp71
        tmp73 = tl.broadcast_to(tmp72, [XBLOCK, RBLOCK])
        tmp75 = _tmp74 + tmp73
        _tmp74 = tl.where(rmask, tmp75, _tmp74)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp65, rmask)
    tmp74 = tl.sum(_tmp74, 1)[:, None]
    tmp80 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    _tmp105 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp100 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp78 = tmp76 * tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp81 = 2048.0
        tmp82 = tmp80 / tmp81
        tmp83 = 1e-05
        tmp84 = tmp82 + tmp83
        tmp85 = tl.math.rsqrt(tmp84)
        tmp86 = tmp79 * tmp85
        tmp87 = -0.5
        tmp88 = tmp74 * tmp87
        tmp89 = tmp85 * tmp85
        tmp90 = tmp89 * tmp85
        tmp91 = tmp88 * tmp90
        tmp92 = tmp91 / tmp81
        tmp94 = tmp93.to(tl.float32)
        tmp95 = tmp92 * tmp94
        tmp96 = tmp86 + tmp95
        tmp97 = tmp96 + tmp95
        tmp98 = tmp97.to(tl.float32)
        tmp102 = tmp100 + tmp101
        tmp103 = tmp99 * tmp102
        tmp104 = tl.broadcast_to(tmp103, [XBLOCK, RBLOCK])
        tmp106 = _tmp105 + tmp104
        _tmp105 = tl.where(rmask, tmp106, _tmp105)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp98, rmask)
    tmp105 = tl.sum(_tmp105, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp105, None)
    _tmp113 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp118 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp123 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp137 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp141 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp145 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp152 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp156 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp160 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp164 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp171 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp175 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp179 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp183 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp204 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp211 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp215 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp219 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp223 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp225 = tl.load(in_ptr27 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp240 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp244 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp248 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp256 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp260 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp264 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp268 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp272 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp276 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp280 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp284 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp107 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp108 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp109 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp147 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp167 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp185 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp188 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr25 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp226 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp230 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp232 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(in_ptr31 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tmp108 + tmp109
        tmp111 = tmp107 * tmp110
        tmp112 = tl.broadcast_to(tmp111, [XBLOCK, RBLOCK])
        tmp114 = _tmp113 + tmp112
        _tmp113 = tl.where(rmask, tmp114, _tmp113)
        tmp116 = tmp115 * tmp110
        tmp117 = tl.broadcast_to(tmp116, [XBLOCK, RBLOCK])
        tmp119 = _tmp118 + tmp117
        _tmp118 = tl.where(rmask, tmp119, _tmp118)
        tmp121 = tmp120 * tmp110
        tmp122 = tl.broadcast_to(tmp121, [XBLOCK, RBLOCK])
        tmp124 = _tmp123 + tmp122
        _tmp123 = tl.where(rmask, tmp124, _tmp123)
        tmp128 = tmp126 + tmp127
        tmp130 = tmp128 + tmp129
        tmp131 = tmp125 * tmp130
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp135 = tmp107 * tmp130
        tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
        tmp138 = _tmp137 + tmp136
        _tmp137 = tl.where(rmask, tmp138, _tmp137)
        tmp139 = tmp115 * tmp130
        tmp140 = tl.broadcast_to(tmp139, [XBLOCK, RBLOCK])
        tmp142 = _tmp141 + tmp140
        _tmp141 = tl.where(rmask, tmp142, _tmp141)
        tmp143 = tmp120 * tmp130
        tmp144 = tl.broadcast_to(tmp143, [XBLOCK, RBLOCK])
        tmp146 = _tmp145 + tmp144
        _tmp145 = tl.where(rmask, tmp146, _tmp145)
        tmp149 = tmp147 + tmp148
        tmp150 = tmp125 * tmp149
        tmp151 = tl.broadcast_to(tmp150, [XBLOCK, RBLOCK])
        tmp153 = _tmp152 + tmp151
        _tmp152 = tl.where(rmask, tmp153, _tmp152)
        tmp154 = tmp107 * tmp149
        tmp155 = tl.broadcast_to(tmp154, [XBLOCK, RBLOCK])
        tmp157 = _tmp156 + tmp155
        _tmp156 = tl.where(rmask, tmp157, _tmp156)
        tmp158 = tmp115 * tmp149
        tmp159 = tl.broadcast_to(tmp158, [XBLOCK, RBLOCK])
        tmp161 = _tmp160 + tmp159
        _tmp160 = tl.where(rmask, tmp161, _tmp160)
        tmp162 = tmp120 * tmp149
        tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
        tmp165 = _tmp164 + tmp163
        _tmp164 = tl.where(rmask, tmp165, _tmp164)
        tmp168 = tmp166 + tmp167
        tmp169 = tmp125 * tmp168
        tmp170 = tl.broadcast_to(tmp169, [XBLOCK, RBLOCK])
        tmp172 = _tmp171 + tmp170
        _tmp171 = tl.where(rmask, tmp172, _tmp171)
        tmp173 = tmp107 * tmp168
        tmp174 = tl.broadcast_to(tmp173, [XBLOCK, RBLOCK])
        tmp176 = _tmp175 + tmp174
        _tmp175 = tl.where(rmask, tmp176, _tmp175)
        tmp177 = tmp115 * tmp168
        tmp178 = tl.broadcast_to(tmp177, [XBLOCK, RBLOCK])
        tmp180 = _tmp179 + tmp178
        _tmp179 = tl.where(rmask, tmp180, _tmp179)
        tmp181 = tmp120 * tmp168
        tmp182 = tl.broadcast_to(tmp181, [XBLOCK, RBLOCK])
        tmp184 = _tmp183 + tmp182
        _tmp183 = tl.where(rmask, tmp184, _tmp183)
        tmp187 = tmp185 + tmp186
        tmp189 = tmp187 + tmp188
        tmp190 = tmp125 * tmp189
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp107 * tmp189
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp115 * tmp189
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp202 = tmp120 * tmp189
        tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
        tmp205 = _tmp204 + tmp203
        _tmp204 = tl.where(rmask, tmp205, _tmp204)
        tmp208 = tmp206 + tmp207
        tmp209 = tmp125 * tmp208
        tmp210 = tl.broadcast_to(tmp209, [XBLOCK, RBLOCK])
        tmp212 = _tmp211 + tmp210
        _tmp211 = tl.where(rmask, tmp212, _tmp211)
        tmp213 = tmp107 * tmp208
        tmp214 = tl.broadcast_to(tmp213, [XBLOCK, RBLOCK])
        tmp216 = _tmp215 + tmp214
        _tmp215 = tl.where(rmask, tmp216, _tmp215)
        tmp217 = tmp115 * tmp208
        tmp218 = tl.broadcast_to(tmp217, [XBLOCK, RBLOCK])
        tmp220 = _tmp219 + tmp218
        _tmp219 = tl.where(rmask, tmp220, _tmp219)
        tmp221 = tmp120 * tmp208
        tmp222 = tl.broadcast_to(tmp221, [XBLOCK, RBLOCK])
        tmp224 = _tmp223 + tmp222
        _tmp223 = tl.where(rmask, tmp224, _tmp223)
        tmp227 = tmp225 * tmp226
        tmp228 = 0.0
        tmp229 = tmp227 + tmp228
        tmp231 = tmp229 + tmp230
        tmp233 = tmp231 + tmp232
        tmp234 = tmp125 * tmp233
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp238 = tmp107 * tmp233
        tmp239 = tl.broadcast_to(tmp238, [XBLOCK, RBLOCK])
        tmp241 = _tmp240 + tmp239
        _tmp240 = tl.where(rmask, tmp241, _tmp240)
        tmp242 = tmp115 * tmp233
        tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
        tmp245 = _tmp244 + tmp243
        _tmp244 = tl.where(rmask, tmp245, _tmp244)
        tmp246 = tmp120 * tmp233
        tmp247 = tl.broadcast_to(tmp246, [XBLOCK, RBLOCK])
        tmp249 = _tmp248 + tmp247
        _tmp248 = tl.where(rmask, tmp249, _tmp248)
        tmp251 = tmp226 + tmp250
        tmp253 = tmp251 + tmp252
        tmp254 = tmp125 * tmp253
        tmp255 = tl.broadcast_to(tmp254, [XBLOCK, RBLOCK])
        tmp257 = _tmp256 + tmp255
        _tmp256 = tl.where(rmask, tmp257, _tmp256)
        tmp258 = tmp107 * tmp253
        tmp259 = tl.broadcast_to(tmp258, [XBLOCK, RBLOCK])
        tmp261 = _tmp260 + tmp259
        _tmp260 = tl.where(rmask, tmp261, _tmp260)
        tmp262 = tmp115 * tmp253
        tmp263 = tl.broadcast_to(tmp262, [XBLOCK, RBLOCK])
        tmp265 = _tmp264 + tmp263
        _tmp264 = tl.where(rmask, tmp265, _tmp264)
        tmp266 = tmp120 * tmp253
        tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
        tmp269 = _tmp268 + tmp267
        _tmp268 = tl.where(rmask, tmp269, _tmp268)
        tmp270 = tmp125 * tmp226
        tmp271 = tl.broadcast_to(tmp270, [XBLOCK, RBLOCK])
        tmp273 = _tmp272 + tmp271
        _tmp272 = tl.where(rmask, tmp273, _tmp272)
        tmp274 = tmp115 * tmp226
        tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
        tmp277 = _tmp276 + tmp275
        _tmp276 = tl.where(rmask, tmp277, _tmp276)
        tmp278 = tmp120 * tmp226
        tmp279 = tl.broadcast_to(tmp278, [XBLOCK, RBLOCK])
        tmp281 = _tmp280 + tmp279
        _tmp280 = tl.where(rmask, tmp281, _tmp280)
        tmp282 = tmp107 * tmp226
        tmp283 = tl.broadcast_to(tmp282, [XBLOCK, RBLOCK])
        tmp285 = _tmp284 + tmp283
        _tmp284 = tl.where(rmask, tmp285, _tmp284)
    tmp113 = tl.sum(_tmp113, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp113, None)
    tmp118 = tl.sum(_tmp118, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp118, None)
    tmp123 = tl.sum(_tmp123, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp123, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp133, None)
    tmp137 = tl.sum(_tmp137, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp137, None)
    tmp141 = tl.sum(_tmp141, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp141, None)
    tmp145 = tl.sum(_tmp145, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp145, None)
    tmp152 = tl.sum(_tmp152, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp152, None)
    tmp156 = tl.sum(_tmp156, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp156, None)
    tmp160 = tl.sum(_tmp160, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp160, None)
    tmp164 = tl.sum(_tmp164, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp164, None)
    tmp171 = tl.sum(_tmp171, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp171, None)
    tmp175 = tl.sum(_tmp175, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp175, None)
    tmp179 = tl.sum(_tmp179, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp179, None)
    tmp183 = tl.sum(_tmp183, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp183, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp200, None)
    tmp204 = tl.sum(_tmp204, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp204, None)
    tmp211 = tl.sum(_tmp211, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp211, None)
    tmp215 = tl.sum(_tmp215, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp215, None)
    tmp219 = tl.sum(_tmp219, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp219, None)
    tmp223 = tl.sum(_tmp223, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp223, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp236, None)
    tmp240 = tl.sum(_tmp240, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp240, None)
    tmp244 = tl.sum(_tmp244, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp244, None)
    tmp248 = tl.sum(_tmp248, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp248, None)
    tmp256 = tl.sum(_tmp256, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp256, None)
    tmp260 = tl.sum(_tmp260, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp260, None)
    tmp264 = tl.sum(_tmp264, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp264, None)
    tmp268 = tl.sum(_tmp268, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp268, None)
    tmp272 = tl.sum(_tmp272, 1)[:, None]
    tl.store(out_ptr38 + (x0), tmp272, None)
    tmp276 = tl.sum(_tmp276, 1)[:, None]
    tl.store(out_ptr39 + (x0), tmp276, None)
    tmp280 = tl.sum(_tmp280, 1)[:, None]
    tl.store(out_ptr40 + (x0), tmp280, None)
    tmp284 = tl.sum(_tmp284, 1)[:, None]
    tl.store(out_ptr41 + (x0), tmp284, None)
''')


# kernel path: /tmp/torchinductor_mengqy/an/cankj2p2mbtog6fmklzfp4xeqddxpka6bxjkj4vglumoyxdwlbh7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_182 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_182', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_182', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(34,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_182(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, xnumel, XBLOCK : tl.constexpr):
    xnumel = 245760
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 61440)
    x0 = xindex % 10
    x1 = (xindex // 10) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp30 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp47 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp53 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp99 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp103 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp119 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp132 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr29 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp148 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr32 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 8, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 7, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 6, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 5, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tl.full([1], 4, tl.int32)
    tmp29 = tmp3 == tmp28
    tmp31 = tl.where(tmp29, tmp30, tmp7)
    tmp32 = tl.where(tmp2, tmp31, tmp7)
    tmp33 = tmp27 + tmp32
    tmp34 = tmp3 == tmp1
    tmp36 = tl.where(tmp34, tmp35, tmp7)
    tmp37 = tl.where(tmp2, tmp36, tmp7)
    tmp38 = tmp33 + tmp37
    tmp39 = tl.full([1], 2, tl.int32)
    tmp40 = tmp3 == tmp39
    tmp42 = tl.where(tmp40, tmp41, tmp7)
    tmp43 = tl.where(tmp2, tmp42, tmp7)
    tmp44 = tmp38 + tmp43
    tmp45 = tl.full([1], 1, tl.int32)
    tmp46 = tmp3 == tmp45
    tmp48 = tl.where(tmp46, tmp47, tmp7)
    tmp49 = tl.where(tmp2, tmp48, tmp7)
    tmp50 = tmp44 + tmp49
    tmp51 = tl.full([1], 0, tl.int32)
    tmp52 = tmp3 == tmp51
    tmp54 = tl.where(tmp52, tmp53, tmp7)
    tmp55 = tl.where(tmp2, tmp54, tmp7)
    tmp56 = tmp50 + tmp55
    tmp57 = tmp0 == tmp39
    tmp59 = tl.where(tmp5, tmp58, tmp7)
    tmp60 = tl.where(tmp57, tmp59, tmp7)
    tmp61 = tmp56 + tmp60
    tmp63 = tl.where(tmp11, tmp62, tmp7)
    tmp64 = tl.where(tmp57, tmp63, tmp7)
    tmp65 = tmp61 + tmp64
    tmp67 = tl.where(tmp17, tmp66, tmp7)
    tmp68 = tl.where(tmp57, tmp67, tmp7)
    tmp69 = tmp65 + tmp68
    tmp71 = tl.where(tmp23, tmp70, tmp7)
    tmp72 = tl.where(tmp57, tmp71, tmp7)
    tmp73 = tmp69 + tmp72
    tmp75 = tl.where(tmp29, tmp74, tmp7)
    tmp76 = tl.where(tmp57, tmp75, tmp7)
    tmp77 = tmp73 + tmp76
    tmp79 = tl.where(tmp34, tmp78, tmp7)
    tmp80 = tl.where(tmp57, tmp79, tmp7)
    tmp81 = tmp77 + tmp80
    tmp83 = tl.where(tmp40, tmp82, tmp7)
    tmp84 = tl.where(tmp57, tmp83, tmp7)
    tmp85 = tmp81 + tmp84
    tmp87 = tl.where(tmp46, tmp86, tmp7)
    tmp88 = tl.where(tmp57, tmp87, tmp7)
    tmp89 = tmp85 + tmp88
    tmp91 = tl.where(tmp52, tmp90, tmp7)
    tmp92 = tl.where(tmp57, tmp91, tmp7)
    tmp93 = tmp89 + tmp92
    tmp94 = tmp0 == tmp45
    tmp96 = tl.where(tmp5, tmp95, tmp7)
    tmp97 = tl.where(tmp94, tmp96, tmp7)
    tmp98 = tmp93 + tmp97
    tmp100 = tl.where(tmp11, tmp99, tmp7)
    tmp101 = tl.where(tmp94, tmp100, tmp7)
    tmp102 = tmp98 + tmp101
    tmp104 = tl.where(tmp17, tmp103, tmp7)
    tmp105 = tl.where(tmp94, tmp104, tmp7)
    tmp106 = tmp102 + tmp105
    tmp108 = tl.where(tmp23, tmp107, tmp7)
    tmp109 = tl.where(tmp94, tmp108, tmp7)
    tmp110 = tmp106 + tmp109
    tmp112 = tl.where(tmp29, tmp111, tmp7)
    tmp113 = tl.where(tmp94, tmp112, tmp7)
    tmp114 = tmp110 + tmp113
    tmp116 = tl.where(tmp34, tmp115, tmp7)
    tmp117 = tl.where(tmp94, tmp116, tmp7)
    tmp118 = tmp114 + tmp117
    tmp120 = tl.where(tmp40, tmp119, tmp7)
    tmp121 = tl.where(tmp94, tmp120, tmp7)
    tmp122 = tmp118 + tmp121
    tmp124 = tl.where(tmp46, tmp123, tmp7)
    tmp125 = tl.where(tmp94, tmp124, tmp7)
    tmp126 = tmp122 + tmp125
    tmp128 = tl.where(tmp52, tmp127, tmp7)
    tmp129 = tl.where(tmp94, tmp128, tmp7)
    tmp130 = tmp126 + tmp129
    tmp131 = tmp0 == tmp51
    tmp133 = tl.where(tmp5, tmp132, tmp7)
    tmp134 = tl.where(tmp131, tmp133, tmp7)
    tmp135 = tmp130 + tmp134
    tmp137 = tl.where(tmp11, tmp136, tmp7)
    tmp138 = tl.where(tmp131, tmp137, tmp7)
    tmp139 = tmp135 + tmp138
    tmp141 = tl.where(tmp17, tmp140, tmp7)
    tmp142 = tl.where(tmp131, tmp141, tmp7)
    tmp143 = tmp139 + tmp142
    tmp145 = tl.where(tmp23, tmp144, tmp7)
    tmp146 = tl.where(tmp131, tmp145, tmp7)
    tmp147 = tmp143 + tmp146
    tmp149 = tl.where(tmp29, tmp148, tmp7)
    tmp150 = tl.where(tmp131, tmp149, tmp7)
    tmp151 = tmp147 + tmp150
    tmp153 = tl.where(tmp34, tmp152, tmp7)
    tmp154 = tl.where(tmp131, tmp153, tmp7)
    tmp155 = tmp151 + tmp154
    tl.store(in_out_ptr0 + (x3), tmp155, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ey/ceygkizsm7yr52p7bxfdy5xxsldtui52u3dytng7hgesex3twl2t.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_183 = async_compile.triton('triton_poi_fused_clone_183', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_183', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_183(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 245760
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 10
    x1 = (xindex // 10) % 4
    x2 = (xindex // 40)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (10*x2) + (61440*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/tf/ctfn4zmar5dtcygkvzif6ktgeev6pkvn6s52kvdfpi6nkou25hjd.py
# Source Nodes: [l__mod___dynamic_dense_8_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_8_act => add_239, convert_element_type_156, erf_8, mul_379
triton_poi_fused_gelu_gelu_backward_184 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_184', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_184', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_184(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 245760
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/eo/ceokk7qjsuew5gx7gk4bgumqnxfqyuzujxdx5ua5l4wnbloslv4a.py
# Source Nodes: [add, add_162, add_209, float_1, mean, mul, mul_199, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
# add => add_328
# add_162 => add_237
# add_209 => add_297
# float_1 => convert_element_type_176
# mean => mean_48
# mul => mul_484
# mul_199 => mul_453
# rsqrt => rsqrt_48
triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_185 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_185', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp32', 16: '*fp32', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: 'i32', 49: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_185', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(48, 49))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_185(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp13 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr7 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr9 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr11 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr12 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp39 = tl.load(in_ptr13 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr14 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr15 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr16 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr17 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr18 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr19 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr20 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr21 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr22 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr23 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr24 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp79 = tl.load(in_ptr25 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp82 = tl.load(in_ptr26 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr27 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr28 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr29 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp96 = tl.load(in_ptr30 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp99 = tl.load(in_ptr31 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr32 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr33 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp109 = tl.load(in_ptr34 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr35 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp27 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp45 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp55 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp65 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp75 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp85 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp105 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 + tmp20
        tmp22 = tmp21 + tmp20
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp23 * tmp24
        tmp26 = tmp8 + tmp25
        tmp29 = tmp27 * tmp28
        tmp30 = tmp26 + tmp29
        tmp33 = tmp31 * tmp32
        tmp34 = tmp30 + tmp33
        tmp37 = tmp23 * tmp36
        tmp38 = tmp35 + tmp37
        tmp40 = tmp27 * tmp39
        tmp41 = tmp38 + tmp40
        tmp43 = tmp31 * tmp42
        tmp44 = tmp41 + tmp43
        tmp47 = tmp23 * tmp46
        tmp48 = tmp45 + tmp47
        tmp50 = tmp27 * tmp49
        tmp51 = tmp48 + tmp50
        tmp53 = tmp31 * tmp52
        tmp54 = tmp51 + tmp53
        tmp57 = tmp23 * tmp56
        tmp58 = tmp55 + tmp57
        tmp60 = tmp27 * tmp59
        tmp61 = tmp58 + tmp60
        tmp63 = tmp31 * tmp62
        tmp64 = tmp61 + tmp63
        tmp67 = tmp23 * tmp66
        tmp68 = tmp65 + tmp67
        tmp70 = tmp27 * tmp69
        tmp71 = tmp68 + tmp70
        tmp73 = tmp31 * tmp72
        tmp74 = tmp71 + tmp73
        tmp77 = tmp23 * tmp76
        tmp78 = tmp75 + tmp77
        tmp80 = tmp27 * tmp79
        tmp81 = tmp78 + tmp80
        tmp83 = tmp31 * tmp82
        tmp84 = tmp81 + tmp83
        tmp87 = tmp23 * tmp86
        tmp88 = tmp85 + tmp87
        tmp90 = tmp27 * tmp89
        tmp91 = tmp88 + tmp90
        tmp93 = tmp31 * tmp92
        tmp94 = tmp91 + tmp93
        tmp97 = tmp23 * tmp96
        tmp98 = tmp95 + tmp97
        tmp100 = tmp27 * tmp99
        tmp101 = tmp98 + tmp100
        tmp103 = tmp31 * tmp102
        tmp104 = tmp101 + tmp103
        tmp107 = tmp23 * tmp106
        tmp108 = tmp105 + tmp107
        tmp110 = tmp27 * tmp109
        tmp111 = tmp108 + tmp110
        tmp113 = tmp31 * tmp112
        tmp114 = tmp111 + tmp113
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp34, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp44, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp54, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp64, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp74, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp84, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp94, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp104, rmask)
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp114, rmask)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp130 = tl.load(in_ptr36 + (11*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr37 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp115 = tl.load(in_out_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp126 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp133 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp143 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tmp116 * tmp117
        tmp119 = tmp118.to(tl.float32)
        tmp120 = 2048.0
        tmp121 = tmp13 / tmp120
        tmp122 = 1e-05
        tmp123 = tmp121 + tmp122
        tmp124 = tl.math.rsqrt(tmp123)
        tmp125 = tmp119 * tmp124
        tmp127 = tmp125 + tmp126
        tmp128 = tmp127 + tmp126
        tmp129 = tmp128.to(tl.float32)
        tmp131 = tmp129 * tmp130
        tmp132 = tmp115 + tmp131
        tmp135 = tmp133 * tmp134
        tmp136 = tmp132 + tmp135
        tmp137 = -0.5
        tmp138 = tmp6 * tmp137
        tmp139 = tmp134 * tmp134
        tmp140 = tmp139 * tmp134
        tmp141 = tmp138 * tmp140
        tmp142 = tmp141 / tmp120
        tmp145 = tmp143 + tmp144
        tmp146 = 2.0
        tmp147 = tmp145 * tmp146
        tmp148 = tmp142 * tmp147
        tmp149 = tmp136 + tmp148
        tl.store(in_out_ptr9 + (r1 + (2048*x0)), tmp149, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/f3/cf3ecajurwwmud246lc7qu4pfiqc6isi6vh4sgukedzswuvg3r2b.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_186 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_186', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[2048, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_186', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_186(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1920
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 10
    x4 = (xindex // 10)
    x2 = (xindex // 480)
    x1 = (xindex // 10) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (10*r3) + (1280*x4)), rmask & xmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/op/cop7tjuqudu5bxc26hq3bte3wt55wd7fnfuxelffi4nu2my7jje4.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_187 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_187', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_187', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_187(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 40
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 10
    x1 = (xindex // 10)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (10*r2) + (480*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/es/cesswyrpdhkhr4alk6dm5pvlwjmbvhkgzirezz6yqnjbl4gx6ety.py
# Source Nodes: [add, add_10, add_12, add_144, add_152, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_230
# add_10 => add_18
# add_12 => add_20
# add_144 => add_231
# add_152 => add_232
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# add_96 => add_153
# add_98 => add_155
# mean => mean_38
# mean_1 => mean_39
# mean_2 => mean_40
# mul => mul_354
# mul_3 => mul_357
# mul_4 => mul_24
# mul_6 => mul_360
# rsqrt => rsqrt_38
# rsqrt_1 => rsqrt_39
# rsqrt_2 => rsqrt_40
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_188 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_188', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp32', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: 'i32', 67: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_188', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(66, 67))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_188(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, out_ptr1, out_ptr3, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, out_ptr34, out_ptr35, out_ptr36, out_ptr37, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tmp34 = tmp33.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tmp44 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp62 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp42 = tmp40 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = 2048.0
        tmp46 = tmp44 / tmp45
        tmp47 = 1e-05
        tmp48 = tmp46 + tmp47
        tmp49 = tl.math.rsqrt(tmp48)
        tmp50 = tmp43 * tmp49
        tmp51 = -0.5
        tmp52 = tmp38 * tmp51
        tmp53 = tmp49 * tmp49
        tmp54 = tmp53 * tmp49
        tmp55 = tmp52 * tmp54
        tmp56 = tmp55 / tmp45
        tmp58 = tmp56 * tmp57
        tmp59 = tmp50 + tmp58
        tmp60 = tmp59 + tmp58
        tmp61 = tmp60.to(tl.float32)
        tmp64 = tmp62 * tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp67 = tmp65 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp61, rmask)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tmp75 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp71 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0)
        tmp93 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp73 = tmp71 * tmp72
        tmp74 = tmp73.to(tl.float32)
        tmp76 = 2048.0
        tmp77 = tmp75 / tmp76
        tmp78 = 1e-05
        tmp79 = tmp77 + tmp78
        tmp80 = tl.math.rsqrt(tmp79)
        tmp81 = tmp74 * tmp80
        tmp82 = -0.5
        tmp83 = tmp69 * tmp82
        tmp84 = tmp80 * tmp80
        tmp85 = tmp84 * tmp80
        tmp86 = tmp83 * tmp85
        tmp87 = tmp86 / tmp76
        tmp89 = tmp87 * tmp88
        tmp90 = tmp81 + tmp89
        tmp91 = tmp90 + tmp89
        tmp92 = tmp91.to(tl.float32)
        tmp96 = tmp94 + tmp95
        tmp98 = tmp96 + tmp97
        tmp99 = tmp93 * tmp98
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp92, rmask)
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp101, None)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp116 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp121 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp133 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp137 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp141 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp148 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp152 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp156 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp160 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp173 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp181 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp202 = tl.load(in_ptr25 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp213 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp225 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp233 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp241 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp249 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp261 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp103 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp104 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp105 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp113 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp123 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp124 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp143 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp144 = tl.load(in_ptr19 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp162 = tl.load(in_ptr20 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr21 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr22 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr23 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp184 = tl.load(in_ptr24 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp203 = tl.load(in_ptr26 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr27 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp209 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp106 = tmp104 + tmp105
        tmp108 = tmp106 + tmp107
        tmp109 = tmp103 * tmp108
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tmp114 = tmp113 * tmp108
        tmp115 = tl.broadcast_to(tmp114, [XBLOCK, RBLOCK])
        tmp117 = _tmp116 + tmp115
        _tmp116 = tl.where(rmask, tmp117, _tmp116)
        tmp119 = tmp118 * tmp108
        tmp120 = tl.broadcast_to(tmp119, [XBLOCK, RBLOCK])
        tmp122 = _tmp121 + tmp120
        _tmp121 = tl.where(rmask, tmp122, _tmp121)
        tmp126 = tmp124 + tmp125
        tmp127 = tmp123 * tmp126
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp131 = tmp103 * tmp126
        tmp132 = tl.broadcast_to(tmp131, [XBLOCK, RBLOCK])
        tmp134 = _tmp133 + tmp132
        _tmp133 = tl.where(rmask, tmp134, _tmp133)
        tmp135 = tmp113 * tmp126
        tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
        tmp138 = _tmp137 + tmp136
        _tmp137 = tl.where(rmask, tmp138, _tmp137)
        tmp139 = tmp118 * tmp126
        tmp140 = tl.broadcast_to(tmp139, [XBLOCK, RBLOCK])
        tmp142 = _tmp141 + tmp140
        _tmp141 = tl.where(rmask, tmp142, _tmp141)
        tmp145 = tmp143 + tmp144
        tmp146 = tmp123 * tmp145
        tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
        tmp149 = _tmp148 + tmp147
        _tmp148 = tl.where(rmask, tmp149, _tmp148)
        tmp150 = tmp103 * tmp145
        tmp151 = tl.broadcast_to(tmp150, [XBLOCK, RBLOCK])
        tmp153 = _tmp152 + tmp151
        _tmp152 = tl.where(rmask, tmp153, _tmp152)
        tmp154 = tmp113 * tmp145
        tmp155 = tl.broadcast_to(tmp154, [XBLOCK, RBLOCK])
        tmp157 = _tmp156 + tmp155
        _tmp156 = tl.where(rmask, tmp157, _tmp156)
        tmp158 = tmp118 * tmp145
        tmp159 = tl.broadcast_to(tmp158, [XBLOCK, RBLOCK])
        tmp161 = _tmp160 + tmp159
        _tmp160 = tl.where(rmask, tmp161, _tmp160)
        tmp164 = tmp162 + tmp163
        tmp166 = tmp164 + tmp165
        tmp167 = tmp123 * tmp166
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tmp171 = tmp103 * tmp166
        tmp172 = tl.broadcast_to(tmp171, [XBLOCK, RBLOCK])
        tmp174 = _tmp173 + tmp172
        _tmp173 = tl.where(rmask, tmp174, _tmp173)
        tmp175 = tmp113 * tmp166
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tmp179 = tmp118 * tmp166
        tmp180 = tl.broadcast_to(tmp179, [XBLOCK, RBLOCK])
        tmp182 = _tmp181 + tmp180
        _tmp181 = tl.where(rmask, tmp182, _tmp181)
        tmp185 = tmp183 + tmp184
        tmp186 = tmp123 * tmp185
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp103 * tmp185
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp113 * tmp185
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp118 * tmp185
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp204 = tmp202 * tmp203
        tmp205 = 0.0
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp210 = tmp208 + tmp209
        tmp211 = tmp123 * tmp210
        tmp212 = tl.broadcast_to(tmp211, [XBLOCK, RBLOCK])
        tmp214 = _tmp213 + tmp212
        _tmp213 = tl.where(rmask, tmp214, _tmp213)
        tmp215 = tmp103 * tmp210
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp219 = tmp113 * tmp210
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp223 = tmp118 * tmp210
        tmp224 = tl.broadcast_to(tmp223, [XBLOCK, RBLOCK])
        tmp226 = _tmp225 + tmp224
        _tmp225 = tl.where(rmask, tmp226, _tmp225)
        tmp228 = tmp203 + tmp227
        tmp230 = tmp228 + tmp229
        tmp231 = tmp123 * tmp230
        tmp232 = tl.broadcast_to(tmp231, [XBLOCK, RBLOCK])
        tmp234 = _tmp233 + tmp232
        _tmp233 = tl.where(rmask, tmp234, _tmp233)
        tmp235 = tmp103 * tmp230
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tmp239 = tmp113 * tmp230
        tmp240 = tl.broadcast_to(tmp239, [XBLOCK, RBLOCK])
        tmp242 = _tmp241 + tmp240
        _tmp241 = tl.where(rmask, tmp242, _tmp241)
        tmp243 = tmp118 * tmp230
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp247 = tmp123 * tmp203
        tmp248 = tl.broadcast_to(tmp247, [XBLOCK, RBLOCK])
        tmp250 = _tmp249 + tmp248
        _tmp249 = tl.where(rmask, tmp250, _tmp249)
        tmp251 = tmp113 * tmp203
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp255 = tmp118 * tmp203
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp259 = tmp103 * tmp203
        tmp260 = tl.broadcast_to(tmp259, [XBLOCK, RBLOCK])
        tmp262 = _tmp261 + tmp260
        _tmp261 = tl.where(rmask, tmp262, _tmp261)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp111, None)
    tmp116 = tl.sum(_tmp116, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp116, None)
    tmp121 = tl.sum(_tmp121, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp121, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp129, None)
    tmp133 = tl.sum(_tmp133, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp133, None)
    tmp137 = tl.sum(_tmp137, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp137, None)
    tmp141 = tl.sum(_tmp141, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp141, None)
    tmp148 = tl.sum(_tmp148, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp148, None)
    tmp152 = tl.sum(_tmp152, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp152, None)
    tmp156 = tl.sum(_tmp156, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp156, None)
    tmp160 = tl.sum(_tmp160, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp160, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp169, None)
    tmp173 = tl.sum(_tmp173, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp173, None)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp177, None)
    tmp181 = tl.sum(_tmp181, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp181, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp200, None)
    tmp213 = tl.sum(_tmp213, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp213, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp217, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp221, None)
    tmp225 = tl.sum(_tmp225, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp225, None)
    tmp233 = tl.sum(_tmp233, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp233, None)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp237, None)
    tmp241 = tl.sum(_tmp241, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp241, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp245, None)
    tmp249 = tl.sum(_tmp249, 1)[:, None]
    tl.store(out_ptr34 + (x0), tmp249, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr35 + (x0), tmp253, None)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr36 + (x0), tmp257, None)
    tmp261 = tl.sum(_tmp261, 1)[:, None]
    tl.store(out_ptr37 + (x0), tmp261, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hk/chkmdat6oov6xmuiu7bw5d7pbrnb23q5isdbslcjcnbjtgjfxqjh.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_189 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_189', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_189', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(30,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_189(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, xnumel, XBLOCK : tl.constexpr):
    xnumel = 221184
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 55296)
    x0 = xindex % 9
    x1 = (xindex // 9) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp47 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp64 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp72 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp85 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp93 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp109 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr25 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr28 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 7, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 6, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 5, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tl.full([1], 4, tl.int32)
    tmp23 = tmp3 == tmp22
    tmp25 = tl.where(tmp23, tmp24, tmp7)
    tmp26 = tl.where(tmp2, tmp25, tmp7)
    tmp27 = tmp21 + tmp26
    tmp28 = tmp3 == tmp1
    tmp30 = tl.where(tmp28, tmp29, tmp7)
    tmp31 = tl.where(tmp2, tmp30, tmp7)
    tmp32 = tmp27 + tmp31
    tmp33 = tl.full([1], 2, tl.int32)
    tmp34 = tmp3 == tmp33
    tmp36 = tl.where(tmp34, tmp35, tmp7)
    tmp37 = tl.where(tmp2, tmp36, tmp7)
    tmp38 = tmp32 + tmp37
    tmp39 = tl.full([1], 1, tl.int32)
    tmp40 = tmp3 == tmp39
    tmp42 = tl.where(tmp40, tmp41, tmp7)
    tmp43 = tl.where(tmp2, tmp42, tmp7)
    tmp44 = tmp38 + tmp43
    tmp45 = tl.full([1], 0, tl.int32)
    tmp46 = tmp3 == tmp45
    tmp48 = tl.where(tmp46, tmp47, tmp7)
    tmp49 = tl.where(tmp2, tmp48, tmp7)
    tmp50 = tmp44 + tmp49
    tmp51 = tmp0 == tmp33
    tmp53 = tl.where(tmp5, tmp52, tmp7)
    tmp54 = tl.where(tmp51, tmp53, tmp7)
    tmp55 = tmp50 + tmp54
    tmp57 = tl.where(tmp11, tmp56, tmp7)
    tmp58 = tl.where(tmp51, tmp57, tmp7)
    tmp59 = tmp55 + tmp58
    tmp61 = tl.where(tmp17, tmp60, tmp7)
    tmp62 = tl.where(tmp51, tmp61, tmp7)
    tmp63 = tmp59 + tmp62
    tmp65 = tl.where(tmp23, tmp64, tmp7)
    tmp66 = tl.where(tmp51, tmp65, tmp7)
    tmp67 = tmp63 + tmp66
    tmp69 = tl.where(tmp28, tmp68, tmp7)
    tmp70 = tl.where(tmp51, tmp69, tmp7)
    tmp71 = tmp67 + tmp70
    tmp73 = tl.where(tmp34, tmp72, tmp7)
    tmp74 = tl.where(tmp51, tmp73, tmp7)
    tmp75 = tmp71 + tmp74
    tmp77 = tl.where(tmp40, tmp76, tmp7)
    tmp78 = tl.where(tmp51, tmp77, tmp7)
    tmp79 = tmp75 + tmp78
    tmp81 = tl.where(tmp46, tmp80, tmp7)
    tmp82 = tl.where(tmp51, tmp81, tmp7)
    tmp83 = tmp79 + tmp82
    tmp84 = tmp0 == tmp39
    tmp86 = tl.where(tmp5, tmp85, tmp7)
    tmp87 = tl.where(tmp84, tmp86, tmp7)
    tmp88 = tmp83 + tmp87
    tmp90 = tl.where(tmp11, tmp89, tmp7)
    tmp91 = tl.where(tmp84, tmp90, tmp7)
    tmp92 = tmp88 + tmp91
    tmp94 = tl.where(tmp17, tmp93, tmp7)
    tmp95 = tl.where(tmp84, tmp94, tmp7)
    tmp96 = tmp92 + tmp95
    tmp98 = tl.where(tmp23, tmp97, tmp7)
    tmp99 = tl.where(tmp84, tmp98, tmp7)
    tmp100 = tmp96 + tmp99
    tmp102 = tl.where(tmp28, tmp101, tmp7)
    tmp103 = tl.where(tmp84, tmp102, tmp7)
    tmp104 = tmp100 + tmp103
    tmp106 = tl.where(tmp34, tmp105, tmp7)
    tmp107 = tl.where(tmp84, tmp106, tmp7)
    tmp108 = tmp104 + tmp107
    tmp110 = tl.where(tmp40, tmp109, tmp7)
    tmp111 = tl.where(tmp84, tmp110, tmp7)
    tmp112 = tmp108 + tmp111
    tmp114 = tl.where(tmp46, tmp113, tmp7)
    tmp115 = tl.where(tmp84, tmp114, tmp7)
    tmp116 = tmp112 + tmp115
    tmp117 = tmp0 == tmp45
    tmp119 = tl.where(tmp5, tmp118, tmp7)
    tmp120 = tl.where(tmp117, tmp119, tmp7)
    tmp121 = tmp116 + tmp120
    tmp123 = tl.where(tmp11, tmp122, tmp7)
    tmp124 = tl.where(tmp117, tmp123, tmp7)
    tmp125 = tmp121 + tmp124
    tmp127 = tl.where(tmp17, tmp126, tmp7)
    tmp128 = tl.where(tmp117, tmp127, tmp7)
    tmp129 = tmp125 + tmp128
    tmp131 = tl.where(tmp23, tmp130, tmp7)
    tmp132 = tl.where(tmp117, tmp131, tmp7)
    tmp133 = tmp129 + tmp132
    tmp135 = tl.where(tmp28, tmp134, tmp7)
    tmp136 = tl.where(tmp117, tmp135, tmp7)
    tmp137 = tmp133 + tmp136
    tl.store(in_out_ptr0 + (x3), tmp137, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zy/czyoth24yw647gsq4weaonk56d2jqnjvqhohwowvkrulq3u3tkgp.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_190 = async_compile.triton('triton_poi_fused_clone_190', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_190', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_190(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 221184
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 9
    x1 = (xindex // 9) % 4
    x2 = (xindex // 36)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (9*x2) + (55296*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2g/c2gcdyav4e3caku62ta6gnakvnct63mfxjxxr7lr6uz7npgxmxxn.py
# Source Nodes: [l__mod___dynamic_dense_7_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_7_act => add_196, convert_element_type_138, erf_7, mul_320
triton_poi_fused_gelu_gelu_backward_191 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_191', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_191', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_191(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 221184
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5j/c5jj2hcivmc24qclyhqasm7dvbq54f36zwpw2lvuq7pgz3uq4fhq.py
# Source Nodes: [add_128], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_128 => add_194
triton_red_fused_add_div_mul_pow_sum_192 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_192', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: 'i32', 52: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_192', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(51, 52))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_192(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp10 = tl.load(in_ptr4 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr6 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr8 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr10 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr11 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr12 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr13 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr14 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp39 = tl.load(in_ptr15 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr16 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp45 = tl.load(in_ptr17 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr18 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr19 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr20 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr21 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr22 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr23 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr24 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr25 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr26 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp78 = tl.load(in_ptr27 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr28 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp84 = tl.load(in_ptr29 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr30 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr31 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr32 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr33 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr34 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr35 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr36 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr37 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr38 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp25 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp51 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_out_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp8 + tmp11
        tmp15 = tmp13 * tmp14
        tmp16 = tmp12 + tmp15
        tmp19 = tmp17 * tmp18
        tmp20 = tmp16 + tmp19
        tmp23 = tmp21 * tmp22
        tmp24 = tmp20 + tmp23
        tmp27 = tmp9 * tmp26
        tmp28 = tmp25 + tmp27
        tmp30 = tmp13 * tmp29
        tmp31 = tmp28 + tmp30
        tmp33 = tmp17 * tmp32
        tmp34 = tmp31 + tmp33
        tmp36 = tmp21 * tmp35
        tmp37 = tmp34 + tmp36
        tmp40 = tmp9 * tmp39
        tmp41 = tmp38 + tmp40
        tmp43 = tmp13 * tmp42
        tmp44 = tmp41 + tmp43
        tmp46 = tmp17 * tmp45
        tmp47 = tmp44 + tmp46
        tmp49 = tmp21 * tmp48
        tmp50 = tmp47 + tmp49
        tmp53 = tmp9 * tmp52
        tmp54 = tmp51 + tmp53
        tmp56 = tmp13 * tmp55
        tmp57 = tmp54 + tmp56
        tmp59 = tmp17 * tmp58
        tmp60 = tmp57 + tmp59
        tmp62 = tmp21 * tmp61
        tmp63 = tmp60 + tmp62
        tmp66 = tmp9 * tmp65
        tmp67 = tmp64 + tmp66
        tmp69 = tmp13 * tmp68
        tmp70 = tmp67 + tmp69
        tmp72 = tmp17 * tmp71
        tmp73 = tmp70 + tmp72
        tmp75 = tmp21 * tmp74
        tmp76 = tmp73 + tmp75
        tmp79 = tmp9 * tmp78
        tmp80 = tmp77 + tmp79
        tmp82 = tmp13 * tmp81
        tmp83 = tmp80 + tmp82
        tmp85 = tmp17 * tmp84
        tmp86 = tmp83 + tmp85
        tmp88 = tmp21 * tmp87
        tmp89 = tmp86 + tmp88
        tmp92 = tmp9 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp13 * tmp94
        tmp96 = tmp93 + tmp95
        tmp98 = tmp17 * tmp97
        tmp99 = tmp96 + tmp98
        tmp101 = tmp21 * tmp100
        tmp102 = tmp99 + tmp101
        tmp105 = tmp9 * tmp104
        tmp106 = tmp103 + tmp105
        tmp108 = tmp13 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp17 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp21 * tmp113
        tmp115 = tmp112 + tmp114
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp24, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp37, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp50, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp63, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp76, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp89, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp102, rmask)
        tl.store(in_out_ptr7 + (r1 + (2048*x0)), tmp115, rmask)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp118 = tl.load(in_ptr39 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp122 = tl.load(in_ptr40 + (10*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr41 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp116 = tl.load(in_out_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp125 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp119 = tmp117 * tmp118
        tmp120 = tmp116 + tmp119
        tmp123 = tmp121 * tmp122
        tmp124 = tmp120 + tmp123
        tmp127 = tmp125 * tmp126
        tmp128 = tmp124 + tmp127
        tmp129 = -0.5
        tmp130 = tmp6 * tmp129
        tmp131 = tmp126 * tmp126
        tmp132 = tmp131 * tmp126
        tmp133 = tmp130 * tmp132
        tmp134 = 2048.0
        tmp135 = tmp133 / tmp134
        tmp138 = tmp136 + tmp137
        tmp139 = 2.0
        tmp140 = tmp138 * tmp139
        tmp141 = tmp135 * tmp140
        tmp142 = tmp128 + tmp141
        tl.store(in_out_ptr8 + (r1 + (2048*x0)), tmp142, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/3m/c3mzv6hr53c5n5wfnkfkftz6dh4s43jcyqlv5cn7cpnmw4md7dve.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_193 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_193', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[2048, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_193', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_193(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1728
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 9
    x4 = (xindex // 9)
    x2 = (xindex // 432)
    x1 = (xindex // 9) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (9*r3) + (1152*x4)), rmask & xmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/dg/cdg4rxnzph4b6y6ztpgpt45orxrfrwmibvle7z3xcpgg5hauksal.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_194 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_194', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_194', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_194(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 36
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 9
    x1 = (xindex // 9)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (9*r2) + (432*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/a6/ca6jogarlhh754kob4nvf6zkxcyl5dqavotofdi7ypnhwrhh47pu.py
# Source Nodes: [add, add_10, add_104, add_111, add_112, add_118, add_119, add_12, add_20, add_3, add_31, add_33, add_5, add_50, add_72, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_104, mul_111, mul_3, mul_4, mul_6, mul_97, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_187
# add_10 => add_18
# add_104 => add_165
# add_111 => add_172
# add_112 => add_188
# add_118 => add_179
# add_119 => add_189
# add_12 => add_20
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_72 => add_120
# float_1 => convert_element_type_122
# float_2 => convert_element_type_124
# float_3 => convert_element_type_126
# mean => mean_33
# mean_1 => mean_34
# mean_2 => mean_35
# mul => mul_295
# mul_104 => mul_280
# mul_111 => mul_287
# mul_3 => mul_298
# mul_4 => mul_24
# mul_6 => mul_301
# mul_97 => mul_273
# rsqrt => rsqrt_33
# rsqrt_1 => rsqrt_34
# rsqrt_2 => rsqrt_35
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_195 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_195', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp32', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp32', 53: '*fp32', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp16', 84: '*fp16', 85: '*fp16', 86: '*fp16', 87: '*fp16', 88: '*fp16', 89: '*fp16', 90: '*fp16', 91: '*fp16', 92: '*fp16', 93: '*fp16', 94: '*fp16', 95: '*fp16', 96: '*fp16', 97: '*fp16', 98: '*fp16', 99: '*fp16', 100: '*fp16', 101: '*fp16', 102: '*fp16', 103: '*fp16', 104: '*fp16', 105: '*fp16', 106: '*fp16', 107: '*fp16', 108: '*fp16', 109: '*fp16', 110: 'i32', 111: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_195', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(110, 111))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_195(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, out_ptr30, out_ptr31, out_ptr32, out_ptr33, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp69 = tl.load(in_ptr17 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr19 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr20 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr21 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr22 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr23 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr24 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr25 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr26 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr27 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr28 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr29 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr30 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr31 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr32 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr33 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr34 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr35 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp139 = tl.load(in_ptr36 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr37 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr38 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp149 = tl.load(in_ptr39 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp152 = tl.load(in_ptr40 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr41 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp159 = tl.load(in_ptr42 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr43 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp165 = tl.load(in_ptr44 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr45 + (x0), None, eviction_policy='evict_last')
    tmp183 = tl.load(in_ptr46 + (x0), None, eviction_policy='evict_last')
    tmp216 = tl.load(in_ptr47 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp219 = tl.load(in_ptr48 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp222 = tl.load(in_ptr49 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp225 = tl.load(in_ptr50 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp228 = tl.load(in_ptr51 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp231 = tl.load(in_ptr52 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp234 = tl.load(in_ptr53 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp237 = tl.load(in_ptr54 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp240 = tl.load(in_ptr55 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp243 = tl.load(in_ptr56 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp246 = tl.load(in_ptr57 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp249 = tl.load(in_ptr58 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp264 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp282 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp284 = tl.load(in_ptr69 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp294 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp80 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp90 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp103 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp142 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp155 = tl.load(in_out_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp191 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp253 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp266 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp267 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp269 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp275 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp276 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp278 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp288 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp290 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp70 = tmp68 * tmp69
        tmp71 = tmp67 + tmp70
        tmp74 = tmp72 * tmp73
        tmp75 = tmp71 + tmp74
        tmp78 = tmp76 * tmp77
        tmp79 = tmp75 + tmp78
        tmp82 = tmp80 * tmp81
        tmp83 = tmp82.to(tl.float32)
        tmp84 = tmp83 * tmp54
        tmp85 = tmp84 + tmp66
        tmp86 = tmp85 + tmp66
        tmp87 = tmp86.to(tl.float32)
        tmp88 = tmp87 * tmp5
        tmp89 = tmp79 + tmp88
        tmp92 = tmp68 * tmp91
        tmp93 = tmp90 + tmp92
        tmp95 = tmp72 * tmp94
        tmp96 = tmp93 + tmp95
        tmp98 = tmp76 * tmp97
        tmp99 = tmp96 + tmp98
        tmp101 = tmp87 * tmp100
        tmp102 = tmp99 + tmp101
        tmp105 = tmp68 * tmp104
        tmp106 = tmp103 + tmp105
        tmp108 = tmp72 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp76 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp87 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp68 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp72 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp76 * tmp123
        tmp125 = tmp122 + tmp124
        tmp127 = tmp87 * tmp126
        tmp128 = tmp125 + tmp127
        tmp131 = tmp68 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp72 * tmp133
        tmp135 = tmp132 + tmp134
        tmp137 = tmp76 * tmp136
        tmp138 = tmp135 + tmp137
        tmp140 = tmp87 * tmp139
        tmp141 = tmp138 + tmp140
        tmp144 = tmp68 * tmp143
        tmp145 = tmp142 + tmp144
        tmp147 = tmp72 * tmp146
        tmp148 = tmp145 + tmp147
        tmp150 = tmp76 * tmp149
        tmp151 = tmp148 + tmp150
        tmp153 = tmp87 * tmp152
        tmp154 = tmp151 + tmp153
        tmp157 = tmp68 * tmp156
        tmp158 = tmp155 + tmp157
        tmp160 = tmp72 * tmp159
        tmp161 = tmp158 + tmp160
        tmp163 = tmp76 * tmp162
        tmp164 = tmp161 + tmp163
        tmp166 = tmp87 * tmp165
        tmp167 = tmp164 + tmp166
        tmp168 = tmp27 * tmp47
        tmp170 = tmp169 / tmp50
        tmp171 = tmp170 + tmp52
        tmp172 = tl.math.rsqrt(tmp171)
        tmp173 = tmp172 * tmp172
        tmp174 = tmp173 * tmp172
        tmp175 = tmp168 * tmp174
        tmp176 = tmp175 / tmp50
        tmp178 = tmp21 * tmp62
        tmp179 = tmp177 + tmp178
        tmp180 = tmp179.to(tl.float32)
        tmp181 = tmp176 * tmp180
        tmp182 = tmp40 * tmp47
        tmp184 = tmp183 / tmp50
        tmp185 = tmp184 + tmp52
        tmp186 = tl.math.rsqrt(tmp185)
        tmp187 = tmp186 * tmp186
        tmp188 = tmp187 * tmp186
        tmp189 = tmp182 * tmp188
        tmp190 = tmp189 / tmp50
        tmp192 = tmp34 * tmp62
        tmp193 = tmp191 + tmp192
        tmp194 = tmp193.to(tl.float32)
        tmp195 = tmp190 * tmp194
        tmp198 = tmp196 * tmp197
        tmp199 = tmp198.to(tl.float32)
        tmp200 = tmp199 * tmp172
        tmp201 = tmp200 + tmp181
        tmp202 = tmp201 + tmp181
        tmp203 = tmp202.to(tl.float32)
        tmp204 = tmp203 * tmp21
        tmp205 = tmp89 + tmp204
        tmp208 = tmp206 * tmp207
        tmp209 = tmp208.to(tl.float32)
        tmp210 = tmp209 * tmp186
        tmp211 = tmp210 + tmp195
        tmp212 = tmp211 + tmp195
        tmp213 = tmp212.to(tl.float32)
        tmp214 = tmp213 * tmp34
        tmp215 = tmp205 + tmp214
        tmp217 = tmp203 * tmp216
        tmp218 = tmp102 + tmp217
        tmp220 = tmp213 * tmp219
        tmp221 = tmp218 + tmp220
        tmp223 = tmp203 * tmp222
        tmp224 = tmp115 + tmp223
        tmp226 = tmp213 * tmp225
        tmp227 = tmp224 + tmp226
        tmp229 = tmp203 * tmp228
        tmp230 = tmp128 + tmp229
        tmp232 = tmp213 * tmp231
        tmp233 = tmp230 + tmp232
        tmp235 = tmp203 * tmp234
        tmp236 = tmp141 + tmp235
        tmp238 = tmp213 * tmp237
        tmp239 = tmp236 + tmp238
        tmp241 = tmp203 * tmp240
        tmp242 = tmp154 + tmp241
        tmp244 = tmp213 * tmp243
        tmp245 = tmp242 + tmp244
        tmp247 = tmp203 * tmp246
        tmp248 = tmp167 + tmp247
        tmp250 = tmp213 * tmp249
        tmp251 = tmp248 + tmp250
        tmp254 = tmp252 + tmp253
        tmp255 = tmp76 * tmp254
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp261 = tmp259 + tmp260
        tmp262 = tmp76 * tmp261
        tmp263 = tl.broadcast_to(tmp262, [XBLOCK, RBLOCK])
        tmp265 = _tmp264 + tmp263
        _tmp264 = tl.where(rmask, tmp265, _tmp264)
        tmp268 = tmp266 + tmp267
        tmp270 = tmp268 + tmp269
        tmp271 = tmp76 * tmp270
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
        tmp277 = tmp275 + tmp276
        tmp279 = tmp277 + tmp278
        tmp280 = tmp76 * tmp279
        tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
        tmp283 = _tmp282 + tmp281
        _tmp282 = tl.where(rmask, tmp283, _tmp282)
        tmp285 = tmp284 * tmp266
        tmp286 = 0.0
        tmp287 = tmp285 + tmp286
        tmp289 = tmp287 + tmp288
        tmp291 = tmp289 + tmp290
        tmp292 = tmp76 * tmp291
        tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
        tmp295 = _tmp294 + tmp293
        _tmp294 = tl.where(rmask, tmp295, _tmp294)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp181, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp195, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp215, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp221, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp227, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp233, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp239, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp245, rmask)
        tl.store(in_out_ptr6 + (r1 + (2048*x0)), tmp251, rmask)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp257, None)
    tmp264 = tl.sum(_tmp264, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp264, None)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp273, None)
    tmp282 = tl.sum(_tmp282, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp282, None)
    tmp294 = tl.sum(_tmp294, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp294, None)
    _tmp315 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp322 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp331 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp338 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp350 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp358 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp362 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp378 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp382 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp386 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp390 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp394 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp398 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp402 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp418 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp422 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp426 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp430 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp434 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp438 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp442 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp447 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp296 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp297 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp306 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0)
        tmp310 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp311 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr61 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp318 = tl.load(in_ptr62 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp324 = tl.load(in_ptr66 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp325 = tl.load(in_ptr67 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp327 = tl.load(in_ptr68 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp333 = tl.load(in_ptr59 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp334 = tl.load(in_ptr60 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp340 = tl.load(in_ptr63 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp344 = tl.load(in_ptr70 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp346 = tl.load(in_ptr71 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp352 = tl.load(in_ptr64 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp354 = tl.load(in_ptr65 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp365 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp372 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp404 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp405 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp412 = tl.load(out_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp444 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tmp296 * tmp297
        tmp299 = tmp298.to(tl.float32)
        tmp300 = 2048.0
        tmp301 = tmp49 / tmp300
        tmp302 = 1e-05
        tmp303 = tmp301 + tmp302
        tmp304 = tl.math.rsqrt(tmp303)
        tmp305 = tmp299 * tmp304
        tmp307 = tmp305 + tmp306
        tmp308 = tmp307 + tmp306
        tmp309 = tmp308.to(tl.float32)
        tmp312 = tmp310 + tmp311
        tmp313 = tmp309 * tmp312
        tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
        tmp316 = _tmp315 + tmp314
        _tmp315 = tl.where(rmask, tmp316, _tmp315)
        tmp319 = tmp317 + tmp318
        tmp320 = tmp309 * tmp319
        tmp321 = tl.broadcast_to(tmp320, [XBLOCK, RBLOCK])
        tmp323 = _tmp322 + tmp321
        _tmp322 = tl.where(rmask, tmp323, _tmp322)
        tmp326 = tmp324 + tmp325
        tmp328 = tmp326 + tmp327
        tmp329 = tmp309 * tmp328
        tmp330 = tl.broadcast_to(tmp329, [XBLOCK, RBLOCK])
        tmp332 = _tmp331 + tmp330
        _tmp331 = tl.where(rmask, tmp332, _tmp331)
        tmp335 = tmp333 + tmp334
        tmp336 = tmp309 * tmp335
        tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
        tmp339 = _tmp338 + tmp337
        _tmp338 = tl.where(rmask, tmp339, _tmp338)
        tmp341 = tmp284 * tmp340
        tmp342 = 0.0
        tmp343 = tmp341 + tmp342
        tmp345 = tmp343 + tmp344
        tmp347 = tmp345 + tmp346
        tmp348 = tmp309 * tmp347
        tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
        tmp351 = _tmp350 + tmp349
        _tmp350 = tl.where(rmask, tmp351, _tmp350)
        tmp353 = tmp340 + tmp352
        tmp355 = tmp353 + tmp354
        tmp356 = tmp309 * tmp355
        tmp357 = tl.broadcast_to(tmp356, [XBLOCK, RBLOCK])
        tmp359 = _tmp358 + tmp357
        _tmp358 = tl.where(rmask, tmp359, _tmp358)
        tmp360 = tmp309 * tmp340
        tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
        tmp363 = _tmp362 + tmp361
        _tmp362 = tl.where(rmask, tmp363, _tmp362)
        tmp366 = tmp364 * tmp365
        tmp367 = tmp366.to(tl.float32)
        tmp368 = tmp169 / tmp300
        tmp369 = tmp368 + tmp302
        tmp370 = tl.math.rsqrt(tmp369)
        tmp371 = tmp367 * tmp370
        tmp373 = tmp371 + tmp372
        tmp374 = tmp373 + tmp372
        tmp375 = tmp374.to(tl.float32)
        tmp376 = tmp375 * tmp312
        tmp377 = tl.broadcast_to(tmp376, [XBLOCK, RBLOCK])
        tmp379 = _tmp378 + tmp377
        _tmp378 = tl.where(rmask, tmp379, _tmp378)
        tmp380 = tmp375 * tmp319
        tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
        tmp383 = _tmp382 + tmp381
        _tmp382 = tl.where(rmask, tmp383, _tmp382)
        tmp384 = tmp375 * tmp328
        tmp385 = tl.broadcast_to(tmp384, [XBLOCK, RBLOCK])
        tmp387 = _tmp386 + tmp385
        _tmp386 = tl.where(rmask, tmp387, _tmp386)
        tmp388 = tmp375 * tmp335
        tmp389 = tl.broadcast_to(tmp388, [XBLOCK, RBLOCK])
        tmp391 = _tmp390 + tmp389
        _tmp390 = tl.where(rmask, tmp391, _tmp390)
        tmp392 = tmp375 * tmp347
        tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
        tmp395 = _tmp394 + tmp393
        _tmp394 = tl.where(rmask, tmp395, _tmp394)
        tmp396 = tmp375 * tmp355
        tmp397 = tl.broadcast_to(tmp396, [XBLOCK, RBLOCK])
        tmp399 = _tmp398 + tmp397
        _tmp398 = tl.where(rmask, tmp399, _tmp398)
        tmp400 = tmp375 * tmp340
        tmp401 = tl.broadcast_to(tmp400, [XBLOCK, RBLOCK])
        tmp403 = _tmp402 + tmp401
        _tmp402 = tl.where(rmask, tmp403, _tmp402)
        tmp406 = tmp404 * tmp405
        tmp407 = tmp406.to(tl.float32)
        tmp408 = tmp183 / tmp300
        tmp409 = tmp408 + tmp302
        tmp410 = tl.math.rsqrt(tmp409)
        tmp411 = tmp407 * tmp410
        tmp413 = tmp411 + tmp412
        tmp414 = tmp413 + tmp412
        tmp415 = tmp414.to(tl.float32)
        tmp416 = tmp415 * tmp312
        tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
        tmp419 = _tmp418 + tmp417
        _tmp418 = tl.where(rmask, tmp419, _tmp418)
        tmp420 = tmp415 * tmp319
        tmp421 = tl.broadcast_to(tmp420, [XBLOCK, RBLOCK])
        tmp423 = _tmp422 + tmp421
        _tmp422 = tl.where(rmask, tmp423, _tmp422)
        tmp424 = tmp415 * tmp328
        tmp425 = tl.broadcast_to(tmp424, [XBLOCK, RBLOCK])
        tmp427 = _tmp426 + tmp425
        _tmp426 = tl.where(rmask, tmp427, _tmp426)
        tmp428 = tmp415 * tmp335
        tmp429 = tl.broadcast_to(tmp428, [XBLOCK, RBLOCK])
        tmp431 = _tmp430 + tmp429
        _tmp430 = tl.where(rmask, tmp431, _tmp430)
        tmp432 = tmp415 * tmp347
        tmp433 = tl.broadcast_to(tmp432, [XBLOCK, RBLOCK])
        tmp435 = _tmp434 + tmp433
        _tmp434 = tl.where(rmask, tmp435, _tmp434)
        tmp436 = tmp415 * tmp355
        tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
        tmp439 = _tmp438 + tmp437
        _tmp438 = tl.where(rmask, tmp439, _tmp438)
        tmp440 = tmp415 * tmp340
        tmp441 = tl.broadcast_to(tmp440, [XBLOCK, RBLOCK])
        tmp443 = _tmp442 + tmp441
        _tmp442 = tl.where(rmask, tmp443, _tmp442)
        tmp445 = tmp444 * tmp340
        tmp446 = tl.broadcast_to(tmp445, [XBLOCK, RBLOCK])
        tmp448 = _tmp447 + tmp446
        _tmp447 = tl.where(rmask, tmp448, _tmp447)
    tmp315 = tl.sum(_tmp315, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp315, None)
    tmp322 = tl.sum(_tmp322, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp322, None)
    tmp331 = tl.sum(_tmp331, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp331, None)
    tmp338 = tl.sum(_tmp338, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp338, None)
    tmp350 = tl.sum(_tmp350, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp350, None)
    tmp358 = tl.sum(_tmp358, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp358, None)
    tmp362 = tl.sum(_tmp362, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp362, None)
    tmp378 = tl.sum(_tmp378, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp378, None)
    tmp382 = tl.sum(_tmp382, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp382, None)
    tmp386 = tl.sum(_tmp386, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp386, None)
    tmp390 = tl.sum(_tmp390, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp390, None)
    tmp394 = tl.sum(_tmp394, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp394, None)
    tmp398 = tl.sum(_tmp398, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp398, None)
    tmp402 = tl.sum(_tmp402, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp402, None)
    tmp418 = tl.sum(_tmp418, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp418, None)
    tmp422 = tl.sum(_tmp422, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp422, None)
    tmp426 = tl.sum(_tmp426, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp426, None)
    tmp430 = tl.sum(_tmp430, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp430, None)
    tmp434 = tl.sum(_tmp434, 1)[:, None]
    tl.store(out_ptr30 + (x0), tmp434, None)
    tmp438 = tl.sum(_tmp438, 1)[:, None]
    tl.store(out_ptr31 + (x0), tmp438, None)
    tmp442 = tl.sum(_tmp442, 1)[:, None]
    tl.store(out_ptr32 + (x0), tmp442, None)
    tmp447 = tl.sum(_tmp447, 1)[:, None]
    tl.store(out_ptr33 + (x0), tmp447, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ns/cnspt2rn5lkknmqhj274nnpypaq6df5whl7fewpsldjencd2532p.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_196 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_196', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_196', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(26,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_196(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, xnumel, XBLOCK : tl.constexpr):
    xnumel = 196608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 49152)
    x0 = xindex % 8
    x1 = (xindex // 8) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp58 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp70 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp79 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp83 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp87 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp91 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp99 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr21 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp116 = tl.load(in_ptr24 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 6, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 5, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 4, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tmp3 == tmp1
    tmp24 = tl.where(tmp22, tmp23, tmp7)
    tmp25 = tl.where(tmp2, tmp24, tmp7)
    tmp26 = tmp21 + tmp25
    tmp27 = tl.full([1], 2, tl.int32)
    tmp28 = tmp3 == tmp27
    tmp30 = tl.where(tmp28, tmp29, tmp7)
    tmp31 = tl.where(tmp2, tmp30, tmp7)
    tmp32 = tmp26 + tmp31
    tmp33 = tl.full([1], 1, tl.int32)
    tmp34 = tmp3 == tmp33
    tmp36 = tl.where(tmp34, tmp35, tmp7)
    tmp37 = tl.where(tmp2, tmp36, tmp7)
    tmp38 = tmp32 + tmp37
    tmp39 = tl.full([1], 0, tl.int32)
    tmp40 = tmp3 == tmp39
    tmp42 = tl.where(tmp40, tmp41, tmp7)
    tmp43 = tl.where(tmp2, tmp42, tmp7)
    tmp44 = tmp38 + tmp43
    tmp45 = tmp0 == tmp27
    tmp47 = tl.where(tmp5, tmp46, tmp7)
    tmp48 = tl.where(tmp45, tmp47, tmp7)
    tmp49 = tmp44 + tmp48
    tmp51 = tl.where(tmp11, tmp50, tmp7)
    tmp52 = tl.where(tmp45, tmp51, tmp7)
    tmp53 = tmp49 + tmp52
    tmp55 = tl.where(tmp17, tmp54, tmp7)
    tmp56 = tl.where(tmp45, tmp55, tmp7)
    tmp57 = tmp53 + tmp56
    tmp59 = tl.where(tmp22, tmp58, tmp7)
    tmp60 = tl.where(tmp45, tmp59, tmp7)
    tmp61 = tmp57 + tmp60
    tmp63 = tl.where(tmp28, tmp62, tmp7)
    tmp64 = tl.where(tmp45, tmp63, tmp7)
    tmp65 = tmp61 + tmp64
    tmp67 = tl.where(tmp34, tmp66, tmp7)
    tmp68 = tl.where(tmp45, tmp67, tmp7)
    tmp69 = tmp65 + tmp68
    tmp71 = tl.where(tmp40, tmp70, tmp7)
    tmp72 = tl.where(tmp45, tmp71, tmp7)
    tmp73 = tmp69 + tmp72
    tmp74 = tmp0 == tmp33
    tmp76 = tl.where(tmp5, tmp75, tmp7)
    tmp77 = tl.where(tmp74, tmp76, tmp7)
    tmp78 = tmp73 + tmp77
    tmp80 = tl.where(tmp11, tmp79, tmp7)
    tmp81 = tl.where(tmp74, tmp80, tmp7)
    tmp82 = tmp78 + tmp81
    tmp84 = tl.where(tmp17, tmp83, tmp7)
    tmp85 = tl.where(tmp74, tmp84, tmp7)
    tmp86 = tmp82 + tmp85
    tmp88 = tl.where(tmp22, tmp87, tmp7)
    tmp89 = tl.where(tmp74, tmp88, tmp7)
    tmp90 = tmp86 + tmp89
    tmp92 = tl.where(tmp28, tmp91, tmp7)
    tmp93 = tl.where(tmp74, tmp92, tmp7)
    tmp94 = tmp90 + tmp93
    tmp96 = tl.where(tmp34, tmp95, tmp7)
    tmp97 = tl.where(tmp74, tmp96, tmp7)
    tmp98 = tmp94 + tmp97
    tmp100 = tl.where(tmp40, tmp99, tmp7)
    tmp101 = tl.where(tmp74, tmp100, tmp7)
    tmp102 = tmp98 + tmp101
    tmp103 = tmp0 == tmp39
    tmp105 = tl.where(tmp5, tmp104, tmp7)
    tmp106 = tl.where(tmp103, tmp105, tmp7)
    tmp107 = tmp102 + tmp106
    tmp109 = tl.where(tmp11, tmp108, tmp7)
    tmp110 = tl.where(tmp103, tmp109, tmp7)
    tmp111 = tmp107 + tmp110
    tmp113 = tl.where(tmp17, tmp112, tmp7)
    tmp114 = tl.where(tmp103, tmp113, tmp7)
    tmp115 = tmp111 + tmp114
    tmp117 = tl.where(tmp22, tmp116, tmp7)
    tmp118 = tl.where(tmp103, tmp117, tmp7)
    tmp119 = tmp115 + tmp118
    tl.store(in_out_ptr0 + (x3), tmp119, None)
''')


# kernel path: /tmp/torchinductor_mengqy/u6/cu6rvgy5oyl63mdjvtkekibis4a5zuocwfw2pbg7uwwf6l4ws665.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_197 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_197', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[2048, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_197', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_197(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1536
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 8
    x4 = (xindex // 8)
    x2 = (xindex // 384)
    x1 = (xindex // 8) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (8*r3) + (1024*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ta/ctag7gxnzgxl72g66szdzj5f7dqo2ozi4i6ir5czjwed7nr63n27.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_198 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_198', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[32, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_198', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_198(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 32
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 8
    x1 = (xindex // 8)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (8*r2) + (384*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/zw/czwrfrt6kz6ft5qdnlc7l2ywebw3sqfgc2rvfufctp7wwujvfn6d.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_199 = async_compile.triton('triton_poi_fused_clone_199', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_199', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_199(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 196608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 8
    x1 = (xindex // 8) % 4
    x2 = (xindex // 32)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (8*x2) + (49152*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/uc/cucclhnri4tkqnlnin7wnxxllojsfgbn34x6iknjike3bqkmv4xq.py
# Source Nodes: [l__mod___dynamic_dense_6_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_6_act => add_157, convert_element_type_120, erf_6, mul_265
triton_poi_fused_gelu_gelu_backward_200 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_200', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_200', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_200(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 196608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/7z/c7zn7awxk2hezvr3qxd2nj4ncqr4uxz56puqkxxcmab4uoj6ub2b.py
# Source Nodes: [add_96, add_98], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_96 => add_153
# add_98 => add_155
triton_red_fused_add_div_mul_pow_sum_201 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_201', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_201', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_201(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp12 = tl.load(in_ptr5 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr7 + (9*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp23 = -0.5
        tmp24 = tmp8 * tmp23
        tmp25 = tmp20 * tmp20
        tmp26 = tmp25 * tmp20
        tmp27 = tmp24 * tmp26
        tmp28 = 2048.0
        tmp29 = tmp27 / tmp28
        tmp32 = tmp30 + tmp31
        tmp34 = tmp32 + tmp33
        tmp35 = 2.0
        tmp36 = tmp34 * tmp35
        tmp37 = tmp29 * tmp36
        tmp38 = tmp22 + tmp37
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp38, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/lz/clzh4sj2m47qwtqzjblz7ynfy7ytawk5itemdmpe3mc6f22ll5ja.py
# Source Nodes: [add, add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_50, add_84, add_90, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_148
# add_10 => add_18
# add_12 => add_20
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_50 => add_89
# add_84 => add_149
# add_90 => add_150
# float_1 => convert_element_type_104
# float_2 => convert_element_type_106
# float_3 => convert_element_type_108
# mean => mean_28
# mean_1 => mean_29
# mean_2 => mean_30
# mul => mul_240
# mul_3 => mul_243
# mul_4 => mul_24
# mul_6 => mul_246
# rsqrt => rsqrt_28
# rsqrt_1 => rsqrt_29
# rsqrt_2 => rsqrt_30
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_202 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_202', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: 'i32', 84: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_202', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(83, 84))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_202(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, out_ptr26, out_ptr27, out_ptr28, out_ptr29, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp18 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp21 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
        tmp19 = _tmp18 + tmp17
        _tmp18 = tl.where(rmask, tmp19, _tmp18)
        tmp22 = tmp20 * tmp21
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp23 * tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask, tmp29, _tmp28)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp18 = tl.sum(_tmp18, 1)[:, None]
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tmp34 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp77 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp95 = tl.load(in_ptr13 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr14 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp101 = tl.load(in_ptr15 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp104 = tl.load(in_ptr16 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr17 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr18 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp114 = tl.load(in_ptr19 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr20 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr21 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr22 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr23 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr24 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr25 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr26 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp140 = tl.load(in_ptr27 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp143 = tl.load(in_ptr28 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr29 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr30 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr31 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr32 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp160 = tl.load(in_ptr33 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp163 = tl.load(in_ptr34 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr35 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp169 = tl.load(in_ptr36 + (7*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp177 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp30 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp54 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp73 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp107 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp133 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp146 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp173 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tmp30 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp35 = 2048.0
        tmp36 = tmp34 / tmp35
        tmp37 = 1e-05
        tmp38 = tmp36 + tmp37
        tmp39 = tl.math.rsqrt(tmp38)
        tmp40 = tmp33 * tmp39
        tmp41 = -0.5
        tmp42 = tmp8 * tmp41
        tmp43 = tmp39 * tmp39
        tmp44 = tmp43 * tmp39
        tmp45 = tmp42 * tmp44
        tmp46 = tmp45 / tmp35
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp46 * tmp48
        tmp50 = tmp40 + tmp49
        tmp51 = tmp50 + tmp49
        tmp52 = tmp51.to(tl.float32)
        tmp55 = tmp53 * tmp54
        tmp56 = tmp55.to(tl.float32)
        tmp58 = tmp57 / tmp35
        tmp59 = tmp58 + tmp37
        tmp60 = tl.math.rsqrt(tmp59)
        tmp61 = tmp56 * tmp60
        tmp62 = tmp28 * tmp41
        tmp63 = tmp60 * tmp60
        tmp64 = tmp63 * tmp60
        tmp65 = tmp62 * tmp64
        tmp66 = tmp65 / tmp35
        tmp68 = tmp67.to(tl.float32)
        tmp69 = tmp66 * tmp68
        tmp70 = tmp61 + tmp69
        tmp71 = tmp70 + tmp69
        tmp72 = tmp71.to(tl.float32)
        tmp75 = tmp73 * tmp74
        tmp76 = tmp75.to(tl.float32)
        tmp78 = tmp77 / tmp35
        tmp79 = tmp78 + tmp37
        tmp80 = tl.math.rsqrt(tmp79)
        tmp81 = tmp76 * tmp80
        tmp82 = tmp18 * tmp41
        tmp83 = tmp80 * tmp80
        tmp84 = tmp83 * tmp80
        tmp85 = tmp82 * tmp84
        tmp86 = tmp85 / tmp35
        tmp88 = tmp87.to(tl.float32)
        tmp89 = tmp86 * tmp88
        tmp90 = tmp81 + tmp89
        tmp91 = tmp90 + tmp89
        tmp92 = tmp91.to(tl.float32)
        tmp96 = tmp94 * tmp95
        tmp97 = tmp93 + tmp96
        tmp99 = tmp52 * tmp98
        tmp100 = tmp97 + tmp99
        tmp102 = tmp72 * tmp101
        tmp103 = tmp100 + tmp102
        tmp105 = tmp92 * tmp104
        tmp106 = tmp103 + tmp105
        tmp109 = tmp94 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp52 * tmp111
        tmp113 = tmp110 + tmp112
        tmp115 = tmp72 * tmp114
        tmp116 = tmp113 + tmp115
        tmp118 = tmp92 * tmp117
        tmp119 = tmp116 + tmp118
        tmp122 = tmp94 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp52 * tmp124
        tmp126 = tmp123 + tmp125
        tmp128 = tmp72 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp92 * tmp130
        tmp132 = tmp129 + tmp131
        tmp135 = tmp94 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp52 * tmp137
        tmp139 = tmp136 + tmp138
        tmp141 = tmp72 * tmp140
        tmp142 = tmp139 + tmp141
        tmp144 = tmp92 * tmp143
        tmp145 = tmp142 + tmp144
        tmp148 = tmp94 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp52 * tmp150
        tmp152 = tmp149 + tmp151
        tmp154 = tmp72 * tmp153
        tmp155 = tmp152 + tmp154
        tmp157 = tmp92 * tmp156
        tmp158 = tmp155 + tmp157
        tmp161 = tmp94 * tmp160
        tmp162 = tmp159 + tmp161
        tmp164 = tmp52 * tmp163
        tmp165 = tmp162 + tmp164
        tmp167 = tmp72 * tmp166
        tmp168 = tmp165 + tmp167
        tmp170 = tmp92 * tmp169
        tmp171 = tmp168 + tmp170
        tmp174 = tmp172 + tmp173
        tmp175 = tmp94 * tmp174
        tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
        tmp178 = _tmp177 + tmp176
        _tmp177 = tl.where(rmask, tmp178, _tmp177)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp52, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp72, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp92, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp106, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp119, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp132, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp145, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp158, rmask)
        tl.store(in_out_ptr5 + (r1 + (2048*x0)), tmp171, rmask)
    tmp177 = tl.sum(_tmp177, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp177, None)
    _tmp185 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp190 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp195 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp205 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp209 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp213 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp224 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp228 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp232 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp236 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp238 = tl.load(in_ptr44 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp249 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp261 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp269 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp277 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp281 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp285 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp289 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp293 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp297 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp179 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp180 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_ptr38 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp187 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp197 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp201 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp219 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp220 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr45 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp243 = tl.load(in_ptr46 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr47 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr48 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp265 = tl.load(in_ptr49 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tmp180 + tmp181
        tmp183 = tmp179 * tmp182
        tmp184 = tl.broadcast_to(tmp183, [XBLOCK, RBLOCK])
        tmp186 = _tmp185 + tmp184
        _tmp185 = tl.where(rmask, tmp186, _tmp185)
        tmp188 = tmp187 * tmp182
        tmp189 = tl.broadcast_to(tmp188, [XBLOCK, RBLOCK])
        tmp191 = _tmp190 + tmp189
        _tmp190 = tl.where(rmask, tmp191, _tmp190)
        tmp193 = tmp192 * tmp182
        tmp194 = tl.broadcast_to(tmp193, [XBLOCK, RBLOCK])
        tmp196 = _tmp195 + tmp194
        _tmp195 = tl.where(rmask, tmp196, _tmp195)
        tmp200 = tmp198 + tmp199
        tmp202 = tmp200 + tmp201
        tmp203 = tmp197 * tmp202
        tmp204 = tl.broadcast_to(tmp203, [XBLOCK, RBLOCK])
        tmp206 = _tmp205 + tmp204
        _tmp205 = tl.where(rmask, tmp206, _tmp205)
        tmp207 = tmp179 * tmp202
        tmp208 = tl.broadcast_to(tmp207, [XBLOCK, RBLOCK])
        tmp210 = _tmp209 + tmp208
        _tmp209 = tl.where(rmask, tmp210, _tmp209)
        tmp211 = tmp187 * tmp202
        tmp212 = tl.broadcast_to(tmp211, [XBLOCK, RBLOCK])
        tmp214 = _tmp213 + tmp212
        _tmp213 = tl.where(rmask, tmp214, _tmp213)
        tmp215 = tmp192 * tmp202
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp221 = tmp219 + tmp220
        tmp222 = tmp197 * tmp221
        tmp223 = tl.broadcast_to(tmp222, [XBLOCK, RBLOCK])
        tmp225 = _tmp224 + tmp223
        _tmp224 = tl.where(rmask, tmp225, _tmp224)
        tmp226 = tmp179 * tmp221
        tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
        tmp229 = _tmp228 + tmp227
        _tmp228 = tl.where(rmask, tmp229, _tmp228)
        tmp230 = tmp187 * tmp221
        tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
        tmp233 = _tmp232 + tmp231
        _tmp232 = tl.where(rmask, tmp233, _tmp232)
        tmp234 = tmp192 * tmp221
        tmp235 = tl.broadcast_to(tmp234, [XBLOCK, RBLOCK])
        tmp237 = _tmp236 + tmp235
        _tmp236 = tl.where(rmask, tmp237, _tmp236)
        tmp240 = tmp238 * tmp239
        tmp241 = 0.0
        tmp242 = tmp240 + tmp241
        tmp244 = tmp242 + tmp243
        tmp246 = tmp244 + tmp245
        tmp247 = tmp197 * tmp246
        tmp248 = tl.broadcast_to(tmp247, [XBLOCK, RBLOCK])
        tmp250 = _tmp249 + tmp248
        _tmp249 = tl.where(rmask, tmp250, _tmp249)
        tmp251 = tmp179 * tmp246
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp255 = tmp187 * tmp246
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp259 = tmp192 * tmp246
        tmp260 = tl.broadcast_to(tmp259, [XBLOCK, RBLOCK])
        tmp262 = _tmp261 + tmp260
        _tmp261 = tl.where(rmask, tmp262, _tmp261)
        tmp264 = tmp239 + tmp263
        tmp266 = tmp264 + tmp265
        tmp267 = tmp197 * tmp266
        tmp268 = tl.broadcast_to(tmp267, [XBLOCK, RBLOCK])
        tmp270 = _tmp269 + tmp268
        _tmp269 = tl.where(rmask, tmp270, _tmp269)
        tmp271 = tmp179 * tmp266
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
        tmp275 = tmp187 * tmp266
        tmp276 = tl.broadcast_to(tmp275, [XBLOCK, RBLOCK])
        tmp278 = _tmp277 + tmp276
        _tmp277 = tl.where(rmask, tmp278, _tmp277)
        tmp279 = tmp192 * tmp266
        tmp280 = tl.broadcast_to(tmp279, [XBLOCK, RBLOCK])
        tmp282 = _tmp281 + tmp280
        _tmp281 = tl.where(rmask, tmp282, _tmp281)
        tmp283 = tmp179 * tmp239
        tmp284 = tl.broadcast_to(tmp283, [XBLOCK, RBLOCK])
        tmp286 = _tmp285 + tmp284
        _tmp285 = tl.where(rmask, tmp286, _tmp285)
        tmp287 = tmp197 * tmp239
        tmp288 = tl.broadcast_to(tmp287, [XBLOCK, RBLOCK])
        tmp290 = _tmp289 + tmp288
        _tmp289 = tl.where(rmask, tmp290, _tmp289)
        tmp291 = tmp187 * tmp239
        tmp292 = tl.broadcast_to(tmp291, [XBLOCK, RBLOCK])
        tmp294 = _tmp293 + tmp292
        _tmp293 = tl.where(rmask, tmp294, _tmp293)
        tmp295 = tmp192 * tmp239
        tmp296 = tl.broadcast_to(tmp295, [XBLOCK, RBLOCK])
        tmp298 = _tmp297 + tmp296
        _tmp297 = tl.where(rmask, tmp298, _tmp297)
    tmp185 = tl.sum(_tmp185, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp185, None)
    tmp190 = tl.sum(_tmp190, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp190, None)
    tmp195 = tl.sum(_tmp195, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp195, None)
    tmp205 = tl.sum(_tmp205, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp205, None)
    tmp209 = tl.sum(_tmp209, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp209, None)
    tmp213 = tl.sum(_tmp213, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp213, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp217, None)
    tmp224 = tl.sum(_tmp224, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp224, None)
    tmp228 = tl.sum(_tmp228, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp228, None)
    tmp232 = tl.sum(_tmp232, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp232, None)
    tmp236 = tl.sum(_tmp236, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp236, None)
    tmp249 = tl.sum(_tmp249, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp249, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp253, None)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp257, None)
    tmp261 = tl.sum(_tmp261, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp261, None)
    tmp269 = tl.sum(_tmp269, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp269, None)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp273, None)
    tmp277 = tl.sum(_tmp277, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp277, None)
    tmp281 = tl.sum(_tmp281, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp281, None)
    tmp285 = tl.sum(_tmp285, 1)[:, None]
    tl.store(out_ptr26 + (x0), tmp285, None)
    tmp289 = tl.sum(_tmp289, 1)[:, None]
    tl.store(out_ptr27 + (x0), tmp289, None)
    tmp293 = tl.sum(_tmp293, 1)[:, None]
    tl.store(out_ptr28 + (x0), tmp293, None)
    tmp297 = tl.sum(_tmp297, 1)[:, None]
    tl.store(out_ptr29 + (x0), tmp297, None)
''')


# kernel path: /tmp/torchinductor_mengqy/vo/cvousooujnr5ptlelmx3ztb72656tcfqbhypdsp5uulf5sgf2yhv.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_203 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_203', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_203', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(22,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_203(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, xnumel, XBLOCK : tl.constexpr):
    xnumel = 172032
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 43008)
    x0 = xindex % 7
    x1 = (xindex // 7) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp48 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp60 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp65 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp69 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp73 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp77 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp81 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp85 = tl.load(in_ptr17 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp94 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr20 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 5, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 4, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tmp3 == tmp1
    tmp18 = tl.where(tmp16, tmp17, tmp7)
    tmp19 = tl.where(tmp2, tmp18, tmp7)
    tmp20 = tmp15 + tmp19
    tmp21 = tl.full([1], 2, tl.int32)
    tmp22 = tmp3 == tmp21
    tmp24 = tl.where(tmp22, tmp23, tmp7)
    tmp25 = tl.where(tmp2, tmp24, tmp7)
    tmp26 = tmp20 + tmp25
    tmp27 = tl.full([1], 1, tl.int32)
    tmp28 = tmp3 == tmp27
    tmp30 = tl.where(tmp28, tmp29, tmp7)
    tmp31 = tl.where(tmp2, tmp30, tmp7)
    tmp32 = tmp26 + tmp31
    tmp33 = tl.full([1], 0, tl.int32)
    tmp34 = tmp3 == tmp33
    tmp36 = tl.where(tmp34, tmp35, tmp7)
    tmp37 = tl.where(tmp2, tmp36, tmp7)
    tmp38 = tmp32 + tmp37
    tmp39 = tmp0 == tmp21
    tmp41 = tl.where(tmp5, tmp40, tmp7)
    tmp42 = tl.where(tmp39, tmp41, tmp7)
    tmp43 = tmp38 + tmp42
    tmp45 = tl.where(tmp11, tmp44, tmp7)
    tmp46 = tl.where(tmp39, tmp45, tmp7)
    tmp47 = tmp43 + tmp46
    tmp49 = tl.where(tmp16, tmp48, tmp7)
    tmp50 = tl.where(tmp39, tmp49, tmp7)
    tmp51 = tmp47 + tmp50
    tmp53 = tl.where(tmp22, tmp52, tmp7)
    tmp54 = tl.where(tmp39, tmp53, tmp7)
    tmp55 = tmp51 + tmp54
    tmp57 = tl.where(tmp28, tmp56, tmp7)
    tmp58 = tl.where(tmp39, tmp57, tmp7)
    tmp59 = tmp55 + tmp58
    tmp61 = tl.where(tmp34, tmp60, tmp7)
    tmp62 = tl.where(tmp39, tmp61, tmp7)
    tmp63 = tmp59 + tmp62
    tmp64 = tmp0 == tmp27
    tmp66 = tl.where(tmp5, tmp65, tmp7)
    tmp67 = tl.where(tmp64, tmp66, tmp7)
    tmp68 = tmp63 + tmp67
    tmp70 = tl.where(tmp11, tmp69, tmp7)
    tmp71 = tl.where(tmp64, tmp70, tmp7)
    tmp72 = tmp68 + tmp71
    tmp74 = tl.where(tmp16, tmp73, tmp7)
    tmp75 = tl.where(tmp64, tmp74, tmp7)
    tmp76 = tmp72 + tmp75
    tmp78 = tl.where(tmp22, tmp77, tmp7)
    tmp79 = tl.where(tmp64, tmp78, tmp7)
    tmp80 = tmp76 + tmp79
    tmp82 = tl.where(tmp28, tmp81, tmp7)
    tmp83 = tl.where(tmp64, tmp82, tmp7)
    tmp84 = tmp80 + tmp83
    tmp86 = tl.where(tmp34, tmp85, tmp7)
    tmp87 = tl.where(tmp64, tmp86, tmp7)
    tmp88 = tmp84 + tmp87
    tmp89 = tmp0 == tmp33
    tmp91 = tl.where(tmp5, tmp90, tmp7)
    tmp92 = tl.where(tmp89, tmp91, tmp7)
    tmp93 = tmp88 + tmp92
    tmp95 = tl.where(tmp11, tmp94, tmp7)
    tmp96 = tl.where(tmp89, tmp95, tmp7)
    tmp97 = tmp93 + tmp96
    tmp99 = tl.where(tmp16, tmp98, tmp7)
    tmp100 = tl.where(tmp89, tmp99, tmp7)
    tmp101 = tmp97 + tmp100
    tl.store(in_out_ptr0 + (x3), tmp101, None)
''')


# kernel path: /tmp/torchinductor_mengqy/sj/csjkqadft6ivtpwhfw4al63auozwdc245av5fvme62otj3jsnrso.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_204 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_204', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[2048, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_204', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_204(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1344
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 7
    x4 = (xindex // 7)
    x2 = (xindex // 336)
    x1 = (xindex // 7) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (7*r3) + (896*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/i2/ci2ixs5s3kampjbmbllzasiwuaqrtgkuqsi67fyjyytanz4nwqsm.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_205 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_205', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[32, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_205', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_205(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 28
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 7
    x1 = (xindex // 7)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (7*r2) + (336*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ln/clnpphi3z6ajtaihwhdsdhrv3e43smx6tz35w7u5xpklv3s6wsvn.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_206 = async_compile.triton('triton_poi_fused_clone_206', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_206', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_206(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 172032
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 7
    x1 = (xindex // 7) % 4
    x2 = (xindex // 28)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (7*x2) + (43008*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/o6/co6ca2lpdjeq5nkq6audirs5aaebdy4cc42emglxazpxe4mmb6yp.py
# Source Nodes: [l__mod___dynamic_dense_5_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_5_act => add_122, convert_element_type_102, erf_5, mul_214
triton_poi_fused_gelu_gelu_backward_207 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_207', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_207', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_207(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 172032
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ar/carjskpgzvesouae6pqgu7hq4ekdfkpzinvurvbaqjyte7y2avha.py
# Source Nodes: [add, add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_60, add_65, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_113
# add_10 => add_18
# add_12 => add_20
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_12, add_5
# add_60 => add_114
# add_65 => add_115
# mean => mean_23
# mean_1 => mean_24
# mean_2 => mean_25
# mul => mul_189
# mul_3 => mul_192
# mul_4 => mul_24
# mul_6 => mul_195
# rsqrt => rsqrt_23
# rsqrt_1 => rsqrt_24
# rsqrt_2 => rsqrt_25
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_208 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_208', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp16', 12: '*fp16', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: 'i32', 73: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_208', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(72, 73))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_208(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, out_ptr22, out_ptr23, out_ptr24, out_ptr25, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp25 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp18 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = tmp12 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
        tmp20 = tmp18 * tmp19
        tmp21 = tmp20.to(tl.float32)
        tmp23 = tmp21 * tmp22
        tmp24 = tl.broadcast_to(tmp23, [XBLOCK, RBLOCK])
        tmp26 = _tmp25 + tmp24
        _tmp25 = tl.where(rmask, tmp26, _tmp25)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tmp25 = tl.sum(_tmp25, 1)[:, None]
    tmp31 = tl.load(in_ptr9 + (x0), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr10 + (x0), None, eviction_policy='evict_last')
    tmp72 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr13 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp92 = tl.load(in_ptr14 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr15 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp98 = tl.load(in_ptr16 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp102 = tl.load(in_ptr17 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp105 = tl.load(in_ptr18 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp108 = tl.load(in_ptr19 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp111 = tl.load(in_ptr20 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr21 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr22 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp121 = tl.load(in_ptr23 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr24 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp128 = tl.load(in_ptr25 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp131 = tl.load(in_ptr26 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp134 = tl.load(in_ptr27 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr28 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp141 = tl.load(in_ptr29 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp144 = tl.load(in_ptr30 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp147 = tl.load(in_ptr31 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp150 = tl.load(in_ptr32 + (6*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp160 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp27 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp49 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0)
        tmp68 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp87 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp154 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp156 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tmp27 * tmp28
        tmp30 = tmp29.to(tl.float32)
        tmp32 = 2048.0
        tmp33 = tmp31 / tmp32
        tmp34 = 1e-05
        tmp35 = tmp33 + tmp34
        tmp36 = tl.math.rsqrt(tmp35)
        tmp37 = tmp30 * tmp36
        tmp38 = -0.5
        tmp39 = tmp7 * tmp38
        tmp40 = tmp36 * tmp36
        tmp41 = tmp40 * tmp36
        tmp42 = tmp39 * tmp41
        tmp43 = tmp42 / tmp32
        tmp45 = tmp43 * tmp44
        tmp46 = tmp37 + tmp45
        tmp47 = tmp46 + tmp45
        tmp48 = tmp47.to(tl.float32)
        tmp51 = tmp49 * tmp50
        tmp52 = tmp51.to(tl.float32)
        tmp54 = tmp53 / tmp32
        tmp55 = tmp54 + tmp34
        tmp56 = tl.math.rsqrt(tmp55)
        tmp57 = tmp52 * tmp56
        tmp58 = tmp25 * tmp38
        tmp59 = tmp56 * tmp56
        tmp60 = tmp59 * tmp56
        tmp61 = tmp58 * tmp60
        tmp62 = tmp61 / tmp32
        tmp64 = tmp62 * tmp63
        tmp65 = tmp57 + tmp64
        tmp66 = tmp65 + tmp64
        tmp67 = tmp66.to(tl.float32)
        tmp70 = tmp68 * tmp69
        tmp71 = tmp70.to(tl.float32)
        tmp73 = tmp72 / tmp32
        tmp74 = tmp73 + tmp34
        tmp75 = tl.math.rsqrt(tmp74)
        tmp76 = tmp71 * tmp75
        tmp77 = tmp16 * tmp38
        tmp78 = tmp75 * tmp75
        tmp79 = tmp78 * tmp75
        tmp80 = tmp77 * tmp79
        tmp81 = tmp80 / tmp32
        tmp83 = tmp81 * tmp82
        tmp84 = tmp76 + tmp83
        tmp85 = tmp84 + tmp83
        tmp86 = tmp85.to(tl.float32)
        tmp90 = tmp88 * tmp89
        tmp91 = tmp87 + tmp90
        tmp93 = tmp48 * tmp92
        tmp94 = tmp91 + tmp93
        tmp96 = tmp67 * tmp95
        tmp97 = tmp94 + tmp96
        tmp99 = tmp86 * tmp98
        tmp100 = tmp97 + tmp99
        tmp103 = tmp88 * tmp102
        tmp104 = tmp101 + tmp103
        tmp106 = tmp48 * tmp105
        tmp107 = tmp104 + tmp106
        tmp109 = tmp67 * tmp108
        tmp110 = tmp107 + tmp109
        tmp112 = tmp86 * tmp111
        tmp113 = tmp110 + tmp112
        tmp116 = tmp88 * tmp115
        tmp117 = tmp114 + tmp116
        tmp119 = tmp48 * tmp118
        tmp120 = tmp117 + tmp119
        tmp122 = tmp67 * tmp121
        tmp123 = tmp120 + tmp122
        tmp125 = tmp86 * tmp124
        tmp126 = tmp123 + tmp125
        tmp129 = tmp88 * tmp128
        tmp130 = tmp127 + tmp129
        tmp132 = tmp48 * tmp131
        tmp133 = tmp130 + tmp132
        tmp135 = tmp67 * tmp134
        tmp136 = tmp133 + tmp135
        tmp138 = tmp86 * tmp137
        tmp139 = tmp136 + tmp138
        tmp142 = tmp88 * tmp141
        tmp143 = tmp140 + tmp142
        tmp145 = tmp48 * tmp144
        tmp146 = tmp143 + tmp145
        tmp148 = tmp67 * tmp147
        tmp149 = tmp146 + tmp148
        tmp151 = tmp86 * tmp150
        tmp152 = tmp149 + tmp151
        tmp155 = tmp153 + tmp154
        tmp157 = tmp155 + tmp156
        tmp158 = tmp88 * tmp157
        tmp159 = tl.broadcast_to(tmp158, [XBLOCK, RBLOCK])
        tmp161 = _tmp160 + tmp159
        _tmp160 = tl.where(rmask, tmp161, _tmp160)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp48, rmask)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp67, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp86, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp100, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp113, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp126, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp139, rmask)
        tl.store(in_out_ptr4 + (r1 + (2048*x0)), tmp152, rmask)
    tmp160 = tl.sum(_tmp160, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp160, None)
    _tmp170 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp175 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp180 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp188 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp192 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp196 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp200 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp202 = tl.load(in_ptr38 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp213 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp221 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp225 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp233 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp237 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp241 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp245 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp249 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp253 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp257 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp261 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp162 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp164 = tl.load(in_ptr34 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_ptr35 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp177 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp182 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr36 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp184 = tl.load(in_ptr37 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp203 = tl.load(in_ptr39 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr40 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp209 = tl.load(in_ptr41 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp227 = tl.load(in_ptr42 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_ptr43 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp165 = tmp163 + tmp164
        tmp167 = tmp165 + tmp166
        tmp168 = tmp162 * tmp167
        tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
        tmp171 = _tmp170 + tmp169
        _tmp170 = tl.where(rmask, tmp171, _tmp170)
        tmp173 = tmp172 * tmp167
        tmp174 = tl.broadcast_to(tmp173, [XBLOCK, RBLOCK])
        tmp176 = _tmp175 + tmp174
        _tmp175 = tl.where(rmask, tmp176, _tmp175)
        tmp178 = tmp177 * tmp167
        tmp179 = tl.broadcast_to(tmp178, [XBLOCK, RBLOCK])
        tmp181 = _tmp180 + tmp179
        _tmp180 = tl.where(rmask, tmp181, _tmp180)
        tmp185 = tmp183 + tmp184
        tmp186 = tmp182 * tmp185
        tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
        tmp189 = _tmp188 + tmp187
        _tmp188 = tl.where(rmask, tmp189, _tmp188)
        tmp190 = tmp162 * tmp185
        tmp191 = tl.broadcast_to(tmp190, [XBLOCK, RBLOCK])
        tmp193 = _tmp192 + tmp191
        _tmp192 = tl.where(rmask, tmp193, _tmp192)
        tmp194 = tmp172 * tmp185
        tmp195 = tl.broadcast_to(tmp194, [XBLOCK, RBLOCK])
        tmp197 = _tmp196 + tmp195
        _tmp196 = tl.where(rmask, tmp197, _tmp196)
        tmp198 = tmp177 * tmp185
        tmp199 = tl.broadcast_to(tmp198, [XBLOCK, RBLOCK])
        tmp201 = _tmp200 + tmp199
        _tmp200 = tl.where(rmask, tmp201, _tmp200)
        tmp204 = tmp202 * tmp203
        tmp205 = 0.0
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp210 = tmp208 + tmp209
        tmp211 = tmp182 * tmp210
        tmp212 = tl.broadcast_to(tmp211, [XBLOCK, RBLOCK])
        tmp214 = _tmp213 + tmp212
        _tmp213 = tl.where(rmask, tmp214, _tmp213)
        tmp215 = tmp162 * tmp210
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tmp219 = tmp172 * tmp210
        tmp220 = tl.broadcast_to(tmp219, [XBLOCK, RBLOCK])
        tmp222 = _tmp221 + tmp220
        _tmp221 = tl.where(rmask, tmp222, _tmp221)
        tmp223 = tmp177 * tmp210
        tmp224 = tl.broadcast_to(tmp223, [XBLOCK, RBLOCK])
        tmp226 = _tmp225 + tmp224
        _tmp225 = tl.where(rmask, tmp226, _tmp225)
        tmp228 = tmp203 + tmp227
        tmp230 = tmp228 + tmp229
        tmp231 = tmp182 * tmp230
        tmp232 = tl.broadcast_to(tmp231, [XBLOCK, RBLOCK])
        tmp234 = _tmp233 + tmp232
        _tmp233 = tl.where(rmask, tmp234, _tmp233)
        tmp235 = tmp162 * tmp230
        tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
        tmp238 = _tmp237 + tmp236
        _tmp237 = tl.where(rmask, tmp238, _tmp237)
        tmp239 = tmp172 * tmp230
        tmp240 = tl.broadcast_to(tmp239, [XBLOCK, RBLOCK])
        tmp242 = _tmp241 + tmp240
        _tmp241 = tl.where(rmask, tmp242, _tmp241)
        tmp243 = tmp177 * tmp230
        tmp244 = tl.broadcast_to(tmp243, [XBLOCK, RBLOCK])
        tmp246 = _tmp245 + tmp244
        _tmp245 = tl.where(rmask, tmp246, _tmp245)
        tmp247 = tmp182 * tmp203
        tmp248 = tl.broadcast_to(tmp247, [XBLOCK, RBLOCK])
        tmp250 = _tmp249 + tmp248
        _tmp249 = tl.where(rmask, tmp250, _tmp249)
        tmp251 = tmp172 * tmp203
        tmp252 = tl.broadcast_to(tmp251, [XBLOCK, RBLOCK])
        tmp254 = _tmp253 + tmp252
        _tmp253 = tl.where(rmask, tmp254, _tmp253)
        tmp255 = tmp162 * tmp203
        tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
        tmp258 = _tmp257 + tmp256
        _tmp257 = tl.where(rmask, tmp258, _tmp257)
        tmp259 = tmp177 * tmp203
        tmp260 = tl.broadcast_to(tmp259, [XBLOCK, RBLOCK])
        tmp262 = _tmp261 + tmp260
        _tmp261 = tl.where(rmask, tmp262, _tmp261)
    tmp170 = tl.sum(_tmp170, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp170, None)
    tmp175 = tl.sum(_tmp175, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp175, None)
    tmp180 = tl.sum(_tmp180, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp180, None)
    tmp188 = tl.sum(_tmp188, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp188, None)
    tmp192 = tl.sum(_tmp192, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp192, None)
    tmp196 = tl.sum(_tmp196, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp196, None)
    tmp200 = tl.sum(_tmp200, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp200, None)
    tmp213 = tl.sum(_tmp213, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp213, None)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp217, None)
    tmp221 = tl.sum(_tmp221, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp221, None)
    tmp225 = tl.sum(_tmp225, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp225, None)
    tmp233 = tl.sum(_tmp233, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp233, None)
    tmp237 = tl.sum(_tmp237, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp237, None)
    tmp241 = tl.sum(_tmp241, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp241, None)
    tmp245 = tl.sum(_tmp245, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp245, None)
    tmp249 = tl.sum(_tmp249, 1)[:, None]
    tl.store(out_ptr22 + (x0), tmp249, None)
    tmp253 = tl.sum(_tmp253, 1)[:, None]
    tl.store(out_ptr23 + (x0), tmp253, None)
    tmp257 = tl.sum(_tmp257, 1)[:, None]
    tl.store(out_ptr24 + (x0), tmp257, None)
    tmp261 = tl.sum(_tmp261, 1)[:, None]
    tl.store(out_ptr25 + (x0), tmp261, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ji/cjizahh46hsq6lohpafly3ysrxmduwsmmgifemfr6s657rzbaps6.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_209 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_209', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_209', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(18,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_209(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, xnumel, XBLOCK : tl.constexpr):
    xnumel = 147456
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 36864)
    x0 = xindex % 6
    x1 = (xindex // 6) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp11 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp29 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp34 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp59 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp63 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp67 = tl.load(in_ptr13 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp76 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr16 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 4, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tmp3 == tmp1
    tmp12 = tl.where(tmp10, tmp11, tmp7)
    tmp13 = tl.where(tmp2, tmp12, tmp7)
    tmp14 = tmp9 + tmp13
    tmp15 = tl.full([1], 2, tl.int32)
    tmp16 = tmp3 == tmp15
    tmp18 = tl.where(tmp16, tmp17, tmp7)
    tmp19 = tl.where(tmp2, tmp18, tmp7)
    tmp20 = tmp14 + tmp19
    tmp21 = tl.full([1], 1, tl.int32)
    tmp22 = tmp3 == tmp21
    tmp24 = tl.where(tmp22, tmp23, tmp7)
    tmp25 = tl.where(tmp2, tmp24, tmp7)
    tmp26 = tmp20 + tmp25
    tmp27 = tl.full([1], 0, tl.int32)
    tmp28 = tmp3 == tmp27
    tmp30 = tl.where(tmp28, tmp29, tmp7)
    tmp31 = tl.where(tmp2, tmp30, tmp7)
    tmp32 = tmp26 + tmp31
    tmp33 = tmp0 == tmp15
    tmp35 = tl.where(tmp5, tmp34, tmp7)
    tmp36 = tl.where(tmp33, tmp35, tmp7)
    tmp37 = tmp32 + tmp36
    tmp39 = tl.where(tmp10, tmp38, tmp7)
    tmp40 = tl.where(tmp33, tmp39, tmp7)
    tmp41 = tmp37 + tmp40
    tmp43 = tl.where(tmp16, tmp42, tmp7)
    tmp44 = tl.where(tmp33, tmp43, tmp7)
    tmp45 = tmp41 + tmp44
    tmp47 = tl.where(tmp22, tmp46, tmp7)
    tmp48 = tl.where(tmp33, tmp47, tmp7)
    tmp49 = tmp45 + tmp48
    tmp51 = tl.where(tmp28, tmp50, tmp7)
    tmp52 = tl.where(tmp33, tmp51, tmp7)
    tmp53 = tmp49 + tmp52
    tmp54 = tmp0 == tmp21
    tmp56 = tl.where(tmp5, tmp55, tmp7)
    tmp57 = tl.where(tmp54, tmp56, tmp7)
    tmp58 = tmp53 + tmp57
    tmp60 = tl.where(tmp10, tmp59, tmp7)
    tmp61 = tl.where(tmp54, tmp60, tmp7)
    tmp62 = tmp58 + tmp61
    tmp64 = tl.where(tmp16, tmp63, tmp7)
    tmp65 = tl.where(tmp54, tmp64, tmp7)
    tmp66 = tmp62 + tmp65
    tmp68 = tl.where(tmp22, tmp67, tmp7)
    tmp69 = tl.where(tmp54, tmp68, tmp7)
    tmp70 = tmp66 + tmp69
    tmp72 = tl.where(tmp28, tmp71, tmp7)
    tmp73 = tl.where(tmp54, tmp72, tmp7)
    tmp74 = tmp70 + tmp73
    tmp75 = tmp0 == tmp27
    tmp77 = tl.where(tmp5, tmp76, tmp7)
    tmp78 = tl.where(tmp75, tmp77, tmp7)
    tmp79 = tmp74 + tmp78
    tmp81 = tl.where(tmp10, tmp80, tmp7)
    tmp82 = tl.where(tmp75, tmp81, tmp7)
    tmp83 = tmp79 + tmp82
    tl.store(in_out_ptr0 + (x3), tmp83, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pi/cpi7zjqbll35ldposib7rcdqlckj3fhdvbheqa77sydz4xaxreyn.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_210 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_210', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[2048, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_210', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_210(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1152
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 6
    x4 = (xindex // 6)
    x2 = (xindex // 288)
    x1 = (xindex // 6) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (6*r3) + (768*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/nk/cnkdalusqmu326hybq25o4eqa7u6lxbpoehkhnwlrxm4wdywu3ee.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_211 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_211', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[32, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_211', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_211(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 24
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 6
    x1 = (xindex // 6)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (6*r2) + (288*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ee/ceedr6h6siuww3ka4sbele2dhtinuq3cucs6h6ddpsvhcnoonkxj.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_212 = async_compile.triton('triton_poi_fused_clone_212', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_212', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_212(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 147456
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 6
    x1 = (xindex // 6) % 4
    x2 = (xindex // 24)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (6*x2) + (36864*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/uy/cuykfjunf72tvodivllneimfrnr7ley22vtk6ehusferhthxrdrt.py
# Source Nodes: [l__mod___dynamic_dense_4_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_4_act => add_91, convert_element_type_84, erf_4, mul_167
triton_poi_fused_gelu_gelu_backward_213 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_213', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_213', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_213(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 147456
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/6h/c6h2k3msuqmlw4fgx66euuqgfwtwvzk2gtn7xtsk2bgrv2ig5kzt.py
# Source Nodes: [add, add_10, add_12, add_20, add_3, add_35, add_39, add_40, add_43, add_44, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_31, mul_35, mul_39, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_82
# add_10 => add_18
# add_12 => add_20
# add_20 => add_39
# add_3 => add_3
# add_35 => add_69
# add_39 => add_73
# add_40 => add_83
# add_43 => add_77
# add_44 => add_84
# add_5 => add_12, add_5
# float_1 => convert_element_type_68
# float_2 => convert_element_type_70
# float_3 => convert_element_type_72
# mean => mean_18
# mean_1 => mean_19
# mean_2 => mean_20
# mul => mul_142
# mul_3 => mul_145
# mul_31 => mul_129
# mul_35 => mul_133
# mul_39 => mul_137
# mul_4 => mul_24
# mul_6 => mul_148
# rsqrt => rsqrt_18
# rsqrt_1 => rsqrt_19
# rsqrt_2 => rsqrt_20
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_214 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_214', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp32', 20: '*fp32', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp32', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: 'i32', 58: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_214', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(57, 58))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_214(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, out_ptr18, out_ptr19, out_ptr20, out_ptr21, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp5 = tl.load(in_ptr3 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp14 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp21 = tl.load(in_ptr9 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp27 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp34 = tl.load(in_ptr13 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp40 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp45 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp16 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp29 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp5 * tmp8
        tmp10 = tmp4 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp3 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = _tmp14 + tmp13
        _tmp14 = tl.where(rmask, tmp15, _tmp14)
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp22 = tmp21 * tmp8
        tmp23 = tmp20 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tmp19 * tmp24
        tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
        tmp28 = _tmp27 + tmp26
        _tmp27 = tl.where(rmask, tmp28, _tmp27)
        tmp31 = tmp29 * tmp30
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp34 * tmp8
        tmp36 = tmp33 + tmp35
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tmp32 * tmp37
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = _tmp40 + tmp39
        _tmp40 = tl.where(rmask, tmp41, _tmp40)
        tmp43 = tmp42 * tmp8
        tmp44 = tl.broadcast_to(tmp43, [XBLOCK, RBLOCK])
        tmp46 = _tmp45 + tmp44
        _tmp45 = tl.where(rmask, tmp46, _tmp45)
    tmp14 = tl.sum(_tmp14, 1)[:, None]
    tmp27 = tl.sum(_tmp27, 1)[:, None]
    tmp40 = tl.sum(_tmp40, 1)[:, None]
    tmp45 = tl.sum(_tmp45, 1)[:, None]
    tl.store(out_ptr3 + (x0), tmp45, None)
    tmp49 = tl.load(in_ptr15 + (x0), None, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr16 + (x0), None, eviction_policy='evict_last')
    tmp83 = tl.load(in_ptr17 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp107 = tl.load(in_ptr18 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp110 = tl.load(in_ptr19 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp113 = tl.load(in_ptr20 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp117 = tl.load(in_ptr21 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp120 = tl.load(in_ptr22 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp123 = tl.load(in_ptr23 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp127 = tl.load(in_ptr24 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr25 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp133 = tl.load(in_ptr26 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp137 = tl.load(in_ptr27 + (x0), None, eviction_policy='evict_last')
    _tmp157 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp159 = tl.load(in_ptr31 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp169 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp59 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp82 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp86 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp96 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp106 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp145 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp153 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp163 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp165 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp47 = -0.5
        tmp48 = tmp14 * tmp47
        tmp50 = 2048.0
        tmp51 = tmp49 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp54 * tmp54
        tmp56 = tmp55 * tmp54
        tmp57 = tmp48 * tmp56
        tmp58 = tmp57 / tmp50
        tmp62 = tmp60 + tmp61
        tmp63 = tmp5 * tmp62
        tmp64 = tmp59 + tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp66 = tmp58 * tmp65
        tmp67 = tmp27 * tmp47
        tmp69 = tmp68 / tmp50
        tmp70 = tmp69 + tmp52
        tmp71 = tl.math.rsqrt(tmp70)
        tmp72 = tmp71 * tmp71
        tmp73 = tmp72 * tmp71
        tmp74 = tmp67 * tmp73
        tmp75 = tmp74 / tmp50
        tmp77 = tmp21 * tmp62
        tmp78 = tmp76 + tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp80 = tmp75 * tmp79
        tmp84 = tmp82 * tmp83
        tmp85 = tmp81 + tmp84
        tmp88 = tmp86 * tmp87
        tmp89 = tmp88.to(tl.float32)
        tmp90 = tmp89 * tmp54
        tmp91 = tmp90 + tmp66
        tmp92 = tmp91 + tmp66
        tmp93 = tmp92.to(tl.float32)
        tmp94 = tmp93 * tmp5
        tmp95 = tmp85 + tmp94
        tmp98 = tmp96 * tmp97
        tmp99 = tmp98.to(tl.float32)
        tmp100 = tmp99 * tmp71
        tmp101 = tmp100 + tmp80
        tmp102 = tmp101 + tmp80
        tmp103 = tmp102.to(tl.float32)
        tmp104 = tmp103 * tmp21
        tmp105 = tmp95 + tmp104
        tmp108 = tmp82 * tmp107
        tmp109 = tmp106 + tmp108
        tmp111 = tmp93 * tmp110
        tmp112 = tmp109 + tmp111
        tmp114 = tmp103 * tmp113
        tmp115 = tmp112 + tmp114
        tmp118 = tmp82 * tmp117
        tmp119 = tmp116 + tmp118
        tmp121 = tmp93 * tmp120
        tmp122 = tmp119 + tmp121
        tmp124 = tmp103 * tmp123
        tmp125 = tmp122 + tmp124
        tmp128 = tmp82 * tmp127
        tmp129 = tmp126 + tmp128
        tmp131 = tmp93 * tmp130
        tmp132 = tmp129 + tmp131
        tmp134 = tmp103 * tmp133
        tmp135 = tmp132 + tmp134
        tmp136 = tmp40 * tmp47
        tmp138 = tmp137 / tmp50
        tmp139 = tmp138 + tmp52
        tmp140 = tl.math.rsqrt(tmp139)
        tmp141 = tmp140 * tmp140
        tmp142 = tmp141 * tmp140
        tmp143 = tmp136 * tmp142
        tmp144 = tmp143 / tmp50
        tmp146 = tmp34 * tmp62
        tmp147 = tmp145 + tmp146
        tmp148 = tmp147.to(tl.float32)
        tmp149 = tmp144 * tmp148
        tmp152 = tmp150 + tmp151
        tmp154 = tmp152 + tmp153
        tmp155 = tmp82 * tmp154
        tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
        tmp158 = _tmp157 + tmp156
        _tmp157 = tl.where(rmask, tmp158, _tmp157)
        tmp160 = tmp159 * tmp150
        tmp161 = 0.0
        tmp162 = tmp160 + tmp161
        tmp164 = tmp162 + tmp163
        tmp166 = tmp164 + tmp165
        tmp167 = tmp82 * tmp166
        tmp168 = tl.broadcast_to(tmp167, [XBLOCK, RBLOCK])
        tmp170 = _tmp169 + tmp168
        _tmp169 = tl.where(rmask, tmp170, _tmp169)
        tl.store(out_ptr4 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp80, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp105, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp115, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp125, rmask)
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp135, rmask)
        tl.store(out_ptr6 + (r1 + (2048*x0)), tmp149, rmask)
    tmp157 = tl.sum(_tmp157, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp157, None)
    tmp169 = tl.sum(_tmp169, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp169, None)
    _tmp190 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp202 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp210 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp214 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp230 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp234 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp238 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp242 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp258 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp262 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp266 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp270 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp275 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp171 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp172 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp181 = tl.load(out_ptr4 + (r1 + (2048*x0)), rmask, other=0)
        tmp185 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp186 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp192 = tl.load(in_ptr28 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr32 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr33 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr29 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp206 = tl.load(in_ptr30 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp216 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp217 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp224 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0)
        tmp244 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp245 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp252 = tl.load(out_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp272 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp173 = tmp171 * tmp172
        tmp174 = tmp173.to(tl.float32)
        tmp175 = 2048.0
        tmp176 = tmp49 / tmp175
        tmp177 = 1e-05
        tmp178 = tmp176 + tmp177
        tmp179 = tl.math.rsqrt(tmp178)
        tmp180 = tmp174 * tmp179
        tmp182 = tmp180 + tmp181
        tmp183 = tmp182 + tmp181
        tmp184 = tmp183.to(tl.float32)
        tmp187 = tmp185 + tmp186
        tmp188 = tmp184 * tmp187
        tmp189 = tl.broadcast_to(tmp188, [XBLOCK, RBLOCK])
        tmp191 = _tmp190 + tmp189
        _tmp190 = tl.where(rmask, tmp191, _tmp190)
        tmp193 = tmp159 * tmp192
        tmp194 = 0.0
        tmp195 = tmp193 + tmp194
        tmp197 = tmp195 + tmp196
        tmp199 = tmp197 + tmp198
        tmp200 = tmp184 * tmp199
        tmp201 = tl.broadcast_to(tmp200, [XBLOCK, RBLOCK])
        tmp203 = _tmp202 + tmp201
        _tmp202 = tl.where(rmask, tmp203, _tmp202)
        tmp205 = tmp192 + tmp204
        tmp207 = tmp205 + tmp206
        tmp208 = tmp184 * tmp207
        tmp209 = tl.broadcast_to(tmp208, [XBLOCK, RBLOCK])
        tmp211 = _tmp210 + tmp209
        _tmp210 = tl.where(rmask, tmp211, _tmp210)
        tmp212 = tmp184 * tmp192
        tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
        tmp215 = _tmp214 + tmp213
        _tmp214 = tl.where(rmask, tmp215, _tmp214)
        tmp218 = tmp216 * tmp217
        tmp219 = tmp218.to(tl.float32)
        tmp220 = tmp68 / tmp175
        tmp221 = tmp220 + tmp177
        tmp222 = tl.math.rsqrt(tmp221)
        tmp223 = tmp219 * tmp222
        tmp225 = tmp223 + tmp224
        tmp226 = tmp225 + tmp224
        tmp227 = tmp226.to(tl.float32)
        tmp228 = tmp227 * tmp187
        tmp229 = tl.broadcast_to(tmp228, [XBLOCK, RBLOCK])
        tmp231 = _tmp230 + tmp229
        _tmp230 = tl.where(rmask, tmp231, _tmp230)
        tmp232 = tmp227 * tmp199
        tmp233 = tl.broadcast_to(tmp232, [XBLOCK, RBLOCK])
        tmp235 = _tmp234 + tmp233
        _tmp234 = tl.where(rmask, tmp235, _tmp234)
        tmp236 = tmp227 * tmp207
        tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
        tmp239 = _tmp238 + tmp237
        _tmp238 = tl.where(rmask, tmp239, _tmp238)
        tmp240 = tmp227 * tmp192
        tmp241 = tl.broadcast_to(tmp240, [XBLOCK, RBLOCK])
        tmp243 = _tmp242 + tmp241
        _tmp242 = tl.where(rmask, tmp243, _tmp242)
        tmp246 = tmp244 * tmp245
        tmp247 = tmp246.to(tl.float32)
        tmp248 = tmp137 / tmp175
        tmp249 = tmp248 + tmp177
        tmp250 = tl.math.rsqrt(tmp249)
        tmp251 = tmp247 * tmp250
        tmp253 = tmp251 + tmp252
        tmp254 = tmp253 + tmp252
        tmp255 = tmp254.to(tl.float32)
        tmp256 = tmp255 * tmp187
        tmp257 = tl.broadcast_to(tmp256, [XBLOCK, RBLOCK])
        tmp259 = _tmp258 + tmp257
        _tmp258 = tl.where(rmask, tmp259, _tmp258)
        tmp260 = tmp255 * tmp199
        tmp261 = tl.broadcast_to(tmp260, [XBLOCK, RBLOCK])
        tmp263 = _tmp262 + tmp261
        _tmp262 = tl.where(rmask, tmp263, _tmp262)
        tmp264 = tmp255 * tmp207
        tmp265 = tl.broadcast_to(tmp264, [XBLOCK, RBLOCK])
        tmp267 = _tmp266 + tmp265
        _tmp266 = tl.where(rmask, tmp267, _tmp266)
        tmp268 = tmp255 * tmp192
        tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
        tmp271 = _tmp270 + tmp269
        _tmp270 = tl.where(rmask, tmp271, _tmp270)
        tmp273 = tmp272 * tmp192
        tmp274 = tl.broadcast_to(tmp273, [XBLOCK, RBLOCK])
        tmp276 = _tmp275 + tmp274
        _tmp275 = tl.where(rmask, tmp276, _tmp275)
    tmp190 = tl.sum(_tmp190, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp190, None)
    tmp202 = tl.sum(_tmp202, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp202, None)
    tmp210 = tl.sum(_tmp210, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp210, None)
    tmp214 = tl.sum(_tmp214, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp214, None)
    tmp230 = tl.sum(_tmp230, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp230, None)
    tmp234 = tl.sum(_tmp234, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp234, None)
    tmp238 = tl.sum(_tmp238, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp238, None)
    tmp242 = tl.sum(_tmp242, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp242, None)
    tmp258 = tl.sum(_tmp258, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp258, None)
    tmp262 = tl.sum(_tmp262, 1)[:, None]
    tl.store(out_ptr18 + (x0), tmp262, None)
    tmp266 = tl.sum(_tmp266, 1)[:, None]
    tl.store(out_ptr19 + (x0), tmp266, None)
    tmp270 = tl.sum(_tmp270, 1)[:, None]
    tl.store(out_ptr20 + (x0), tmp270, None)
    tmp275 = tl.sum(_tmp275, 1)[:, None]
    tl.store(out_ptr21 + (x0), tmp275, None)
''')


# kernel path: /tmp/torchinductor_mengqy/m2/cm2c5bmudryryip36dfztqgsjo4hs3ejp7hi44fnzb2nefuuvop7.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_215 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_215', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_215', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(14,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_215(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, xnumel, XBLOCK : tl.constexpr):
    xnumel = 122880
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 30720)
    x0 = xindex % 5
    x1 = (xindex // 5) % 6144
    x3 = xindex
    tmp5 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp11 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp17 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp45 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr9 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp53 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr12 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tmp3 == tmp1
    tmp6 = 0.0
    tmp7 = tl.where(tmp4, tmp5, tmp6)
    tmp8 = tl.where(tmp2, tmp7, tmp6)
    tmp9 = tl.full([1], 2, tl.int32)
    tmp10 = tmp3 == tmp9
    tmp12 = tl.where(tmp10, tmp11, tmp6)
    tmp13 = tl.where(tmp2, tmp12, tmp6)
    tmp14 = tmp8 + tmp13
    tmp15 = tl.full([1], 1, tl.int32)
    tmp16 = tmp3 == tmp15
    tmp18 = tl.where(tmp16, tmp17, tmp6)
    tmp19 = tl.where(tmp2, tmp18, tmp6)
    tmp20 = tmp14 + tmp19
    tmp21 = tl.full([1], 0, tl.int32)
    tmp22 = tmp3 == tmp21
    tmp24 = tl.where(tmp22, tmp23, tmp6)
    tmp25 = tl.where(tmp2, tmp24, tmp6)
    tmp26 = tmp20 + tmp25
    tmp27 = tmp0 == tmp9
    tmp29 = tl.where(tmp4, tmp28, tmp6)
    tmp30 = tl.where(tmp27, tmp29, tmp6)
    tmp31 = tmp26 + tmp30
    tmp33 = tl.where(tmp10, tmp32, tmp6)
    tmp34 = tl.where(tmp27, tmp33, tmp6)
    tmp35 = tmp31 + tmp34
    tmp37 = tl.where(tmp16, tmp36, tmp6)
    tmp38 = tl.where(tmp27, tmp37, tmp6)
    tmp39 = tmp35 + tmp38
    tmp41 = tl.where(tmp22, tmp40, tmp6)
    tmp42 = tl.where(tmp27, tmp41, tmp6)
    tmp43 = tmp39 + tmp42
    tmp44 = tmp0 == tmp15
    tmp46 = tl.where(tmp4, tmp45, tmp6)
    tmp47 = tl.where(tmp44, tmp46, tmp6)
    tmp48 = tmp43 + tmp47
    tmp50 = tl.where(tmp10, tmp49, tmp6)
    tmp51 = tl.where(tmp44, tmp50, tmp6)
    tmp52 = tmp48 + tmp51
    tmp54 = tl.where(tmp16, tmp53, tmp6)
    tmp55 = tl.where(tmp44, tmp54, tmp6)
    tmp56 = tmp52 + tmp55
    tmp58 = tl.where(tmp22, tmp57, tmp6)
    tmp59 = tl.where(tmp44, tmp58, tmp6)
    tmp60 = tmp56 + tmp59
    tmp61 = tmp0 == tmp21
    tmp63 = tl.where(tmp4, tmp62, tmp6)
    tmp64 = tl.where(tmp61, tmp63, tmp6)
    tmp65 = tmp60 + tmp64
    tl.store(in_out_ptr0 + (x3), tmp65, None)
''')


# kernel path: /tmp/torchinductor_mengqy/at/cat2hcl5p56365uaymysf2he2cv46rivom2sowrypcp7bmpkfbfs.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_216 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_216', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[1024, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_216', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_216(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 960
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 5
    x4 = (xindex // 5)
    x2 = (xindex // 240)
    x1 = (xindex // 5) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (5*r3) + (640*x4)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ma/cmabjjuxjobgu7adq5glhmrvnyv3x56juxsut4pk7b3mtneznxad.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_217 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_217', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[32, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_217', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_217(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 20
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 5
    x1 = (xindex // 5)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (5*r2) + (240*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/c7/cc7fz4fnfmv6sq7eudthdenmukxg6yr5i36a6balk5ky7k4tt3lr.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_218 = async_compile.triton('triton_poi_fused_clone_218', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_218', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_218(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 122880
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 5
    x1 = (xindex // 5) % 4
    x2 = (xindex // 20)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (5*x2) + (30720*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/aj/cajbocdh546amvzovltvfm4gq2tsrr7m7qomow7afmc6po3ewjhv.py
# Source Nodes: [l__mod___dynamic_dense_3_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_3_act => add_64, convert_element_type_66, erf_3, mul_124
triton_poi_fused_gelu_gelu_backward_219 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_219', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_219', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_219(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 122880
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/w2/cw2rocdnosin2inbjnmfncxujbsccfj6hnbjozxg3c4ylh67bkba.py
# Source Nodes: [add, add_10, add_12, add_24, add_27, add_3, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_55
# add_10 => add_18
# add_12 => add_20
# add_24 => add_56
# add_27 => add_57
# add_3 => add_3
# add_5 => add_12, add_5
# float_1 => convert_element_type_50
# float_2 => convert_element_type_52
# float_3 => convert_element_type_54
# mean => mean_13
# mean_1 => mean_14
# mean_2 => mean_15
# mul => mul_99
# mul_3 => mul_102
# mul_4 => mul_24
# mul_6 => mul_105
# rsqrt => rsqrt_13
# rsqrt_1 => rsqrt_14
# rsqrt_2 => rsqrt_15
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_220 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_220', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp32', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: 'i32', 35: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_220', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(34, 35))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_220(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, out_ptr1, out_ptr3, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, out_ptr14, out_ptr15, out_ptr16, out_ptr17, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp4.to(tl.float32)
        tmp6 = tmp3 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp14 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp41 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp37 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tmp10 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp15 = 2048.0
        tmp16 = tmp14 / tmp15
        tmp17 = 1e-05
        tmp18 = tmp16 + tmp17
        tmp19 = tl.math.rsqrt(tmp18)
        tmp20 = tmp13 * tmp19
        tmp21 = -0.5
        tmp22 = tmp8 * tmp21
        tmp23 = tmp19 * tmp19
        tmp24 = tmp23 * tmp19
        tmp25 = tmp22 * tmp24
        tmp26 = tmp25 / tmp15
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tmp26 * tmp28
        tmp30 = tmp20 + tmp29
        tmp31 = tmp30 + tmp29
        tmp32 = tmp31.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp38 = tmp37.to(tl.float32)
        tmp39 = tmp36 * tmp38
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = _tmp41 + tmp40
        _tmp41 = tl.where(rmask, tmp42, _tmp41)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp32, rmask)
    tmp41 = tl.sum(_tmp41, 1)[:, None]
    tmp47 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp74 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp43 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp44 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp45 = tmp43 * tmp44
        tmp46 = tmp45.to(tl.float32)
        tmp48 = 2048.0
        tmp49 = tmp47 / tmp48
        tmp50 = 1e-05
        tmp51 = tmp49 + tmp50
        tmp52 = tl.math.rsqrt(tmp51)
        tmp53 = tmp46 * tmp52
        tmp54 = -0.5
        tmp55 = tmp41 * tmp54
        tmp56 = tmp52 * tmp52
        tmp57 = tmp56 * tmp52
        tmp58 = tmp55 * tmp57
        tmp59 = tmp58 / tmp48
        tmp61 = tmp60.to(tl.float32)
        tmp62 = tmp59 * tmp61
        tmp63 = tmp53 + tmp62
        tmp64 = tmp63 + tmp62
        tmp65 = tmp64.to(tl.float32)
        tmp68 = tmp66 * tmp67
        tmp69 = tmp68.to(tl.float32)
        tmp71 = tmp70.to(tl.float32)
        tmp72 = tmp69 * tmp71
        tmp73 = tl.broadcast_to(tmp72, [XBLOCK, RBLOCK])
        tmp75 = _tmp74 + tmp73
        _tmp74 = tl.where(rmask, tmp75, _tmp74)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp65, rmask)
    tmp74 = tl.sum(_tmp74, 1)[:, None]
    tmp80 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr13 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp76 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp77 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp105 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp107 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp78 = tmp76 * tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp81 = 2048.0
        tmp82 = tmp80 / tmp81
        tmp83 = 1e-05
        tmp84 = tmp82 + tmp83
        tmp85 = tl.math.rsqrt(tmp84)
        tmp86 = tmp79 * tmp85
        tmp87 = -0.5
        tmp88 = tmp74 * tmp87
        tmp89 = tmp85 * tmp85
        tmp90 = tmp89 * tmp85
        tmp91 = tmp88 * tmp90
        tmp92 = tmp91 / tmp81
        tmp94 = tmp93.to(tl.float32)
        tmp95 = tmp92 * tmp94
        tmp96 = tmp86 + tmp95
        tmp97 = tmp96 + tmp95
        tmp98 = tmp97.to(tl.float32)
        tmp102 = tmp100 * tmp101
        tmp103 = 0.0
        tmp104 = tmp102 + tmp103
        tmp106 = tmp104 + tmp105
        tmp108 = tmp106 + tmp107
        tmp109 = tmp99 * tmp108
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp98, rmask)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp111, None)
    _tmp124 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp129 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp134 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp143 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp147 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp151 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp155 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp159 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp163 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp167 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp171 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp113 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp120 = tl.load(in_ptr16 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp126 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp131 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp136 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(in_ptr17 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr18 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tmp100 * tmp114
        tmp116 = 0.0
        tmp117 = tmp115 + tmp116
        tmp119 = tmp117 + tmp118
        tmp121 = tmp119 + tmp120
        tmp122 = tmp113 * tmp121
        tmp123 = tl.broadcast_to(tmp122, [XBLOCK, RBLOCK])
        tmp125 = _tmp124 + tmp123
        _tmp124 = tl.where(rmask, tmp125, _tmp124)
        tmp127 = tmp126 * tmp121
        tmp128 = tl.broadcast_to(tmp127, [XBLOCK, RBLOCK])
        tmp130 = _tmp129 + tmp128
        _tmp129 = tl.where(rmask, tmp130, _tmp129)
        tmp132 = tmp131 * tmp121
        tmp133 = tl.broadcast_to(tmp132, [XBLOCK, RBLOCK])
        tmp135 = _tmp134 + tmp133
        _tmp134 = tl.where(rmask, tmp135, _tmp134)
        tmp138 = tmp114 + tmp137
        tmp140 = tmp138 + tmp139
        tmp141 = tmp136 * tmp140
        tmp142 = tl.broadcast_to(tmp141, [XBLOCK, RBLOCK])
        tmp144 = _tmp143 + tmp142
        _tmp143 = tl.where(rmask, tmp144, _tmp143)
        tmp145 = tmp113 * tmp140
        tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
        tmp148 = _tmp147 + tmp146
        _tmp147 = tl.where(rmask, tmp148, _tmp147)
        tmp149 = tmp126 * tmp140
        tmp150 = tl.broadcast_to(tmp149, [XBLOCK, RBLOCK])
        tmp152 = _tmp151 + tmp150
        _tmp151 = tl.where(rmask, tmp152, _tmp151)
        tmp153 = tmp131 * tmp140
        tmp154 = tl.broadcast_to(tmp153, [XBLOCK, RBLOCK])
        tmp156 = _tmp155 + tmp154
        _tmp155 = tl.where(rmask, tmp156, _tmp155)
        tmp157 = tmp136 * tmp114
        tmp158 = tl.broadcast_to(tmp157, [XBLOCK, RBLOCK])
        tmp160 = _tmp159 + tmp158
        _tmp159 = tl.where(rmask, tmp160, _tmp159)
        tmp161 = tmp126 * tmp114
        tmp162 = tl.broadcast_to(tmp161, [XBLOCK, RBLOCK])
        tmp164 = _tmp163 + tmp162
        _tmp163 = tl.where(rmask, tmp164, _tmp163)
        tmp165 = tmp131 * tmp114
        tmp166 = tl.broadcast_to(tmp165, [XBLOCK, RBLOCK])
        tmp168 = _tmp167 + tmp166
        _tmp167 = tl.where(rmask, tmp168, _tmp167)
        tmp169 = tmp113 * tmp114
        tmp170 = tl.broadcast_to(tmp169, [XBLOCK, RBLOCK])
        tmp172 = _tmp171 + tmp170
        _tmp171 = tl.where(rmask, tmp172, _tmp171)
    tmp124 = tl.sum(_tmp124, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp124, None)
    tmp129 = tl.sum(_tmp129, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp129, None)
    tmp134 = tl.sum(_tmp134, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp134, None)
    tmp143 = tl.sum(_tmp143, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp143, None)
    tmp147 = tl.sum(_tmp147, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp147, None)
    tmp151 = tl.sum(_tmp151, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp151, None)
    tmp155 = tl.sum(_tmp155, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp155, None)
    tmp159 = tl.sum(_tmp159, 1)[:, None]
    tl.store(out_ptr14 + (x0), tmp159, None)
    tmp163 = tl.sum(_tmp163, 1)[:, None]
    tl.store(out_ptr15 + (x0), tmp163, None)
    tmp167 = tl.sum(_tmp167, 1)[:, None]
    tl.store(out_ptr16 + (x0), tmp167, None)
    tmp171 = tl.sum(_tmp171, 1)[:, None]
    tl.store(out_ptr17 + (x0), tmp171, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yn/cynuq2pdqnatt3yitw2ffnwzyaqy4fvwyckgizgcq6ygpsyhxzc6.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_221 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_221', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_221', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_221(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 24576)
    x0 = xindex % 4
    x1 = (xindex // 4) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp27 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp31 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp40 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr8 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 2, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 1, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 0, tl.int32)
    tmp17 = tmp3 == tmp16
    tmp19 = tl.where(tmp17, tmp18, tmp7)
    tmp20 = tl.where(tmp2, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tmp0 == tmp4
    tmp24 = tl.where(tmp5, tmp23, tmp7)
    tmp25 = tl.where(tmp22, tmp24, tmp7)
    tmp26 = tmp21 + tmp25
    tmp28 = tl.where(tmp11, tmp27, tmp7)
    tmp29 = tl.where(tmp22, tmp28, tmp7)
    tmp30 = tmp26 + tmp29
    tmp32 = tl.where(tmp17, tmp31, tmp7)
    tmp33 = tl.where(tmp22, tmp32, tmp7)
    tmp34 = tmp30 + tmp33
    tmp35 = tmp0 == tmp10
    tmp37 = tl.where(tmp5, tmp36, tmp7)
    tmp38 = tl.where(tmp35, tmp37, tmp7)
    tmp39 = tmp34 + tmp38
    tmp41 = tl.where(tmp11, tmp40, tmp7)
    tmp42 = tl.where(tmp35, tmp41, tmp7)
    tmp43 = tmp39 + tmp42
    tmp45 = tl.where(tmp17, tmp44, tmp7)
    tmp46 = tl.where(tmp35, tmp45, tmp7)
    tmp47 = tmp43 + tmp46
    tl.store(in_out_ptr0 + (x3), tmp47, None)
''')


# kernel path: /tmp/torchinductor_mengqy/sb/csbtb267nzxmll42cnsvgsnbnzvzhpgiwhynwwo5nr72ydso4dmt.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_222 = async_compile.triton('triton_poi_fused_clone_222', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_222', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_222(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 4
    x1 = (xindex // 4) % 4
    x2 = (xindex // 16)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (4*x2) + (24576*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 0, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 2, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tl.full([1], 1, tl.int32)
    tmp13 = tmp4 == tmp12
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp3, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp18 = tmp4 == tmp2
    tmp20 = tl.where(tmp18, tmp19, tmp8)
    tmp21 = tl.where(tmp3, tmp20, tmp8)
    tmp22 = tmp17 + tmp21
    tl.store(out_ptr0 + (x3), tmp22, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qj/cqjhaoisvxdvbugl74q2okt4ziesdfxuessegq3bs4sgzrpwi5lm.py
# Source Nodes: [l__mod___dynamic_dense_2_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_2_act => add_41, convert_element_type_48, erf_2, mul_85
triton_poi_fused_gelu_gelu_backward_223 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_223', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_223', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_223(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/wa/cwaiyloglkgur5e3u3ntnmvfog2udksdm5ypdvtmlyprnw5m2avz.py
# Source Nodes: [add, add_20, add_35, float_1, mean, mul, mul_31, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
# add => add_82
# add_20 => add_39
# add_35 => add_69
# float_1 => convert_element_type_68
# mean => mean_18
# mul => mul_142
# mul_31 => mul_129
# rsqrt => rsqrt_18
triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_224 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_224', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp32', 10: '*fp32', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: 'i32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_224', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(24, 25))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_224(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp13 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr7 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr9 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr11 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp36 = tl.load(in_ptr12 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp39 = tl.load(in_ptr13 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp42 = tl.load(in_ptr14 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr15 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp49 = tl.load(in_ptr16 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp52 = tl.load(in_ptr17 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp20 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp27 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp35 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp45 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 + tmp20
        tmp22 = tmp21 + tmp20
        tmp23 = tmp22.to(tl.float32)
        tmp25 = tmp23 * tmp24
        tmp26 = tmp8 + tmp25
        tmp29 = tmp27 * tmp28
        tmp30 = tmp26 + tmp29
        tmp33 = tmp31 * tmp32
        tmp34 = tmp30 + tmp33
        tmp37 = tmp23 * tmp36
        tmp38 = tmp35 + tmp37
        tmp40 = tmp27 * tmp39
        tmp41 = tmp38 + tmp40
        tmp43 = tmp31 * tmp42
        tmp44 = tmp41 + tmp43
        tmp47 = tmp23 * tmp46
        tmp48 = tmp45 + tmp47
        tmp50 = tmp27 * tmp49
        tmp51 = tmp48 + tmp50
        tmp53 = tmp31 * tmp52
        tmp54 = tmp51 + tmp53
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp34, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp44, rmask)
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp54, rmask)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp70 = tl.load(in_ptr18 + (5*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr19 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp55 = tl.load(in_out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp73 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tmp56 * tmp57
        tmp59 = tmp58.to(tl.float32)
        tmp60 = 2048.0
        tmp61 = tmp13 / tmp60
        tmp62 = 1e-05
        tmp63 = tmp61 + tmp62
        tmp64 = tl.math.rsqrt(tmp63)
        tmp65 = tmp59 * tmp64
        tmp67 = tmp65 + tmp66
        tmp68 = tmp67 + tmp66
        tmp69 = tmp68.to(tl.float32)
        tmp71 = tmp69 * tmp70
        tmp72 = tmp55 + tmp71
        tmp75 = tmp73 * tmp74
        tmp76 = tmp72 + tmp75
        tmp77 = -0.5
        tmp78 = tmp6 * tmp77
        tmp79 = tmp74 * tmp74
        tmp80 = tmp79 * tmp74
        tmp81 = tmp78 * tmp80
        tmp82 = tmp81 / tmp60
        tmp85 = tmp83 + tmp84
        tmp86 = 2.0
        tmp87 = tmp85 * tmp86
        tmp88 = tmp82 * tmp87
        tmp89 = tmp76 + tmp88
        tl.store(in_out_ptr3 + (r1 + (2048*x0)), tmp89, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/d6/cd6p7amk6yh5lgrchvvh7klt3ke53jj5tnv5alllis47gxkudag4.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_225 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_225', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[1024, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_225', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_225(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 768
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 4
    x4 = (xindex // 4)
    x2 = (xindex // 192)
    x1 = (xindex // 4) % 48
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (4*r3) + (512*x4)), rmask & xmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 0, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 2, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp4 == tmp12
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp3, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp18 = tmp4 == tmp2
        tmp20 = tl.where(tmp18, tmp19, tmp8)
        tmp21 = tl.where(tmp3, tmp20, tmp8)
        tmp22 = tmp17 + tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask & xmask, tmp25, _tmp24)
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp24, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/2o/c2ot6duqijxid5bp6k3j7vo7f6xl72ul6qdler6hosx4dkkathwf.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_226 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_226', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[16, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_226', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_226(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 16
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 4
    x1 = (xindex // 4)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (4*r2) + (192*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/na/cna3epdq7wxpwdmukrf6sjoo74tystpcsgnqkixsqkjtu7eu7xso.py
# Source Nodes: [add, add_12, add_14, add_3, add_5, mean, mean_1, mean_2, mul, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_32
# add_12 => add_33
# add_14 => add_34
# add_3 => add_3
# add_5 => add_5
# mean => mean_8
# mean_1 => mean_9
# mean_2 => mean_10
# mul => mul_60
# mul_3 => mul_63
# mul_6 => mul_66
# rsqrt => rsqrt_8
# rsqrt_1 => rsqrt_9
# rsqrt_2 => rsqrt_10
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_227 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_227', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp32', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp32', 8: '*fp16', 9: '*fp16', 10: '*fp32', 11: '*fp32', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: 'i32', 28: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_227', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(27, 28))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_227(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, out_ptr1, out_ptr3, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, out_ptr13, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp7 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = tmp3 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = _tmp7 + tmp6
        _tmp7 = tl.where(rmask, tmp8, _tmp7)
    tmp7 = tl.sum(_tmp7, 1)[:, None]
    tmp13 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
    _tmp38 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp9 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp31 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp35 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 2048.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = tl.math.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = -0.5
        tmp21 = tmp7 * tmp20
        tmp22 = tmp18 * tmp18
        tmp23 = tmp22 * tmp18
        tmp24 = tmp21 * tmp23
        tmp25 = tmp24 / tmp14
        tmp27 = tmp25 * tmp26
        tmp28 = tmp19 + tmp27
        tmp29 = tmp28 + tmp27
        tmp30 = tmp29.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tmp34 = tmp33.to(tl.float32)
        tmp36 = tmp34 * tmp35
        tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
        tmp39 = _tmp38 + tmp37
        _tmp38 = tl.where(rmask, tmp39, _tmp38)
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp30, rmask)
    tmp38 = tl.sum(_tmp38, 1)[:, None]
    tmp44 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp40 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp57 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0)
        tmp62 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp66 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp42 = tmp40 * tmp41
        tmp43 = tmp42.to(tl.float32)
        tmp45 = 2048.0
        tmp46 = tmp44 / tmp45
        tmp47 = 1e-05
        tmp48 = tmp46 + tmp47
        tmp49 = tl.math.rsqrt(tmp48)
        tmp50 = tmp43 * tmp49
        tmp51 = -0.5
        tmp52 = tmp38 * tmp51
        tmp53 = tmp49 * tmp49
        tmp54 = tmp53 * tmp49
        tmp55 = tmp52 * tmp54
        tmp56 = tmp55 / tmp45
        tmp58 = tmp56 * tmp57
        tmp59 = tmp50 + tmp58
        tmp60 = tmp59 + tmp58
        tmp61 = tmp60.to(tl.float32)
        tmp64 = tmp62 * tmp63
        tmp65 = tmp64.to(tl.float32)
        tmp67 = tmp65 * tmp66
        tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
        tmp70 = _tmp69 + tmp68
        _tmp69 = tl.where(rmask, tmp70, _tmp69)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp61, rmask)
    tmp69 = tl.sum(_tmp69, 1)[:, None]
    tmp75 = tl.load(in_ptr11 + (x0), None, eviction_policy='evict_last')
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp106 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp111 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp71 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp72 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0)
        tmp93 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp94 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp97 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp103 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp108 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp73 = tmp71 * tmp72
        tmp74 = tmp73.to(tl.float32)
        tmp76 = 2048.0
        tmp77 = tmp75 / tmp76
        tmp78 = 1e-05
        tmp79 = tmp77 + tmp78
        tmp80 = tl.math.rsqrt(tmp79)
        tmp81 = tmp74 * tmp80
        tmp82 = -0.5
        tmp83 = tmp69 * tmp82
        tmp84 = tmp80 * tmp80
        tmp85 = tmp84 * tmp80
        tmp86 = tmp83 * tmp85
        tmp87 = tmp86 / tmp76
        tmp89 = tmp87 * tmp88
        tmp90 = tmp81 + tmp89
        tmp91 = tmp90 + tmp89
        tmp92 = tmp91.to(tl.float32)
        tmp96 = tmp94 + tmp95
        tmp98 = tmp96 + tmp97
        tmp99 = tmp93 * tmp98
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tmp104 = tmp103 * tmp98
        tmp105 = tl.broadcast_to(tmp104, [XBLOCK, RBLOCK])
        tmp107 = _tmp106 + tmp105
        _tmp106 = tl.where(rmask, tmp107, _tmp106)
        tmp109 = tmp108 * tmp98
        tmp110 = tl.broadcast_to(tmp109, [XBLOCK, RBLOCK])
        tmp112 = _tmp111 + tmp110
        _tmp111 = tl.where(rmask, tmp112, _tmp111)
        tl.store(out_ptr5 + (r1 + (2048*x0)), tmp92, rmask)
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp101, None)
    tmp106 = tl.sum(_tmp106, 1)[:, None]
    tl.store(out_ptr7 + (x0), tmp106, None)
    tmp111 = tl.sum(_tmp111, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp111, None)
    _tmp121 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp126 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp130 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp135 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp140 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp113 = tl.load(out_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp114 = tl.load(in_ptr13 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp115 = tl.load(in_ptr14 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp117 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp123 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp132 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp137 = tl.load(out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp116 = tmp114 + tmp115
        tmp118 = tmp116 + tmp117
        tmp119 = tmp113 * tmp118
        tmp120 = tl.broadcast_to(tmp119, [XBLOCK, RBLOCK])
        tmp122 = _tmp121 + tmp120
        _tmp121 = tl.where(rmask, tmp122, _tmp121)
        tmp124 = tmp123 * tmp114
        tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
        tmp127 = _tmp126 + tmp125
        _tmp126 = tl.where(rmask, tmp127, _tmp126)
        tmp128 = tmp113 * tmp114
        tmp129 = tl.broadcast_to(tmp128, [XBLOCK, RBLOCK])
        tmp131 = _tmp130 + tmp129
        _tmp130 = tl.where(rmask, tmp131, _tmp130)
        tmp133 = tmp132 * tmp114
        tmp134 = tl.broadcast_to(tmp133, [XBLOCK, RBLOCK])
        tmp136 = _tmp135 + tmp134
        _tmp135 = tl.where(rmask, tmp136, _tmp135)
        tmp138 = tmp137 * tmp114
        tmp139 = tl.broadcast_to(tmp138, [XBLOCK, RBLOCK])
        tmp141 = _tmp140 + tmp139
        _tmp140 = tl.where(rmask, tmp141, _tmp140)
    tmp121 = tl.sum(_tmp121, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp121, None)
    tmp126 = tl.sum(_tmp126, 1)[:, None]
    tl.store(out_ptr10 + (x0), tmp126, None)
    tmp130 = tl.sum(_tmp130, 1)[:, None]
    tl.store(out_ptr11 + (x0), tmp130, None)
    tmp135 = tl.sum(_tmp135, 1)[:, None]
    tl.store(out_ptr12 + (x0), tmp135, None)
    tmp140 = tl.sum(_tmp140, 1)[:, None]
    tl.store(out_ptr13 + (x0), tmp140, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qx/cqxywqa7kc5hqx5gfwoek2fhyyodw6yvn452lbnvowgxpqup3zqn.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]

triton_poi_fused_add_select_backward_slice_backward_228 = async_compile.triton('triton_poi_fused_add_select_backward_slice_backward_228', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_select_backward_slice_backward_228', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6,))]})
@triton.jit
def triton_poi_fused_add_select_backward_slice_backward_228(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 73728
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 18432)
    x0 = xindex % 3
    x1 = (xindex // 3) % 6144
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp22 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp27 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x2
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 1, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 0, tl.int32)
    tmp11 = tmp3 == tmp10
    tmp13 = tl.where(tmp11, tmp12, tmp7)
    tmp14 = tl.where(tmp2, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 2, tl.int32)
    tmp17 = tmp0 == tmp16
    tmp19 = tl.where(tmp5, tmp18, tmp7)
    tmp20 = tl.where(tmp17, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp23 = tl.where(tmp11, tmp22, tmp7)
    tmp24 = tl.where(tmp17, tmp23, tmp7)
    tmp25 = tmp21 + tmp24
    tmp26 = tmp0 == tmp4
    tmp28 = tl.where(tmp5, tmp27, tmp7)
    tmp29 = tl.where(tmp26, tmp28, tmp7)
    tmp30 = tmp25 + tmp29
    tl.store(out_ptr0 + (x3), tmp30, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xl/cxlwrdrybb76dkcdcgylrikxs3kp7slfatxp3avon22s5jizex4v.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_229 = async_compile.triton('triton_poi_fused_clone_229', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_229', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_229(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 73728
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 3
    x1 = (xindex // 3) % 4
    x2 = (xindex // 12)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (3*x2) + (18432*x1)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = x1
    tmp2 = tl.full([1], 1, tl.int32)
    tmp3 = tmp1 == tmp2
    tmp4 = x0
    tmp5 = tl.full([1], 0, tl.int32)
    tmp6 = tmp4 == tmp5
    tmp8 = 0.0
    tmp9 = tl.where(tmp6, tmp7, tmp8)
    tmp10 = tl.where(tmp3, tmp9, tmp8)
    tmp11 = tmp0 + tmp10
    tmp12 = tmp1 == tmp5
    tmp13 = tmp4 == tmp2
    tmp15 = tl.where(tmp13, tmp14, tmp8)
    tmp16 = tl.where(tmp12, tmp15, tmp8)
    tmp17 = tmp11 + tmp16
    tmp19 = tl.where(tmp6, tmp18, tmp8)
    tmp20 = tl.where(tmp12, tmp19, tmp8)
    tmp21 = tmp17 + tmp20
    tl.store(out_ptr0 + (x3), tmp21, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ao/cao5r52qj2aklmz3s6qv34dno5kpnlkppmsgmmkoedhz2l5nqbva.py
# Source Nodes: [l__mod___dynamic_dense_1_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_1_act => add_22, convert_element_type_30, erf_1, mul_50
triton_poi_fused_gelu_gelu_backward_230 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_230', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_230', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_230(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 73728
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5j/c5jc6brwpbg2xibshw5pixr5ngxjth4ptkmufcsyhlzz7uccjsvn.py
# Source Nodes: [add_10, add_12, add_5, mul_4], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_10 => add_18
# add_12 => add_20
# add_5 => add_12
# mul_4 => mul_24
triton_red_fused_add_div_mul_pow_sum_231 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_231', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: 'i32', 24: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_231', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(23, 24))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_231(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp16 = tl.load(in_ptr6 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp24 = tl.load(in_ptr10 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp28 = tl.load(in_ptr12 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr13 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr14 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr15 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp41 = tl.load(in_ptr16 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr9 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr11 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_out_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = 0.0
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp0 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp25 = tmp23 * tmp24
        tmp26 = tmp22 + tmp25
        tmp29 = tmp27 * tmp28
        tmp30 = tmp26 + tmp29
        tmp33 = tmp15 * tmp32
        tmp34 = tmp31 + tmp33
        tmp36 = tmp19 * tmp35
        tmp37 = tmp34 + tmp36
        tmp39 = tmp23 * tmp38
        tmp40 = tmp37 + tmp39
        tmp42 = tmp27 * tmp41
        tmp43 = tmp40 + tmp42
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp30, rmask)
        tl.store(in_out_ptr1 + (r1 + (2048*x0)), tmp43, rmask)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tmp46 = tl.load(in_ptr17 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr18 + (4*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp54 = tl.load(in_ptr19 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp44 = tl.load(in_out_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp45 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_ptr7 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp53 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp64 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp47 = tmp45 * tmp46
        tmp48 = tmp44 + tmp47
        tmp51 = tmp49 * tmp50
        tmp52 = tmp48 + tmp51
        tmp55 = tmp53 * tmp54
        tmp56 = tmp52 + tmp55
        tmp57 = -0.5
        tmp58 = tmp12 * tmp57
        tmp59 = tmp54 * tmp54
        tmp60 = tmp59 * tmp54
        tmp61 = tmp58 * tmp60
        tmp62 = 2048.0
        tmp63 = tmp61 / tmp62
        tmp65 = tmp1 * tmp64
        tmp66 = 0.0
        tmp67 = tmp65 + tmp66
        tmp69 = tmp67 + tmp68
        tmp71 = tmp69 + tmp70
        tmp72 = 2.0
        tmp73 = tmp71 * tmp72
        tmp74 = tmp63 * tmp73
        tmp75 = tmp56 + tmp74
        tl.store(in_out_ptr2 + (r1 + (2048*x0)), tmp75, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/nq/cnqusg36o3wp5rxdnohlyvxd6p7xmhge7imxbsb6blziwwi2umlg.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_232 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_232', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[1024, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_232', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_232(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 576
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 3
    x4 = (xindex // 3)
    x2 = (xindex // 144)
    x1 = (xindex // 3) % 48
    _tmp23 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x5 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r3 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (3*r3) + (384*x4)), rmask & xmask, other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr1 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr2 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr3 + (r3 + (128*x1)), rmask & xmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = x2
        tmp2 = tl.full([1, 1], 1, tl.int32)
        tmp3 = tmp1 == tmp2
        tmp4 = x0
        tmp5 = tl.full([1, 1], 0, tl.int32)
        tmp6 = tmp4 == tmp5
        tmp8 = 0.0
        tmp9 = tl.where(tmp6, tmp7, tmp8)
        tmp10 = tl.where(tmp3, tmp9, tmp8)
        tmp11 = tmp0 + tmp10
        tmp12 = tmp1 == tmp5
        tmp13 = tmp4 == tmp2
        tmp15 = tl.where(tmp13, tmp14, tmp8)
        tmp16 = tl.where(tmp12, tmp15, tmp8)
        tmp17 = tmp11 + tmp16
        tmp19 = tl.where(tmp6, tmp18, tmp8)
        tmp20 = tl.where(tmp12, tmp19, tmp8)
        tmp21 = tmp17 + tmp20
        tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
        tmp24 = _tmp23 + tmp22
        _tmp23 = tl.where(rmask & xmask, tmp24, _tmp23)
    tmp23 = tl.sum(_tmp23, 1)[:, None]
    tl.store(out_ptr0 + (x5), tmp23, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wi/cwin3ompvicakhcrg5fc3v7tsi6koagxzl3d6inwkoxevxong3de.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_per_fused_add_select_backward_slice_backward_sum_233 = async_compile.triton('triton_per_fused_add_select_backward_slice_backward_sum_233', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[16, 64],
    reduction_hint=ReductionHint.OUTER_TINY,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_select_backward_slice_backward_sum_233', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]}
)
@triton.jit
def triton_per_fused_add_select_backward_slice_backward_sum_233(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 12
    rnumel = 48
    RBLOCK: tl.constexpr = 64
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r2 = rindex
    x0 = xindex % 3
    x1 = (xindex // 3)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (3*r2) + (144*x1)), rmask & xmask, other=0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/uy/cuyxgwmdwhdpkhisncswzs5b2y2juct3woih72fbrr4hgfcuyk45.py
# Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_4, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_10 => add_18
# add_11 => add_19
# add_5 => add_12
# float_6 => convert_element_type_26
# mean_3 => mean_6
# mul_18 => mul_43
# mul_4 => mul_24
# rsqrt_3 => rsqrt_6
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_234 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_234', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_234', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_234(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp6 = tl.load(in_ptr3 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp16 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp5 = tmp4.to(tl.float32)
        tmp8 = tmp6 * tmp7
        tmp9 = 0.0
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp5 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
        tmp17 = _tmp16 + tmp15
        _tmp16 = tl.where(rmask, tmp17, _tmp16)
    tmp16 = tl.sum(_tmp16, 1)[:, None]
    tmp20 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp30 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp40 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp42 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = -0.5
        tmp19 = tmp16 * tmp18
        tmp21 = 2048.0
        tmp22 = tmp20 / tmp21
        tmp23 = 1e-05
        tmp24 = tmp22 + tmp23
        tmp25 = tl.math.rsqrt(tmp24)
        tmp26 = tmp25 * tmp25
        tmp27 = tmp26 * tmp25
        tmp28 = tmp19 * tmp27
        tmp29 = tmp28 / tmp21
        tmp31 = tmp6 * tmp30
        tmp32 = 0.0
        tmp33 = tmp31 + tmp32
        tmp35 = tmp33 + tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp37 = tmp29 * tmp36
        tmp41 = tmp39 + tmp40
        tmp43 = tmp41 * tmp42
        tmp44 = tmp43.to(tl.float32)
        tmp45 = tmp44 * tmp25
        tmp46 = tmp45 + tmp37
        tmp47 = tmp46 + tmp37
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp38 + tmp48
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp49, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/zv/czvcrn55w7gllb4amif3eafi623dvokgoauedagllhpka5lywlfh.py
# Source Nodes: [add, add_2, add_3, add_4, add_6, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_13
# add_2 => add_9
# add_3 => add_10
# add_4 => add_11, add_14
# add_6 => add_15
# float_1 => convert_element_type_14
# float_2 => convert_element_type_16
# float_3 => convert_element_type_18
# mean => mean_3
# mean_1 => mean_4
# mean_2 => mean_5
# mul => mul_25
# mul_1 => mul_21
# mul_2 => mul_22
# mul_3 => mul_23, mul_28
# mul_6 => mul_31
# rsqrt => rsqrt_3
# rsqrt_1 => rsqrt_4
# rsqrt_2 => rsqrt_5
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_235 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_235', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp32', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp32', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp16', 23: '*fp16', 24: '*fp32', 25: '*fp16', 26: '*fp16', 27: 'i32', 28: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_235', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(27, 28))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_235(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, out_ptr2, out_ptr3, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp4 = tl.load(in_ptr2 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp18 = tl.load(in_ptr6 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 * tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tmp7 = 0.0
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp3 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
        tmp16 = tmp14 * tmp15
        tmp17 = tmp16.to(tl.float32)
        tmp19 = tmp18 * tmp5
        tmp20 = tmp19 + tmp7
        tmp21 = tmp20.to(tl.float32)
        tmp22 = tmp17 * tmp21
        tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
        tmp25 = _tmp24 + tmp23
        _tmp24 = tl.where(rmask, tmp25, _tmp24)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tmp24 = tl.sum(_tmp24, 1)[:, None]
    tmp30 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr9 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp57 = tl.load(in_ptr11 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp61 = tl.load(in_ptr13 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp71 = tl.load(in_ptr14 + (x0), None, eviction_policy='evict_last')
    tmp91 = tl.load(in_ptr17 + (2*x0), None, eviction_policy='evict_last').to(tl.float32)
    _tmp97 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp101 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp26 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp27 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp51 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp52 = tl.load(in_ptr8 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp56 = tl.load(in_ptr10 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp60 = tl.load(in_ptr12 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp67 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp68 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp87 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp88 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp28 = tmp26 * tmp27
        tmp29 = tmp28.to(tl.float32)
        tmp31 = 2048.0
        tmp32 = tmp30 / tmp31
        tmp33 = 1e-05
        tmp34 = tmp32 + tmp33
        tmp35 = tl.math.rsqrt(tmp34)
        tmp36 = tmp29 * tmp35
        tmp37 = -0.5
        tmp38 = tmp12 * tmp37
        tmp39 = tmp35 * tmp35
        tmp40 = tmp39 * tmp35
        tmp41 = tmp38 * tmp40
        tmp42 = tmp41 / tmp31
        tmp44 = tmp4 * tmp43
        tmp45 = 0.0
        tmp46 = tmp44 + tmp45
        tmp47 = tmp46.to(tl.float32)
        tmp48 = tmp42 * tmp47
        tmp49 = tmp36 + tmp48
        tmp50 = tmp49 + tmp48
        tmp54 = tmp52 * tmp53
        tmp55 = tmp51 + tmp54
        tmp58 = tmp56 * tmp57
        tmp59 = tmp55 + tmp58
        tmp62 = tmp60 * tmp61
        tmp63 = tmp59 + tmp62
        tmp64 = tmp50.to(tl.float32)
        tmp65 = tmp64 * tmp4
        tmp66 = tmp63 + tmp65
        tmp69 = tmp67 * tmp68
        tmp70 = tmp69.to(tl.float32)
        tmp72 = tmp71 / tmp31
        tmp73 = tmp72 + tmp33
        tmp74 = tl.math.rsqrt(tmp73)
        tmp75 = tmp70 * tmp74
        tmp76 = tmp24 * tmp37
        tmp77 = tmp74 * tmp74
        tmp78 = tmp77 * tmp74
        tmp79 = tmp76 * tmp78
        tmp80 = tmp79 / tmp31
        tmp81 = tmp18 * tmp43
        tmp82 = tmp81 + tmp45
        tmp83 = tmp82.to(tl.float32)
        tmp84 = tmp80 * tmp83
        tmp85 = tmp75 + tmp84
        tmp86 = tmp85 + tmp84
        tmp89 = tmp87 * tmp88
        tmp90 = tmp89.to(tl.float32)
        tmp92 = tmp91 * tmp43
        tmp93 = tmp92 + tmp45
        tmp94 = tmp93.to(tl.float32)
        tmp95 = tmp90 * tmp94
        tmp96 = tl.broadcast_to(tmp95, [XBLOCK, RBLOCK])
        tmp98 = _tmp97 + tmp96
        _tmp97 = tl.where(rmask, tmp98, _tmp97)
        tmp99 = tmp60 * tmp43
        tmp100 = tl.broadcast_to(tmp99, [XBLOCK, RBLOCK])
        tmp102 = _tmp101 + tmp100
        _tmp101 = tl.where(rmask, tmp102, _tmp101)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp50, rmask)
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp66, rmask)
        tl.store(out_ptr3 + (r1 + (2048*x0)), tmp86, rmask)
    tmp97 = tl.sum(_tmp97, 1)[:, None]
    tmp101 = tl.sum(_tmp101, 1)[:, None]
    tl.store(out_ptr5 + (x0), tmp101, None)
    _tmp108 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp114 = tl.load(in_ptr18 + (x0), None, eviction_policy='evict_last')
    _tmp138 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp103 = tl.load(out_ptr2 + (r1 + (2048*x0)), rmask, other=0)
        tmp105 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr15 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp111 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp134 = tl.load(out_ptr3 + (r1 + (2048*x0)), rmask, other=0)
        tmp104 = tmp103.to(tl.float32)
        tmp106 = tmp104 * tmp105
        tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
        tmp109 = _tmp108 + tmp107
        _tmp108 = tl.where(rmask, tmp109, _tmp108)
        tmp112 = tmp110 * tmp111
        tmp113 = tmp112.to(tl.float32)
        tmp115 = 2048.0
        tmp116 = tmp114 / tmp115
        tmp117 = 1e-05
        tmp118 = tmp116 + tmp117
        tmp119 = tl.math.rsqrt(tmp118)
        tmp120 = tmp113 * tmp119
        tmp121 = -0.5
        tmp122 = tmp97 * tmp121
        tmp123 = tmp119 * tmp119
        tmp124 = tmp123 * tmp119
        tmp125 = tmp122 * tmp124
        tmp126 = tmp125 / tmp115
        tmp127 = tmp91 * tmp105
        tmp128 = 0.0
        tmp129 = tmp127 + tmp128
        tmp130 = tmp129.to(tl.float32)
        tmp131 = tmp126 * tmp130
        tmp132 = tmp120 + tmp131
        tmp133 = tmp132 + tmp131
        tmp135 = tmp134.to(tl.float32)
        tmp136 = tmp135 * tmp105
        tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
        tmp139 = _tmp138 + tmp137
        _tmp138 = tl.where(rmask, tmp139, _tmp138)
        tl.store(out_ptr7 + (r1 + (2048*x0)), tmp133, rmask)
    tmp108 = tl.sum(_tmp108, 1)[:, None]
    tl.store(out_ptr6 + (x0), tmp108, None)
    tmp138 = tl.sum(_tmp138, 1)[:, None]
    tl.store(out_ptr8 + (x0), tmp138, None)
    _tmp145 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp140 = tl.load(out_ptr7 + (r1 + (2048*x0)), rmask, other=0)
        tmp142 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp141 = tmp140.to(tl.float32)
        tmp143 = tmp141 * tmp142
        tmp144 = tl.broadcast_to(tmp143, [XBLOCK, RBLOCK])
        tmp146 = _tmp145 + tmp144
        _tmp145 = tl.where(rmask, tmp146, _tmp145)
    tmp145 = tl.sum(_tmp145, 1)[:, None]
    tl.store(out_ptr9 + (x0), tmp145, None)
''')


# kernel path: /tmp/torchinductor_mengqy/tb/ctbcu33rgeyq3zty5ee7cgfpbenf5aqicxesetmsc4d4wjvlffg7.py
# Source Nodes: [], Original ATen: [aten.clone]

triton_poi_fused_clone_236 = async_compile.triton('triton_poi_fused_clone_236', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_236', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]})
@triton.jit
def triton_poi_fused_clone_236(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 49152
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = (xindex // 2) % 4
    x0 = xindex % 2
    x2 = (xindex // 8)
    x3 = xindex
    tmp6 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp12 = tl.load(in_ptr1 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp18 = tl.load(in_ptr2 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp23 = tl.load(in_ptr3 + (x2), None, eviction_policy='evict_last').to(tl.float32)
    tmp0 = x1
    tmp1 = tl.full([1], 3, tl.int32)
    tmp2 = tmp0 == tmp1
    tmp3 = x0
    tmp4 = tl.full([1], 0, tl.int32)
    tmp5 = tmp3 == tmp4
    tmp7 = 0.0
    tmp8 = tl.where(tmp5, tmp6, tmp7)
    tmp9 = tl.where(tmp2, tmp8, tmp7)
    tmp10 = tl.full([1], 2, tl.int32)
    tmp11 = tmp0 == tmp10
    tmp13 = tl.where(tmp5, tmp12, tmp7)
    tmp14 = tl.where(tmp11, tmp13, tmp7)
    tmp15 = tmp9 + tmp14
    tmp16 = tl.full([1], 1, tl.int32)
    tmp17 = tmp0 == tmp16
    tmp19 = tl.where(tmp5, tmp18, tmp7)
    tmp20 = tl.where(tmp17, tmp19, tmp7)
    tmp21 = tmp15 + tmp20
    tmp22 = tmp0 == tmp4
    tmp24 = tl.where(tmp5, tmp23, tmp7)
    tmp25 = tl.where(tmp22, tmp24, tmp7)
    tmp26 = tmp21 + tmp25
    tl.store(out_ptr0 + (x3), tmp26, None)
''')


# kernel path: /tmp/torchinductor_mengqy/q2/cq23jx4t3jgadu7jkgty7bdtolml4elvgytmka7yplymubum4vhn.py
# Source Nodes: [l__mod___dynamic_dense_0_act], Original ATen: [aten.gelu, aten.gelu_backward]
# l__mod___dynamic_dense_0_act => add_7, convert_element_type_12, erf, mul_19
triton_poi_fused_gelu_gelu_backward_237 = async_compile.triton('triton_poi_fused_gelu_gelu_backward_237', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_gelu_backward_237', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_gelu_backward_237(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 49152
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp2 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = 0.7071067811865476
    tmp5 = tmp3 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = 0.5
    tmp10 = tmp8 * tmp9
    tmp11 = tmp3 * tmp3
    tmp12 = -0.5
    tmp13 = tmp11 * tmp12
    tmp14 = tl.exp(tmp13)
    tmp15 = 0.3989422804014327
    tmp16 = tmp14 * tmp15
    tmp17 = tmp3 * tmp16
    tmp18 = tmp10 + tmp17
    tmp19 = tmp1 * tmp18
    tmp20 = tmp19.to(tl.float32)
    tl.store(in_out_ptr0 + (x0), tmp20, None)
''')


# kernel path: /tmp/torchinductor_mengqy/c4/cc4zxkfil2r5koog3umymljj5tz2epfnxxf6sishhc4rtv5c53cn.py
# Source Nodes: [add_3, add_5], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
# add_3 => add_3
# add_5 => add_5
triton_red_fused_add_div_mul_pow_sum_238 = async_compile.triton('triton_red_fused_add_div_mul_pow_sum_238', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: 'i32', 11: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_div_mul_pow_sum_238', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(10, 11))]}
)
@triton.jit
def triton_red_fused_add_div_mul_pow_sum_238(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp6 = tmp0 * tmp5
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp12 = tl.load(in_ptr5 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp16 = tl.load(in_ptr7 + (3*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (x0), None, eviction_policy='evict_last').to(tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp10 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp31 = tl.load(in_ptr2 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp11 * tmp12
        tmp14 = tmp10 + tmp13
        tmp17 = tmp15 * tmp16
        tmp18 = tmp14 + tmp17
        tmp21 = tmp19 * tmp20
        tmp22 = tmp18 + tmp21
        tmp23 = -0.5
        tmp24 = tmp8 * tmp23
        tmp25 = tmp20 * tmp20
        tmp26 = tmp25 * tmp20
        tmp27 = tmp24 * tmp26
        tmp28 = 2048.0
        tmp29 = tmp27 / tmp28
        tmp32 = tmp30 + tmp31
        tmp34 = tmp32 + tmp33
        tmp35 = 2.0
        tmp36 = tmp34 * tmp35
        tmp37 = tmp29 * tmp36
        tmp38 = tmp22 + tmp37
        tl.store(in_out_ptr0 + (r1 + (2048*x0)), tmp38, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/l3/cl3prvjylt4ibtmz5ip5dxbue7l33do5hwuvh5lnae67qnpbjbxi.py
# Source Nodes: [add, add_10, add_11, add_2, add_3, add_4, add_5, add_6, float_1, float_2, float_3, float_4, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_12, mul_13, mul_18, mul_19, mul_2, mul_3, mul_4, mul_6, mul_7, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add => add_13
# add_10 => add_18
# add_11 => add_19
# add_2 => add_9
# add_3 => add_10, add_3
# add_4 => add_11, add_14, add_4
# add_5 => add_12
# add_6 => add_15
# float_1 => convert_element_type_14
# float_2 => convert_element_type_16
# float_3 => convert_element_type_18
# float_4 => convert_element_type_8
# float_6 => convert_element_type_26
# mean => mean_3
# mean_1 => mean_1, mean_4
# mean_2 => mean_5
# mean_3 => mean_6
# mul => mul_25
# mul_1 => mul_21, mul_26
# mul_12 => mul_12
# mul_13 => mul_13
# mul_18 => mul_43
# mul_19 => mul_44
# mul_2 => mul_22
# mul_3 => mul_23, mul_28
# mul_4 => mul_24, mul_29
# mul_6 => mul_31
# mul_7 => mul_32
# rsqrt => rsqrt_3
# rsqrt_1 => rsqrt_1, rsqrt_4
# rsqrt_2 => rsqrt_5
# rsqrt_3 => rsqrt_6
# type_as => convert_element_type_15
# type_as_1 => convert_element_type_17
# type_as_2 => convert_element_type_19
# type_as_3 => convert_element_type_9
# type_as_5 => convert_element_type_27
triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_239 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_239', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[131072, 128],
    reduction_hint=ReductionHint.OUTER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp32', 6: '*fp16', 7: '*fp16', 8: '*fp32', 9: '*fp16', 10: '*fp16', 11: '*fp32', 12: '*fp16', 13: '*fp16', 14: '*fp32', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: 'i32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_239', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(24, 25))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_239(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 98304
    rnumel = 128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x1 = (xindex // 2048)
    _tmp21 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    _tmp36 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp51 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp66 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + ((2*r2) + (256*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr4 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp11 = tl.load(in_ptr5 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp23 = tl.load(in_ptr6 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp24 = tl.load(in_ptr7 + ((2*r2) + (256*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp28 = tl.load(in_ptr8 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp38 = tl.load(in_ptr9 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr10 + ((2*r2) + (256*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp43 = tl.load(in_ptr11 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp53 = tl.load(in_ptr12 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp54 = tl.load(in_ptr13 + ((2*r2) + (256*x1)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr14 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp68 = tl.load(in_ptr15 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr16 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp71 = tl.load(in_ptr17 + (x0 + (2048*r2) + (262144*x1)), rmask, other=0).to(tl.float32)
        tmp74 = tl.load(in_ptr18 + (r2 + (128*x1)), rmask, eviction_policy='evict_last', other=0)
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp9.to(tl.float32)
        tmp12 = 2048.0
        tmp13 = tmp11 / tmp12
        tmp14 = 1e-05
        tmp15 = tmp13 + tmp14
        tmp16 = tl.math.rsqrt(tmp15)
        tmp17 = tmp10 * tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tmp2 * tmp18
        tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
        tmp22 = _tmp21 + tmp20
        _tmp21 = tl.where(rmask, tmp22, _tmp21)
        tmp25 = tmp24 * tmp4
        tmp26 = tmp25 + tmp6
        tmp27 = tmp26.to(tl.float32)
        tmp29 = tmp28 / tmp12
        tmp30 = tmp29 + tmp14
        tmp31 = tl.math.rsqrt(tmp30)
        tmp32 = tmp27 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp34 = tmp23 * tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = _tmp36 + tmp35
        _tmp36 = tl.where(rmask, tmp37, _tmp36)
        tmp40 = tmp39 * tmp4
        tmp41 = tmp40 + tmp6
        tmp42 = tmp41.to(tl.float32)
        tmp44 = tmp43 / tmp12
        tmp45 = tmp44 + tmp14
        tmp46 = tl.math.rsqrt(tmp45)
        tmp47 = tmp42 * tmp46
        tmp48 = tmp47.to(tl.float32)
        tmp49 = tmp38 * tmp48
        tmp50 = tl.broadcast_to(tmp49, [XBLOCK, RBLOCK])
        tmp52 = _tmp51 + tmp50
        _tmp51 = tl.where(rmask, tmp52, _tmp51)
        tmp55 = tmp54 * tmp4
        tmp56 = tmp55 + tmp6
        tmp57 = tmp56.to(tl.float32)
        tmp59 = tmp58 / tmp12
        tmp60 = tmp59 + tmp14
        tmp61 = tl.math.rsqrt(tmp60)
        tmp62 = tmp57 * tmp61
        tmp63 = tmp62.to(tl.float32)
        tmp64 = tmp53 * tmp63
        tmp65 = tl.broadcast_to(tmp64, [XBLOCK, RBLOCK])
        tmp67 = _tmp66 + tmp65
        _tmp66 = tl.where(rmask, tmp67, _tmp66)
        tmp70 = tmp68 + tmp69
        tmp72 = tmp4 + tmp71
        tmp73 = tmp72.to(tl.float32)
        tmp75 = tmp74 / tmp12
        tmp76 = tmp75 + tmp14
        tmp77 = tl.math.rsqrt(tmp76)
        tmp78 = tmp73 * tmp77
        tmp79 = tmp78.to(tl.float32)
        tmp80 = tmp70 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
    tmp21 = tl.sum(_tmp21, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp21, None)
    tmp36 = tl.sum(_tmp36, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp36, None)
    tmp51 = tl.sum(_tmp51, 1)[:, None]
    tl.store(out_ptr2 + (x3), tmp51, None)
    tmp66 = tl.sum(_tmp66, 1)[:, None]
    tl.store(out_ptr3 + (x3), tmp66, None)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    tl.store(out_ptr4 + (x3), tmp82, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fg/cfgtdombkl5nufovnevwmjfgk3eehwdfyddlzi73uambhchwoxsh.py
# Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]

triton_red_fused_add_select_backward_slice_backward_sum_240 = async_compile.triton('triton_red_fused_add_select_backward_slice_backward_sum_240', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_select_backward_slice_backward_sum_240', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_select_backward_slice_backward_sum_240(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8
    rnumel = 6144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x1 = (xindex // 2)
    x0 = xindex % 2
    _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp6 = tl.load(in_ptr0 + (r2), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr1 + (r2), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tl.load(in_ptr2 + (r2), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp23 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp0 = x1
        tmp1 = tl.full([1, 1], 3, tl.int32)
        tmp2 = tmp0 == tmp1
        tmp3 = x0
        tmp4 = tl.full([1, 1], 0, tl.int32)
        tmp5 = tmp3 == tmp4
        tmp7 = 0.0
        tmp8 = tl.where(tmp5, tmp6, tmp7)
        tmp9 = tl.where(tmp2, tmp8, tmp7)
        tmp10 = tl.full([1, 1], 2, tl.int32)
        tmp11 = tmp0 == tmp10
        tmp13 = tl.where(tmp5, tmp12, tmp7)
        tmp14 = tl.where(tmp11, tmp13, tmp7)
        tmp15 = tmp9 + tmp14
        tmp16 = tl.full([1, 1], 1, tl.int32)
        tmp17 = tmp0 == tmp16
        tmp19 = tl.where(tmp5, tmp18, tmp7)
        tmp20 = tl.where(tmp17, tmp19, tmp7)
        tmp21 = tmp15 + tmp20
        tmp22 = tmp0 == tmp4
        tmp24 = tl.where(tmp5, tmp23, tmp7)
        tmp25 = tl.where(tmp22, tmp24, tmp7)
        tmp26 = tmp21 + tmp25
        tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
        tmp29 = _tmp28 + tmp27
        _tmp28 = tl.where(rmask & xmask, tmp29, _tmp28)
    tmp28 = tl.sum(_tmp28, 1)[:, None]
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x3), tmp28, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/hk/chkrc2rz2pvhsoybmjoz3thizhks3otck3fvxijv5rp47zgge3pc.py
# Source Nodes: [add_3, add_4, float_4, mean_1, mul_12, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
# add_3 => add_3
# add_4 => add_4
# float_4 => convert_element_type_8
# mean_1 => mean_1
# mul_12 => mul_12
# rsqrt_1 => rsqrt_1
triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_241 = async_compile.triton('triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_241', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 2048],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp32', 6: '*fp16', 7: '*fp32', 8: '*fp16', 9: 'i32', 10: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_241', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9, 10))]}
)
@triton.jit
def triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_241(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 6144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp12 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp5 = tmp4.to(tl.float32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp5 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = _tmp12 + tmp11
        _tmp12 = tl.where(rmask, tmp13, _tmp12)
    tmp12 = tl.sum(_tmp12, 1)[:, None]
    tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr1 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp33 = tl.load(in_ptr3 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr4 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp40 = tl.load(in_ptr6 + (r1 + (2048*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tmp14 + tmp15
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp21 = 2048.0
        tmp22 = tmp20 / tmp21
        tmp23 = 1e-05
        tmp24 = tmp22 + tmp23
        tmp25 = tl.math.rsqrt(tmp24)
        tmp26 = tmp19 * tmp25
        tmp27 = -0.5
        tmp28 = tmp12 * tmp27
        tmp29 = tmp25 * tmp25
        tmp30 = tmp29 * tmp25
        tmp31 = tmp28 * tmp30
        tmp32 = tmp31 / tmp21
        tmp35 = tmp33 + tmp34
        tmp36 = tmp35.to(tl.float32)
        tmp37 = tmp32 * tmp36
        tmp38 = tmp26 + tmp37
        tmp39 = tmp38 + tmp37
        tmp41 = tmp39.to(tl.float32)
        tmp42 = tmp40 + tmp41
        tl.store(out_ptr1 + (r1 + (2048*x0)), tmp39, rmask)
        tl.store(out_ptr2 + (r1 + (2048*x0)), tmp42, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/6m/c6m2zjqmkqlsicunvgylykcazeotvhw7qscnn7fen5hebzlexajz.py
# Source Nodes: [], Original ATen: [aten.add, aten.embedding_dense_backward]

triton_poi_fused_add_embedding_dense_backward_242 = async_compile.triton('triton_poi_fused_add_embedding_dense_backward_242', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[134217728], filename=__file__, meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_embedding_dense_backward_242', 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_add_embedding_dense_backward_242(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 102926336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ec/cecymthcblsh6zsy7cqayd7jci44wuj62iokiyihf4o3jlstu3j7.py
# Source Nodes: [], Original ATen: [aten._to_copy, aten.add, aten.embedding_dense_backward, aten.mul]

triton_poi_fused__to_copy_add_embedding_dense_backward_mul_243 = async_compile.triton('triton_poi_fused__to_copy_add_embedding_dense_backward_mul_243', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16777216], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp32', 2: '*fp16', 3: '*fp32', 4: '*fp16', 5: '*fp16', 6: '*fp32', 7: '*fp16', 8: '*fp16', 9: '*i64', 10: '*fp16', 11: '*fp32', 12: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_embedding_dense_backward_mul_243', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(12,))]})
@triton.jit
def triton_poi_fused__to_copy_add_embedding_dense_backward_mul_243(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 12582912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = xindex
    x1 = (xindex // 2048)
    x3 = (xindex // 2048) % 2048
    x4 = (xindex // 4194304)
    x0 = xindex % 2048
    tmp0 = tl.load(in_out_ptr0 + (x2), None).to(tl.float32)
    tmp1 = tl.load(in_ptr0 + (x2), None)
    tmp3 = tl.load(in_ptr1 + (2*x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp6 = tl.load(in_ptr2 + (x2), None)
    tmp8 = tl.load(in_ptr3 + (2*x1), None, eviction_policy='evict_last').to(tl.float32)
    tmp11 = tl.load(in_ptr4 + (x2), None).to(tl.float32)
    tmp12 = tl.load(in_ptr5 + (x2), None)
    tmp16 = tl.load(in_ptr6 + (x2), None).to(tl.float32)
    tmp18 = tl.load(in_ptr7 + (x2), None).to(tl.float32)
    tmp20 = tl.load(in_ptr8 + (x3 + (2049*x4)), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr9 + (x2), None).to(tl.float32)
    tmp2 = tmp1.to(tl.float32)
    tmp4 = tmp2 * tmp3
    tmp5 = tmp0 + tmp4
    tmp7 = tmp6.to(tl.float32)
    tmp9 = tmp7 * tmp8
    tmp10 = tmp5 + tmp9
    tmp13 = tmp12.to(tl.float32)
    tmp14 = tmp11 + tmp13
    tmp15 = tmp10 + tmp14
    tmp17 = tmp15 + tmp16
    tmp19 = tmp17 + tmp18
    tmp21 = tl.where(tmp20 < 0, tmp20 + 50257, tmp20)
    tmp22 = tl.full([1], -1, tl.int64)
    tmp23 = tmp20 == tmp22
    tmp25 = tmp19 + tmp24
    tmp26 = tmp25.to(tl.float32)
    tmp27 = 0.0
    tmp28 = tl.where(tmp23, tmp27, tmp26)
    tl.atomic_add(out_ptr0 + (x0 + (2048*tmp21)), tmp28, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5g/c5g57wctu367uvigdzy5ls4ru22ruphorme6676nknts3vouitnc.py
# Source Nodes: [], Original ATen: [aten.embedding_dense_backward]

triton_poi_fused_embedding_dense_backward_244 = async_compile.triton('triton_poi_fused_embedding_dense_backward_244', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[134217728], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_embedding_dense_backward_244', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_embedding_dense_backward_244(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 102926336
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None)
    tmp1 = tmp0.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp1, None)
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_6, primals_11, primals_12, primals_13, primals_18, primals_23, primals_24, primals_25, primals_30, primals_35, primals_36, primals_37, primals_42, primals_47, primals_48, primals_49, primals_54, primals_59, primals_60, primals_61, primals_66, primals_71, primals_72, primals_73, primals_78, primals_83, primals_84, primals_85, primals_90, primals_95, primals_96, primals_97, primals_102, primals_107, primals_108, primals_109, primals_114, primals_119, primals_120, primals_121, primals_126, primals_131, primals_132, primals_133, primals_138, primals_143, primals_144, primals_145, primals_150, primals_155, primals_156, primals_157, primals_162, primals_167, primals_168, primals_169, primals_174, primals_179, primals_180, primals_181, primals_186, primals_191, primals_192, primals_193, primals_198, primals_203, primals_204, primals_205, primals_210, primals_215, primals_216, primals_217, primals_222, primals_227, primals_228, primals_229, primals_234, primals_239, primals_240, primals_241, primals_246, primals_251, primals_252, primals_253, primals_258, primals_263, primals_264, primals_265, primals_270, primals_275, primals_276, primals_277, primals_282, primals_287, primals_340, primals_341, embedding, permute, permute_1, permute_2, select_1, select_3, slice_3, scalar_tensor, permute_10, permute_11, permute_12, permute_13, rsqrt_2, view_30, mm_7, view_32, unsqueeze_8, unsqueeze_9, unsqueeze_10, unsqueeze_11, permute_17, permute_18, permute_19, permute_27, permute_28, permute_29, permute_30, rsqrt_7, view_65, mm_16, view_67, unsqueeze_18, unsqueeze_19, unsqueeze_20, unsqueeze_21, unsqueeze_22, unsqueeze_23, unsqueeze_24, unsqueeze_25, permute_34, permute_35, permute_36, permute_44, permute_45, permute_46, permute_47, rsqrt_12, view_100, mm_25, view_102, unsqueeze_32, unsqueeze_33, unsqueeze_34, unsqueeze_35, unsqueeze_36, unsqueeze_37, unsqueeze_38, unsqueeze_39, unsqueeze_40, unsqueeze_41, unsqueeze_42, unsqueeze_43, permute_51, permute_52, permute_53, permute_61, permute_62, permute_63, permute_64, rsqrt_17, view_135, mm_34, view_137, unsqueeze_50, unsqueeze_51, unsqueeze_52, unsqueeze_53, unsqueeze_54, unsqueeze_55, unsqueeze_56, unsqueeze_57, unsqueeze_58, unsqueeze_59, unsqueeze_60, unsqueeze_61, unsqueeze_62, unsqueeze_63, unsqueeze_64, unsqueeze_65, permute_68, permute_69, permute_70, permute_78, permute_79, permute_80, permute_81, rsqrt_22, view_170, mm_43, view_172, unsqueeze_72, unsqueeze_73, unsqueeze_74, unsqueeze_75, unsqueeze_76, unsqueeze_77, unsqueeze_78, unsqueeze_79, unsqueeze_80, unsqueeze_81, unsqueeze_82, unsqueeze_83, unsqueeze_84, unsqueeze_85, unsqueeze_86, unsqueeze_87, unsqueeze_88, unsqueeze_89, unsqueeze_90, unsqueeze_91, permute_85, permute_86, permute_87, permute_95, permute_96, permute_97, permute_98, rsqrt_27, view_205, mm_52, view_207, unsqueeze_98, unsqueeze_99, unsqueeze_100, unsqueeze_101, unsqueeze_102, unsqueeze_103, unsqueeze_104, unsqueeze_105, unsqueeze_106, unsqueeze_107, unsqueeze_108, unsqueeze_109, unsqueeze_110, unsqueeze_111, unsqueeze_112, unsqueeze_113, unsqueeze_114, unsqueeze_115, unsqueeze_116, unsqueeze_117, unsqueeze_118, unsqueeze_119, unsqueeze_120, unsqueeze_121, permute_102, permute_103, permute_104, permute_112, permute_113, permute_114, permute_115, rsqrt_32, view_240, mm_61, view_242, unsqueeze_128, unsqueeze_129, unsqueeze_130, unsqueeze_131, unsqueeze_132, unsqueeze_133, unsqueeze_134, unsqueeze_135, unsqueeze_136, unsqueeze_137, unsqueeze_138, unsqueeze_139, unsqueeze_140, unsqueeze_141, unsqueeze_142, unsqueeze_143, unsqueeze_144, unsqueeze_145, unsqueeze_146, unsqueeze_147, unsqueeze_148, unsqueeze_149, unsqueeze_150, unsqueeze_151, unsqueeze_152, unsqueeze_153, unsqueeze_154, unsqueeze_155, permute_119, permute_120, permute_121, permute_129, permute_130, permute_131, permute_132, rsqrt_37, view_275, mm_70, view_277, unsqueeze_162, unsqueeze_163, unsqueeze_164, unsqueeze_165, unsqueeze_166, unsqueeze_167, unsqueeze_168, unsqueeze_169, unsqueeze_170, unsqueeze_171, unsqueeze_172, unsqueeze_173, unsqueeze_174, unsqueeze_175, unsqueeze_176, unsqueeze_177, unsqueeze_178, unsqueeze_179, unsqueeze_180, unsqueeze_181, unsqueeze_182, unsqueeze_183, unsqueeze_184, unsqueeze_185, unsqueeze_186, unsqueeze_187, unsqueeze_188, unsqueeze_189, unsqueeze_190, unsqueeze_191, unsqueeze_192, unsqueeze_193, permute_136, permute_137, permute_138, permute_146, permute_147, permute_148, permute_149, rsqrt_42, view_310, mm_79, view_312, unsqueeze_200, unsqueeze_201, unsqueeze_202, unsqueeze_203, unsqueeze_204, unsqueeze_205, unsqueeze_206, unsqueeze_207, unsqueeze_208, unsqueeze_209, unsqueeze_210, unsqueeze_211, unsqueeze_212, unsqueeze_213, unsqueeze_214, unsqueeze_215, unsqueeze_216, unsqueeze_217, unsqueeze_218, unsqueeze_219, unsqueeze_220, unsqueeze_221, unsqueeze_222, unsqueeze_223, unsqueeze_224, unsqueeze_225, unsqueeze_226, unsqueeze_227, unsqueeze_228, unsqueeze_229, unsqueeze_230, unsqueeze_231, unsqueeze_232, unsqueeze_233, unsqueeze_234, unsqueeze_235, permute_153, permute_154, permute_155, permute_163, permute_164, permute_165, permute_166, rsqrt_47, view_345, mm_88, view_347, unsqueeze_242, unsqueeze_243, unsqueeze_244, unsqueeze_245, unsqueeze_246, unsqueeze_247, unsqueeze_248, unsqueeze_249, unsqueeze_250, unsqueeze_251, unsqueeze_252, unsqueeze_253, unsqueeze_254, unsqueeze_255, unsqueeze_256, unsqueeze_257, unsqueeze_258, unsqueeze_259, unsqueeze_260, unsqueeze_261, unsqueeze_262, unsqueeze_263, unsqueeze_264, unsqueeze_265, unsqueeze_266, unsqueeze_267, unsqueeze_268, unsqueeze_269, unsqueeze_270, unsqueeze_271, unsqueeze_272, unsqueeze_273, unsqueeze_274, unsqueeze_275, unsqueeze_276, unsqueeze_277, unsqueeze_278, unsqueeze_279, unsqueeze_280, unsqueeze_281, permute_170, permute_171, permute_172, permute_180, permute_181, permute_182, permute_183, rsqrt_52, view_380, mm_97, view_382, unsqueeze_288, unsqueeze_289, unsqueeze_290, unsqueeze_291, unsqueeze_292, unsqueeze_293, unsqueeze_294, unsqueeze_295, unsqueeze_296, unsqueeze_297, unsqueeze_298, unsqueeze_299, unsqueeze_300, unsqueeze_301, unsqueeze_302, unsqueeze_303, unsqueeze_304, unsqueeze_305, unsqueeze_306, unsqueeze_307, unsqueeze_308, unsqueeze_309, unsqueeze_310, unsqueeze_311, unsqueeze_312, unsqueeze_313, unsqueeze_314, unsqueeze_315, unsqueeze_316, unsqueeze_317, unsqueeze_318, unsqueeze_319, unsqueeze_320, unsqueeze_321, unsqueeze_322, unsqueeze_323, unsqueeze_324, unsqueeze_325, unsqueeze_326, unsqueeze_327, unsqueeze_328, unsqueeze_329, unsqueeze_330, unsqueeze_331, permute_187, permute_188, permute_189, permute_197, permute_198, permute_199, permute_200, rsqrt_57, view_415, mm_106, view_417, unsqueeze_338, unsqueeze_339, unsqueeze_340, unsqueeze_341, unsqueeze_342, unsqueeze_343, unsqueeze_344, unsqueeze_345, unsqueeze_346, unsqueeze_347, unsqueeze_348, unsqueeze_349, unsqueeze_350, unsqueeze_351, unsqueeze_352, unsqueeze_353, unsqueeze_354, unsqueeze_355, unsqueeze_356, unsqueeze_357, unsqueeze_358, unsqueeze_359, unsqueeze_360, unsqueeze_361, unsqueeze_362, unsqueeze_363, unsqueeze_364, unsqueeze_365, unsqueeze_366, unsqueeze_367, unsqueeze_368, unsqueeze_369, unsqueeze_370, unsqueeze_371, unsqueeze_372, unsqueeze_373, unsqueeze_374, unsqueeze_375, unsqueeze_376, unsqueeze_377, unsqueeze_378, unsqueeze_379, unsqueeze_380, unsqueeze_381, unsqueeze_382, unsqueeze_383, unsqueeze_384, unsqueeze_385, permute_204, permute_205, permute_206, permute_214, permute_215, permute_216, permute_217, rsqrt_62, view_450, mm_115, view_452, unsqueeze_392, unsqueeze_393, unsqueeze_394, unsqueeze_395, unsqueeze_396, unsqueeze_397, unsqueeze_398, unsqueeze_399, unsqueeze_400, unsqueeze_401, unsqueeze_402, unsqueeze_403, unsqueeze_404, unsqueeze_405, unsqueeze_406, unsqueeze_407, unsqueeze_408, unsqueeze_409, unsqueeze_410, unsqueeze_411, unsqueeze_412, unsqueeze_413, unsqueeze_414, unsqueeze_415, unsqueeze_416, unsqueeze_417, unsqueeze_418, unsqueeze_419, unsqueeze_420, unsqueeze_421, unsqueeze_422, unsqueeze_423, unsqueeze_424, unsqueeze_425, unsqueeze_426, unsqueeze_427, unsqueeze_428, unsqueeze_429, unsqueeze_430, unsqueeze_431, unsqueeze_432, unsqueeze_433, unsqueeze_434, unsqueeze_435, unsqueeze_436, unsqueeze_437, unsqueeze_438, unsqueeze_439, unsqueeze_440, unsqueeze_441, unsqueeze_442, unsqueeze_443, permute_221, permute_222, permute_223, permute_231, permute_232, permute_233, permute_234, rsqrt_67, view_485, mm_124, view_487, unsqueeze_450, unsqueeze_451, unsqueeze_452, unsqueeze_453, unsqueeze_454, unsqueeze_455, unsqueeze_456, unsqueeze_457, unsqueeze_458, unsqueeze_459, unsqueeze_460, unsqueeze_461, unsqueeze_462, unsqueeze_463, unsqueeze_464, unsqueeze_465, unsqueeze_466, unsqueeze_467, unsqueeze_468, unsqueeze_469, unsqueeze_470, unsqueeze_471, unsqueeze_472, unsqueeze_473, unsqueeze_474, unsqueeze_475, unsqueeze_476, unsqueeze_477, unsqueeze_478, unsqueeze_479, unsqueeze_480, unsqueeze_481, unsqueeze_482, unsqueeze_483, unsqueeze_484, unsqueeze_485, unsqueeze_486, unsqueeze_487, unsqueeze_488, unsqueeze_489, unsqueeze_490, unsqueeze_491, unsqueeze_492, unsqueeze_493, unsqueeze_494, unsqueeze_495, unsqueeze_496, unsqueeze_497, unsqueeze_498, unsqueeze_499, unsqueeze_500, unsqueeze_501, unsqueeze_502, unsqueeze_503, unsqueeze_504, unsqueeze_505, permute_238, permute_239, permute_240, permute_248, permute_249, permute_250, permute_251, rsqrt_72, view_520, mm_133, view_522, unsqueeze_512, unsqueeze_513, unsqueeze_514, unsqueeze_515, unsqueeze_516, unsqueeze_517, unsqueeze_518, unsqueeze_519, unsqueeze_520, unsqueeze_521, unsqueeze_522, unsqueeze_523, unsqueeze_524, unsqueeze_525, unsqueeze_526, unsqueeze_527, unsqueeze_528, unsqueeze_529, unsqueeze_530, unsqueeze_531, unsqueeze_532, unsqueeze_533, unsqueeze_534, unsqueeze_535, unsqueeze_536, unsqueeze_537, unsqueeze_538, unsqueeze_539, unsqueeze_540, unsqueeze_541, unsqueeze_542, unsqueeze_543, unsqueeze_544, unsqueeze_545, unsqueeze_546, unsqueeze_547, unsqueeze_548, unsqueeze_549, unsqueeze_550, unsqueeze_551, unsqueeze_552, unsqueeze_553, unsqueeze_554, unsqueeze_555, unsqueeze_556, unsqueeze_557, unsqueeze_558, unsqueeze_559, unsqueeze_560, unsqueeze_561, unsqueeze_562, unsqueeze_563, unsqueeze_564, unsqueeze_565, unsqueeze_566, unsqueeze_567, unsqueeze_568, unsqueeze_569, unsqueeze_570, unsqueeze_571, permute_255, permute_256, permute_257, permute_265, permute_266, permute_267, permute_268, rsqrt_77, view_555, mm_142, view_557, unsqueeze_578, unsqueeze_579, unsqueeze_580, unsqueeze_581, unsqueeze_582, unsqueeze_583, unsqueeze_584, unsqueeze_585, unsqueeze_586, unsqueeze_587, unsqueeze_588, unsqueeze_589, unsqueeze_590, unsqueeze_591, unsqueeze_592, unsqueeze_593, unsqueeze_594, unsqueeze_595, unsqueeze_596, unsqueeze_597, unsqueeze_598, unsqueeze_599, unsqueeze_600, unsqueeze_601, unsqueeze_602, unsqueeze_603, unsqueeze_604, unsqueeze_605, unsqueeze_606, unsqueeze_607, unsqueeze_608, unsqueeze_609, unsqueeze_610, unsqueeze_611, unsqueeze_612, unsqueeze_613, unsqueeze_614, unsqueeze_615, unsqueeze_616, unsqueeze_617, unsqueeze_618, unsqueeze_619, unsqueeze_620, unsqueeze_621, unsqueeze_622, unsqueeze_623, unsqueeze_624, unsqueeze_625, unsqueeze_626, unsqueeze_627, unsqueeze_628, unsqueeze_629, unsqueeze_630, unsqueeze_631, unsqueeze_632, unsqueeze_633, unsqueeze_634, unsqueeze_635, unsqueeze_636, unsqueeze_637, unsqueeze_638, unsqueeze_639, unsqueeze_640, unsqueeze_641, permute_272, permute_273, permute_274, permute_282, permute_283, permute_284, permute_285, rsqrt_82, view_590, mm_151, view_592, unsqueeze_648, unsqueeze_649, unsqueeze_650, unsqueeze_651, unsqueeze_652, unsqueeze_653, unsqueeze_654, unsqueeze_655, unsqueeze_656, unsqueeze_657, unsqueeze_658, unsqueeze_659, unsqueeze_660, unsqueeze_661, unsqueeze_662, unsqueeze_663, unsqueeze_664, unsqueeze_665, unsqueeze_666, unsqueeze_667, unsqueeze_668, unsqueeze_669, unsqueeze_670, unsqueeze_671, unsqueeze_672, unsqueeze_673, unsqueeze_674, unsqueeze_675, unsqueeze_676, unsqueeze_677, unsqueeze_678, unsqueeze_679, unsqueeze_680, unsqueeze_681, unsqueeze_682, unsqueeze_683, unsqueeze_684, unsqueeze_685, unsqueeze_686, unsqueeze_687, unsqueeze_688, unsqueeze_689, unsqueeze_690, unsqueeze_691, unsqueeze_692, unsqueeze_693, unsqueeze_694, unsqueeze_695, unsqueeze_696, unsqueeze_697, unsqueeze_698, unsqueeze_699, unsqueeze_700, unsqueeze_701, unsqueeze_702, unsqueeze_703, unsqueeze_704, unsqueeze_705, unsqueeze_706, unsqueeze_707, unsqueeze_708, unsqueeze_709, unsqueeze_710, unsqueeze_711, unsqueeze_712, unsqueeze_713, unsqueeze_714, unsqueeze_715, permute_289, permute_290, permute_291, permute_299, permute_300, permute_301, permute_302, rsqrt_87, view_625, mm_160, view_627, unsqueeze_722, unsqueeze_723, unsqueeze_724, unsqueeze_725, unsqueeze_726, unsqueeze_727, unsqueeze_728, unsqueeze_729, unsqueeze_730, unsqueeze_731, unsqueeze_732, unsqueeze_733, unsqueeze_734, unsqueeze_735, unsqueeze_736, unsqueeze_737, unsqueeze_738, unsqueeze_739, unsqueeze_740, unsqueeze_741, unsqueeze_742, unsqueeze_743, unsqueeze_744, unsqueeze_745, unsqueeze_746, unsqueeze_747, unsqueeze_748, unsqueeze_749, unsqueeze_750, unsqueeze_751, unsqueeze_752, unsqueeze_753, unsqueeze_754, unsqueeze_755, unsqueeze_756, unsqueeze_757, unsqueeze_758, unsqueeze_759, unsqueeze_760, unsqueeze_761, unsqueeze_762, unsqueeze_763, unsqueeze_764, unsqueeze_765, unsqueeze_766, unsqueeze_767, unsqueeze_768, unsqueeze_769, unsqueeze_770, unsqueeze_771, unsqueeze_772, unsqueeze_773, unsqueeze_774, unsqueeze_775, unsqueeze_776, unsqueeze_777, unsqueeze_778, unsqueeze_779, unsqueeze_780, unsqueeze_781, unsqueeze_782, unsqueeze_783, unsqueeze_784, unsqueeze_785, unsqueeze_786, unsqueeze_787, unsqueeze_788, unsqueeze_789, unsqueeze_790, unsqueeze_791, unsqueeze_792, unsqueeze_793, permute_306, permute_307, permute_308, permute_316, permute_317, permute_318, permute_319, rsqrt_92, view_660, mm_169, view_662, unsqueeze_800, unsqueeze_801, unsqueeze_802, unsqueeze_803, unsqueeze_804, unsqueeze_805, unsqueeze_806, unsqueeze_807, unsqueeze_808, unsqueeze_809, unsqueeze_810, unsqueeze_811, unsqueeze_812, unsqueeze_813, unsqueeze_814, unsqueeze_815, unsqueeze_816, unsqueeze_817, unsqueeze_818, unsqueeze_819, unsqueeze_820, unsqueeze_821, unsqueeze_822, unsqueeze_823, unsqueeze_824, unsqueeze_825, unsqueeze_826, unsqueeze_827, unsqueeze_828, unsqueeze_829, unsqueeze_830, unsqueeze_831, unsqueeze_832, unsqueeze_833, unsqueeze_834, unsqueeze_835, unsqueeze_836, unsqueeze_837, unsqueeze_838, unsqueeze_839, unsqueeze_840, unsqueeze_841, unsqueeze_842, unsqueeze_843, unsqueeze_844, unsqueeze_845, unsqueeze_846, unsqueeze_847, unsqueeze_848, unsqueeze_849, unsqueeze_850, unsqueeze_851, unsqueeze_852, unsqueeze_853, unsqueeze_854, unsqueeze_855, unsqueeze_856, unsqueeze_857, unsqueeze_858, unsqueeze_859, unsqueeze_860, unsqueeze_861, unsqueeze_862, unsqueeze_863, unsqueeze_864, unsqueeze_865, unsqueeze_866, unsqueeze_867, unsqueeze_868, unsqueeze_869, unsqueeze_870, unsqueeze_871, unsqueeze_872, unsqueeze_873, unsqueeze_874, unsqueeze_875, permute_323, permute_324, permute_325, permute_333, permute_334, permute_335, permute_336, rsqrt_97, view_695, mm_178, view_697, unsqueeze_882, unsqueeze_883, unsqueeze_884, unsqueeze_885, unsqueeze_886, unsqueeze_887, unsqueeze_888, unsqueeze_889, unsqueeze_890, unsqueeze_891, unsqueeze_892, unsqueeze_893, unsqueeze_894, unsqueeze_895, unsqueeze_896, unsqueeze_897, unsqueeze_898, unsqueeze_899, unsqueeze_900, unsqueeze_901, unsqueeze_902, unsqueeze_903, unsqueeze_904, unsqueeze_905, unsqueeze_906, unsqueeze_907, unsqueeze_908, unsqueeze_909, unsqueeze_910, unsqueeze_911, unsqueeze_912, unsqueeze_913, unsqueeze_914, unsqueeze_915, unsqueeze_916, unsqueeze_917, unsqueeze_918, unsqueeze_919, unsqueeze_920, unsqueeze_921, unsqueeze_922, unsqueeze_923, unsqueeze_924, unsqueeze_925, unsqueeze_926, unsqueeze_927, unsqueeze_928, unsqueeze_929, unsqueeze_930, unsqueeze_931, unsqueeze_932, unsqueeze_933, unsqueeze_934, unsqueeze_935, unsqueeze_936, unsqueeze_937, unsqueeze_938, unsqueeze_939, unsqueeze_940, unsqueeze_941, unsqueeze_942, unsqueeze_943, unsqueeze_944, unsqueeze_945, unsqueeze_946, unsqueeze_947, unsqueeze_948, unsqueeze_949, unsqueeze_950, unsqueeze_951, unsqueeze_952, unsqueeze_953, unsqueeze_954, unsqueeze_955, unsqueeze_956, unsqueeze_957, unsqueeze_958, unsqueeze_959, unsqueeze_960, unsqueeze_961, permute_340, permute_341, permute_342, permute_350, permute_351, permute_352, permute_353, rsqrt_102, view_730, mm_187, view_732, unsqueeze_968, unsqueeze_969, unsqueeze_970, unsqueeze_971, unsqueeze_972, unsqueeze_973, unsqueeze_974, unsqueeze_975, unsqueeze_976, unsqueeze_977, unsqueeze_978, unsqueeze_979, unsqueeze_980, unsqueeze_981, unsqueeze_982, unsqueeze_983, unsqueeze_984, unsqueeze_985, unsqueeze_986, unsqueeze_987, unsqueeze_988, unsqueeze_989, unsqueeze_990, unsqueeze_991, unsqueeze_992, unsqueeze_993, unsqueeze_994, unsqueeze_995, unsqueeze_996, unsqueeze_997, unsqueeze_998, unsqueeze_999, unsqueeze_1000, unsqueeze_1001, unsqueeze_1002, unsqueeze_1003, unsqueeze_1004, unsqueeze_1005, unsqueeze_1006, unsqueeze_1007, unsqueeze_1008, unsqueeze_1009, unsqueeze_1010, unsqueeze_1011, unsqueeze_1012, unsqueeze_1013, unsqueeze_1014, unsqueeze_1015, unsqueeze_1016, unsqueeze_1017, unsqueeze_1018, unsqueeze_1019, unsqueeze_1020, unsqueeze_1021, unsqueeze_1022, unsqueeze_1023, unsqueeze_1024, unsqueeze_1025, unsqueeze_1026, unsqueeze_1027, unsqueeze_1028, unsqueeze_1029, unsqueeze_1030, unsqueeze_1031, unsqueeze_1032, unsqueeze_1033, unsqueeze_1034, unsqueeze_1035, unsqueeze_1036, unsqueeze_1037, unsqueeze_1038, unsqueeze_1039, unsqueeze_1040, unsqueeze_1041, unsqueeze_1042, unsqueeze_1043, unsqueeze_1044, unsqueeze_1045, unsqueeze_1046, unsqueeze_1047, unsqueeze_1048, unsqueeze_1049, unsqueeze_1050, unsqueeze_1051, permute_357, permute_358, permute_359, permute_367, permute_368, permute_369, permute_370, rsqrt_107, view_765, mm_default_3, view_767, unsqueeze_1058, unsqueeze_1059, unsqueeze_1060, unsqueeze_1061, unsqueeze_1062, unsqueeze_1063, unsqueeze_1064, unsqueeze_1065, unsqueeze_1066, unsqueeze_1067, unsqueeze_1068, unsqueeze_1069, unsqueeze_1070, unsqueeze_1071, unsqueeze_1072, unsqueeze_1073, unsqueeze_1074, unsqueeze_1075, unsqueeze_1076, unsqueeze_1077, unsqueeze_1078, unsqueeze_1079, unsqueeze_1080, unsqueeze_1081, unsqueeze_1082, unsqueeze_1083, unsqueeze_1084, unsqueeze_1085, unsqueeze_1086, unsqueeze_1087, unsqueeze_1088, unsqueeze_1089, unsqueeze_1090, unsqueeze_1091, unsqueeze_1092, unsqueeze_1093, unsqueeze_1094, unsqueeze_1095, unsqueeze_1096, unsqueeze_1097, unsqueeze_1098, unsqueeze_1099, unsqueeze_1100, unsqueeze_1101, unsqueeze_1102, unsqueeze_1103, unsqueeze_1104, unsqueeze_1105, unsqueeze_1106, unsqueeze_1107, unsqueeze_1108, unsqueeze_1109, unsqueeze_1110, unsqueeze_1111, unsqueeze_1112, unsqueeze_1113, unsqueeze_1114, unsqueeze_1115, unsqueeze_1116, unsqueeze_1117, unsqueeze_1118, unsqueeze_1119, unsqueeze_1120, unsqueeze_1121, unsqueeze_1122, unsqueeze_1123, unsqueeze_1124, unsqueeze_1125, unsqueeze_1126, unsqueeze_1127, unsqueeze_1128, unsqueeze_1129, unsqueeze_1130, unsqueeze_1131, unsqueeze_1132, unsqueeze_1133, unsqueeze_1134, unsqueeze_1135, unsqueeze_1136, unsqueeze_1137, unsqueeze_1138, unsqueeze_1139, unsqueeze_1140, unsqueeze_1141, unsqueeze_1142, unsqueeze_1143, unsqueeze_1144, unsqueeze_1145, permute_374, permute_375, permute_376, permute_384, permute_385, permute_386, permute_387, rsqrt_112, view_800, mm_205, view_802, unsqueeze_1152, unsqueeze_1153, unsqueeze_1154, unsqueeze_1155, unsqueeze_1156, unsqueeze_1157, unsqueeze_1158, unsqueeze_1159, unsqueeze_1160, unsqueeze_1161, unsqueeze_1162, unsqueeze_1163, unsqueeze_1164, unsqueeze_1165, unsqueeze_1166, unsqueeze_1167, unsqueeze_1168, unsqueeze_1169, unsqueeze_1170, unsqueeze_1171, unsqueeze_1172, unsqueeze_1173, unsqueeze_1174, unsqueeze_1175, unsqueeze_1176, unsqueeze_1177, unsqueeze_1178, unsqueeze_1179, unsqueeze_1180, unsqueeze_1181, unsqueeze_1182, unsqueeze_1183, unsqueeze_1184, unsqueeze_1185, unsqueeze_1186, unsqueeze_1187, unsqueeze_1188, unsqueeze_1189, unsqueeze_1190, unsqueeze_1191, unsqueeze_1192, unsqueeze_1193, unsqueeze_1194, unsqueeze_1195, unsqueeze_1196, unsqueeze_1197, unsqueeze_1198, unsqueeze_1199, unsqueeze_1200, unsqueeze_1201, unsqueeze_1202, unsqueeze_1203, unsqueeze_1204, unsqueeze_1205, unsqueeze_1206, unsqueeze_1207, unsqueeze_1208, unsqueeze_1209, unsqueeze_1210, unsqueeze_1211, unsqueeze_1212, unsqueeze_1213, unsqueeze_1214, unsqueeze_1215, unsqueeze_1216, unsqueeze_1217, unsqueeze_1218, unsqueeze_1219, unsqueeze_1220, unsqueeze_1221, unsqueeze_1222, unsqueeze_1223, unsqueeze_1224, unsqueeze_1225, unsqueeze_1226, unsqueeze_1227, unsqueeze_1228, unsqueeze_1229, unsqueeze_1230, unsqueeze_1231, unsqueeze_1232, unsqueeze_1233, unsqueeze_1234, unsqueeze_1235, unsqueeze_1236, unsqueeze_1237, unsqueeze_1238, unsqueeze_1239, unsqueeze_1240, unsqueeze_1241, unsqueeze_1242, unsqueeze_1243, permute_391, permute_392, permute_393, permute_401, permute_402, permute_403, permute_404, rsqrt_117, view_835, mm_214, view_837, unsqueeze_1274, unsqueeze_1275, unsqueeze_1276, unsqueeze_1277, unsqueeze_1278, unsqueeze_1279, unsqueeze_1280, unsqueeze_1281, unsqueeze_1282, unsqueeze_1283, unsqueeze_1284, unsqueeze_1285, unsqueeze_1286, unsqueeze_1287, unsqueeze_1288, unsqueeze_1289, unsqueeze_1290, unsqueeze_1291, unsqueeze_1292, unsqueeze_1293, unsqueeze_1294, unsqueeze_1295, unsqueeze_1296, unsqueeze_1297, rsqrt_118, view_840, convert_element_type_431, convert_element_type_432, permute_411, permute_416, permute_420, permute_465, permute_469, permute_514, permute_518, permute_563, permute_567, permute_612, permute_616, permute_661, permute_665, permute_710, permute_714, permute_759, permute_763, permute_808, permute_812, permute_857, permute_861, permute_906, permute_910, permute_955, permute_959, permute_1004, permute_1008, permute_1053, permute_1057, permute_1102, permute_1106, permute_1151, permute_1155, permute_1200, permute_1204, permute_1249, permute_1253, permute_1298, permute_1302, permute_1347, permute_1351, permute_1396, permute_1400, permute_1445, permute_1449, permute_1494, permute_1498, permute_1543, permute_1547, tangents_1 = args
    args.clear()
    assert_size_stride(primals_6, (2048, ), (1, ))
    assert_size_stride(primals_11, (2048, ), (1, ))
    assert_size_stride(primals_12, (2048, ), (1, ))
    assert_size_stride(primals_13, (2048, ), (1, ))
    assert_size_stride(primals_18, (2048, ), (1, ))
    assert_size_stride(primals_23, (2048, ), (1, ))
    assert_size_stride(primals_24, (2048, ), (1, ))
    assert_size_stride(primals_25, (2048, ), (1, ))
    assert_size_stride(primals_30, (2048, ), (1, ))
    assert_size_stride(primals_35, (2048, ), (1, ))
    assert_size_stride(primals_36, (2048, ), (1, ))
    assert_size_stride(primals_37, (2048, ), (1, ))
    assert_size_stride(primals_42, (2048, ), (1, ))
    assert_size_stride(primals_47, (2048, ), (1, ))
    assert_size_stride(primals_48, (2048, ), (1, ))
    assert_size_stride(primals_49, (2048, ), (1, ))
    assert_size_stride(primals_54, (2048, ), (1, ))
    assert_size_stride(primals_59, (2048, ), (1, ))
    assert_size_stride(primals_60, (2048, ), (1, ))
    assert_size_stride(primals_61, (2048, ), (1, ))
    assert_size_stride(primals_66, (2048, ), (1, ))
    assert_size_stride(primals_71, (2048, ), (1, ))
    assert_size_stride(primals_72, (2048, ), (1, ))
    assert_size_stride(primals_73, (2048, ), (1, ))
    assert_size_stride(primals_78, (2048, ), (1, ))
    assert_size_stride(primals_83, (2048, ), (1, ))
    assert_size_stride(primals_84, (2048, ), (1, ))
    assert_size_stride(primals_85, (2048, ), (1, ))
    assert_size_stride(primals_90, (2048, ), (1, ))
    assert_size_stride(primals_95, (2048, ), (1, ))
    assert_size_stride(primals_96, (2048, ), (1, ))
    assert_size_stride(primals_97, (2048, ), (1, ))
    assert_size_stride(primals_102, (2048, ), (1, ))
    assert_size_stride(primals_107, (2048, ), (1, ))
    assert_size_stride(primals_108, (2048, ), (1, ))
    assert_size_stride(primals_109, (2048, ), (1, ))
    assert_size_stride(primals_114, (2048, ), (1, ))
    assert_size_stride(primals_119, (2048, ), (1, ))
    assert_size_stride(primals_120, (2048, ), (1, ))
    assert_size_stride(primals_121, (2048, ), (1, ))
    assert_size_stride(primals_126, (2048, ), (1, ))
    assert_size_stride(primals_131, (2048, ), (1, ))
    assert_size_stride(primals_132, (2048, ), (1, ))
    assert_size_stride(primals_133, (2048, ), (1, ))
    assert_size_stride(primals_138, (2048, ), (1, ))
    assert_size_stride(primals_143, (2048, ), (1, ))
    assert_size_stride(primals_144, (2048, ), (1, ))
    assert_size_stride(primals_145, (2048, ), (1, ))
    assert_size_stride(primals_150, (2048, ), (1, ))
    assert_size_stride(primals_155, (2048, ), (1, ))
    assert_size_stride(primals_156, (2048, ), (1, ))
    assert_size_stride(primals_157, (2048, ), (1, ))
    assert_size_stride(primals_162, (2048, ), (1, ))
    assert_size_stride(primals_167, (2048, ), (1, ))
    assert_size_stride(primals_168, (2048, ), (1, ))
    assert_size_stride(primals_169, (2048, ), (1, ))
    assert_size_stride(primals_174, (2048, ), (1, ))
    assert_size_stride(primals_179, (2048, ), (1, ))
    assert_size_stride(primals_180, (2048, ), (1, ))
    assert_size_stride(primals_181, (2048, ), (1, ))
    assert_size_stride(primals_186, (2048, ), (1, ))
    assert_size_stride(primals_191, (2048, ), (1, ))
    assert_size_stride(primals_192, (2048, ), (1, ))
    assert_size_stride(primals_193, (2048, ), (1, ))
    assert_size_stride(primals_198, (2048, ), (1, ))
    assert_size_stride(primals_203, (2048, ), (1, ))
    assert_size_stride(primals_204, (2048, ), (1, ))
    assert_size_stride(primals_205, (2048, ), (1, ))
    assert_size_stride(primals_210, (2048, ), (1, ))
    assert_size_stride(primals_215, (2048, ), (1, ))
    assert_size_stride(primals_216, (2048, ), (1, ))
    assert_size_stride(primals_217, (2048, ), (1, ))
    assert_size_stride(primals_222, (2048, ), (1, ))
    assert_size_stride(primals_227, (2048, ), (1, ))
    assert_size_stride(primals_228, (2048, ), (1, ))
    assert_size_stride(primals_229, (2048, ), (1, ))
    assert_size_stride(primals_234, (2048, ), (1, ))
    assert_size_stride(primals_239, (2048, ), (1, ))
    assert_size_stride(primals_240, (2048, ), (1, ))
    assert_size_stride(primals_241, (2048, ), (1, ))
    assert_size_stride(primals_246, (2048, ), (1, ))
    assert_size_stride(primals_251, (2048, ), (1, ))
    assert_size_stride(primals_252, (2048, ), (1, ))
    assert_size_stride(primals_253, (2048, ), (1, ))
    assert_size_stride(primals_258, (2048, ), (1, ))
    assert_size_stride(primals_263, (2048, ), (1, ))
    assert_size_stride(primals_264, (2048, ), (1, ))
    assert_size_stride(primals_265, (2048, ), (1, ))
    assert_size_stride(primals_270, (2048, ), (1, ))
    assert_size_stride(primals_275, (2048, ), (1, ))
    assert_size_stride(primals_276, (2048, ), (1, ))
    assert_size_stride(primals_277, (2048, ), (1, ))
    assert_size_stride(primals_282, (2048, ), (1, ))
    assert_size_stride(primals_287, (2048, ), (1, ))
    assert_size_stride(primals_340, (3, 2048), (2049, 1))
    assert_size_stride(primals_341, (3, 2048), (2049, 1))
    assert_size_stride(embedding, (3, 2048, 2048), (4194304, 2048, 1))
    assert_size_stride(permute, (2048, 2048), (1, 2048))
    assert_size_stride(permute_1, (2048, 2048), (1, 2048))
    assert_size_stride(permute_2, (2048, 2048), (1, 2048))
    assert_size_stride(select_1, (1, 2048, 1, 64), (0, 128, 0, 2))
    assert_size_stride(select_3, (1, 2048, 1, 64), (0, 128, 0, 2))
    assert_size_stride(slice_3, (1, 1, 2048, 2048), (4194304, 4194304, 2048, 1))
    assert_size_stride(scalar_tensor, (), ())
    assert_size_stride(permute_10, (2048, 2048), (1, 2048))
    assert_size_stride(permute_11, (2048, 5632), (1, 2048))
    assert_size_stride(permute_12, (2048, 5632), (1, 2048))
    assert_size_stride(permute_13, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_2, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_30, (6144, 2048), (2048, 1))
    assert_size_stride(mm_7, (6144, 8), (8, 1))
    assert_size_stride(view_32, (6144, 8), (8, 1))
    assert_size_stride(unsqueeze_8, (3, 2048, 1), (4096, 2, 0))
    assert_size_stride(unsqueeze_9, (3, 2048, 1), (4096, 2, 0))
    assert_size_stride(unsqueeze_10, (3, 2048, 1), (4096, 2, 0))
    assert_size_stride(unsqueeze_11, (3, 2048, 1), (4096, 2, 0))
    assert_size_stride(permute_17, (2048, 2048), (1, 2048))
    assert_size_stride(permute_18, (2048, 2048), (1, 2048))
    assert_size_stride(permute_19, (2048, 2048), (1, 2048))
    assert_size_stride(permute_27, (2048, 2048), (1, 2048))
    assert_size_stride(permute_28, (2048, 5632), (1, 2048))
    assert_size_stride(permute_29, (2048, 5632), (1, 2048))
    assert_size_stride(permute_30, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_7, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_65, (6144, 2048), (2048, 1))
    assert_size_stride(mm_16, (6144, 12), (12, 1))
    assert_size_stride(view_67, (6144, 12), (12, 1))
    assert_size_stride(unsqueeze_18, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_19, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_20, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_21, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_22, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_23, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_24, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(unsqueeze_25, (3, 2048, 1), (6144, 3, 0))
    assert_size_stride(permute_34, (2048, 2048), (1, 2048))
    assert_size_stride(permute_35, (2048, 2048), (1, 2048))
    assert_size_stride(permute_36, (2048, 2048), (1, 2048))
    assert_size_stride(permute_44, (2048, 2048), (1, 2048))
    assert_size_stride(permute_45, (2048, 5632), (1, 2048))
    assert_size_stride(permute_46, (2048, 5632), (1, 2048))
    assert_size_stride(permute_47, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_12, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_100, (6144, 2048), (2048, 1))
    assert_size_stride(mm_25, (6144, 16), (16, 1))
    assert_size_stride(view_102, (6144, 16), (16, 1))
    assert_size_stride(unsqueeze_32, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_33, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_34, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_35, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_36, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_37, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_38, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_39, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_40, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_41, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_42, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(unsqueeze_43, (3, 2048, 1), (8192, 4, 0))
    assert_size_stride(permute_51, (2048, 2048), (1, 2048))
    assert_size_stride(permute_52, (2048, 2048), (1, 2048))
    assert_size_stride(permute_53, (2048, 2048), (1, 2048))
    assert_size_stride(permute_61, (2048, 2048), (1, 2048))
    assert_size_stride(permute_62, (2048, 5632), (1, 2048))
    assert_size_stride(permute_63, (2048, 5632), (1, 2048))
    assert_size_stride(permute_64, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_17, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_135, (6144, 2048), (2048, 1))
    assert_size_stride(mm_34, (6144, 20), (20, 1))
    assert_size_stride(view_137, (6144, 20), (20, 1))
    assert_size_stride(unsqueeze_50, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_51, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_52, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_53, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_54, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_55, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_56, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_57, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_58, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_59, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_60, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_61, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_62, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_63, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_64, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(unsqueeze_65, (3, 2048, 1), (10240, 5, 0))
    assert_size_stride(permute_68, (2048, 2048), (1, 2048))
    assert_size_stride(permute_69, (2048, 2048), (1, 2048))
    assert_size_stride(permute_70, (2048, 2048), (1, 2048))
    assert_size_stride(permute_78, (2048, 2048), (1, 2048))
    assert_size_stride(permute_79, (2048, 5632), (1, 2048))
    assert_size_stride(permute_80, (2048, 5632), (1, 2048))
    assert_size_stride(permute_81, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_22, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_170, (6144, 2048), (2048, 1))
    assert_size_stride(mm_43, (6144, 24), (24, 1))
    assert_size_stride(view_172, (6144, 24), (24, 1))
    assert_size_stride(unsqueeze_72, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_73, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_74, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_75, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_76, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_77, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_78, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_79, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_80, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_81, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_82, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_83, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_84, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_85, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_86, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_87, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_88, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_89, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_90, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(unsqueeze_91, (3, 2048, 1), (12288, 6, 0))
    assert_size_stride(permute_85, (2048, 2048), (1, 2048))
    assert_size_stride(permute_86, (2048, 2048), (1, 2048))
    assert_size_stride(permute_87, (2048, 2048), (1, 2048))
    assert_size_stride(permute_95, (2048, 2048), (1, 2048))
    assert_size_stride(permute_96, (2048, 5632), (1, 2048))
    assert_size_stride(permute_97, (2048, 5632), (1, 2048))
    assert_size_stride(permute_98, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_27, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_205, (6144, 2048), (2048, 1))
    assert_size_stride(mm_52, (6144, 28), (28, 1))
    assert_size_stride(view_207, (6144, 28), (28, 1))
    assert_size_stride(unsqueeze_98, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_99, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_100, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_101, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_102, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_103, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_104, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_105, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_106, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_107, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_108, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_109, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_110, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_111, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_112, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_113, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_114, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_115, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_116, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_117, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_118, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_119, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_120, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(unsqueeze_121, (3, 2048, 1), (14336, 7, 0))
    assert_size_stride(permute_102, (2048, 2048), (1, 2048))
    assert_size_stride(permute_103, (2048, 2048), (1, 2048))
    assert_size_stride(permute_104, (2048, 2048), (1, 2048))
    assert_size_stride(permute_112, (2048, 2048), (1, 2048))
    assert_size_stride(permute_113, (2048, 5632), (1, 2048))
    assert_size_stride(permute_114, (2048, 5632), (1, 2048))
    assert_size_stride(permute_115, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_32, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_240, (6144, 2048), (2048, 1))
    assert_size_stride(mm_61, (6144, 32), (32, 1))
    assert_size_stride(view_242, (6144, 32), (32, 1))
    assert_size_stride(unsqueeze_128, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_129, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_130, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_131, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_132, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_133, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_134, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_135, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_136, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_137, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_138, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_139, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_140, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_141, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_142, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_143, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_144, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_145, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_146, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_147, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_148, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_149, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_150, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_151, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_152, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_153, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_154, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(unsqueeze_155, (3, 2048, 1), (16384, 8, 0))
    assert_size_stride(permute_119, (2048, 2048), (1, 2048))
    assert_size_stride(permute_120, (2048, 2048), (1, 2048))
    assert_size_stride(permute_121, (2048, 2048), (1, 2048))
    assert_size_stride(permute_129, (2048, 2048), (1, 2048))
    assert_size_stride(permute_130, (2048, 5632), (1, 2048))
    assert_size_stride(permute_131, (2048, 5632), (1, 2048))
    assert_size_stride(permute_132, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_37, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_275, (6144, 2048), (2048, 1))
    assert_size_stride(mm_70, (6144, 36), (36, 1))
    assert_size_stride(view_277, (6144, 36), (36, 1))
    assert_size_stride(unsqueeze_162, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_163, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_164, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_165, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_166, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_167, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_168, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_169, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_170, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_171, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_172, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_173, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_174, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_175, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_176, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_177, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_178, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_179, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_180, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_181, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_182, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_183, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_184, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_185, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_186, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_187, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_188, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_189, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_190, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_191, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_192, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(unsqueeze_193, (3, 2048, 1), (18432, 9, 0))
    assert_size_stride(permute_136, (2048, 2048), (1, 2048))
    assert_size_stride(permute_137, (2048, 2048), (1, 2048))
    assert_size_stride(permute_138, (2048, 2048), (1, 2048))
    assert_size_stride(permute_146, (2048, 2048), (1, 2048))
    assert_size_stride(permute_147, (2048, 5632), (1, 2048))
    assert_size_stride(permute_148, (2048, 5632), (1, 2048))
    assert_size_stride(permute_149, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_42, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_310, (6144, 2048), (2048, 1))
    assert_size_stride(mm_79, (6144, 40), (40, 1))
    assert_size_stride(view_312, (6144, 40), (40, 1))
    assert_size_stride(unsqueeze_200, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_201, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_202, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_203, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_204, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_205, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_206, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_207, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_208, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_209, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_210, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_211, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_212, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_213, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_214, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_215, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_216, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_217, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_218, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_219, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_220, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_221, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_222, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_223, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_224, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_225, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_226, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_227, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_228, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_229, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_230, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_231, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_232, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_233, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_234, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(unsqueeze_235, (3, 2048, 1), (20480, 10, 0))
    assert_size_stride(permute_153, (2048, 2048), (1, 2048))
    assert_size_stride(permute_154, (2048, 2048), (1, 2048))
    assert_size_stride(permute_155, (2048, 2048), (1, 2048))
    assert_size_stride(permute_163, (2048, 2048), (1, 2048))
    assert_size_stride(permute_164, (2048, 5632), (1, 2048))
    assert_size_stride(permute_165, (2048, 5632), (1, 2048))
    assert_size_stride(permute_166, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_47, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_345, (6144, 2048), (2048, 1))
    assert_size_stride(mm_88, (6144, 44), (44, 1))
    assert_size_stride(view_347, (6144, 44), (44, 1))
    assert_size_stride(unsqueeze_242, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_243, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_244, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_245, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_246, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_247, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_248, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_249, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_250, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_251, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_252, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_253, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_254, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_255, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_256, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_257, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_258, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_259, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_260, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_261, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_262, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_263, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_264, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_265, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_266, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_267, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_268, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_269, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_270, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_271, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_272, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_273, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_274, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_275, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_276, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_277, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_278, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_279, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_280, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(unsqueeze_281, (3, 2048, 1), (22528, 11, 0))
    assert_size_stride(permute_170, (2048, 2048), (1, 2048))
    assert_size_stride(permute_171, (2048, 2048), (1, 2048))
    assert_size_stride(permute_172, (2048, 2048), (1, 2048))
    assert_size_stride(permute_180, (2048, 2048), (1, 2048))
    assert_size_stride(permute_181, (2048, 5632), (1, 2048))
    assert_size_stride(permute_182, (2048, 5632), (1, 2048))
    assert_size_stride(permute_183, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_52, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_380, (6144, 2048), (2048, 1))
    assert_size_stride(mm_97, (6144, 48), (48, 1))
    assert_size_stride(view_382, (6144, 48), (48, 1))
    assert_size_stride(unsqueeze_288, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_289, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_290, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_291, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_292, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_293, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_294, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_295, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_296, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_297, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_298, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_299, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_300, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_301, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_302, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_303, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_304, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_305, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_306, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_307, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_308, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_309, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_310, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_311, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_312, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_313, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_314, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_315, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_316, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_317, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_318, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_319, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_320, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_321, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_322, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_323, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_324, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_325, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_326, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_327, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_328, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_329, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_330, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(unsqueeze_331, (3, 2048, 1), (24576, 12, 0))
    assert_size_stride(permute_187, (2048, 2048), (1, 2048))
    assert_size_stride(permute_188, (2048, 2048), (1, 2048))
    assert_size_stride(permute_189, (2048, 2048), (1, 2048))
    assert_size_stride(permute_197, (2048, 2048), (1, 2048))
    assert_size_stride(permute_198, (2048, 5632), (1, 2048))
    assert_size_stride(permute_199, (2048, 5632), (1, 2048))
    assert_size_stride(permute_200, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_57, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_415, (6144, 2048), (2048, 1))
    assert_size_stride(mm_106, (6144, 52), (52, 1))
    assert_size_stride(view_417, (6144, 52), (52, 1))
    assert_size_stride(unsqueeze_338, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_339, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_340, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_341, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_342, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_343, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_344, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_345, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_346, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_347, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_348, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_349, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_350, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_351, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_352, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_353, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_354, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_355, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_356, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_357, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_358, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_359, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_360, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_361, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_362, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_363, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_364, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_365, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_366, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_367, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_368, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_369, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_370, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_371, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_372, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_373, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_374, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_375, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_376, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_377, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_378, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_379, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_380, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_381, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_382, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_383, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_384, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(unsqueeze_385, (3, 2048, 1), (26624, 13, 0))
    assert_size_stride(permute_204, (2048, 2048), (1, 2048))
    assert_size_stride(permute_205, (2048, 2048), (1, 2048))
    assert_size_stride(permute_206, (2048, 2048), (1, 2048))
    assert_size_stride(permute_214, (2048, 2048), (1, 2048))
    assert_size_stride(permute_215, (2048, 5632), (1, 2048))
    assert_size_stride(permute_216, (2048, 5632), (1, 2048))
    assert_size_stride(permute_217, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_62, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_450, (6144, 2048), (2048, 1))
    assert_size_stride(mm_115, (6144, 56), (56, 1))
    assert_size_stride(view_452, (6144, 56), (56, 1))
    assert_size_stride(unsqueeze_392, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_393, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_394, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_395, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_396, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_397, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_398, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_399, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_400, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_401, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_402, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_403, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_404, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_405, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_406, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_407, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_408, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_409, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_410, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_411, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_412, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_413, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_414, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_415, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_416, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_417, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_418, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_419, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_420, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_421, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_422, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_423, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_424, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_425, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_426, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_427, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_428, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_429, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_430, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_431, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_432, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_433, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_434, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_435, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_436, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_437, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_438, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_439, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_440, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_441, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_442, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(unsqueeze_443, (3, 2048, 1), (28672, 14, 0))
    assert_size_stride(permute_221, (2048, 2048), (1, 2048))
    assert_size_stride(permute_222, (2048, 2048), (1, 2048))
    assert_size_stride(permute_223, (2048, 2048), (1, 2048))
    assert_size_stride(permute_231, (2048, 2048), (1, 2048))
    assert_size_stride(permute_232, (2048, 5632), (1, 2048))
    assert_size_stride(permute_233, (2048, 5632), (1, 2048))
    assert_size_stride(permute_234, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_67, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_485, (6144, 2048), (2048, 1))
    assert_size_stride(mm_124, (6144, 60), (60, 1))
    assert_size_stride(view_487, (6144, 60), (60, 1))
    assert_size_stride(unsqueeze_450, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_451, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_452, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_453, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_454, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_455, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_456, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_457, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_458, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_459, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_460, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_461, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_462, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_463, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_464, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_465, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_466, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_467, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_468, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_469, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_470, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_471, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_472, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_473, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_474, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_475, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_476, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_477, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_478, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_479, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_480, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_481, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_482, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_483, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_484, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_485, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_486, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_487, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_488, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_489, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_490, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_491, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_492, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_493, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_494, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_495, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_496, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_497, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_498, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_499, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_500, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_501, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_502, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_503, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_504, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(unsqueeze_505, (3, 2048, 1), (30720, 15, 0))
    assert_size_stride(permute_238, (2048, 2048), (1, 2048))
    assert_size_stride(permute_239, (2048, 2048), (1, 2048))
    assert_size_stride(permute_240, (2048, 2048), (1, 2048))
    assert_size_stride(permute_248, (2048, 2048), (1, 2048))
    assert_size_stride(permute_249, (2048, 5632), (1, 2048))
    assert_size_stride(permute_250, (2048, 5632), (1, 2048))
    assert_size_stride(permute_251, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_72, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_520, (6144, 2048), (2048, 1))
    assert_size_stride(mm_133, (6144, 64), (64, 1))
    assert_size_stride(view_522, (6144, 64), (64, 1))
    assert_size_stride(unsqueeze_512, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_513, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_514, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_515, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_516, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_517, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_518, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_519, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_520, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_521, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_522, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_523, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_524, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_525, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_526, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_527, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_528, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_529, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_530, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_531, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_532, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_533, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_534, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_535, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_536, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_537, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_538, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_539, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_540, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_541, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_542, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_543, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_544, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_545, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_546, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_547, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_548, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_549, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_550, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_551, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_552, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_553, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_554, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_555, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_556, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_557, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_558, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_559, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_560, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_561, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_562, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_563, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_564, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_565, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_566, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_567, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_568, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_569, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_570, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(unsqueeze_571, (3, 2048, 1), (32768, 16, 0))
    assert_size_stride(permute_255, (2048, 2048), (1, 2048))
    assert_size_stride(permute_256, (2048, 2048), (1, 2048))
    assert_size_stride(permute_257, (2048, 2048), (1, 2048))
    assert_size_stride(permute_265, (2048, 2048), (1, 2048))
    assert_size_stride(permute_266, (2048, 5632), (1, 2048))
    assert_size_stride(permute_267, (2048, 5632), (1, 2048))
    assert_size_stride(permute_268, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_77, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_555, (6144, 2048), (2048, 1))
    assert_size_stride(mm_142, (6144, 68), (68, 1))
    assert_size_stride(view_557, (6144, 68), (68, 1))
    assert_size_stride(unsqueeze_578, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_579, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_580, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_581, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_582, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_583, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_584, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_585, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_586, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_587, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_588, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_589, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_590, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_591, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_592, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_593, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_594, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_595, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_596, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_597, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_598, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_599, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_600, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_601, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_602, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_603, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_604, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_605, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_606, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_607, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_608, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_609, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_610, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_611, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_612, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_613, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_614, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_615, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_616, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_617, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_618, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_619, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_620, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_621, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_622, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_623, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_624, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_625, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_626, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_627, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_628, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_629, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_630, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_631, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_632, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_633, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_634, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_635, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_636, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_637, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_638, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_639, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_640, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(unsqueeze_641, (3, 2048, 1), (34816, 17, 0))
    assert_size_stride(permute_272, (2048, 2048), (1, 2048))
    assert_size_stride(permute_273, (2048, 2048), (1, 2048))
    assert_size_stride(permute_274, (2048, 2048), (1, 2048))
    assert_size_stride(permute_282, (2048, 2048), (1, 2048))
    assert_size_stride(permute_283, (2048, 5632), (1, 2048))
    assert_size_stride(permute_284, (2048, 5632), (1, 2048))
    assert_size_stride(permute_285, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_82, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_590, (6144, 2048), (2048, 1))
    assert_size_stride(mm_151, (6144, 72), (72, 1))
    assert_size_stride(view_592, (6144, 72), (72, 1))
    assert_size_stride(unsqueeze_648, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_649, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_650, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_651, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_652, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_653, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_654, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_655, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_656, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_657, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_658, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_659, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_660, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_661, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_662, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_663, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_664, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_665, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_666, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_667, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_668, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_669, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_670, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_671, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_672, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_673, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_674, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_675, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_676, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_677, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_678, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_679, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_680, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_681, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_682, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_683, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_684, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_685, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_686, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_687, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_688, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_689, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_690, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_691, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_692, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_693, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_694, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_695, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_696, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_697, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_698, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_699, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_700, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_701, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_702, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_703, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_704, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_705, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_706, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_707, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_708, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_709, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_710, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_711, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_712, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_713, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_714, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(unsqueeze_715, (3, 2048, 1), (36864, 18, 0))
    assert_size_stride(permute_289, (2048, 2048), (1, 2048))
    assert_size_stride(permute_290, (2048, 2048), (1, 2048))
    assert_size_stride(permute_291, (2048, 2048), (1, 2048))
    assert_size_stride(permute_299, (2048, 2048), (1, 2048))
    assert_size_stride(permute_300, (2048, 5632), (1, 2048))
    assert_size_stride(permute_301, (2048, 5632), (1, 2048))
    assert_size_stride(permute_302, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_87, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_625, (6144, 2048), (2048, 1))
    assert_size_stride(mm_160, (6144, 76), (76, 1))
    assert_size_stride(view_627, (6144, 76), (76, 1))
    assert_size_stride(unsqueeze_722, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_723, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_724, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_725, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_726, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_727, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_728, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_729, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_730, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_731, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_732, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_733, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_734, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_735, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_736, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_737, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_738, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_739, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_740, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_741, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_742, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_743, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_744, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_745, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_746, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_747, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_748, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_749, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_750, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_751, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_752, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_753, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_754, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_755, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_756, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_757, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_758, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_759, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_760, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_761, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_762, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_763, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_764, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_765, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_766, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_767, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_768, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_769, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_770, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_771, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_772, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_773, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_774, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_775, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_776, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_777, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_778, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_779, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_780, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_781, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_782, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_783, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_784, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_785, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_786, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_787, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_788, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_789, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_790, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_791, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_792, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(unsqueeze_793, (3, 2048, 1), (38912, 19, 0))
    assert_size_stride(permute_306, (2048, 2048), (1, 2048))
    assert_size_stride(permute_307, (2048, 2048), (1, 2048))
    assert_size_stride(permute_308, (2048, 2048), (1, 2048))
    assert_size_stride(permute_316, (2048, 2048), (1, 2048))
    assert_size_stride(permute_317, (2048, 5632), (1, 2048))
    assert_size_stride(permute_318, (2048, 5632), (1, 2048))
    assert_size_stride(permute_319, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_92, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_660, (6144, 2048), (2048, 1))
    assert_size_stride(mm_169, (6144, 80), (80, 1))
    assert_size_stride(view_662, (6144, 80), (80, 1))
    assert_size_stride(unsqueeze_800, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_801, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_802, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_803, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_804, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_805, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_806, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_807, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_808, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_809, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_810, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_811, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_812, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_813, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_814, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_815, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_816, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_817, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_818, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_819, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_820, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_821, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_822, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_823, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_824, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_825, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_826, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_827, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_828, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_829, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_830, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_831, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_832, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_833, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_834, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_835, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_836, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_837, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_838, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_839, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_840, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_841, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_842, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_843, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_844, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_845, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_846, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_847, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_848, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_849, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_850, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_851, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_852, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_853, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_854, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_855, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_856, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_857, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_858, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_859, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_860, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_861, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_862, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_863, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_864, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_865, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_866, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_867, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_868, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_869, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_870, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_871, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_872, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_873, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_874, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(unsqueeze_875, (3, 2048, 1), (40960, 20, 0))
    assert_size_stride(permute_323, (2048, 2048), (1, 2048))
    assert_size_stride(permute_324, (2048, 2048), (1, 2048))
    assert_size_stride(permute_325, (2048, 2048), (1, 2048))
    assert_size_stride(permute_333, (2048, 2048), (1, 2048))
    assert_size_stride(permute_334, (2048, 5632), (1, 2048))
    assert_size_stride(permute_335, (2048, 5632), (1, 2048))
    assert_size_stride(permute_336, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_97, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_695, (6144, 2048), (2048, 1))
    assert_size_stride(mm_178, (6144, 84), (84, 1))
    assert_size_stride(view_697, (6144, 84), (84, 1))
    assert_size_stride(unsqueeze_882, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_883, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_884, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_885, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_886, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_887, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_888, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_889, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_890, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_891, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_892, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_893, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_894, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_895, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_896, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_897, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_898, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_899, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_900, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_901, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_902, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_903, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_904, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_905, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_906, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_907, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_908, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_909, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_910, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_911, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_912, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_913, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_914, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_915, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_916, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_917, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_918, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_919, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_920, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_921, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_922, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_923, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_924, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_925, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_926, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_927, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_928, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_929, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_930, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_931, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_932, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_933, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_934, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_935, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_936, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_937, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_938, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_939, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_940, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_941, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_942, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_943, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_944, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_945, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_946, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_947, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_948, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_949, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_950, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_951, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_952, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_953, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_954, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_955, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_956, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_957, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_958, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_959, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_960, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(unsqueeze_961, (3, 2048, 1), (43008, 21, 0))
    assert_size_stride(permute_340, (2048, 2048), (1, 2048))
    assert_size_stride(permute_341, (2048, 2048), (1, 2048))
    assert_size_stride(permute_342, (2048, 2048), (1, 2048))
    assert_size_stride(permute_350, (2048, 2048), (1, 2048))
    assert_size_stride(permute_351, (2048, 5632), (1, 2048))
    assert_size_stride(permute_352, (2048, 5632), (1, 2048))
    assert_size_stride(permute_353, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_102, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_730, (6144, 2048), (2048, 1))
    assert_size_stride(mm_187, (6144, 88), (88, 1))
    assert_size_stride(view_732, (6144, 88), (88, 1))
    assert_size_stride(unsqueeze_968, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_969, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_970, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_971, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_972, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_973, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_974, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_975, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_976, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_977, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_978, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_979, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_980, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_981, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_982, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_983, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_984, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_985, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_986, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_987, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_988, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_989, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_990, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_991, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_992, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_993, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_994, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_995, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_996, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_997, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_998, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_999, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1000, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1001, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1002, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1003, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1004, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1005, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1006, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1007, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1008, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1009, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1010, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1011, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1012, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1013, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1014, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1015, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1016, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1017, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1018, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1019, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1020, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1021, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1022, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1023, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1024, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1025, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1026, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1027, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1028, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1029, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1030, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1031, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1032, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1033, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1034, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1035, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1036, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1037, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1038, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1039, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1040, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1041, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1042, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1043, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1044, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1045, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1046, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1047, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1048, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1049, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1050, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(unsqueeze_1051, (3, 2048, 1), (45056, 22, 0))
    assert_size_stride(permute_357, (2048, 2048), (1, 2048))
    assert_size_stride(permute_358, (2048, 2048), (1, 2048))
    assert_size_stride(permute_359, (2048, 2048), (1, 2048))
    assert_size_stride(permute_367, (2048, 2048), (1, 2048))
    assert_size_stride(permute_368, (2048, 5632), (1, 2048))
    assert_size_stride(permute_369, (2048, 5632), (1, 2048))
    assert_size_stride(permute_370, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_107, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_765, (6144, 2048), (2048, 1))
    assert_size_stride(mm_default_3, (6144, 96), (96, 1))
    assert_size_stride(view_767, (6144, 92), (92, 1))
    assert_size_stride(unsqueeze_1058, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1059, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1060, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1061, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1062, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1063, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1064, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1065, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1066, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1067, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1068, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1069, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1070, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1071, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1072, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1073, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1074, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1075, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1076, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1077, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1078, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1079, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1080, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1081, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1082, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1083, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1084, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1085, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1086, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1087, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1088, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1089, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1090, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1091, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1092, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1093, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1094, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1095, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1096, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1097, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1098, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1099, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1100, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1101, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1102, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1103, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1104, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1105, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1106, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1107, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1108, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1109, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1110, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1111, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1112, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1113, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1114, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1115, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1116, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1117, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1118, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1119, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1120, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1121, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1122, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1123, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1124, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1125, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1126, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1127, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1128, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1129, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1130, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1131, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1132, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1133, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1134, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1135, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1136, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1137, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1138, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1139, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1140, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1141, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1142, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1143, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1144, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(unsqueeze_1145, (3, 2048, 1), (47104, 23, 0))
    assert_size_stride(permute_374, (2048, 2048), (1, 2048))
    assert_size_stride(permute_375, (2048, 2048), (1, 2048))
    assert_size_stride(permute_376, (2048, 2048), (1, 2048))
    assert_size_stride(permute_384, (2048, 2048), (1, 2048))
    assert_size_stride(permute_385, (2048, 5632), (1, 2048))
    assert_size_stride(permute_386, (2048, 5632), (1, 2048))
    assert_size_stride(permute_387, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_112, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_800, (6144, 2048), (2048, 1))
    assert_size_stride(mm_205, (6144, 96), (96, 1))
    assert_size_stride(view_802, (6144, 96), (96, 1))
    assert_size_stride(unsqueeze_1152, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1153, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1154, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1155, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1156, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1157, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1158, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1159, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1160, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1161, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1162, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1163, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1164, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1165, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1166, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1167, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1168, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1169, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1170, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1171, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1172, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1173, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1174, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1175, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1176, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1177, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1178, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1179, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1180, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1181, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1182, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1183, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1184, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1185, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1186, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1187, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1188, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1189, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1190, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1191, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1192, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1193, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1194, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1195, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1196, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1197, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1198, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1199, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1200, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1201, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1202, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1203, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1204, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1205, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1206, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1207, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1208, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1209, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1210, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1211, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1212, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1213, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1214, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1215, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1216, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1217, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1218, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1219, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1220, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1221, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1222, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1223, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1224, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1225, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1226, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1227, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1228, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1229, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1230, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1231, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1232, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1233, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1234, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1235, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1236, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1237, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1238, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1239, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1240, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1241, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1242, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(unsqueeze_1243, (3, 2048, 1), (49152, 24, 0))
    assert_size_stride(permute_391, (2048, 2048), (1, 2048))
    assert_size_stride(permute_392, (2048, 2048), (1, 2048))
    assert_size_stride(permute_393, (2048, 2048), (1, 2048))
    assert_size_stride(permute_401, (2048, 2048), (1, 2048))
    assert_size_stride(permute_402, (2048, 5632), (1, 2048))
    assert_size_stride(permute_403, (2048, 5632), (1, 2048))
    assert_size_stride(permute_404, (5632, 2048), (1, 5632))
    assert_size_stride(rsqrt_117, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_835, (6144, 2048), (2048, 1))
    assert_size_stride(mm_214, (6144, 100), (100, 1))
    assert_size_stride(view_837, (6144, 100), (100, 1))
    assert_size_stride(unsqueeze_1274, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1275, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1276, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1277, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1278, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1279, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1280, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1281, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1282, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1283, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1284, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1285, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1286, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1287, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1288, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1289, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1290, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1291, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1292, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1293, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1294, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1295, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1296, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(unsqueeze_1297, (3, 2048, 1), (51200, 25, 0))
    assert_size_stride(rsqrt_118, (3, 2048, 1), (2048, 1, 1))
    assert_size_stride(view_840, (6144, 2048), (2048, 1))
    assert_size_stride(convert_element_type_431, (6144, 50257), (50257, 1))
    assert_size_stride(convert_element_type_432, (), ())
    assert_size_stride(permute_411, (50257, 2048), (2048, 1))
    assert_size_stride(permute_416, (100, 100), (100, 1))
    assert_size_stride(permute_420, (100, 2048), (2048, 1))
    assert_size_stride(permute_465, (96, 96), (96, 1))
    assert_size_stride(permute_469, (96, 2048), (2048, 1))
    assert_size_stride(permute_514, (92, 92), (92, 1))
    assert_size_stride(permute_518, (92, 2048), (2048, 1))
    assert_size_stride(permute_563, (88, 88), (88, 1))
    assert_size_stride(permute_567, (88, 2048), (2048, 1))
    assert_size_stride(permute_612, (84, 84), (84, 1))
    assert_size_stride(permute_616, (84, 2048), (2048, 1))
    assert_size_stride(permute_661, (80, 80), (80, 1))
    assert_size_stride(permute_665, (80, 2048), (2048, 1))
    assert_size_stride(permute_710, (76, 76), (76, 1))
    assert_size_stride(permute_714, (76, 2048), (2048, 1))
    assert_size_stride(permute_759, (72, 72), (72, 1))
    assert_size_stride(permute_763, (72, 2048), (2048, 1))
    assert_size_stride(permute_808, (68, 68), (68, 1))
    assert_size_stride(permute_812, (68, 2048), (2048, 1))
    assert_size_stride(permute_857, (64, 64), (64, 1))
    assert_size_stride(permute_861, (64, 2048), (2048, 1))
    assert_size_stride(permute_906, (60, 60), (60, 1))
    assert_size_stride(permute_910, (60, 2048), (2048, 1))
    assert_size_stride(permute_955, (56, 56), (56, 1))
    assert_size_stride(permute_959, (56, 2048), (2048, 1))
    assert_size_stride(permute_1004, (52, 52), (52, 1))
    assert_size_stride(permute_1008, (52, 2048), (2048, 1))
    assert_size_stride(permute_1053, (48, 48), (48, 1))
    assert_size_stride(permute_1057, (48, 2048), (2048, 1))
    assert_size_stride(permute_1102, (44, 44), (44, 1))
    assert_size_stride(permute_1106, (44, 2048), (2048, 1))
    assert_size_stride(permute_1151, (40, 40), (40, 1))
    assert_size_stride(permute_1155, (40, 2048), (2048, 1))
    assert_size_stride(permute_1200, (36, 36), (36, 1))
    assert_size_stride(permute_1204, (36, 2048), (2048, 1))
    assert_size_stride(permute_1249, (32, 32), (32, 1))
    assert_size_stride(permute_1253, (32, 2048), (2048, 1))
    assert_size_stride(permute_1298, (28, 28), (28, 1))
    assert_size_stride(permute_1302, (28, 2048), (2048, 1))
    assert_size_stride(permute_1347, (24, 24), (24, 1))
    assert_size_stride(permute_1351, (24, 2048), (2048, 1))
    assert_size_stride(permute_1396, (20, 20), (20, 1))
    assert_size_stride(permute_1400, (20, 2048), (2048, 1))
    assert_size_stride(permute_1445, (16, 16), (16, 1))
    assert_size_stride(permute_1449, (16, 2048), (2048, 1))
    assert_size_stride(permute_1494, (12, 12), (12, 1))
    assert_size_stride(permute_1498, (12, 2048), (2048, 1))
    assert_size_stride(permute_1543, (8, 8), (8, 1))
    assert_size_stride(permute_1547, (8, 2048), (2048, 1))
    assert_size_stride(tangents_1, (), ())
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0) # no-op to ensure context
        print_mem(s='start')
        buf0 = empty_strided((6144, 50257), (50257, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_backward, aten.nll_loss_forward]
        stream0 = get_cuda_stream(0)
        triton_poi_fused_nll_loss_backward_nll_loss_forward_0.run(buf0, 308779008, grid=grid(308779008), stream=stream0)
        # Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_backward, aten.nll_loss_forward]
        triton_poi_fused_nll_loss_backward_nll_loss_forward_1.run(primals_341, buf0, 6144, grid=grid(6144), stream=stream0)
        buf3 = empty_strided((6144, 50257), (50257, 1), device='cuda', dtype=torch.float16)
        buf10 = empty_strided((6144, 50264), (50264, 1), device='cuda', dtype=torch.float16)
        buf8 = reinterpret_tensor(buf10, (6144, 50257), (50264, 1), 0)  # alias
        # Source Nodes: [cross_entropy], Original ATen: [aten._log_softmax_backward_data, aten.nll_loss_backward, aten.nll_loss_forward]
        triton_red_fused__log_softmax_backward_data_nll_loss_backward_nll_loss_forward_2.run(buf0, primals_341, tangents_1, convert_element_type_432, convert_element_type_431, buf3, buf8, 6144, 50257, grid=grid(6144), stream=stream0)
        del buf0
        del convert_element_type_431
        del convert_element_type_432
        del primals_341
        del tangents_1
        buf6 = empty_strided((50264, 6144), (6144, 1), device='cuda', dtype=torch.float16)
        buf4 = reinterpret_tensor(buf6, (50257, 6144), (6144, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_3.run(buf3, buf4, 50257, 6144, grid=grid(50257, 6144), stream=stream0)
        del buf3
        buf5 = reinterpret_tensor(buf6, (7, 6144), (6144, 1), 308779008)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_4.run(buf5, 43008, grid=grid(43008), stream=stream0)
        del buf4
        del buf5
        buf7 = empty_strided((50264, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf6, view_840, out=buf7)
        del buf6
        del view_840
        buf9 = reinterpret_tensor(buf10, (6144, 7), (50264, 1), 50257)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_5.run(buf9, 43008, grid=grid(43008), stream=stream0)
        buf13 = empty_strided((50264, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        buf11 = reinterpret_tensor(buf13, (50257, 2048), (2048, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_6.run(permute_411, buf11, 102926336, grid=grid(102926336), stream=stream0)
        del buf8
        del buf9
        del permute_411
        buf12 = reinterpret_tensor(buf13, (7, 2048), (2048, 1), 102926336)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_7.run(buf12, 14336, grid=grid(14336), stream=stream0)
        del buf11
        del buf12
        buf14 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf10, buf13, out=buf14)
        del buf10
        del buf13
        buf15 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), permute_1, out=buf15)
        buf19 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), permute, out=buf19)
        buf18 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf16 = reinterpret_tensor(buf18, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf17 = reinterpret_tensor(buf18, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf22 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf20 = reinterpret_tensor(buf22, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf21 = reinterpret_tensor(buf22, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf15, select_1, select_3, buf19, buf16, buf17, buf20, buf21, 6291456, grid=grid(6291456), stream=stream0)
        buf23 = reinterpret_tensor(buf19, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf19  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf22, buf23, 12582912, grid=grid(12582912), stream=stream0)
        del buf16
        del buf17
        del buf20
        del buf21
        buf24 = reinterpret_tensor(buf15, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf15  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf18, buf24, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf25 = empty_strided((48, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf23, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf24, (48, 128, 2048), (262144, 2048, 1), 0), out=buf25)
        buf28 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_11, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax1')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf25, scalar_tensor, buf28, 98304, 2048, grid=grid(98304), stream=stream0)
        buf29 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), permute_2, out=buf29)
        buf30 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf29, buf30, 12582912, grid=grid(12582912), stream=stream0)
        buf31 = reinterpret_tensor(buf29, (48, 2048, 128), (262144, 128, 1)); del buf29  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf28, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf30, (48, 2048, 128), (262144, 128, 1), 0), out=buf31)
        buf32 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf31, buf32, 12582912, grid=grid(12582912), stream=stream0)
        buf33 = reinterpret_tensor(buf31, (6144, 2048), (2048, 1)); del buf31  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf32, permute_10, out=buf33)
        buf34 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf75 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf81 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf93 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf35 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_2, add_3, add_4, float_1, float_2, float_3, float_4, mean, mean_1, mean_2, mul, mul_1, mul_12, mul_13, mul_14, mul_2, mul_3, mul_6, rsqrt_1, type_as_3], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_14.run(embedding, buf33, unsqueeze_9, unsqueeze_8, unsqueeze_10, primals_6, buf34, buf75, buf81, buf93, buf35, 6144, 2048, grid=grid(6144), stream=stream0)
        buf36 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf35, (6144, 2048), (2048, 1), 0), permute_11, out=buf36)
        buf37 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf35, (6144, 2048), (2048, 1), 0), permute_12, out=buf37)
        buf38 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_15, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf36, buf37, buf38, 34603008, grid=grid(34603008), stream=stream0)
        buf39 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf38, (6144, 5632), (5632, 1), 0), permute_13, out=buf39)
        buf40 = reinterpret_tensor(buf18, (3, 2048, 2048), (4194304, 2048, 1)); del buf18  # reuse
        buf47 = reinterpret_tensor(buf22, (3, 2048, 2048), (4194304, 2048, 1)); del buf22  # reuse
        buf60 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float32)
        buf76 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf82 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf94 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf41 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf42 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf48 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf49 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf61 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf62 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_11, add_12, add_13, add_14, add_2, add_3, add_4, add_5, add_6, add_8, add_9, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_10, mul_11, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_9, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_16.run(unsqueeze_20, embedding, unsqueeze_21, buf33, buf39, unsqueeze_18, unsqueeze_19, unsqueeze_22, unsqueeze_23, unsqueeze_9, buf75, primals_12, unsqueeze_8, buf81, primals_11, unsqueeze_10, buf93, primals_13, primals_24, primals_23, primals_25, buf40, buf47, buf60, buf76, buf82, buf94, buf41, buf42, buf48, buf49, buf61, buf62, 6144, 2048, grid=grid(6144), stream=stream0)
        buf43 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf42, (6144, 2048), (2048, 1), 0), permute_35, out=buf43)
        buf50 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf49, (6144, 2048), (2048, 1), 0), permute_34, out=buf50)
        buf77 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf76, (6144, 2048), (2048, 1), 0), permute_18, out=buf77)
        buf83 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf82, (6144, 2048), (2048, 1), 0), permute_17, out=buf83)
        buf46 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf44 = reinterpret_tensor(buf46, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf45 = reinterpret_tensor(buf46, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf53 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf51 = reinterpret_tensor(buf53, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf52 = reinterpret_tensor(buf53, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf80 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf78 = reinterpret_tensor(buf80, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf79 = reinterpret_tensor(buf80, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf86 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf84 = reinterpret_tensor(buf86, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf85 = reinterpret_tensor(buf86, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_17.run(buf43, select_1, select_3, buf50, buf77, buf83, buf44, buf45, buf51, buf52, buf78, buf79, buf84, buf85, 6291456, grid=grid(6291456), stream=stream0)
        buf54 = reinterpret_tensor(buf83, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf83  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf53, buf54, 12582912, grid=grid(12582912), stream=stream0)
        del buf44
        del buf45
        del buf51
        del buf52
        buf55 = reinterpret_tensor(buf77, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf77  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf46, buf55, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf56 = buf25; del buf25  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf54, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf55, (48, 128, 2048), (262144, 2048, 1), 0), out=buf56)
        buf87 = reinterpret_tensor(buf50, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf50  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf86, buf87, 12582912, grid=grid(12582912), stream=stream0)
        del buf84
        del buf85
        buf88 = reinterpret_tensor(buf43, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf43  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf80, buf88, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf78
        del buf79
        buf89 = empty_strided((48, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf87, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf88, (48, 128, 2048), (262144, 2048, 1), 0), out=buf89)
        buf59 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf92 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax2')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf56, scalar_tensor, buf89, buf59, buf92, 98304, 2048, grid=grid(98304), stream=stream0)
        buf63 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf62, (6144, 2048), (2048, 1), 0), permute_36, out=buf63)
        buf64 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf63, buf64, 12582912, grid=grid(12582912), stream=stream0)
        buf65 = reinterpret_tensor(buf63, (48, 2048, 128), (262144, 128, 1)); del buf63  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf59, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf64, (48, 2048, 128), (262144, 128, 1), 0), out=buf65)
        buf66 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf65, buf66, 12582912, grid=grid(12582912), stream=stream0)
        buf67 = reinterpret_tensor(buf65, (6144, 2048), (2048, 1)); del buf65  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf66, permute_44, out=buf67)
        buf95 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf94, (6144, 2048), (2048, 1), 0), permute_19, out=buf95)
        buf96 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf95, buf96, 12582912, grid=grid(12582912), stream=stream0)
        buf97 = reinterpret_tensor(buf95, (48, 2048, 128), (262144, 128, 1)); del buf95  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf92, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf96, (48, 2048, 128), (262144, 128, 1), 0), out=buf97)
        buf98 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf97, buf98, 12582912, grid=grid(12582912), stream=stream0)
        buf99 = reinterpret_tensor(buf97, (6144, 2048), (2048, 1)); del buf97  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf98, permute_27, out=buf99)
        buf100 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf101 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_19, mul_20, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_19.run(unsqueeze_11, embedding, buf99, primals_18, buf100, buf101, 6144, 2048, grid=grid(6144), stream=stream0)
        buf102 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf101, (6144, 2048), (2048, 1), 0), permute_28, out=buf102)
        buf103 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf101, (6144, 2048), (2048, 1), 0), permute_29, out=buf103)
        buf104 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf102, buf103, buf104, 34603008, grid=grid(34603008), stream=stream0)
        buf105 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf104, (6144, 5632), (5632, 1), 0), permute_30, out=buf105)
        buf68 = reinterpret_tensor(buf67, (3, 2048, 2048), (4194304, 2048, 1)); del buf67  # reuse
        buf106 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf114 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf69 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf70 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_12, add_14, add_15, add_18, add_19, add_3, add_32, add_33, add_34, add_36, add_37, add_38, add_5, float_6, mean_3, mul_12, mul_13, mul_18, mul_19, mul_20, mul_28, mul_29, mul_30, mul_32, mul_33, mul_34, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_20.run(buf68, unsqueeze_24, embedding, unsqueeze_25, buf33, buf39, unsqueeze_54, unsqueeze_55, unsqueeze_56, unsqueeze_11, buf99, buf105, unsqueeze_50, unsqueeze_51, unsqueeze_52, primals_30, buf106, buf114, buf69, buf70, 6144, 2048, grid=grid(6144), stream=stream0)
        buf71 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf70, (6144, 2048), (2048, 1), 0), permute_45, out=buf71)
        buf72 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf70, (6144, 2048), (2048, 1), 0), permute_46, out=buf72)
        buf73 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf71, buf72, buf73, 34603008, grid=grid(34603008), stream=stream0)
        buf74 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf73, (6144, 5632), (5632, 1), 0), permute_47, out=buf74)
        buf128 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf137 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf145 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf152 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf165 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf173 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf180 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf188 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf107 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf115 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf129 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf108 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf116 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf130 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf109 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf117 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf131 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf146 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf147 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf153 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf154 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf166 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf167 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_18, add_19, add_20, add_21, add_22, add_23, add_24, add_25, add_26, add_27, add_28, add_29, add_3, add_35, add_39, add_40, add_41, add_42, add_43, add_44, add_45, add_46, add_5, add_72, add_73, add_74, add_78, add_79, add_80, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_15, mul_16, mul_17, mul_18, mul_19, mul_2, mul_20, mul_21, mul_22, mul_23, mul_24, mul_25, mul_26, mul_3, mul_31, mul_35, mul_36, mul_37, mul_38, mul_39, mul_4, mul_40, mul_41, mul_42, mul_5, mul_6, mul_66, mul_67, mul_68, mul_7, mul_72, mul_73, mul_74, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_21.run(unsqueeze_58, embedding, unsqueeze_59, buf33, buf39, unsqueeze_60, unsqueeze_11, buf99, buf105, unsqueeze_62, unsqueeze_63, unsqueeze_64, unsqueeze_35, unsqueeze_36, unsqueeze_37, unsqueeze_32, unsqueeze_33, unsqueeze_34, unsqueeze_38, unsqueeze_39, unsqueeze_40, unsqueeze_41, unsqueeze_42, unsqueeze_43, unsqueeze_104, unsqueeze_105, unsqueeze_106, unsqueeze_98, unsqueeze_99, unsqueeze_100, buf106, unsqueeze_57, buf68, buf74, buf114, unsqueeze_53, unsqueeze_61, primals_48, primals_47, primals_49, primals_36, primals_35, primals_37, buf128, buf137, buf145, buf152, buf165, buf173, buf180, buf188, buf107, buf115, buf129, buf108, buf116, buf130, buf109, buf117, buf131, buf146, buf147, buf153, buf154, buf166, buf167, 6144, 2048, grid=grid(6144), stream=stream0)
        buf110 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf109, (6144, 2048), (2048, 1), 0), permute_69, out=buf110)
        buf118 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf117, (6144, 2048), (2048, 1), 0), permute_68, out=buf118)
        buf148 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf147, (6144, 2048), (2048, 1), 0), permute_52, out=buf148)
        buf155 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf154, (6144, 2048), (2048, 1), 0), permute_51, out=buf155)
        buf113 = buf80; del buf80  # reuse
        buf111 = reinterpret_tensor(buf113, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf112 = reinterpret_tensor(buf113, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf121 = buf86; del buf86  # reuse
        buf119 = reinterpret_tensor(buf121, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf120 = reinterpret_tensor(buf121, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf151 = buf46; del buf46  # reuse
        buf149 = reinterpret_tensor(buf151, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf150 = reinterpret_tensor(buf151, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf158 = buf53; del buf53  # reuse
        buf156 = reinterpret_tensor(buf158, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf157 = reinterpret_tensor(buf158, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_17.run(buf110, select_1, select_3, buf118, buf148, buf155, buf111, buf112, buf119, buf120, buf149, buf150, buf156, buf157, 6291456, grid=grid(6291456), stream=stream0)
        buf122 = reinterpret_tensor(buf155, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf155  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf121, buf122, 12582912, grid=grid(12582912), stream=stream0)
        del buf111
        del buf112
        del buf119
        del buf120
        buf123 = reinterpret_tensor(buf148, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf148  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf113, buf123, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf124 = buf89; del buf89  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf122, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf123, (48, 128, 2048), (262144, 2048, 1), 0), out=buf124)
        buf159 = reinterpret_tensor(buf118, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf118  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf158, buf159, 12582912, grid=grid(12582912), stream=stream0)
        del buf156
        del buf157
        buf160 = reinterpret_tensor(buf110, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf110  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf151, buf160, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf149
        del buf150
        buf161 = buf56; del buf56  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf159, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf160, (48, 128, 2048), (262144, 2048, 1), 0), out=buf161)
        buf127 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf164 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax3')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf124, scalar_tensor, buf161, buf127, buf164, 98304, 2048, grid=grid(98304), stream=stream0)
        buf132 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf131, (6144, 2048), (2048, 1), 0), permute_70, out=buf132)
        buf133 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf132, buf133, 12582912, grid=grid(12582912), stream=stream0)
        buf134 = reinterpret_tensor(buf132, (48, 2048, 128), (262144, 128, 1)); del buf132  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf127, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf133, (48, 2048, 128), (262144, 128, 1), 0), out=buf134)
        buf135 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf134, buf135, 12582912, grid=grid(12582912), stream=stream0)
        buf136 = reinterpret_tensor(buf134, (6144, 2048), (2048, 1)); del buf134  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf135, permute_78, out=buf136)
        buf138 = reinterpret_tensor(buf136, (3, 2048, 2048), (4194304, 2048, 1)); del buf136  # reuse
        buf139 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf140 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_20, add_47, add_48, add_49, float_6, mean_3, mul_18, mul_19, mul_20, mul_43, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_22.run(buf138, buf137, unsqueeze_65, buf68, buf74, primals_54, buf139, buf140, 6144, 2048, grid=grid(6144), stream=stream0)
        buf141 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf140, (6144, 2048), (2048, 1), 0), permute_79, out=buf141)
        buf142 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf140, (6144, 2048), (2048, 1), 0), permute_80, out=buf142)
        buf143 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf141, buf142, buf143, 34603008, grid=grid(34603008), stream=stream0)
        buf144 = reinterpret_tensor(buf137, (6144, 2048), (2048, 1)); del buf137  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf143, (6144, 5632), (5632, 1), 0), permute_81, out=buf144)
        buf168 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf167, (6144, 2048), (2048, 1), 0), permute_53, out=buf168)
        buf169 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf168, buf169, 12582912, grid=grid(12582912), stream=stream0)
        buf170 = reinterpret_tensor(buf168, (48, 2048, 128), (262144, 128, 1)); del buf168  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf164, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf169, (48, 2048, 128), (262144, 128, 1), 0), out=buf170)
        buf171 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf170, buf171, 12582912, grid=grid(12582912), stream=stream0)
        buf172 = reinterpret_tensor(buf170, (6144, 2048), (2048, 1)); del buf170  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf171, permute_61, out=buf172)
        buf174 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf175 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf173, buf172, primals_42, buf174, buf175, 6144, 2048, grid=grid(6144), stream=stream0)
        buf176 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf175, (6144, 2048), (2048, 1), 0), permute_62, out=buf176)
        buf177 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf175, (6144, 2048), (2048, 1), 0), permute_63, out=buf177)
        buf178 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf176, buf177, buf178, 34603008, grid=grid(34603008), stream=stream0)
        buf179 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf178, (6144, 5632), (5632, 1), 0), permute_64, out=buf179)
        buf250 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf258 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf267 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf202 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf211 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf181 = buf180; del buf180  # reuse
        buf189 = buf188; del buf188  # reuse
        buf203 = buf202; del buf202  # reuse
        buf212 = buf211; del buf211  # reuse
        buf220 = reinterpret_tensor(buf151, (3, 2048, 2048), (4194304, 2048, 1)); del buf151  # reuse
        buf228 = reinterpret_tensor(buf158, (3, 2048, 2048), (4194304, 2048, 1)); del buf158  # reuse
        buf242 = reinterpret_tensor(buf113, (3, 2048, 2048), (4194304, 2048, 1)); del buf113  # reuse
        buf221 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf222 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf229 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf230 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf243 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf244 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf182 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf183 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf190 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf191 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf204 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf205 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_129, add_130, add_136, add_137, add_138, add_20, add_3, add_31, add_33, add_5, add_50, add_51, add_52, add_53, add_54, add_55, add_56, add_57, add_58, add_59, add_60, add_61, add_62, add_63, add_64, add_65, add_66, add_67, add_75, add_76, add_77, add_81, add_82, add_83, add_84, add_85, add_86, add_87, add_88, add_89, add_90, add_91, add_92, add_93, add_94, add_95, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_120, mul_121, mul_122, mul_128, mul_129, mul_130, mul_2, mul_3, mul_4, mul_45, mul_46, mul_47, mul_48, mul_49, mul_5, mul_50, mul_51, mul_52, mul_53, mul_54, mul_55, mul_56, mul_57, mul_58, mul_59, mul_6, mul_60, mul_61, mul_62, mul_69, mul_7, mul_70, mul_71, mul_75, mul_76, mul_77, mul_78, mul_79, mul_8, mul_80, mul_81, mul_82, mul_83, mul_84, mul_85, mul_86, mul_87, mul_88, mul_89, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_24.run(buf181, buf189, buf203, buf212, unsqueeze_82, embedding, unsqueeze_83, buf33, buf39, unsqueeze_84, unsqueeze_11, buf99, buf105, unsqueeze_87, unsqueeze_88, unsqueeze_89, unsqueeze_170, unsqueeze_171, unsqueeze_172, unsqueeze_162, unsqueeze_163, unsqueeze_164, unsqueeze_110, unsqueeze_111, unsqueeze_112, unsqueeze_116, unsqueeze_117, unsqueeze_118, unsqueeze_77, unsqueeze_78, unsqueeze_79, unsqueeze_72, unsqueeze_73, unsqueeze_74, unsqueeze_107, buf68, buf74, unsqueeze_108, buf173, buf172, buf179, unsqueeze_109, buf138, buf144, unsqueeze_101, unsqueeze_102, unsqueeze_103, unsqueeze_113, unsqueeze_114, unsqueeze_115, unsqueeze_119, unsqueeze_120, unsqueeze_121, unsqueeze_80, unsqueeze_81, unsqueeze_75, unsqueeze_76, unsqueeze_85, unsqueeze_86, primals_60, primals_59, primals_61, primals_72, primals_71, primals_73, buf250, buf258, buf267, buf220, buf228, buf242, buf221, buf222, buf229, buf230, buf243, buf244, buf182, buf183, buf190, buf191, buf204, buf205, 6144, 2048, grid=grid(6144), stream=stream0)
        buf184 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf183, (6144, 2048), (2048, 1), 0), permute_103, out=buf184)
        buf192 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf191, (6144, 2048), (2048, 1), 0), permute_102, out=buf192)
        buf223 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf222, (6144, 2048), (2048, 1), 0), permute_86, out=buf223)
        buf231 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf230, (6144, 2048), (2048, 1), 0), permute_85, out=buf231)
        buf187 = buf121; del buf121  # reuse
        buf185 = reinterpret_tensor(buf187, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf186 = reinterpret_tensor(buf187, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf195 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf193 = reinterpret_tensor(buf195, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf194 = reinterpret_tensor(buf195, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf226 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf224 = reinterpret_tensor(buf226, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf225 = reinterpret_tensor(buf226, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf234 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf232 = reinterpret_tensor(buf234, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf233 = reinterpret_tensor(buf234, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_17.run(buf184, select_1, select_3, buf192, buf223, buf231, buf185, buf186, buf193, buf194, buf224, buf225, buf232, buf233, 6291456, grid=grid(6291456), stream=stream0)
        buf196 = reinterpret_tensor(buf231, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf231  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf195, buf196, 12582912, grid=grid(12582912), stream=stream0)
        del buf185
        del buf186
        del buf193
        del buf194
        buf197 = reinterpret_tensor(buf223, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf223  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf187, buf197, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf198 = buf161; del buf161  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf196, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf197, (48, 128, 2048), (262144, 2048, 1), 0), out=buf198)
        buf235 = reinterpret_tensor(buf192, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf192  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf234, buf235, 12582912, grid=grid(12582912), stream=stream0)
        del buf232
        del buf233
        buf236 = reinterpret_tensor(buf184, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf184  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf226, buf236, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf224
        del buf225
        buf237 = buf124; del buf124  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf235, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf236, (48, 128, 2048), (262144, 2048, 1), 0), out=buf237)
        buf201 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf240 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax4')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf198, scalar_tensor, buf237, buf201, buf240, 98304, 2048, grid=grid(98304), stream=stream0)
        buf206 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf205, (6144, 2048), (2048, 1), 0), permute_104, out=buf206)
        buf207 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf206, buf207, 12582912, grid=grid(12582912), stream=stream0)
        buf208 = reinterpret_tensor(buf206, (48, 2048, 128), (262144, 128, 1)); del buf206  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf201, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf207, (48, 2048, 128), (262144, 128, 1), 0), out=buf208)
        buf209 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf208, buf209, 12582912, grid=grid(12582912), stream=stream0)
        buf210 = reinterpret_tensor(buf208, (6144, 2048), (2048, 1)); del buf208  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf209, permute_112, out=buf210)
        buf213 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf214 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_96, add_97, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf212, buf210, primals_78, buf213, buf214, 6144, 2048, grid=grid(6144), stream=stream0)
        buf215 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf214, (6144, 2048), (2048, 1), 0), permute_113, out=buf215)
        buf216 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf214, (6144, 2048), (2048, 1), 0), permute_114, out=buf216)
        buf217 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf215, buf216, buf217, 34603008, grid=grid(34603008), stream=stream0)
        buf218 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf217, (6144, 5632), (5632, 1), 0), permute_115, out=buf218)
        buf245 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf244, (6144, 2048), (2048, 1), 0), permute_87, out=buf245)
        buf246 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf245, buf246, 12582912, grid=grid(12582912), stream=stream0)
        buf247 = reinterpret_tensor(buf245, (48, 2048, 128), (262144, 128, 1)); del buf245  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf240, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf246, (48, 2048, 128), (262144, 128, 1), 0), out=buf247)
        buf248 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf247, buf248, 12582912, grid=grid(12582912), stream=stream0)
        buf249 = reinterpret_tensor(buf247, (6144, 2048), (2048, 1)); del buf247  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf248, permute_95, out=buf249)
        buf282 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf292 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf301 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf310 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf251 = reinterpret_tensor(buf249, (3, 2048, 2048), (4194304, 2048, 1)); del buf249  # reuse
        buf259 = buf258; del buf258  # reuse
        buf268 = buf267; del buf267  # reuse
        buf283 = buf282; del buf282  # reuse
        buf293 = buf292; del buf292  # reuse
        buf302 = buf301; del buf301  # reuse
        buf311 = buf310; del buf310  # reuse
        buf252 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf253 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_100, add_101, add_102, add_103, add_105, add_106, add_107, add_108, add_109, add_110, add_12, add_131, add_132, add_133, add_139, add_140, add_141, add_144, add_145, add_146, add_147, add_148, add_149, add_152, add_153, add_154, add_155, add_156, add_157, add_20, add_3, add_31, add_33, add_5, add_50, add_68, add_69, add_70, add_71, add_98, add_99, float_6, mean_3, mul_100, mul_101, mul_102, mul_103, mul_123, mul_124, mul_125, mul_131, mul_132, mul_133, mul_136, mul_137, mul_138, mul_139, mul_140, mul_141, mul_144, mul_145, mul_146, mul_147, mul_148, mul_149, mul_18, mul_19, mul_20, mul_4, mul_63, mul_64, mul_91, mul_92, mul_93, mul_94, mul_95, mul_96, mul_98, mul_99, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_25.run(buf251, buf259, buf268, buf283, buf293, buf302, buf311, unsqueeze_178, embedding, unsqueeze_179, buf33, buf39, unsqueeze_180, unsqueeze_11, buf99, buf105, unsqueeze_186, unsqueeze_187, unsqueeze_188, unsqueeze_135, unsqueeze_136, unsqueeze_137, unsqueeze_128, unsqueeze_129, unsqueeze_130, buf250, unsqueeze_90, buf68, buf74, unsqueeze_91, buf173, buf172, buf179, unsqueeze_173, unsqueeze_174, unsqueeze_175, buf138, buf144, unsqueeze_165, unsqueeze_166, unsqueeze_167, unsqueeze_181, unsqueeze_182, unsqueeze_183, unsqueeze_189, unsqueeze_190, unsqueeze_191, unsqueeze_138, unsqueeze_139, unsqueeze_140, unsqueeze_131, unsqueeze_132, unsqueeze_133, primals_66, buf252, buf253, 6144, 2048, grid=grid(6144), stream=stream0)
        buf254 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf253, (6144, 2048), (2048, 1), 0), permute_96, out=buf254)
        buf255 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf253, (6144, 2048), (2048, 1), 0), permute_97, out=buf255)
        buf256 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf254, buf255, buf256, 34603008, grid=grid(34603008), stream=stream0)
        buf257 = reinterpret_tensor(buf250, (6144, 2048), (2048, 1)); del buf250  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf256, (6144, 5632), (5632, 1), 0), permute_98, out=buf257)
        buf260 = reinterpret_tensor(buf226, (3, 2048, 2048), (4194304, 2048, 1)); del buf226  # reuse
        buf269 = reinterpret_tensor(buf234, (3, 2048, 2048), (4194304, 2048, 1)); del buf234  # reuse
        buf284 = reinterpret_tensor(buf187, (3, 2048, 2048), (4194304, 2048, 1)); del buf187  # reuse
        buf261 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf262 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf270 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf271 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf285 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf286 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_134, add_135, add_142, add_143, add_144, add_150, add_151, add_152, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_126, mul_127, mul_134, mul_135, mul_142, mul_143, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_26.run(buf259, unsqueeze_176, buf251, buf257, unsqueeze_177, buf212, buf210, buf218, buf268, unsqueeze_168, unsqueeze_169, buf283, unsqueeze_184, unsqueeze_185, primals_96, primals_95, primals_97, buf260, buf269, buf284, buf261, buf262, buf270, buf271, buf285, buf286, 6144, 2048, grid=grid(6144), stream=stream0)
        buf263 = reinterpret_tensor(buf283, (6144, 2048), (2048, 1)); del buf283  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf262, (6144, 2048), (2048, 1), 0), permute_137, out=buf263)
        buf272 = reinterpret_tensor(buf268, (6144, 2048), (2048, 1)); del buf268  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf271, (6144, 2048), (2048, 1), 0), permute_136, out=buf272)
        buf266 = buf195; del buf195  # reuse
        buf264 = reinterpret_tensor(buf266, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf265 = reinterpret_tensor(buf266, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf275 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf273 = reinterpret_tensor(buf275, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf274 = reinterpret_tensor(buf275, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf263, select_1, select_3, buf272, buf264, buf265, buf273, buf274, 6291456, grid=grid(6291456), stream=stream0)
        buf276 = reinterpret_tensor(buf272, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf272  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf275, buf276, 12582912, grid=grid(12582912), stream=stream0)
        del buf264
        del buf265
        del buf273
        del buf274
        buf277 = reinterpret_tensor(buf263, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf263  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf266, buf277, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf278 = buf237; del buf237  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf276, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf277, (48, 128, 2048), (262144, 2048, 1), 0), out=buf278)
        buf281 = reinterpret_tensor(buf198, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf198  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax5')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf278, scalar_tensor, buf281, 98304, 2048, grid=grid(98304), stream=stream0)
        buf287 = reinterpret_tensor(buf259, (6144, 2048), (2048, 1)); del buf259  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf286, (6144, 2048), (2048, 1), 0), permute_138, out=buf287)
        buf288 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf287, buf288, 12582912, grid=grid(12582912), stream=stream0)
        buf289 = reinterpret_tensor(buf287, (48, 2048, 128), (262144, 128, 1)); del buf287  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf281, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf288, (48, 2048, 128), (262144, 128, 1), 0), out=buf289)
        buf290 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf289, buf290, 12582912, grid=grid(12582912), stream=stream0)
        buf291 = reinterpret_tensor(buf289, (6144, 2048), (2048, 1)); del buf289  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf290, permute_146, out=buf291)
        buf325 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf335 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf344 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf354 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf326 = buf325; del buf325  # reuse
        buf336 = buf335; del buf335  # reuse
        buf345 = buf344; del buf344  # reuse
        buf355 = buf354; del buf354  # reuse
        buf303 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf312 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf327 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf294 = reinterpret_tensor(buf291, (3, 2048, 2048), (4194304, 2048, 1)); del buf291  # reuse
        buf304 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf313 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf328 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf305 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf314 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf329 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf295 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf296 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_104, add_111, add_112, add_113, add_114, add_115, add_116, add_117, add_118, add_119, add_12, add_120, add_121, add_122, add_123, add_124, add_158, add_159, add_160, add_161, add_20, add_200, add_201, add_202, add_203, add_204, add_205, add_210, add_211, add_212, add_213, add_214, add_215, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_104, mul_105, mul_106, mul_107, mul_108, mul_109, mul_110, mul_111, mul_112, mul_113, mul_114, mul_115, mul_116, mul_117, mul_150, mul_151, mul_18, mul_19, mul_190, mul_191, mul_192, mul_193, mul_194, mul_195, mul_2, mul_20, mul_200, mul_201, mul_202, mul_203, mul_204, mul_205, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_97, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_27.run(buf326, buf336, buf345, buf355, buf294, unsqueeze_142, embedding, unsqueeze_143, buf33, buf39, unsqueeze_144, unsqueeze_11, buf99, buf105, unsqueeze_149, unsqueeze_150, unsqueeze_151, unsqueeze_252, unsqueeze_253, unsqueeze_254, unsqueeze_242, unsqueeze_243, unsqueeze_244, unsqueeze_145, buf68, buf74, unsqueeze_146, buf173, buf172, buf179, unsqueeze_147, buf138, buf144, unsqueeze_152, unsqueeze_153, unsqueeze_154, unsqueeze_255, unsqueeze_256, unsqueeze_257, unsqueeze_245, unsqueeze_246, unsqueeze_247, buf302, unsqueeze_141, buf251, buf257, buf311, unsqueeze_134, unsqueeze_148, buf293, unsqueeze_192, unsqueeze_193, buf212, buf210, buf218, primals_84, primals_83, primals_85, primals_102, buf303, buf312, buf327, buf304, buf313, buf328, buf305, buf314, buf329, buf295, buf296, 6144, 2048, grid=grid(6144), stream=stream0)
        buf297 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf296, (6144, 2048), (2048, 1), 0), permute_147, out=buf297)
        buf298 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf296, (6144, 2048), (2048, 1), 0), permute_148, out=buf298)
        buf299 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf297, buf298, buf299, 34603008, grid=grid(34603008), stream=stream0)
        buf300 = reinterpret_tensor(buf293, (6144, 2048), (2048, 1)); del buf293  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf299, (6144, 5632), (5632, 1), 0), permute_149, out=buf300)
        buf306 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf305, (6144, 2048), (2048, 1), 0), permute_120, out=buf306)
        buf315 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf314, (6144, 2048), (2048, 1), 0), permute_119, out=buf315)
        buf309 = buf266; del buf266  # reuse
        buf307 = reinterpret_tensor(buf309, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf308 = reinterpret_tensor(buf309, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf318 = buf275; del buf275  # reuse
        buf316 = reinterpret_tensor(buf318, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf317 = reinterpret_tensor(buf318, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf306, select_1, select_3, buf315, buf307, buf308, buf316, buf317, 6291456, grid=grid(6291456), stream=stream0)
        buf319 = reinterpret_tensor(buf315, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf315  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf318, buf319, 12582912, grid=grid(12582912), stream=stream0)
        del buf307
        del buf308
        del buf316
        del buf317
        buf320 = reinterpret_tensor(buf306, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf306  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf309, buf320, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf321 = buf278; del buf278  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf319, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf320, (48, 128, 2048), (262144, 2048, 1), 0), out=buf321)
        buf324 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax6')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf321, scalar_tensor, buf324, 98304, 2048, grid=grid(98304), stream=stream0)
        buf330 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf329, (6144, 2048), (2048, 1), 0), permute_121, out=buf330)
        buf331 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf330, buf331, 12582912, grid=grid(12582912), stream=stream0)
        buf332 = reinterpret_tensor(buf330, (48, 2048, 128), (262144, 128, 1)); del buf330  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf324, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf331, (48, 2048, 128), (262144, 128, 1), 0), out=buf332)
        buf333 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf332, buf333, 12582912, grid=grid(12582912), stream=stream0)
        buf334 = reinterpret_tensor(buf332, (6144, 2048), (2048, 1)); del buf332  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf333, permute_129, out=buf334)
        buf337 = reinterpret_tensor(buf334, (3, 2048, 2048), (4194304, 2048, 1)); del buf334  # reuse
        buf338 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf339 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_125, add_126, add_127, add_72, float_6, mean_3, mul_118, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_28.run(buf337, buf336, unsqueeze_155, buf251, buf257, primals_90, buf338, buf339, 6144, 2048, grid=grid(6144), stream=stream0)
        buf340 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf339, (6144, 2048), (2048, 1), 0), permute_130, out=buf340)
        buf341 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf339, (6144, 2048), (2048, 1), 0), permute_131, out=buf341)
        buf342 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf340, buf341, buf342, 34603008, grid=grid(34603008), stream=stream0)
        buf343 = reinterpret_tensor(buf336, (6144, 2048), (2048, 1)); del buf336  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf342, (6144, 5632), (5632, 1), 0), permute_132, out=buf343)
        buf370 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf381 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf391 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf400 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf371 = buf370; del buf370  # reuse
        buf382 = buf381; del buf381  # reuse
        buf392 = buf391; del buf391  # reuse
        buf401 = buf400; del buf400  # reuse
        buf346 = buf345; del buf345  # reuse
        buf356 = buf355; del buf355  # reuse
        buf372 = buf371; del buf371  # reuse
        buf383 = buf382; del buf382  # reuse
        buf393 = buf392; del buf392  # reuse
        buf402 = buf401; del buf401  # reuse
        buf347 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf357 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf373 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf348 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf358 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf374 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf349 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf359 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf375 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf394 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf395 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf403 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf404 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_163, add_164, add_165, add_166, add_167, add_168, add_169, add_170, add_171, add_172, add_173, add_174, add_175, add_176, add_177, add_178, add_179, add_180, add_20, add_206, add_207, add_208, add_209, add_216, add_217, add_218, add_219, add_220, add_221, add_222, add_223, add_224, add_225, add_226, add_227, add_228, add_229, add_230, add_231, add_232, add_233, add_234, add_235, add_236, add_237, add_238, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_153, mul_154, mul_155, mul_156, mul_157, mul_158, mul_159, mul_160, mul_161, mul_162, mul_163, mul_164, mul_165, mul_166, mul_167, mul_168, mul_169, mul_170, mul_196, mul_197, mul_198, mul_199, mul_2, mul_206, mul_207, mul_208, mul_209, mul_210, mul_211, mul_212, mul_213, mul_214, mul_215, mul_216, mul_217, mul_218, mul_219, mul_220, mul_221, mul_222, mul_223, mul_224, mul_225, mul_226, mul_227, mul_228, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_29.run(buf372, buf383, buf393, buf402, buf346, buf356, unsqueeze_262, embedding, unsqueeze_263, buf33, buf39, unsqueeze_264, unsqueeze_11, buf99, buf105, unsqueeze_272, unsqueeze_273, unsqueeze_274, unsqueeze_209, unsqueeze_210, unsqueeze_211, unsqueeze_200, unsqueeze_201, unsqueeze_202, unsqueeze_265, buf68, buf74, unsqueeze_266, buf173, buf172, buf179, unsqueeze_267, buf138, buf144, unsqueeze_275, unsqueeze_276, unsqueeze_277, unsqueeze_212, unsqueeze_213, unsqueeze_214, unsqueeze_203, unsqueeze_204, unsqueeze_205, unsqueeze_258, buf251, buf257, unsqueeze_259, buf212, buf210, buf218, unsqueeze_260, buf337, buf343, unsqueeze_248, unsqueeze_249, unsqueeze_250, unsqueeze_268, unsqueeze_269, unsqueeze_270, unsqueeze_278, unsqueeze_279, unsqueeze_280, unsqueeze_215, unsqueeze_216, unsqueeze_217, unsqueeze_206, unsqueeze_207, unsqueeze_208, unsqueeze_261, buf294, buf300, unsqueeze_251, unsqueeze_271, primals_120, primals_119, primals_121, primals_108, primals_107, buf347, buf357, buf373, buf348, buf358, buf374, buf349, buf359, buf375, buf394, buf395, buf403, buf404, 6144, 2048, grid=grid(6144), stream=stream0)
        buf350 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf349, (6144, 2048), (2048, 1), 0), permute_171, out=buf350)
        buf360 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf359, (6144, 2048), (2048, 1), 0), permute_170, out=buf360)
        buf396 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf395, (6144, 2048), (2048, 1), 0), permute_154, out=buf396)
        buf405 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf404, (6144, 2048), (2048, 1), 0), permute_153, out=buf405)
        buf353 = buf309; del buf309  # reuse
        buf351 = reinterpret_tensor(buf353, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf352 = reinterpret_tensor(buf353, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf363 = buf318; del buf318  # reuse
        buf361 = reinterpret_tensor(buf363, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf362 = reinterpret_tensor(buf363, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf399 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf397 = reinterpret_tensor(buf399, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf398 = reinterpret_tensor(buf399, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf408 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf406 = reinterpret_tensor(buf408, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf407 = reinterpret_tensor(buf408, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_17.run(buf350, select_1, select_3, buf360, buf396, buf405, buf351, buf352, buf361, buf362, buf397, buf398, buf406, buf407, 6291456, grid=grid(6291456), stream=stream0)
        buf364 = reinterpret_tensor(buf405, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf405  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf363, buf364, 12582912, grid=grid(12582912), stream=stream0)
        del buf351
        del buf352
        del buf361
        del buf362
        buf365 = reinterpret_tensor(buf396, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf396  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf353, buf365, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf366 = buf321; del buf321  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf364, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf365, (48, 128, 2048), (262144, 2048, 1), 0), out=buf366)
        buf409 = reinterpret_tensor(buf360, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf360  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf408, buf409, 12582912, grid=grid(12582912), stream=stream0)
        del buf406
        del buf407
        buf410 = reinterpret_tensor(buf350, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf350  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf399, buf410, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf397
        del buf398
        buf411 = empty_strided((48, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf409, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf410, (48, 128, 2048), (262144, 2048, 1), 0), out=buf411)
        buf369 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf414 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax7')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf366, scalar_tensor, buf411, buf369, buf414, 98304, 2048, grid=grid(98304), stream=stream0)
        buf376 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf375, (6144, 2048), (2048, 1), 0), permute_172, out=buf376)
        buf377 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf376, buf377, 12582912, grid=grid(12582912), stream=stream0)
        buf378 = reinterpret_tensor(buf376, (48, 2048, 128), (262144, 128, 1)); del buf376  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf369, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf377, (48, 2048, 128), (262144, 128, 1), 0), out=buf378)
        buf379 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf378, buf379, 12582912, grid=grid(12582912), stream=stream0)
        buf380 = reinterpret_tensor(buf378, (6144, 2048), (2048, 1)); del buf378  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf379, permute_180, out=buf380)
        buf384 = reinterpret_tensor(buf380, (3, 2048, 2048), (4194304, 2048, 1)); del buf380  # reuse
        buf385 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf386 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_162, add_239, add_240, add_241, float_6, mean_3, mul_18, mul_19, mul_20, mul_229, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_30.run(buf384, buf383, unsqueeze_281, buf294, buf300, primals_126, buf385, buf386, 6144, 2048, grid=grid(6144), stream=stream0)
        buf387 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf386, (6144, 2048), (2048, 1), 0), permute_181, out=buf387)
        buf388 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf386, (6144, 2048), (2048, 1), 0), permute_182, out=buf388)
        buf389 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf387, buf388, buf389, 34603008, grid=grid(34603008), stream=stream0)
        buf390 = reinterpret_tensor(buf383, (6144, 2048), (2048, 1)); del buf383  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf389, (6144, 5632), (5632, 1), 0), permute_183, out=buf390)
        buf415 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf425 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf434 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf444 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf416 = buf415; del buf415  # reuse
        buf426 = buf425; del buf425  # reuse
        buf435 = buf434; del buf434  # reuse
        buf445 = buf444; del buf444  # reuse
        buf417 = buf416; del buf416  # reuse
        buf427 = buf426; del buf426  # reuse
        buf436 = buf435; del buf435  # reuse
        buf446 = buf445; del buf445  # reuse
        buf418 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf419 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_12, add_128, add_180, add_181, add_182, add_183, add_184, add_185, add_186, add_187, add_188, add_189, add_190, add_191, add_192, add_193, add_194, add_195, add_196, add_197, add_20, add_288, add_289, add_290, add_291, add_292, add_293, add_294, add_295, add_296, add_3, add_300, add_301, add_302, add_303, add_304, add_305, add_306, add_307, add_308, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_3, mean_2, mul_171, mul_172, mul_173, mul_174, mul_175, mul_176, mul_177, mul_178, mul_179, mul_180, mul_181, mul_182, mul_183, mul_184, mul_185, mul_186, mul_187, mul_188, mul_276, mul_277, mul_278, mul_279, mul_280, mul_281, mul_282, mul_283, mul_284, mul_288, mul_289, mul_290, mul_291, mul_292, mul_293, mul_294, mul_295, mul_296, mul_4, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_31.run(buf417, buf427, buf436, buf446, unsqueeze_218, embedding, unsqueeze_219, buf33, buf39, unsqueeze_220, unsqueeze_11, buf99, buf105, unsqueeze_227, unsqueeze_228, unsqueeze_229, unsqueeze_350, unsqueeze_351, unsqueeze_352, unsqueeze_338, unsqueeze_339, unsqueeze_340, unsqueeze_221, buf68, buf74, unsqueeze_222, buf173, buf172, buf179, unsqueeze_223, buf138, buf144, unsqueeze_230, unsqueeze_231, unsqueeze_232, unsqueeze_353, unsqueeze_354, unsqueeze_355, unsqueeze_341, unsqueeze_342, unsqueeze_343, unsqueeze_224, buf251, buf257, unsqueeze_225, buf212, buf210, buf218, unsqueeze_226, buf337, buf343, unsqueeze_233, unsqueeze_234, unsqueeze_235, unsqueeze_356, unsqueeze_357, unsqueeze_358, unsqueeze_344, unsqueeze_345, unsqueeze_346, primals_109, buf418, buf419, 6144, 2048, grid=grid(6144), stream=stream0)
        buf420 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf419, (6144, 2048), (2048, 1), 0), permute_155, out=buf420)
        buf421 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf420, buf421, 12582912, grid=grid(12582912), stream=stream0)
        buf422 = reinterpret_tensor(buf420, (48, 2048, 128), (262144, 128, 1)); del buf420  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf414, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf421, (48, 2048, 128), (262144, 128, 1), 0), out=buf422)
        buf423 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf422, buf423, 12582912, grid=grid(12582912), stream=stream0)
        buf424 = reinterpret_tensor(buf422, (6144, 2048), (2048, 1)); del buf422  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf423, permute_163, out=buf424)
        buf428 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf429 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_198, add_199, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf427, buf424, primals_114, buf428, buf429, 6144, 2048, grid=grid(6144), stream=stream0)
        buf430 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf429, (6144, 2048), (2048, 1), 0), permute_164, out=buf430)
        buf431 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf429, (6144, 2048), (2048, 1), 0), permute_165, out=buf431)
        buf432 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf430, buf431, buf432, 34603008, grid=grid(34603008), stream=stream0)
        buf433 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf432, (6144, 5632), (5632, 1), 0), permute_166, out=buf433)
        buf460 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf471 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf461 = buf460; del buf460  # reuse
        buf472 = buf471; del buf471  # reuse
        buf462 = buf461; del buf461  # reuse
        buf473 = buf472; del buf472  # reuse
        buf437 = buf436; del buf436  # reuse
        buf447 = buf446; del buf446  # reuse
        buf463 = buf462; del buf462  # reuse
        buf474 = buf473; del buf473  # reuse
        buf484 = reinterpret_tensor(buf399, (3, 2048, 2048), (4194304, 2048, 1)); del buf399  # reuse
        buf494 = reinterpret_tensor(buf408, (3, 2048, 2048), (4194304, 2048, 1)); del buf408  # reuse
        buf485 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf486 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf495 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf496 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf438 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf439 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf448 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf449 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf464 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf465 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_243, add_244, add_245, add_246, add_247, add_248, add_249, add_250, add_251, add_252, add_253, add_254, add_255, add_256, add_257, add_258, add_259, add_260, add_261, add_262, add_263, add_264, add_297, add_298, add_299, add_3, add_309, add_31, add_310, add_311, add_312, add_313, add_314, add_315, add_316, add_317, add_318, add_319, add_320, add_321, add_322, add_323, add_324, add_325, add_326, add_327, add_328, add_329, add_33, add_330, add_331, add_332, add_333, add_334, add_335, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_231, mul_232, mul_233, mul_234, mul_235, mul_236, mul_237, mul_238, mul_239, mul_240, mul_241, mul_242, mul_243, mul_244, mul_245, mul_246, mul_247, mul_248, mul_249, mul_250, mul_251, mul_252, mul_285, mul_286, mul_287, mul_297, mul_298, mul_299, mul_3, mul_300, mul_301, mul_302, mul_303, mul_304, mul_305, mul_306, mul_307, mul_308, mul_309, mul_310, mul_311, mul_312, mul_313, mul_314, mul_315, mul_316, mul_317, mul_318, mul_319, mul_320, mul_321, mul_322, mul_323, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_32.run(buf463, buf474, buf437, buf447, unsqueeze_362, embedding, unsqueeze_363, buf33, buf39, unsqueeze_364, unsqueeze_11, buf99, buf105, unsqueeze_374, unsqueeze_375, unsqueeze_376, unsqueeze_299, unsqueeze_300, unsqueeze_301, unsqueeze_288, unsqueeze_289, unsqueeze_290, unsqueeze_365, buf68, buf74, unsqueeze_366, buf173, buf172, buf179, unsqueeze_367, buf138, buf144, unsqueeze_377, unsqueeze_378, unsqueeze_379, unsqueeze_302, unsqueeze_303, unsqueeze_304, unsqueeze_291, unsqueeze_292, unsqueeze_293, unsqueeze_368, buf251, buf257, unsqueeze_369, buf212, buf210, buf218, unsqueeze_370, buf337, buf343, unsqueeze_380, unsqueeze_381, unsqueeze_382, unsqueeze_305, unsqueeze_306, unsqueeze_307, unsqueeze_294, unsqueeze_295, unsqueeze_296, unsqueeze_359, buf294, buf300, unsqueeze_360, buf427, buf424, buf433, unsqueeze_361, buf384, buf390, unsqueeze_347, unsqueeze_348, unsqueeze_349, unsqueeze_371, unsqueeze_372, unsqueeze_373, unsqueeze_383, unsqueeze_384, unsqueeze_385, unsqueeze_308, unsqueeze_309, unsqueeze_297, unsqueeze_298, primals_132, primals_131, primals_144, primals_143, primals_145, buf484, buf494, buf485, buf486, buf495, buf496, buf438, buf439, buf448, buf449, buf464, buf465, 6144, 2048, grid=grid(6144), stream=stream0)
        buf440 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf439, (6144, 2048), (2048, 1), 0), permute_205, out=buf440)
        buf450 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf449, (6144, 2048), (2048, 1), 0), permute_204, out=buf450)
        buf487 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf486, (6144, 2048), (2048, 1), 0), permute_188, out=buf487)
        buf497 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf496, (6144, 2048), (2048, 1), 0), permute_187, out=buf497)
        buf443 = buf353; del buf353  # reuse
        buf441 = reinterpret_tensor(buf443, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf442 = reinterpret_tensor(buf443, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf453 = buf363; del buf363  # reuse
        buf451 = reinterpret_tensor(buf453, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf452 = reinterpret_tensor(buf453, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf490 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf488 = reinterpret_tensor(buf490, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf489 = reinterpret_tensor(buf490, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf500 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf498 = reinterpret_tensor(buf500, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf499 = reinterpret_tensor(buf500, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_17.run(buf440, select_1, select_3, buf450, buf487, buf497, buf441, buf442, buf451, buf452, buf488, buf489, buf498, buf499, 6291456, grid=grid(6291456), stream=stream0)
        buf454 = reinterpret_tensor(buf497, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf497  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf453, buf454, 12582912, grid=grid(12582912), stream=stream0)
        del buf441
        del buf442
        del buf451
        del buf452
        buf455 = reinterpret_tensor(buf487, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf487  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf443, buf455, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf456 = buf411; del buf411  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf454, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf455, (48, 128, 2048), (262144, 2048, 1), 0), out=buf456)
        buf501 = reinterpret_tensor(buf450, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf450  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf500, buf501, 12582912, grid=grid(12582912), stream=stream0)
        del buf498
        del buf499
        buf502 = reinterpret_tensor(buf440, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf440  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf490, buf502, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf488
        del buf489
        buf503 = buf366; del buf366  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf501, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf502, (48, 128, 2048), (262144, 2048, 1), 0), out=buf503)
        buf459 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf506 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax8')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf456, scalar_tensor, buf503, buf459, buf506, 98304, 2048, grid=grid(98304), stream=stream0)
        buf466 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf465, (6144, 2048), (2048, 1), 0), permute_206, out=buf466)
        buf467 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf466, buf467, 12582912, grid=grid(12582912), stream=stream0)
        buf468 = reinterpret_tensor(buf466, (48, 2048, 128), (262144, 128, 1)); del buf466  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf459, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf467, (48, 2048, 128), (262144, 128, 1), 0), out=buf468)
        buf469 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf468, buf469, 12582912, grid=grid(12582912), stream=stream0)
        buf470 = reinterpret_tensor(buf468, (6144, 2048), (2048, 1)); del buf468  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf469, permute_214, out=buf470)
        buf475 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf476 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_336, add_337, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf474, buf470, primals_150, buf475, buf476, 6144, 2048, grid=grid(6144), stream=stream0)
        buf477 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf476, (6144, 2048), (2048, 1), 0), permute_215, out=buf477)
        buf478 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf476, (6144, 2048), (2048, 1), 0), permute_216, out=buf478)
        buf479 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf477, buf478, buf479, 34603008, grid=grid(34603008), stream=stream0)
        buf480 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf479, (6144, 5632), (5632, 1), 0), permute_217, out=buf480)
        buf556 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf568 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf579 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf590 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf557 = buf556; del buf556  # reuse
        buf569 = buf568; del buf568  # reuse
        buf580 = buf579; del buf579  # reuse
        buf591 = buf590; del buf590  # reuse
        buf558 = buf557; del buf557  # reuse
        buf570 = buf569; del buf569  # reuse
        buf581 = buf580; del buf580  # reuse
        buf592 = buf591; del buf591  # reuse
        buf518 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf528 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf539 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf519 = buf518; del buf518  # reuse
        buf529 = buf528; del buf528  # reuse
        buf540 = buf539; del buf539  # reuse
        buf520 = buf519; del buf519  # reuse
        buf530 = buf529; del buf529  # reuse
        buf541 = buf540; del buf540  # reuse
        buf510 = reinterpret_tensor(buf490, (3, 2048, 2048), (4194304, 2048, 1)); del buf490  # reuse
        buf531 = buf530; del buf530  # reuse
        buf542 = buf541; del buf541  # reuse
        buf559 = buf558; del buf558  # reuse
        buf571 = buf570; del buf570  # reuse
        buf582 = buf581; del buf581  # reuse
        buf593 = buf592; del buf592  # reuse
        buf511 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf512 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_264, add_265, add_266, add_267, add_268, add_269, add_270, add_271, add_272, add_273, add_274, add_275, add_276, add_277, add_278, add_279, add_280, add_281, add_282, add_283, add_3, add_31, add_33, add_338, add_339, add_340, add_341, add_342, add_343, add_344, add_345, add_346, add_347, add_348, add_349, add_351, add_352, add_353, add_354, add_355, add_356, add_357, add_358, add_359, add_360, add_361, add_362, add_392, add_393, add_394, add_395, add_396, add_397, add_398, add_399, add_400, add_401, add_402, add_403, add_406, add_407, add_408, add_409, add_410, add_411, add_412, add_413, add_414, add_415, add_416, add_417, add_420, add_421, add_422, add_423, add_424, add_425, add_426, add_427, add_428, add_429, add_430, add_431, add_434, add_435, add_436, add_437, add_438, add_439, add_440, add_441, add_442, add_443, add_444, add_445, add_5, add_50, add_72, add_96, add_98, float_3, mean_2, mul_253, mul_254, mul_255, mul_256, mul_257, mul_258, mul_259, mul_260, mul_261, mul_262, mul_263, mul_264, mul_265, mul_266, mul_267, mul_268, mul_269, mul_270, mul_271, mul_272, mul_325, mul_326, mul_327, mul_328, mul_329, mul_330, mul_331, mul_332, mul_333, mul_334, mul_335, mul_336, mul_338, mul_339, mul_340, mul_341, mul_342, mul_343, mul_344, mul_345, mul_346, mul_347, mul_348, mul_349, mul_378, mul_379, mul_380, mul_381, mul_382, mul_383, mul_384, mul_385, mul_386, mul_387, mul_388, mul_389, mul_392, mul_393, mul_394, mul_395, mul_396, mul_397, mul_398, mul_399, mul_4, mul_400, mul_401, mul_402, mul_403, mul_406, mul_407, mul_408, mul_409, mul_410, mul_411, mul_412, mul_413, mul_414, mul_415, mul_416, mul_417, mul_420, mul_421, mul_422, mul_423, mul_424, mul_425, mul_426, mul_427, mul_428, mul_429, mul_430, mul_431, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_33.run(buf559, buf571, buf582, buf593, buf520, buf531, buf542, unsqueeze_478, embedding, unsqueeze_479, buf33, buf39, unsqueeze_480, unsqueeze_11, buf99, buf105, unsqueeze_492, unsqueeze_493, unsqueeze_494, unsqueeze_405, unsqueeze_406, unsqueeze_407, unsqueeze_392, unsqueeze_393, unsqueeze_394, unsqueeze_481, buf68, buf74, unsqueeze_482, buf173, buf172, buf179, unsqueeze_483, buf138, buf144, unsqueeze_495, unsqueeze_496, unsqueeze_497, unsqueeze_408, unsqueeze_409, unsqueeze_410, unsqueeze_395, unsqueeze_396, unsqueeze_397, unsqueeze_484, buf251, buf257, unsqueeze_485, buf212, buf210, buf218, unsqueeze_486, buf337, buf343, unsqueeze_498, unsqueeze_499, unsqueeze_500, unsqueeze_411, unsqueeze_412, unsqueeze_413, unsqueeze_398, unsqueeze_399, unsqueeze_400, unsqueeze_310, unsqueeze_311, unsqueeze_312, unsqueeze_321, unsqueeze_322, unsqueeze_323, unsqueeze_464, unsqueeze_465, unsqueeze_466, unsqueeze_450, unsqueeze_451, unsqueeze_452, unsqueeze_313, unsqueeze_314, unsqueeze_315, unsqueeze_324, unsqueeze_325, unsqueeze_326, unsqueeze_467, unsqueeze_468, unsqueeze_469, unsqueeze_453, unsqueeze_454, unsqueeze_455, unsqueeze_316, unsqueeze_317, unsqueeze_318, unsqueeze_327, unsqueeze_328, unsqueeze_329, unsqueeze_470, unsqueeze_471, unsqueeze_472, unsqueeze_456, unsqueeze_457, unsqueeze_458, unsqueeze_319, buf294, buf300, unsqueeze_320, buf427, buf424, buf433, unsqueeze_473, unsqueeze_474, unsqueeze_475, buf384, buf390, unsqueeze_459, unsqueeze_460, unsqueeze_461, unsqueeze_487, unsqueeze_488, unsqueeze_489, unsqueeze_501, unsqueeze_502, unsqueeze_503, unsqueeze_414, unsqueeze_415, unsqueeze_416, unsqueeze_401, unsqueeze_402, unsqueeze_403, primals_133, buf510, buf511, buf512, 6144, 2048, grid=grid(6144), stream=stream0)
        buf513 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf512, (6144, 2048), (2048, 1), 0), permute_189, out=buf513)
        buf514 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf513, buf514, 12582912, grid=grid(12582912), stream=stream0)
        buf515 = reinterpret_tensor(buf513, (48, 2048, 128), (262144, 128, 1)); del buf513  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf506, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf514, (48, 2048, 128), (262144, 128, 1), 0), out=buf515)
        buf516 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf515, buf516, 12582912, grid=grid(12582912), stream=stream0)
        buf517 = reinterpret_tensor(buf515, (6144, 2048), (2048, 1)); del buf515  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf516, permute_197, out=buf517)
        buf521 = reinterpret_tensor(buf517, (3, 2048, 2048), (4194304, 2048, 1)); del buf517  # reuse
        buf522 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf523 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_162, add_198, add_200, add_284, add_285, add_286, add_287, float_6, mean_3, mul_18, mul_19, mul_20, mul_273, mul_274, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_34.run(buf521, buf520, unsqueeze_330, buf294, buf300, unsqueeze_331, buf427, buf424, buf433, primals_138, buf522, buf523, 6144, 2048, grid=grid(6144), stream=stream0)
        buf524 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf523, (6144, 2048), (2048, 1), 0), permute_198, out=buf524)
        buf525 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf523, (6144, 2048), (2048, 1), 0), permute_199, out=buf525)
        buf526 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf524, buf525, buf526, 34603008, grid=grid(34603008), stream=stream0)
        buf527 = reinterpret_tensor(buf520, (6144, 2048), (2048, 1)); del buf520  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf526, (6144, 5632), (5632, 1), 0), permute_200, out=buf527)
        buf532 = reinterpret_tensor(buf500, (3, 2048, 2048), (4194304, 2048, 1)); del buf500  # reuse
        buf543 = reinterpret_tensor(buf443, (3, 2048, 2048), (4194304, 2048, 1)); del buf443  # reuse
        buf560 = reinterpret_tensor(buf453, (3, 2048, 2048), (4194304, 2048, 1)); del buf453  # reuse
        buf533 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf534 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf544 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf545 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf561 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf562 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_288, add_336, add_338, add_404, add_405, add_418, add_419, add_420, add_432, add_433, add_434, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_390, mul_391, mul_4, mul_404, mul_405, mul_418, mul_419, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_35.run(buf531, unsqueeze_476, buf521, buf527, unsqueeze_477, buf474, buf470, buf480, buf542, unsqueeze_462, unsqueeze_463, buf559, unsqueeze_490, unsqueeze_491, primals_168, primals_167, primals_169, buf532, buf543, buf560, buf533, buf534, buf544, buf545, buf561, buf562, 6144, 2048, grid=grid(6144), stream=stream0)
        buf535 = reinterpret_tensor(buf559, (6144, 2048), (2048, 1)); del buf559  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf534, (6144, 2048), (2048, 1), 0), permute_239, out=buf535)
        buf546 = reinterpret_tensor(buf542, (6144, 2048), (2048, 1)); del buf542  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf545, (6144, 2048), (2048, 1), 0), permute_238, out=buf546)
        buf538 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf536 = reinterpret_tensor(buf538, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf537 = reinterpret_tensor(buf538, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf549 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf547 = reinterpret_tensor(buf549, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf548 = reinterpret_tensor(buf549, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf535, select_1, select_3, buf546, buf536, buf537, buf547, buf548, 6291456, grid=grid(6291456), stream=stream0)
        buf550 = reinterpret_tensor(buf546, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf546  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf549, buf550, 12582912, grid=grid(12582912), stream=stream0)
        del buf536
        del buf537
        del buf547
        del buf548
        buf551 = reinterpret_tensor(buf535, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf535  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf538, buf551, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf552 = buf503; del buf503  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf550, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf551, (48, 128, 2048), (262144, 2048, 1), 0), out=buf552)
        buf555 = reinterpret_tensor(buf456, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf456  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax9')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf552, scalar_tensor, buf555, 98304, 2048, grid=grid(98304), stream=stream0)
        buf563 = reinterpret_tensor(buf531, (6144, 2048), (2048, 1)); del buf531  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf562, (6144, 2048), (2048, 1), 0), permute_240, out=buf563)
        buf564 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf563, buf564, 12582912, grid=grid(12582912), stream=stream0)
        buf565 = reinterpret_tensor(buf563, (48, 2048, 128), (262144, 128, 1)); del buf563  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf555, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf564, (48, 2048, 128), (262144, 128, 1), 0), out=buf565)
        buf566 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf565, buf566, 12582912, grid=grid(12582912), stream=stream0)
        buf567 = reinterpret_tensor(buf565, (6144, 2048), (2048, 1)); del buf565  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf566, permute_248, out=buf567)
        buf607 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf619 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf630 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf642 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf608 = buf607; del buf607  # reuse
        buf620 = buf619; del buf619  # reuse
        buf631 = buf630; del buf630  # reuse
        buf643 = buf642; del buf642  # reuse
        buf609 = buf608; del buf608  # reuse
        buf621 = buf620; del buf620  # reuse
        buf632 = buf631; del buf631  # reuse
        buf644 = buf643; del buf643  # reuse
        buf610 = buf609; del buf609  # reuse
        buf622 = buf621; del buf621  # reuse
        buf633 = buf632; del buf632  # reuse
        buf645 = buf644; del buf644  # reuse
        buf583 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf594 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf611 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf572 = reinterpret_tensor(buf567, (3, 2048, 2048), (4194304, 2048, 1)); del buf567  # reuse
        buf584 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf595 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf612 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf585 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf596 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf613 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf573 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf574 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_350, add_363, add_364, add_365, add_366, add_367, add_368, add_369, add_370, add_371, add_372, add_373, add_374, add_375, add_376, add_377, add_378, add_379, add_380, add_381, add_382, add_383, add_384, add_385, add_386, add_387, add_388, add_446, add_447, add_448, add_449, add_5, add_50, add_512, add_513, add_514, add_515, add_516, add_517, add_518, add_519, add_520, add_521, add_522, add_523, add_528, add_529, add_530, add_531, add_532, add_533, add_534, add_535, add_536, add_537, add_538, add_539, add_72, add_96, add_98, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_18, mul_19, mul_2, mul_20, mul_3, mul_337, mul_350, mul_351, mul_352, mul_353, mul_354, mul_355, mul_356, mul_357, mul_358, mul_359, mul_360, mul_361, mul_362, mul_363, mul_364, mul_365, mul_366, mul_367, mul_368, mul_369, mul_370, mul_371, mul_372, mul_373, mul_374, mul_375, mul_4, mul_432, mul_433, mul_496, mul_497, mul_498, mul_499, mul_5, mul_500, mul_501, mul_502, mul_503, mul_504, mul_505, mul_506, mul_507, mul_512, mul_513, mul_514, mul_515, mul_516, mul_517, mul_518, mul_519, mul_520, mul_521, mul_522, mul_523, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_36.run(buf610, buf622, buf633, buf645, buf572, unsqueeze_418, embedding, unsqueeze_419, buf33, buf39, unsqueeze_420, unsqueeze_11, buf99, buf105, unsqueeze_431, unsqueeze_432, unsqueeze_433, unsqueeze_594, unsqueeze_595, unsqueeze_596, unsqueeze_578, unsqueeze_579, unsqueeze_580, unsqueeze_421, buf68, buf74, unsqueeze_422, buf173, buf172, buf179, unsqueeze_423, buf138, buf144, unsqueeze_434, unsqueeze_435, unsqueeze_436, unsqueeze_597, unsqueeze_598, unsqueeze_599, unsqueeze_581, unsqueeze_582, unsqueeze_583, unsqueeze_424, buf251, buf257, unsqueeze_425, buf212, buf210, buf218, unsqueeze_426, buf337, buf343, unsqueeze_437, unsqueeze_438, unsqueeze_439, unsqueeze_600, unsqueeze_601, unsqueeze_602, unsqueeze_584, unsqueeze_585, unsqueeze_586, unsqueeze_427, buf294, buf300, unsqueeze_428, buf427, buf424, buf433, unsqueeze_429, buf384, buf390, unsqueeze_440, unsqueeze_441, unsqueeze_442, unsqueeze_603, unsqueeze_604, unsqueeze_605, unsqueeze_587, unsqueeze_588, unsqueeze_589, buf582, unsqueeze_417, buf521, buf527, buf593, unsqueeze_404, unsqueeze_430, buf571, unsqueeze_504, unsqueeze_505, buf474, buf470, buf480, primals_156, primals_155, primals_157, primals_174, buf583, buf594, buf611, buf584, buf595, buf612, buf585, buf596, buf613, buf573, buf574, 6144, 2048, grid=grid(6144), stream=stream0)
        buf575 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf574, (6144, 2048), (2048, 1), 0), permute_249, out=buf575)
        buf576 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf574, (6144, 2048), (2048, 1), 0), permute_250, out=buf576)
        buf577 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf575, buf576, buf577, 34603008, grid=grid(34603008), stream=stream0)
        buf578 = reinterpret_tensor(buf571, (6144, 2048), (2048, 1)); del buf571  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf577, (6144, 5632), (5632, 1), 0), permute_251, out=buf578)
        buf586 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf585, (6144, 2048), (2048, 1), 0), permute_222, out=buf586)
        buf597 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf596, (6144, 2048), (2048, 1), 0), permute_221, out=buf597)
        buf589 = buf538; del buf538  # reuse
        buf587 = reinterpret_tensor(buf589, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf588 = reinterpret_tensor(buf589, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf600 = buf549; del buf549  # reuse
        buf598 = reinterpret_tensor(buf600, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf599 = reinterpret_tensor(buf600, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf586, select_1, select_3, buf597, buf587, buf588, buf598, buf599, 6291456, grid=grid(6291456), stream=stream0)
        buf601 = reinterpret_tensor(buf597, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf597  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf600, buf601, 12582912, grid=grid(12582912), stream=stream0)
        del buf587
        del buf588
        del buf598
        del buf599
        buf602 = reinterpret_tensor(buf586, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf586  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf589, buf602, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf603 = buf552; del buf552  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf601, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf602, (48, 128, 2048), (262144, 2048, 1), 0), out=buf603)
        buf606 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax10')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf603, scalar_tensor, buf606, 98304, 2048, grid=grid(98304), stream=stream0)
        buf614 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf613, (6144, 2048), (2048, 1), 0), permute_223, out=buf614)
        buf615 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf614, buf615, 12582912, grid=grid(12582912), stream=stream0)
        buf616 = reinterpret_tensor(buf614, (48, 2048, 128), (262144, 128, 1)); del buf614  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf606, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf615, (48, 2048, 128), (262144, 128, 1), 0), out=buf616)
        buf617 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf616, buf617, 12582912, grid=grid(12582912), stream=stream0)
        buf618 = reinterpret_tensor(buf616, (6144, 2048), (2048, 1)); del buf616  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf617, permute_231, out=buf618)
        buf623 = reinterpret_tensor(buf618, (3, 2048, 2048), (4194304, 2048, 1)); del buf618  # reuse
        buf624 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf625 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_288, add_389, add_390, add_391, float_6, mean_3, mul_18, mul_19, mul_20, mul_376, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_37.run(buf623, buf622, unsqueeze_443, buf521, buf527, primals_162, buf624, buf625, 6144, 2048, grid=grid(6144), stream=stream0)
        buf626 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf625, (6144, 2048), (2048, 1), 0), permute_232, out=buf626)
        buf627 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf625, (6144, 2048), (2048, 1), 0), permute_233, out=buf627)
        buf628 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf626, buf627, buf628, 34603008, grid=grid(34603008), stream=stream0)
        buf629 = reinterpret_tensor(buf622, (6144, 2048), (2048, 1)); del buf622  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf628, (6144, 5632), (5632, 1), 0), permute_234, out=buf629)
        buf660 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf673 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf685 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf696 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf661 = buf660; del buf660  # reuse
        buf674 = buf673; del buf673  # reuse
        buf686 = buf685; del buf685  # reuse
        buf697 = buf696; del buf696  # reuse
        buf662 = buf661; del buf661  # reuse
        buf675 = buf674; del buf674  # reuse
        buf687 = buf686; del buf686  # reuse
        buf698 = buf697; del buf697  # reuse
        buf663 = buf662; del buf662  # reuse
        buf676 = buf675; del buf675  # reuse
        buf688 = buf687; del buf687  # reuse
        buf699 = buf698; del buf698  # reuse
        buf664 = buf663; del buf663  # reuse
        buf677 = buf676; del buf676  # reuse
        buf689 = buf688; del buf688  # reuse
        buf700 = buf699; del buf699  # reuse
        buf634 = buf633; del buf633  # reuse
        buf646 = buf645; del buf645  # reuse
        buf635 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf647 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf665 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf636 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf648 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf666 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf637 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf649 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf667 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf690 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf691 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf701 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf702 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_451, add_452, add_453, add_454, add_455, add_456, add_457, add_458, add_459, add_460, add_461, add_462, add_463, add_464, add_465, add_466, add_467, add_468, add_469, add_470, add_471, add_472, add_473, add_474, add_475, add_476, add_477, add_478, add_479, add_480, add_5, add_50, add_524, add_525, add_526, add_527, add_540, add_541, add_542, add_543, add_544, add_545, add_546, add_547, add_548, add_549, add_550, add_551, add_552, add_553, add_554, add_555, add_556, add_557, add_558, add_559, add_560, add_561, add_562, add_563, add_564, add_565, add_566, add_567, add_568, add_569, add_570, add_571, add_572, add_573, add_574, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_435, mul_436, mul_437, mul_438, mul_439, mul_440, mul_441, mul_442, mul_443, mul_444, mul_445, mul_446, mul_447, mul_448, mul_449, mul_450, mul_451, mul_452, mul_453, mul_454, mul_455, mul_456, mul_457, mul_458, mul_459, mul_460, mul_461, mul_462, mul_463, mul_464, mul_5, mul_508, mul_509, mul_510, mul_511, mul_524, mul_525, mul_526, mul_527, mul_528, mul_529, mul_530, mul_531, mul_532, mul_533, mul_534, mul_535, mul_536, mul_537, mul_538, mul_539, mul_540, mul_541, mul_542, mul_543, mul_544, mul_545, mul_546, mul_547, mul_548, mul_549, mul_550, mul_551, mul_552, mul_553, mul_554, mul_555, mul_556, mul_557, mul_558, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_38.run(buf664, buf677, buf689, buf700, buf634, buf646, unsqueeze_610, embedding, unsqueeze_611, buf33, buf39, unsqueeze_612, unsqueeze_11, buf99, buf105, unsqueeze_626, unsqueeze_627, unsqueeze_628, unsqueeze_527, unsqueeze_528, unsqueeze_529, unsqueeze_512, unsqueeze_513, unsqueeze_514, unsqueeze_613, buf68, buf74, unsqueeze_614, buf173, buf172, buf179, unsqueeze_615, buf138, buf144, unsqueeze_629, unsqueeze_630, unsqueeze_631, unsqueeze_530, unsqueeze_531, unsqueeze_532, unsqueeze_515, unsqueeze_516, unsqueeze_517, unsqueeze_616, buf251, buf257, unsqueeze_617, buf212, buf210, buf218, unsqueeze_618, buf337, buf343, unsqueeze_632, unsqueeze_633, unsqueeze_634, unsqueeze_533, unsqueeze_534, unsqueeze_535, unsqueeze_518, unsqueeze_519, unsqueeze_520, unsqueeze_619, buf294, buf300, unsqueeze_620, buf427, buf424, buf433, unsqueeze_621, buf384, buf390, unsqueeze_635, unsqueeze_636, unsqueeze_637, unsqueeze_536, unsqueeze_537, unsqueeze_538, unsqueeze_521, unsqueeze_522, unsqueeze_523, unsqueeze_622, buf521, buf527, unsqueeze_623, buf474, buf470, buf480, unsqueeze_624, buf623, buf629, unsqueeze_638, unsqueeze_639, unsqueeze_640, unsqueeze_539, unsqueeze_540, unsqueeze_541, unsqueeze_524, unsqueeze_525, unsqueeze_526, unsqueeze_606, unsqueeze_607, unsqueeze_608, unsqueeze_590, unsqueeze_591, unsqueeze_592, unsqueeze_609, buf572, buf578, unsqueeze_593, unsqueeze_625, primals_192, primals_191, primals_193, primals_180, primals_179, buf635, buf647, buf665, buf636, buf648, buf666, buf637, buf649, buf667, buf690, buf691, buf701, buf702, 6144, 2048, grid=grid(6144), stream=stream0)
        buf638 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf637, (6144, 2048), (2048, 1), 0), permute_273, out=buf638)
        buf650 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf649, (6144, 2048), (2048, 1), 0), permute_272, out=buf650)
        buf641 = buf589; del buf589  # reuse
        buf639 = reinterpret_tensor(buf641, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf640 = reinterpret_tensor(buf641, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf653 = buf600; del buf600  # reuse
        buf651 = reinterpret_tensor(buf653, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf652 = reinterpret_tensor(buf653, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf638, select_1, select_3, buf650, buf639, buf640, buf651, buf652, 6291456, grid=grid(6291456), stream=stream0)
        buf654 = reinterpret_tensor(buf650, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf650  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf653, buf654, 12582912, grid=grid(12582912), stream=stream0)
        del buf639
        del buf640
        del buf651
        del buf652
        buf655 = reinterpret_tensor(buf638, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf638  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf641, buf655, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf656 = buf603; del buf603  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf654, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf655, (48, 128, 2048), (262144, 2048, 1), 0), out=buf656)
        buf692 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf691, (6144, 2048), (2048, 1), 0), permute_256, out=buf692)
        buf703 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf702, (6144, 2048), (2048, 1), 0), permute_255, out=buf703)
        buf695 = buf641; del buf641  # reuse
        buf693 = reinterpret_tensor(buf695, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf694 = reinterpret_tensor(buf695, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf706 = buf653; del buf653  # reuse
        buf704 = reinterpret_tensor(buf706, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf705 = reinterpret_tensor(buf706, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf692, select_1, select_3, buf703, buf693, buf694, buf704, buf705, 6291456, grid=grid(6291456), stream=stream0)
        buf707 = reinterpret_tensor(buf703, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf703  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf706, buf707, 12582912, grid=grid(12582912), stream=stream0)
        del buf704
        del buf705
        buf708 = reinterpret_tensor(buf692, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf692  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf695, buf708, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf693
        del buf694
        buf709 = empty_strided((48, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf707, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf708, (48, 128, 2048), (262144, 2048, 1), 0), out=buf709)
        buf659 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf712 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax11')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf656, scalar_tensor, buf709, buf659, buf712, 98304, 2048, grid=grid(98304), stream=stream0)
        buf668 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf667, (6144, 2048), (2048, 1), 0), permute_274, out=buf668)
        buf669 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf668, buf669, 12582912, grid=grid(12582912), stream=stream0)
        buf670 = reinterpret_tensor(buf668, (48, 2048, 128), (262144, 128, 1)); del buf668  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf659, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf669, (48, 2048, 128), (262144, 128, 1), 0), out=buf670)
        buf671 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf670, buf671, 12582912, grid=grid(12582912), stream=stream0)
        buf672 = reinterpret_tensor(buf670, (6144, 2048), (2048, 1)); del buf670  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf671, permute_282, out=buf672)
        buf678 = reinterpret_tensor(buf672, (3, 2048, 2048), (4194304, 2048, 1)); del buf672  # reuse
        buf679 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf680 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_450, add_575, add_576, add_577, float_6, mean_3, mul_18, mul_19, mul_20, mul_559, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_39.run(buf678, buf677, unsqueeze_641, buf572, buf578, primals_198, buf679, buf680, 6144, 2048, grid=grid(6144), stream=stream0)
        buf681 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf680, (6144, 2048), (2048, 1), 0), permute_283, out=buf681)
        buf682 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf680, (6144, 2048), (2048, 1), 0), permute_284, out=buf682)
        buf683 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf681, buf682, buf683, 34603008, grid=grid(34603008), stream=stream0)
        buf684 = reinterpret_tensor(buf677, (6144, 2048), (2048, 1)); del buf677  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf683, (6144, 5632), (5632, 1), 0), permute_285, out=buf684)
        buf713 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf725 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf736 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf748 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf714 = buf713; del buf713  # reuse
        buf726 = buf725; del buf725  # reuse
        buf737 = buf736; del buf736  # reuse
        buf749 = buf748; del buf748  # reuse
        buf715 = buf714; del buf714  # reuse
        buf727 = buf726; del buf726  # reuse
        buf738 = buf737; del buf737  # reuse
        buf750 = buf749; del buf749  # reuse
        buf716 = buf715; del buf715  # reuse
        buf728 = buf727; del buf727  # reuse
        buf739 = buf738; del buf738  # reuse
        buf751 = buf750; del buf750  # reuse
        buf717 = buf716; del buf716  # reuse
        buf729 = buf728; del buf728  # reuse
        buf740 = buf739; del buf739  # reuse
        buf752 = buf751; del buf751  # reuse
        buf718 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf719 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_480, add_481, add_482, add_483, add_484, add_485, add_486, add_487, add_488, add_489, add_490, add_491, add_492, add_493, add_494, add_495, add_496, add_497, add_498, add_499, add_5, add_50, add_500, add_501, add_502, add_503, add_504, add_505, add_506, add_507, add_508, add_509, add_648, add_649, add_650, add_651, add_652, add_653, add_654, add_655, add_656, add_657, add_658, add_659, add_660, add_661, add_662, add_666, add_667, add_668, add_669, add_670, add_671, add_672, add_673, add_674, add_675, add_676, add_677, add_678, add_679, add_680, add_72, add_96, add_98, float_3, mean_2, mul_4, mul_465, mul_466, mul_467, mul_468, mul_469, mul_470, mul_471, mul_472, mul_473, mul_474, mul_475, mul_476, mul_477, mul_478, mul_479, mul_480, mul_481, mul_482, mul_483, mul_484, mul_485, mul_486, mul_487, mul_488, mul_489, mul_490, mul_491, mul_492, mul_493, mul_494, mul_6, mul_630, mul_631, mul_632, mul_633, mul_634, mul_635, mul_636, mul_637, mul_638, mul_639, mul_640, mul_641, mul_642, mul_643, mul_644, mul_648, mul_649, mul_650, mul_651, mul_652, mul_653, mul_654, mul_655, mul_656, mul_657, mul_658, mul_659, mul_660, mul_661, mul_662, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_40.run(buf717, buf729, buf740, buf752, unsqueeze_542, embedding, unsqueeze_543, buf33, buf39, unsqueeze_544, unsqueeze_11, buf99, buf105, unsqueeze_557, unsqueeze_558, unsqueeze_559, unsqueeze_740, unsqueeze_741, unsqueeze_742, unsqueeze_722, unsqueeze_723, unsqueeze_724, unsqueeze_545, buf68, buf74, unsqueeze_546, buf173, buf172, buf179, unsqueeze_547, buf138, buf144, unsqueeze_560, unsqueeze_561, unsqueeze_562, unsqueeze_743, unsqueeze_744, unsqueeze_745, unsqueeze_725, unsqueeze_726, unsqueeze_727, unsqueeze_548, buf251, buf257, unsqueeze_549, buf212, buf210, buf218, unsqueeze_550, buf337, buf343, unsqueeze_563, unsqueeze_564, unsqueeze_565, unsqueeze_746, unsqueeze_747, unsqueeze_748, unsqueeze_728, unsqueeze_729, unsqueeze_730, unsqueeze_551, buf294, buf300, unsqueeze_552, buf427, buf424, buf433, unsqueeze_553, buf384, buf390, unsqueeze_566, unsqueeze_567, unsqueeze_568, unsqueeze_749, unsqueeze_750, unsqueeze_751, unsqueeze_731, unsqueeze_732, unsqueeze_733, unsqueeze_554, buf521, buf527, unsqueeze_555, buf474, buf470, buf480, unsqueeze_556, buf623, buf629, unsqueeze_569, unsqueeze_570, unsqueeze_571, unsqueeze_752, unsqueeze_753, unsqueeze_754, unsqueeze_734, unsqueeze_735, unsqueeze_736, primals_181, buf718, buf719, 6144, 2048, grid=grid(6144), stream=stream0)
        buf720 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf719, (6144, 2048), (2048, 1), 0), permute_257, out=buf720)
        buf721 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf720, buf721, 12582912, grid=grid(12582912), stream=stream0)
        buf722 = reinterpret_tensor(buf720, (48, 2048, 128), (262144, 128, 1)); del buf720  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf712, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf721, (48, 2048, 128), (262144, 128, 1), 0), out=buf722)
        buf723 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf722, buf723, 12582912, grid=grid(12582912), stream=stream0)
        buf724 = reinterpret_tensor(buf722, (6144, 2048), (2048, 1)); del buf722  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf723, permute_265, out=buf724)
        buf730 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf731 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_510, add_511, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf729, buf724, primals_186, buf730, buf731, 6144, 2048, grid=grid(6144), stream=stream0)
        buf732 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf731, (6144, 2048), (2048, 1), 0), permute_266, out=buf732)
        buf733 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf731, (6144, 2048), (2048, 1), 0), permute_267, out=buf733)
        buf734 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf732, buf733, buf734, 34603008, grid=grid(34603008), stream=stream0)
        buf735 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf734, (6144, 5632), (5632, 1), 0), permute_268, out=buf735)
        buf834 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf846 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf859 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf835 = buf834; del buf834  # reuse
        buf847 = buf846; del buf846  # reuse
        buf860 = buf859; del buf859  # reuse
        buf836 = buf835; del buf835  # reuse
        buf848 = buf847; del buf847  # reuse
        buf861 = buf860; del buf860  # reuse
        buf837 = buf836; del buf836  # reuse
        buf849 = buf848; del buf848  # reuse
        buf862 = buf861; del buf861  # reuse
        buf838 = buf837; del buf837  # reuse
        buf850 = buf849; del buf849  # reuse
        buf863 = buf862; del buf862  # reuse
        buf766 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf779 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf767 = buf766; del buf766  # reuse
        buf780 = buf779; del buf779  # reuse
        buf768 = buf767; del buf767  # reuse
        buf781 = buf780; del buf780  # reuse
        buf769 = buf768; del buf768  # reuse
        buf782 = buf781; del buf781  # reuse
        buf770 = buf769; del buf769  # reuse
        buf783 = buf782; del buf782  # reuse
        buf741 = buf740; del buf740  # reuse
        buf753 = buf752; del buf752  # reuse
        buf771 = buf770; del buf770  # reuse
        buf784 = buf783; del buf783  # reuse
        buf796 = reinterpret_tensor(buf695, (3, 2048, 2048), (4194304, 2048, 1)); del buf695  # reuse
        buf808 = reinterpret_tensor(buf706, (3, 2048, 2048), (4194304, 2048, 1)); del buf706  # reuse
        buf826 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float32)
        buf797 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf798 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf809 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf810 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf827 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf828 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf742 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf743 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf754 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf755 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf772 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf773 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_579, add_580, add_581, add_582, add_583, add_584, add_585, add_586, add_587, add_588, add_589, add_590, add_591, add_592, add_593, add_594, add_595, add_596, add_597, add_598, add_599, add_600, add_601, add_602, add_603, add_604, add_605, add_606, add_607, add_608, add_609, add_610, add_611, add_612, add_613, add_614, add_615, add_616, add_617, add_618, add_619, add_620, add_621, add_622, add_623, add_624, add_625, add_626, add_627, add_628, add_629, add_630, add_631, add_632, add_633, add_634, add_635, add_636, add_637, add_638, add_639, add_640, add_641, add_642, add_643, add_663, add_664, add_665, add_681, add_682, add_683, add_684, add_685, add_686, add_687, add_688, add_689, add_690, add_691, add_692, add_693, add_694, add_695, add_696, add_697, add_698, add_699, add_700, add_701, add_702, add_703, add_704, add_705, add_706, add_707, add_708, add_709, add_710, add_711, add_712, add_713, add_714, add_715, add_716, add_717, add_718, add_719, add_72, add_800, add_801, add_802, add_803, add_804, add_805, add_806, add_807, add_808, add_809, add_810, add_811, add_812, add_813, add_814, add_820, add_821, add_822, add_823, add_824, add_825, add_826, add_827, add_828, add_829, add_830, add_831, add_832, add_833, add_834, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_561, mul_562, mul_563, mul_564, mul_565, mul_566, mul_567, mul_568, mul_569, mul_570, mul_571, mul_572, mul_573, mul_574, mul_575, mul_576, mul_577, mul_578, mul_579, mul_580, mul_581, mul_582, mul_583, mul_584, mul_585, mul_586, mul_587, mul_588, mul_589, mul_590, mul_591, mul_592, mul_593, mul_594, mul_595, mul_596, mul_597, mul_598, mul_599, mul_6, mul_600, mul_601, mul_602, mul_603, mul_604, mul_605, mul_606, mul_607, mul_608, mul_609, mul_610, mul_611, mul_612, mul_613, mul_614, mul_615, mul_616, mul_617, mul_618, mul_619, mul_620, mul_621, mul_622, mul_623, mul_624, mul_625, mul_626, mul_645, mul_646, mul_647, mul_663, mul_664, mul_665, mul_666, mul_667, mul_668, mul_669, mul_670, mul_671, mul_672, mul_673, mul_674, mul_675, mul_676, mul_677, mul_678, mul_679, mul_680, mul_681, mul_682, mul_683, mul_684, mul_685, mul_686, mul_687, mul_688, mul_689, mul_690, mul_691, mul_692, mul_693, mul_694, mul_695, mul_696, mul_697, mul_698, mul_699, mul_7, mul_700, mul_701, mul_780, mul_781, mul_782, mul_783, mul_784, mul_785, mul_786, mul_787, mul_788, mul_789, mul_790, mul_791, mul_792, mul_793, mul_794, mul_8, mul_800, mul_801, mul_802, mul_803, mul_804, mul_805, mul_806, mul_807, mul_808, mul_809, mul_810, mul_811, mul_812, mul_813, mul_814, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_41.run(buf838, buf850, buf863, buf771, buf784, buf741, buf753, unsqueeze_682, embedding, unsqueeze_683, buf33, buf39, unsqueeze_684, unsqueeze_11, buf99, buf105, unsqueeze_699, unsqueeze_700, unsqueeze_701, unsqueeze_902, unsqueeze_903, unsqueeze_904, unsqueeze_882, unsqueeze_883, unsqueeze_884, unsqueeze_685, buf68, buf74, unsqueeze_686, buf173, buf172, buf179, unsqueeze_687, buf138, buf144, unsqueeze_702, unsqueeze_703, unsqueeze_704, unsqueeze_905, unsqueeze_906, unsqueeze_907, unsqueeze_885, unsqueeze_886, unsqueeze_887, unsqueeze_688, buf251, buf257, unsqueeze_689, buf212, buf210, buf218, unsqueeze_690, buf337, buf343, unsqueeze_705, unsqueeze_706, unsqueeze_707, unsqueeze_908, unsqueeze_909, unsqueeze_910, unsqueeze_888, unsqueeze_889, unsqueeze_890, unsqueeze_691, buf294, buf300, unsqueeze_692, buf427, buf424, buf433, unsqueeze_693, buf384, buf390, unsqueeze_708, unsqueeze_709, unsqueeze_710, unsqueeze_911, unsqueeze_912, unsqueeze_913, unsqueeze_891, unsqueeze_892, unsqueeze_893, unsqueeze_694, buf521, buf527, unsqueeze_695, buf474, buf470, buf480, unsqueeze_696, buf623, buf629, unsqueeze_711, unsqueeze_712, unsqueeze_713, unsqueeze_914, unsqueeze_915, unsqueeze_916, unsqueeze_894, unsqueeze_895, unsqueeze_896, unsqueeze_758, unsqueeze_759, unsqueeze_760, unsqueeze_776, unsqueeze_777, unsqueeze_778, unsqueeze_665, unsqueeze_666, unsqueeze_667, unsqueeze_648, unsqueeze_649, unsqueeze_650, unsqueeze_761, unsqueeze_762, unsqueeze_763, unsqueeze_779, unsqueeze_780, unsqueeze_781, unsqueeze_668, unsqueeze_669, unsqueeze_670, unsqueeze_651, unsqueeze_652, unsqueeze_653, unsqueeze_764, unsqueeze_765, unsqueeze_766, unsqueeze_782, unsqueeze_783, unsqueeze_784, unsqueeze_671, unsqueeze_672, unsqueeze_673, unsqueeze_654, unsqueeze_655, unsqueeze_656, unsqueeze_767, unsqueeze_768, unsqueeze_769, unsqueeze_785, unsqueeze_786, unsqueeze_787, unsqueeze_674, unsqueeze_675, unsqueeze_676, unsqueeze_657, unsqueeze_658, unsqueeze_659, unsqueeze_770, unsqueeze_771, unsqueeze_772, unsqueeze_788, unsqueeze_789, unsqueeze_790, unsqueeze_677, unsqueeze_678, unsqueeze_679, unsqueeze_660, unsqueeze_661, unsqueeze_662, unsqueeze_755, buf572, buf578, unsqueeze_756, buf729, buf724, buf735, unsqueeze_757, buf678, buf684, unsqueeze_737, unsqueeze_738, unsqueeze_739, unsqueeze_773, unsqueeze_774, unsqueeze_775, unsqueeze_791, unsqueeze_792, unsqueeze_793, unsqueeze_680, unsqueeze_681, unsqueeze_663, unsqueeze_664, unsqueeze_697, unsqueeze_698, primals_204, primals_203, primals_205, primals_216, primals_215, primals_217, buf796, buf808, buf826, buf797, buf798, buf809, buf810, buf827, buf828, buf742, buf743, buf754, buf755, buf772, buf773, 6144, 2048, grid=grid(6144), stream=stream0)
        buf744 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf743, (6144, 2048), (2048, 1), 0), permute_307, out=buf744)
        buf756 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf755, (6144, 2048), (2048, 1), 0), permute_306, out=buf756)
        buf747 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf745 = reinterpret_tensor(buf747, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf746 = reinterpret_tensor(buf747, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf759 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf757 = reinterpret_tensor(buf759, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf758 = reinterpret_tensor(buf759, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf744, select_1, select_3, buf756, buf745, buf746, buf757, buf758, 6291456, grid=grid(6291456), stream=stream0)
        buf760 = reinterpret_tensor(buf756, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf756  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf759, buf760, 12582912, grid=grid(12582912), stream=stream0)
        del buf745
        del buf746
        del buf757
        del buf758
        buf761 = reinterpret_tensor(buf744, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf744  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf747, buf761, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf762 = buf709; del buf709  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf760, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf761, (48, 128, 2048), (262144, 2048, 1), 0), out=buf762)
        buf799 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf798, (6144, 2048), (2048, 1), 0), permute_290, out=buf799)
        buf811 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf810, (6144, 2048), (2048, 1), 0), permute_289, out=buf811)
        buf802 = buf747; del buf747  # reuse
        buf800 = reinterpret_tensor(buf802, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf801 = reinterpret_tensor(buf802, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf814 = buf759; del buf759  # reuse
        buf812 = reinterpret_tensor(buf814, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf813 = reinterpret_tensor(buf814, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf799, select_1, select_3, buf811, buf800, buf801, buf812, buf813, 6291456, grid=grid(6291456), stream=stream0)
        buf815 = reinterpret_tensor(buf811, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf811  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf814, buf815, 12582912, grid=grid(12582912), stream=stream0)
        del buf812
        del buf813
        buf816 = reinterpret_tensor(buf799, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf799  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf802, buf816, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf800
        del buf801
        buf817 = buf656; del buf656  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf815, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf816, (48, 128, 2048), (262144, 2048, 1), 0), out=buf817)
        buf765 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf820 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax12')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf762, scalar_tensor, buf817, buf765, buf820, 98304, 2048, grid=grid(98304), stream=stream0)
        buf774 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf773, (6144, 2048), (2048, 1), 0), permute_308, out=buf774)
        buf775 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf774, buf775, 12582912, grid=grid(12582912), stream=stream0)
        buf776 = reinterpret_tensor(buf774, (48, 2048, 128), (262144, 128, 1)); del buf774  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf765, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf775, (48, 2048, 128), (262144, 128, 1), 0), out=buf776)
        buf777 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf776, buf777, 12582912, grid=grid(12582912), stream=stream0)
        buf778 = reinterpret_tensor(buf776, (6144, 2048), (2048, 1)); del buf776  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf777, permute_316, out=buf778)
        buf785 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf786 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_720, add_721, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf784, buf778, primals_222, buf785, buf786, 6144, 2048, grid=grid(6144), stream=stream0)
        buf787 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf786, (6144, 2048), (2048, 1), 0), permute_317, out=buf787)
        buf788 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf786, (6144, 2048), (2048, 1), 0), permute_318, out=buf788)
        buf789 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf787, buf788, buf789, 34603008, grid=grid(34603008), stream=stream0)
        buf790 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf789, (6144, 5632), (5632, 1), 0), permute_319, out=buf790)
        buf829 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf828, (6144, 2048), (2048, 1), 0), permute_291, out=buf829)
        buf830 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf829, buf830, 12582912, grid=grid(12582912), stream=stream0)
        buf831 = reinterpret_tensor(buf829, (48, 2048, 128), (262144, 128, 1)); del buf829  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf820, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf830, (48, 2048, 128), (262144, 128, 1), 0), out=buf831)
        buf832 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf831, buf832, 12582912, grid=grid(12582912), stream=stream0)
        buf833 = reinterpret_tensor(buf831, (6144, 2048), (2048, 1)); del buf831  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf832, permute_299, out=buf833)
        buf839 = reinterpret_tensor(buf833, (3, 2048, 2048), (4194304, 2048, 1)); del buf833  # reuse
        buf851 = buf850; del buf850  # reuse
        buf864 = buf863; del buf863  # reuse
        buf840 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf841 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_450, add_510, add_512, add_578, add_644, add_645, add_646, add_647, add_815, add_816, add_817, add_835, add_836, add_837, float_6, mean_3, mul_18, mul_19, mul_20, mul_627, mul_628, mul_795, mul_796, mul_797, mul_815, mul_816, mul_817, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_42.run(buf839, buf851, buf864, buf838, unsqueeze_714, buf572, buf578, unsqueeze_715, buf729, buf724, buf735, unsqueeze_917, unsqueeze_918, unsqueeze_919, buf678, buf684, unsqueeze_897, unsqueeze_898, unsqueeze_899, primals_210, buf840, buf841, 6144, 2048, grid=grid(6144), stream=stream0)
        buf842 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf841, (6144, 2048), (2048, 1), 0), permute_300, out=buf842)
        buf843 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf841, (6144, 2048), (2048, 1), 0), permute_301, out=buf843)
        buf844 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf842, buf843, buf844, 34603008, grid=grid(34603008), stream=stream0)
        buf845 = reinterpret_tensor(buf838, (6144, 2048), (2048, 1)); del buf838  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf844, (6144, 5632), (5632, 1), 0), permute_302, out=buf845)
        buf892 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf905 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf918 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf893 = buf892; del buf892  # reuse
        buf906 = buf905; del buf905  # reuse
        buf919 = buf918; del buf918  # reuse
        buf894 = buf893; del buf893  # reuse
        buf907 = buf906; del buf906  # reuse
        buf920 = buf919; del buf919  # reuse
        buf895 = buf894; del buf894  # reuse
        buf908 = buf907; del buf907  # reuse
        buf921 = buf920; del buf920  # reuse
        buf896 = buf895; del buf895  # reuse
        buf909 = buf908; del buf908  # reuse
        buf922 = buf921; del buf921  # reuse
        buf897 = buf896; del buf896  # reuse
        buf910 = buf909; del buf909  # reuse
        buf923 = buf922; del buf922  # reuse
        buf852 = reinterpret_tensor(buf802, (3, 2048, 2048), (4194304, 2048, 1)); del buf802  # reuse
        buf865 = reinterpret_tensor(buf814, (3, 2048, 2048), (4194304, 2048, 1)); del buf814  # reuse
        buf884 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float32)
        buf853 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf854 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf866 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf867 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf885 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf886 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_723, add_724, add_725, add_726, add_727, add_728, add_729, add_730, add_731, add_732, add_733, add_734, add_735, add_736, add_737, add_738, add_739, add_741, add_742, add_743, add_744, add_745, add_746, add_747, add_748, add_749, add_750, add_751, add_752, add_753, add_754, add_755, add_756, add_757, add_758, add_818, add_819, add_838, add_839, add_840, add_841, add_842, add_843, add_844, add_845, add_846, add_847, add_848, add_849, add_850, add_851, add_852, add_853, add_854, add_855, add_856, add_857, add_858, add_859, add_860, add_861, add_862, add_863, add_864, add_865, add_866, add_867, add_868, add_869, add_870, add_871, add_872, add_873, add_874, add_875, add_876, add_877, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_703, mul_704, mul_705, mul_706, mul_707, mul_708, mul_709, mul_710, mul_711, mul_712, mul_713, mul_714, mul_715, mul_716, mul_717, mul_718, mul_719, mul_720, mul_722, mul_723, mul_724, mul_725, mul_726, mul_727, mul_728, mul_729, mul_730, mul_731, mul_732, mul_733, mul_734, mul_735, mul_736, mul_737, mul_738, mul_739, mul_798, mul_799, mul_8, mul_818, mul_819, mul_820, mul_821, mul_822, mul_823, mul_824, mul_825, mul_826, mul_827, mul_828, mul_829, mul_830, mul_831, mul_832, mul_833, mul_834, mul_835, mul_836, mul_837, mul_838, mul_839, mul_840, mul_841, mul_842, mul_843, mul_844, mul_845, mul_846, mul_847, mul_848, mul_849, mul_850, mul_851, mul_852, mul_853, mul_854, mul_855, mul_856, mul_857, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_43.run(buf897, buf910, buf923, unsqueeze_922, embedding, unsqueeze_923, buf33, buf39, unsqueeze_924, unsqueeze_11, buf99, buf105, unsqueeze_942, unsqueeze_943, unsqueeze_944, unsqueeze_819, unsqueeze_820, unsqueeze_821, unsqueeze_800, unsqueeze_801, unsqueeze_802, unsqueeze_925, buf68, buf74, unsqueeze_926, buf173, buf172, buf179, unsqueeze_927, buf138, buf144, unsqueeze_945, unsqueeze_946, unsqueeze_947, unsqueeze_822, unsqueeze_823, unsqueeze_824, unsqueeze_803, unsqueeze_804, unsqueeze_805, unsqueeze_928, buf251, buf257, unsqueeze_929, buf212, buf210, buf218, unsqueeze_930, buf337, buf343, unsqueeze_948, unsqueeze_949, unsqueeze_950, unsqueeze_825, unsqueeze_826, unsqueeze_827, unsqueeze_806, unsqueeze_807, unsqueeze_808, unsqueeze_931, buf294, buf300, unsqueeze_932, buf427, buf424, buf433, unsqueeze_933, buf384, buf390, unsqueeze_951, unsqueeze_952, unsqueeze_953, unsqueeze_828, unsqueeze_829, unsqueeze_830, unsqueeze_809, unsqueeze_810, unsqueeze_811, unsqueeze_934, buf521, buf527, unsqueeze_935, buf474, buf470, buf480, unsqueeze_936, buf623, buf629, unsqueeze_954, unsqueeze_955, unsqueeze_956, unsqueeze_831, unsqueeze_832, unsqueeze_833, unsqueeze_812, unsqueeze_813, unsqueeze_814, unsqueeze_937, buf572, buf578, unsqueeze_938, buf729, buf724, buf735, unsqueeze_939, buf678, buf684, unsqueeze_957, unsqueeze_958, unsqueeze_959, unsqueeze_834, unsqueeze_835, unsqueeze_836, unsqueeze_815, unsqueeze_816, unsqueeze_817, buf851, unsqueeze_920, buf839, buf845, unsqueeze_921, buf784, buf778, buf790, buf864, unsqueeze_900, unsqueeze_901, unsqueeze_940, unsqueeze_941, primals_240, primals_239, primals_241, buf852, buf865, buf884, buf853, buf854, buf866, buf867, buf885, buf886, 6144, 2048, grid=grid(6144), stream=stream0)
        buf855 = reinterpret_tensor(buf864, (6144, 2048), (2048, 1)); del buf864  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf854, (6144, 2048), (2048, 1), 0), permute_341, out=buf855)
        buf868 = reinterpret_tensor(buf851, (6144, 2048), (2048, 1)); del buf851  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf867, (6144, 2048), (2048, 1), 0), permute_340, out=buf868)
        buf858 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf856 = reinterpret_tensor(buf858, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf857 = reinterpret_tensor(buf858, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf871 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf869 = reinterpret_tensor(buf871, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf870 = reinterpret_tensor(buf871, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf855, select_1, select_3, buf868, buf856, buf857, buf869, buf870, 6291456, grid=grid(6291456), stream=stream0)
        buf872 = reinterpret_tensor(buf868, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf868  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf871, buf872, 12582912, grid=grid(12582912), stream=stream0)
        del buf856
        del buf857
        del buf869
        del buf870
        buf873 = reinterpret_tensor(buf855, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf855  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf858, buf873, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf874 = buf817; del buf817  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf872, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf873, (48, 128, 2048), (262144, 2048, 1), 0), out=buf874)
        buf877 = reinterpret_tensor(buf762, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf762  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax13')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf874, scalar_tensor, buf877, 98304, 2048, grid=grid(98304), stream=stream0)
        buf887 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf886, (6144, 2048), (2048, 1), 0), permute_342, out=buf887)
        buf888 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf887, buf888, 12582912, grid=grid(12582912), stream=stream0)
        buf889 = reinterpret_tensor(buf887, (48, 2048, 128), (262144, 128, 1)); del buf887  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf877, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf888, (48, 2048, 128), (262144, 128, 1), 0), out=buf889)
        buf890 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf889, buf890, 12582912, grid=grid(12582912), stream=stream0)
        buf891 = reinterpret_tensor(buf889, (6144, 2048), (2048, 1)); del buf889  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf890, permute_350, out=buf891)
        buf937 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf951 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf964 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf978 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf938 = buf937; del buf937  # reuse
        buf952 = buf951; del buf951  # reuse
        buf965 = buf964; del buf964  # reuse
        buf979 = buf978; del buf978  # reuse
        buf939 = buf938; del buf938  # reuse
        buf953 = buf952; del buf952  # reuse
        buf966 = buf965; del buf965  # reuse
        buf980 = buf979; del buf979  # reuse
        buf940 = buf939; del buf939  # reuse
        buf954 = buf953; del buf953  # reuse
        buf967 = buf966; del buf966  # reuse
        buf981 = buf980; del buf980  # reuse
        buf941 = buf940; del buf940  # reuse
        buf955 = buf954; del buf954  # reuse
        buf968 = buf967; del buf967  # reuse
        buf982 = buf981; del buf981  # reuse
        buf942 = buf941; del buf941  # reuse
        buf956 = buf955; del buf955  # reuse
        buf969 = buf968; del buf968  # reuse
        buf983 = buf982; del buf982  # reuse
        buf911 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf924 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf943 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf898 = reinterpret_tensor(buf891, (3, 2048, 2048), (4194304, 2048, 1)); del buf891  # reuse
        buf912 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf925 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf944 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf913 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf926 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf945 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf899 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf900 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_1000, add_1001, add_1002, add_1003, add_1004, add_1005, add_1006, add_1007, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_740, add_759, add_760, add_761, add_762, add_763, add_764, add_765, add_766, add_767, add_768, add_769, add_770, add_771, add_772, add_773, add_774, add_775, add_776, add_777, add_778, add_779, add_780, add_781, add_782, add_783, add_784, add_785, add_786, add_787, add_788, add_789, add_790, add_791, add_792, add_793, add_794, add_795, add_796, add_878, add_879, add_880, add_881, add_96, add_968, add_969, add_970, add_971, add_972, add_973, add_974, add_975, add_976, add_977, add_978, add_979, add_98, add_980, add_981, add_982, add_983, add_984, add_985, add_990, add_991, add_992, add_993, add_994, add_995, add_996, add_997, add_998, add_999, float_1, float_2, float_3, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_18, mul_19, mul_2, mul_20, mul_3, mul_4, mul_5, mul_6, mul_7, mul_721, mul_740, mul_741, mul_742, mul_743, mul_744, mul_745, mul_746, mul_747, mul_748, mul_749, mul_750, mul_751, mul_752, mul_753, mul_754, mul_755, mul_756, mul_757, mul_758, mul_759, mul_760, mul_761, mul_762, mul_763, mul_764, mul_765, mul_766, mul_767, mul_768, mul_769, mul_770, mul_771, mul_772, mul_773, mul_774, mul_775, mul_776, mul_777, mul_8, mul_858, mul_859, mul_946, mul_947, mul_948, mul_949, mul_950, mul_951, mul_952, mul_953, mul_954, mul_955, mul_956, mul_957, mul_958, mul_959, mul_960, mul_961, mul_962, mul_963, mul_968, mul_969, mul_970, mul_971, mul_972, mul_973, mul_974, mul_975, mul_976, mul_977, mul_978, mul_979, mul_980, mul_981, mul_982, mul_983, mul_984, mul_985, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_44.run(buf942, buf956, buf969, buf983, buf898, unsqueeze_838, embedding, unsqueeze_839, buf33, buf39, unsqueeze_840, unsqueeze_11, buf99, buf105, unsqueeze_857, unsqueeze_858, unsqueeze_859, unsqueeze_1080, unsqueeze_1081, unsqueeze_1082, unsqueeze_1058, unsqueeze_1059, unsqueeze_1060, unsqueeze_841, buf68, buf74, unsqueeze_842, buf173, buf172, buf179, unsqueeze_843, buf138, buf144, unsqueeze_860, unsqueeze_861, unsqueeze_862, unsqueeze_1083, unsqueeze_1084, unsqueeze_1085, unsqueeze_1061, unsqueeze_1062, unsqueeze_1063, unsqueeze_844, buf251, buf257, unsqueeze_845, buf212, buf210, buf218, unsqueeze_846, buf337, buf343, unsqueeze_863, unsqueeze_864, unsqueeze_865, unsqueeze_1086, unsqueeze_1087, unsqueeze_1088, unsqueeze_1064, unsqueeze_1065, unsqueeze_1066, unsqueeze_847, buf294, buf300, unsqueeze_848, buf427, buf424, buf433, unsqueeze_849, buf384, buf390, unsqueeze_866, unsqueeze_867, unsqueeze_868, unsqueeze_1089, unsqueeze_1090, unsqueeze_1091, unsqueeze_1067, unsqueeze_1068, unsqueeze_1069, unsqueeze_850, buf521, buf527, unsqueeze_851, buf474, buf470, buf480, unsqueeze_852, buf623, buf629, unsqueeze_869, unsqueeze_870, unsqueeze_871, unsqueeze_1092, unsqueeze_1093, unsqueeze_1094, unsqueeze_1070, unsqueeze_1071, unsqueeze_1072, unsqueeze_853, buf572, buf578, unsqueeze_854, buf729, buf724, buf735, unsqueeze_855, buf678, buf684, unsqueeze_872, unsqueeze_873, unsqueeze_874, unsqueeze_1095, unsqueeze_1096, unsqueeze_1097, unsqueeze_1073, unsqueeze_1074, unsqueeze_1075, buf910, unsqueeze_837, buf839, buf845, buf923, unsqueeze_818, unsqueeze_856, buf897, unsqueeze_960, unsqueeze_961, buf784, buf778, buf790, primals_228, primals_227, primals_229, primals_246, buf911, buf924, buf943, buf912, buf925, buf944, buf913, buf926, buf945, buf899, buf900, 6144, 2048, grid=grid(6144), stream=stream0)
        buf901 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf900, (6144, 2048), (2048, 1), 0), permute_351, out=buf901)
        buf902 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf900, (6144, 2048), (2048, 1), 0), permute_352, out=buf902)
        buf903 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf901, buf902, buf903, 34603008, grid=grid(34603008), stream=stream0)
        buf904 = reinterpret_tensor(buf897, (6144, 2048), (2048, 1)); del buf897  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf903, (6144, 5632), (5632, 1), 0), permute_353, out=buf904)
        buf914 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf913, (6144, 2048), (2048, 1), 0), permute_324, out=buf914)
        buf927 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf926, (6144, 2048), (2048, 1), 0), permute_323, out=buf927)
        buf917 = buf858; del buf858  # reuse
        buf915 = reinterpret_tensor(buf917, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf916 = reinterpret_tensor(buf917, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf930 = buf871; del buf871  # reuse
        buf928 = reinterpret_tensor(buf930, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf929 = reinterpret_tensor(buf930, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf914, select_1, select_3, buf927, buf915, buf916, buf928, buf929, 6291456, grid=grid(6291456), stream=stream0)
        buf931 = reinterpret_tensor(buf927, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf927  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf930, buf931, 12582912, grid=grid(12582912), stream=stream0)
        del buf915
        del buf916
        del buf928
        del buf929
        buf932 = reinterpret_tensor(buf914, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf914  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf917, buf932, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf933 = buf874; del buf874  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf931, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf932, (48, 128, 2048), (262144, 2048, 1), 0), out=buf933)
        buf936 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax14')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf933, scalar_tensor, buf936, 98304, 2048, grid=grid(98304), stream=stream0)
        buf946 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf945, (6144, 2048), (2048, 1), 0), permute_325, out=buf946)
        buf947 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf946, buf947, 12582912, grid=grid(12582912), stream=stream0)
        buf948 = reinterpret_tensor(buf946, (48, 2048, 128), (262144, 128, 1)); del buf946  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf936, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf947, (48, 2048, 128), (262144, 128, 1), 0), out=buf948)
        buf949 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf948, buf949, 12582912, grid=grid(12582912), stream=stream0)
        buf950 = reinterpret_tensor(buf948, (6144, 2048), (2048, 1)); del buf948  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf949, permute_333, out=buf950)
        buf957 = reinterpret_tensor(buf950, (3, 2048, 2048), (4194304, 2048, 1)); del buf950  # reuse
        buf958 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf959 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_648, add_797, add_798, add_799, float_6, mean_3, mul_18, mul_19, mul_20, mul_778, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_45.run(buf957, buf956, unsqueeze_875, buf839, buf845, primals_234, buf958, buf959, 6144, 2048, grid=grid(6144), stream=stream0)
        buf960 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf959, (6144, 2048), (2048, 1), 0), permute_334, out=buf960)
        buf961 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf959, (6144, 2048), (2048, 1), 0), permute_335, out=buf961)
        buf962 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf960, buf961, buf962, 34603008, grid=grid(34603008), stream=stream0)
        buf963 = reinterpret_tensor(buf956, (6144, 2048), (2048, 1)); del buf956  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf962, (6144, 5632), (5632, 1), 0), permute_336, out=buf963)
        buf998 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1013 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1027 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1040 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf999 = buf998; del buf998  # reuse
        buf1014 = buf1013; del buf1013  # reuse
        buf1028 = buf1027; del buf1027  # reuse
        buf1041 = buf1040; del buf1040  # reuse
        buf1000 = buf999; del buf999  # reuse
        buf1015 = buf1014; del buf1014  # reuse
        buf1029 = buf1028; del buf1028  # reuse
        buf1042 = buf1041; del buf1041  # reuse
        buf1001 = buf1000; del buf1000  # reuse
        buf1016 = buf1015; del buf1015  # reuse
        buf1030 = buf1029; del buf1029  # reuse
        buf1043 = buf1042; del buf1042  # reuse
        buf1002 = buf1001; del buf1001  # reuse
        buf1017 = buf1016; del buf1016  # reuse
        buf1031 = buf1030; del buf1030  # reuse
        buf1044 = buf1043; del buf1043  # reuse
        buf1003 = buf1002; del buf1002  # reuse
        buf1018 = buf1017; del buf1017  # reuse
        buf1032 = buf1031; del buf1031  # reuse
        buf1045 = buf1044; del buf1044  # reuse
        buf1004 = buf1003; del buf1003  # reuse
        buf1019 = buf1018; del buf1018  # reuse
        buf1033 = buf1032; del buf1032  # reuse
        buf1046 = buf1045; del buf1045  # reuse
        buf970 = buf969; del buf969  # reuse
        buf984 = buf983; del buf983  # reuse
        buf971 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf985 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1005 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf972 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf986 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1006 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf973 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf987 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1007 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1034 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1035 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1047 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1048 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_1008, add_1009, add_1010, add_1011, add_1012, add_1013, add_1014, add_1015, add_1016, add_1017, add_1018, add_1019, add_1020, add_1021, add_1022, add_1023, add_1024, add_1025, add_1026, add_1027, add_1028, add_1029, add_1030, add_1031, add_1032, add_1033, add_1034, add_1035, add_1036, add_1037, add_1038, add_1039, add_1040, add_1041, add_1042, add_1043, add_1044, add_1045, add_1046, add_1047, add_1048, add_1049, add_1050, add_1051, add_1052, add_1053, add_1054, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_883, add_884, add_885, add_886, add_887, add_888, add_889, add_890, add_891, add_892, add_893, add_894, add_895, add_896, add_897, add_898, add_899, add_900, add_901, add_902, add_903, add_904, add_905, add_906, add_907, add_908, add_909, add_910, add_911, add_912, add_913, add_914, add_915, add_916, add_917, add_918, add_919, add_920, add_921, add_922, add_923, add_924, add_96, add_98, add_986, add_987, add_988, add_989, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1000, mul_1001, mul_1002, mul_1003, mul_1004, mul_1005, mul_1006, mul_1007, mul_1008, mul_1009, mul_1010, mul_1011, mul_1012, mul_1013, mul_1014, mul_1015, mul_1016, mul_1017, mul_1018, mul_1019, mul_1020, mul_1021, mul_1022, mul_1023, mul_1024, mul_1025, mul_1026, mul_1027, mul_1028, mul_1029, mul_1030, mul_1031, mul_1032, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_861, mul_862, mul_863, mul_864, mul_865, mul_866, mul_867, mul_868, mul_869, mul_870, mul_871, mul_872, mul_873, mul_874, mul_875, mul_876, mul_877, mul_878, mul_879, mul_880, mul_881, mul_882, mul_883, mul_884, mul_885, mul_886, mul_887, mul_888, mul_889, mul_890, mul_891, mul_892, mul_893, mul_894, mul_895, mul_896, mul_897, mul_898, mul_899, mul_900, mul_901, mul_902, mul_964, mul_965, mul_966, mul_967, mul_986, mul_987, mul_988, mul_989, mul_990, mul_991, mul_992, mul_993, mul_994, mul_995, mul_996, mul_997, mul_998, mul_999, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_46.run(buf1004, buf1019, buf1033, buf1046, buf970, buf984, unsqueeze_1102, embedding, unsqueeze_1103, buf33, buf39, unsqueeze_1104, unsqueeze_11, buf99, buf105, unsqueeze_1124, unsqueeze_1125, unsqueeze_1126, unsqueeze_989, unsqueeze_990, unsqueeze_991, unsqueeze_968, unsqueeze_969, unsqueeze_970, unsqueeze_1105, buf68, buf74, unsqueeze_1106, buf173, buf172, buf179, unsqueeze_1107, buf138, buf144, unsqueeze_1127, unsqueeze_1128, unsqueeze_1129, unsqueeze_992, unsqueeze_993, unsqueeze_994, unsqueeze_971, unsqueeze_972, unsqueeze_973, unsqueeze_1108, buf251, buf257, unsqueeze_1109, buf212, buf210, buf218, unsqueeze_1110, buf337, buf343, unsqueeze_1130, unsqueeze_1131, unsqueeze_1132, unsqueeze_995, unsqueeze_996, unsqueeze_997, unsqueeze_974, unsqueeze_975, unsqueeze_976, unsqueeze_1111, buf294, buf300, unsqueeze_1112, buf427, buf424, buf433, unsqueeze_1113, buf384, buf390, unsqueeze_1133, unsqueeze_1134, unsqueeze_1135, unsqueeze_998, unsqueeze_999, unsqueeze_1000, unsqueeze_977, unsqueeze_978, unsqueeze_979, unsqueeze_1114, buf521, buf527, unsqueeze_1115, buf474, buf470, buf480, unsqueeze_1116, buf623, buf629, unsqueeze_1136, unsqueeze_1137, unsqueeze_1138, unsqueeze_1001, unsqueeze_1002, unsqueeze_1003, unsqueeze_980, unsqueeze_981, unsqueeze_982, unsqueeze_1117, buf572, buf578, unsqueeze_1118, buf729, buf724, buf735, unsqueeze_1119, buf678, buf684, unsqueeze_1139, unsqueeze_1140, unsqueeze_1141, unsqueeze_1004, unsqueeze_1005, unsqueeze_1006, unsqueeze_983, unsqueeze_984, unsqueeze_985, unsqueeze_1120, buf839, buf845, unsqueeze_1121, buf784, buf778, buf790, unsqueeze_1122, buf957, buf963, unsqueeze_1142, unsqueeze_1143, unsqueeze_1144, unsqueeze_1007, unsqueeze_1008, unsqueeze_1009, unsqueeze_986, unsqueeze_987, unsqueeze_988, unsqueeze_1098, unsqueeze_1099, unsqueeze_1100, unsqueeze_1076, unsqueeze_1077, unsqueeze_1078, unsqueeze_1101, buf898, buf904, unsqueeze_1079, unsqueeze_1123, primals_264, primals_263, primals_265, primals_252, primals_251, buf971, buf985, buf1005, buf972, buf986, buf1006, buf973, buf987, buf1007, buf1034, buf1035, buf1047, buf1048, 6144, 2048, grid=grid(6144), stream=stream0)
        buf974 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf973, (6144, 2048), (2048, 1), 0), permute_375, out=buf974)
        buf988 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf987, (6144, 2048), (2048, 1), 0), permute_374, out=buf988)
        buf977 = buf917; del buf917  # reuse
        buf975 = reinterpret_tensor(buf977, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf976 = reinterpret_tensor(buf977, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf991 = buf930; del buf930  # reuse
        buf989 = reinterpret_tensor(buf991, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf990 = reinterpret_tensor(buf991, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf974, select_1, select_3, buf988, buf975, buf976, buf989, buf990, 6291456, grid=grid(6291456), stream=stream0)
        buf992 = reinterpret_tensor(buf988, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf988  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf991, buf992, 12582912, grid=grid(12582912), stream=stream0)
        del buf975
        del buf976
        del buf989
        del buf990
        buf993 = reinterpret_tensor(buf974, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf974  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf977, buf993, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf994 = buf933; del buf933  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf992, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf993, (48, 128, 2048), (262144, 2048, 1), 0), out=buf994)
        buf1036 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1035, (6144, 2048), (2048, 1), 0), permute_358, out=buf1036)
        buf1049 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1048, (6144, 2048), (2048, 1), 0), permute_357, out=buf1049)
        buf1039 = buf977; del buf977  # reuse
        buf1037 = reinterpret_tensor(buf1039, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf1038 = reinterpret_tensor(buf1039, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf1052 = buf991; del buf991  # reuse
        buf1050 = reinterpret_tensor(buf1052, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf1051 = reinterpret_tensor(buf1052, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf1036, select_1, select_3, buf1049, buf1037, buf1038, buf1050, buf1051, 6291456, grid=grid(6291456), stream=stream0)
        buf1053 = reinterpret_tensor(buf1049, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf1049  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf1052, buf1053, 12582912, grid=grid(12582912), stream=stream0)
        del buf1050
        del buf1051
        buf1054 = reinterpret_tensor(buf1036, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf1036  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf1039, buf1054, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1037
        del buf1038
        buf1055 = empty_strided((48, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1053, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1054, (48, 128, 2048), (262144, 2048, 1), 0), out=buf1055)
        buf997 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1058 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax15')
        triton_red_fused__softmax_mul_where_18.run(slice_3, buf994, scalar_tensor, buf1055, buf997, buf1058, 98304, 2048, grid=grid(98304), stream=stream0)
        buf1008 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1007, (6144, 2048), (2048, 1), 0), permute_376, out=buf1008)
        buf1009 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1008, buf1009, 12582912, grid=grid(12582912), stream=stream0)
        buf1010 = reinterpret_tensor(buf1008, (48, 2048, 128), (262144, 128, 1)); del buf1008  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf997, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1009, (48, 2048, 128), (262144, 128, 1), 0), out=buf1010)
        buf1011 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1010, buf1011, 12582912, grid=grid(12582912), stream=stream0)
        buf1012 = reinterpret_tensor(buf1010, (6144, 2048), (2048, 1)); del buf1010  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf1011, permute_384, out=buf1012)
        buf1020 = reinterpret_tensor(buf1012, (3, 2048, 2048), (4194304, 2048, 1)); del buf1012  # reuse
        buf1021 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1022 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1055, add_1056, add_1057, add_882, float_6, mean_3, mul_1033, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_47.run(buf1020, buf1019, unsqueeze_1145, buf898, buf904, primals_270, buf1021, buf1022, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1023 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1022, (6144, 2048), (2048, 1), 0), permute_385, out=buf1023)
        buf1024 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1022, (6144, 2048), (2048, 1), 0), permute_386, out=buf1024)
        buf1025 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf1023, buf1024, buf1025, 34603008, grid=grid(34603008), stream=stream0)
        buf1026 = reinterpret_tensor(buf1019, (6144, 2048), (2048, 1)); del buf1019  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1025, (6144, 5632), (5632, 1), 0), permute_387, out=buf1026)
        buf1059 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1073 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1086 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1060 = buf1059; del buf1059  # reuse
        buf1074 = buf1073; del buf1073  # reuse
        buf1087 = buf1086; del buf1086  # reuse
        buf1061 = buf1060; del buf1060  # reuse
        buf1075 = buf1074; del buf1074  # reuse
        buf1088 = buf1087; del buf1087  # reuse
        buf1062 = buf1061; del buf1061  # reuse
        buf1076 = buf1075; del buf1075  # reuse
        buf1089 = buf1088; del buf1088  # reuse
        buf1063 = buf1062; del buf1062  # reuse
        buf1077 = buf1076; del buf1076  # reuse
        buf1090 = buf1089; del buf1089  # reuse
        buf1064 = buf1063; del buf1063  # reuse
        buf1078 = buf1077; del buf1077  # reuse
        buf1091 = buf1090; del buf1090  # reuse
        buf1065 = buf1064; del buf1064  # reuse
        buf1079 = buf1078; del buf1078  # reuse
        buf1092 = buf1091; del buf1091  # reuse
        buf1066 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1067 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_1176, add_1177, add_1178, add_1179, add_1180, add_1181, add_1182, add_1183, add_1184, add_1185, add_1186, add_1187, add_1188, add_1189, add_1190, add_1191, add_1192, add_1193, add_1194, add_1195, add_1196, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_924, add_925, add_926, add_927, add_928, add_929, add_930, add_931, add_932, add_933, add_934, add_935, add_936, add_937, add_938, add_939, add_940, add_941, add_942, add_943, add_944, add_945, add_946, add_947, add_948, add_949, add_950, add_951, add_952, add_953, add_954, add_955, add_956, add_957, add_958, add_959, add_96, add_960, add_961, add_962, add_963, add_964, add_965, add_98, float_3, mean_2, mul_1152, mul_1153, mul_1154, mul_1155, mul_1156, mul_1157, mul_1158, mul_1159, mul_1160, mul_1161, mul_1162, mul_1163, mul_1164, mul_1165, mul_1166, mul_1167, mul_1168, mul_1169, mul_1170, mul_1171, mul_1172, mul_4, mul_6, mul_7, mul_8, mul_903, mul_904, mul_905, mul_906, mul_907, mul_908, mul_909, mul_910, mul_911, mul_912, mul_913, mul_914, mul_915, mul_916, mul_917, mul_918, mul_919, mul_920, mul_921, mul_922, mul_923, mul_924, mul_925, mul_926, mul_927, mul_928, mul_929, mul_930, mul_931, mul_932, mul_933, mul_934, mul_935, mul_936, mul_937, mul_938, mul_939, mul_940, mul_941, mul_942, mul_943, mul_944, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_48.run(buf1065, buf1079, buf1092, unsqueeze_1010, embedding, unsqueeze_1011, buf33, buf39, unsqueeze_1012, unsqueeze_11, buf99, buf105, unsqueeze_1031, unsqueeze_1032, unsqueeze_1033, unsqueeze_1274, unsqueeze_1275, unsqueeze_1276, unsqueeze_1013, buf68, buf74, unsqueeze_1014, buf173, buf172, buf179, unsqueeze_1015, buf138, buf144, unsqueeze_1034, unsqueeze_1035, unsqueeze_1036, unsqueeze_1277, unsqueeze_1278, unsqueeze_1279, unsqueeze_1016, buf251, buf257, unsqueeze_1017, buf212, buf210, buf218, unsqueeze_1018, buf337, buf343, unsqueeze_1037, unsqueeze_1038, unsqueeze_1039, unsqueeze_1280, unsqueeze_1281, unsqueeze_1282, unsqueeze_1019, buf294, buf300, unsqueeze_1020, buf427, buf424, buf433, unsqueeze_1021, buf384, buf390, unsqueeze_1040, unsqueeze_1041, unsqueeze_1042, unsqueeze_1283, unsqueeze_1284, unsqueeze_1285, unsqueeze_1022, buf521, buf527, unsqueeze_1023, buf474, buf470, buf480, unsqueeze_1024, buf623, buf629, unsqueeze_1043, unsqueeze_1044, unsqueeze_1045, unsqueeze_1286, unsqueeze_1287, unsqueeze_1288, unsqueeze_1025, buf572, buf578, unsqueeze_1026, buf729, buf724, buf735, unsqueeze_1027, buf678, buf684, unsqueeze_1046, unsqueeze_1047, unsqueeze_1048, unsqueeze_1289, unsqueeze_1290, unsqueeze_1291, unsqueeze_1028, buf839, buf845, unsqueeze_1029, buf784, buf778, buf790, unsqueeze_1030, buf957, buf963, unsqueeze_1049, unsqueeze_1050, unsqueeze_1051, unsqueeze_1292, unsqueeze_1293, unsqueeze_1294, primals_253, buf1066, buf1067, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1068 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1067, (6144, 2048), (2048, 1), 0), permute_359, out=buf1068)
        buf1069 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1068, buf1069, 12582912, grid=grid(12582912), stream=stream0)
        buf1070 = reinterpret_tensor(buf1068, (48, 2048, 128), (262144, 128, 1)); del buf1068  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1058, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1069, (48, 2048, 128), (262144, 128, 1), 0), out=buf1070)
        buf1071 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1070, buf1071, 12582912, grid=grid(12582912), stream=stream0)
        buf1072 = reinterpret_tensor(buf1070, (6144, 2048), (2048, 1)); del buf1070  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf1071, permute_367, out=buf1072)
        buf1080 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1081 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf1079, buf1072, primals_258, buf1080, buf1081, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1082 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1081, (6144, 2048), (2048, 1), 0), permute_368, out=buf1082)
        buf1083 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1081, (6144, 2048), (2048, 1), 0), permute_369, out=buf1083)
        buf1084 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf1082, buf1083, buf1084, 34603008, grid=grid(34603008), stream=stream0)
        buf1085 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1084, (6144, 5632), (5632, 1), 0), permute_370, out=buf1085)
        buf1093 = buf1092; del buf1092  # reuse
        buf1097 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1098 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1099 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1100 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1101 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1102 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1104 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1105 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1106 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1107 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1109 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1110 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1111 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1112 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1114 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1115 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1116 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1117 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1119 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1120 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1121 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1122 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1124 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1125 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1126 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_1058, add_1197, add_1198, add_1199, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, float_1, mul_1173, mul_1174, mul_1175, mul_4], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mul, aten.sum]
        triton_red_fused__to_copy_add_div_mul_sum_49.run(buf1093, unsqueeze_1295, buf898, buf904, unsqueeze_1296, buf1079, buf1072, buf1085, unsqueeze_1297, buf1020, buf1026, buf14, primals_287, rsqrt_118, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1097, buf1098, buf1099, buf1100, buf1101, buf1102, buf1104, buf1105, buf1106, buf1107, buf1109, buf1110, buf1111, buf1112, buf1114, buf1115, buf1116, buf1117, buf1119, buf1120, buf1121, buf1122, buf1124, buf1125, buf1126, 6144, 2048, grid=grid(6144), stream=stream0)
        del primals_287
        buf1094 = empty_strided((1, 1, 2048, 48), (98304, 98304, 1, 2048), device='cuda', dtype=torch.float32)
        # Source Nodes: [float_1, mul_1225, type_as], Original ATen: [aten._to_copy, aten.mul, aten.sum]
        triton_red_fused__to_copy_mul_sum_50.run(buf14, buf1093, rsqrt_118, buf1094, 98304, 128, grid=grid(98304), stream=stream0)
        del rsqrt_118
        buf1095 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [float_1, mul_1225, type_as], Original ATen: [aten._to_copy, aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1094, buf1095, 2048, 48, grid=grid(2048), stream=stream0)
        buf1103 = empty_strided((4, 3, 2048, 25), (153600, 51200, 25, 1), device='cuda', dtype=torch.float16)
        buf1108 = buf1103; del buf1103  # reuse
        buf1113 = buf1108; del buf1108  # reuse
        buf1118 = buf1113; del buf1113  # reuse
        buf1123 = buf1118; del buf1118  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_52.run(buf1123, buf1098, buf1099, buf1100, buf1101, buf1102, buf1104, buf1105, buf1106, buf1107, buf1109, buf1110, buf1111, buf1112, buf1114, buf1115, buf1116, buf1117, buf1119, buf1120, buf1121, buf1122, 614400, grid=grid(614400), stream=stream0)
        buf1127 = empty_strided((4, 1, 1, 25, 48), (1200, 4800, 4800, 1, 25), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_53.run(buf1123, buf1124, buf1125, buf1126, buf1127, 4800, 128, grid=grid(4800), stream=stream0)
        buf1128 = empty_strided((4, 1, 1, 25), (25, 100, 100, 1), device='cuda', dtype=torch.float16)
        buf1129 = reinterpret_tensor(buf1128, (4, 25), (25, 1)); del buf1128  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_54.run(buf1129, buf1127, 100, 48, grid=grid(100), stream=stream0)
        del buf1127
        buf1130 = empty_strided((3, 2048, 4, 25), (204800, 100, 25, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_55.run(buf1123, buf1124, buf1125, buf1126, buf1130, 614400, grid=grid(614400), stream=stream0)
        buf1131 = empty_strided((100, 100), (100, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1130, (100, 6144), (1, 100), 0), view_837, out=buf1131)
        del view_837
        buf1132 = reinterpret_tensor(buf1123, (6144, 100), (100, 1)); del buf1123  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1130, (6144, 100), (100, 1), 0), permute_416, out=buf1132)
        del buf1130
        del permute_416
        buf1133 = reinterpret_tensor(buf1132, (3, 2048, 100), (204800, 100, 1)); del buf1132  # reuse
        # Source Nodes: [l__mod___dynamic_dense_23_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_56.run(buf1133, mm_214, 614400, grid=grid(614400), stream=stream0)
        del mm_214
        buf1134 = empty_strided((100, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1133, (100, 6144), (1, 100), 0), view_835, out=buf1134)
        del view_835
        buf1135 = buf14; del buf14  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1133, (6144, 100), (100, 1), 0), permute_420, out=buf1135)
        del buf1133
        del permute_420
        buf1185 = buf1093; del buf1093  # reuse
        buf1186 = buf1185; del buf1185  # reuse
        buf1187 = buf1186; del buf1186  # reuse
        buf1188 = buf1187; del buf1187  # reuse
        buf1189 = buf1188; del buf1188  # reuse
        buf1190 = buf1189; del buf1189  # reuse
        buf1191 = buf1190; del buf1190  # reuse
        buf1143 = reinterpret_tensor(buf1039, (3, 2048, 2048), (4194304, 2048, 1)); del buf1039  # reuse
        buf1157 = reinterpret_tensor(buf1052, (3, 2048, 2048), (4194304, 2048, 1)); del buf1052  # reuse
        buf1177 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float32)
        buf1144 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1145 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1158 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1159 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1178 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1179 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_1058, add_1059, add_1060, add_1061, add_1062, add_1063, add_1064, add_1065, add_1066, add_1067, add_1068, add_1069, add_1070, add_1071, add_1072, add_1073, add_1074, add_1075, add_1076, add_1077, add_1078, add_1079, add_1080, add_1081, add_1082, add_1083, add_1084, add_1085, add_1086, add_1087, add_1088, add_1089, add_1090, add_1091, add_1092, add_1093, add_1094, add_1095, add_1096, add_1097, add_1098, add_1099, add_1100, add_1101, add_1102, add_1103, add_1104, add_1105, add_1106, add_1107, add_1108, add_1109, add_1110, add_1111, add_1112, add_1113, add_1114, add_1115, add_1116, add_1117, add_1118, add_1119, add_1120, add_1121, add_1122, add_1123, add_1124, add_1125, add_1126, add_1127, add_1128, add_1129, add_1130, add_1131, add_1132, add_1133, add_1134, add_1135, add_1136, add_1137, add_1138, add_1139, add_1140, add_1141, add_1142, add_1143, add_1144, add_1145, add_1146, add_1147, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1035, mul_1036, mul_1037, mul_1038, mul_1039, mul_1040, mul_1041, mul_1042, mul_1043, mul_1044, mul_1045, mul_1046, mul_1047, mul_1048, mul_1049, mul_1050, mul_1051, mul_1052, mul_1053, mul_1054, mul_1055, mul_1056, mul_1057, mul_1058, mul_1059, mul_1060, mul_1061, mul_1062, mul_1063, mul_1064, mul_1065, mul_1066, mul_1067, mul_1068, mul_1069, mul_1070, mul_1071, mul_1072, mul_1073, mul_1074, mul_1075, mul_1076, mul_1077, mul_1078, mul_1079, mul_1080, mul_1081, mul_1082, mul_1083, mul_1084, mul_1085, mul_1086, mul_1087, mul_1088, mul_1089, mul_1090, mul_1091, mul_1092, mul_1093, mul_1094, mul_1095, mul_1096, mul_1097, mul_1098, mul_1099, mul_1100, mul_1101, mul_1102, mul_1103, mul_1104, mul_1105, mul_1106, mul_1107, mul_1108, mul_1109, mul_1110, mul_1111, mul_1112, mul_1113, mul_1114, mul_1115, mul_1116, mul_1117, mul_1118, mul_1119, mul_1120, mul_1121, mul_1122, mul_1123, mul_1124, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_57.run(buf1191, unsqueeze_1175, embedding, unsqueeze_1176, buf33, buf39, unsqueeze_1177, unsqueeze_11, buf99, buf105, unsqueeze_1152, unsqueeze_1153, unsqueeze_1154, unsqueeze_1198, unsqueeze_1199, unsqueeze_1200, unsqueeze_1221, unsqueeze_1222, unsqueeze_1223, unsqueeze_1178, buf68, buf74, unsqueeze_1179, buf173, buf172, buf179, unsqueeze_1180, buf138, buf144, unsqueeze_1155, unsqueeze_1156, unsqueeze_1157, unsqueeze_1201, unsqueeze_1202, unsqueeze_1203, unsqueeze_1224, unsqueeze_1225, unsqueeze_1226, unsqueeze_1181, buf251, buf257, unsqueeze_1182, buf212, buf210, buf218, unsqueeze_1183, buf337, buf343, unsqueeze_1158, unsqueeze_1159, unsqueeze_1160, unsqueeze_1204, unsqueeze_1205, unsqueeze_1206, unsqueeze_1227, unsqueeze_1228, unsqueeze_1229, unsqueeze_1184, buf294, buf300, unsqueeze_1185, buf427, buf424, buf433, unsqueeze_1186, buf384, buf390, unsqueeze_1161, unsqueeze_1162, unsqueeze_1163, unsqueeze_1207, unsqueeze_1208, unsqueeze_1209, unsqueeze_1230, unsqueeze_1231, unsqueeze_1232, unsqueeze_1187, buf521, buf527, unsqueeze_1188, buf474, buf470, buf480, unsqueeze_1189, buf623, buf629, unsqueeze_1164, unsqueeze_1165, unsqueeze_1166, unsqueeze_1210, unsqueeze_1211, unsqueeze_1212, unsqueeze_1233, unsqueeze_1234, unsqueeze_1235, unsqueeze_1190, buf572, buf578, unsqueeze_1191, buf729, buf724, buf735, unsqueeze_1192, buf678, buf684, unsqueeze_1167, unsqueeze_1168, unsqueeze_1169, unsqueeze_1213, unsqueeze_1214, unsqueeze_1215, unsqueeze_1236, unsqueeze_1237, unsqueeze_1238, unsqueeze_1193, buf839, buf845, unsqueeze_1194, buf784, buf778, buf790, unsqueeze_1195, buf957, buf963, unsqueeze_1170, unsqueeze_1171, unsqueeze_1172, unsqueeze_1216, unsqueeze_1217, unsqueeze_1218, unsqueeze_1239, unsqueeze_1240, unsqueeze_1241, unsqueeze_1196, buf898, buf904, unsqueeze_1197, buf1079, buf1072, buf1085, unsqueeze_1173, unsqueeze_1174, unsqueeze_1219, unsqueeze_1220, primals_276, primals_275, primals_277, buf1143, buf1157, buf1177, buf1144, buf1145, buf1158, buf1159, buf1178, buf1179, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1146 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1145, (6144, 2048), (2048, 1), 0), permute_392, out=buf1146)
        buf1160 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1159, (6144, 2048), (2048, 1), 0), permute_391, out=buf1160)
        buf1149 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf1147 = reinterpret_tensor(buf1149, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf1148 = reinterpret_tensor(buf1149, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        buf1163 = empty_strided((3, 2048, 16, 64, 2), (4194304, 2048, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf1161 = reinterpret_tensor(buf1163, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 0)  # alias
        buf1162 = reinterpret_tensor(buf1163, (3, 2048, 16, 64, 1), (4194304, 2048, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_8.run(buf1146, select_1, select_3, buf1160, buf1147, buf1148, buf1161, buf1162, 6291456, grid=grid(6291456), stream=stream0)
        buf1164 = reinterpret_tensor(buf1160, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf1160  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_9.run(buf1163, buf1164, 12582912, grid=grid(12582912), stream=stream0)
        del buf1147
        del buf1148
        del buf1161
        del buf1162
        del buf1163
        buf1165 = reinterpret_tensor(buf1146, (3, 16, 128, 2048), (4194304, 262144, 2048, 1)); del buf1146  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_10.run(buf1149, buf1165, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1149
        buf1166 = buf994; del buf994  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1164, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1165, (48, 128, 2048), (262144, 2048, 1), 0), out=buf1166)
        buf1169 = reinterpret_tensor(buf1055, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf1055  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        print_mem(s='softmax16')
        triton_red_fused__softmax_mul_where_11.run(slice_3, buf1166, scalar_tensor, buf1169, 98304, 2048, grid=grid(98304), stream=stream0)
        del scalar_tensor
        buf1180 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1179, (6144, 2048), (2048, 1), 0), permute_393, out=buf1180)
        buf1181 = empty_strided((3, 16, 2048, 128), (4194304, 262144, 128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1180, buf1181, 12582912, grid=grid(12582912), stream=stream0)
        buf1182 = reinterpret_tensor(buf1180, (48, 2048, 128), (262144, 128, 1)); del buf1180  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1169, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1181, (48, 2048, 128), (262144, 128, 1), 0), out=buf1182)
        buf1183 = empty_strided((6144, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_3], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1182, buf1183, 12582912, grid=grid(12582912), stream=stream0)
        buf1184 = reinterpret_tensor(buf1182, (6144, 2048), (2048, 1)); del buf1182  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(buf1183, permute_401, out=buf1184)
        buf1192 = reinterpret_tensor(buf1184, (3, 2048, 2048), (4194304, 2048, 1)); del buf1184  # reuse
        buf1193 = empty_strided((3, 2048, 1), (2048, 1, 6144), device='cuda', dtype=torch.float32)
        buf1194 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1148, add_1149, add_1150, add_1151, add_882, add_966, add_968, float_6, mean_3, mul_1125, mul_1126, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_58.run(buf1192, buf1191, unsqueeze_1242, buf898, buf904, unsqueeze_1243, buf1079, buf1072, buf1085, primals_282, buf1193, buf1194, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1195 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1194, (6144, 2048), (2048, 1), 0), permute_402, out=buf1195)
        buf1196 = empty_strided((6144, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1194, (6144, 2048), (2048, 1), 0), permute_403, out=buf1196)
        buf1197 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_15.run(buf1195, buf1196, buf1197, 34603008, grid=grid(34603008), stream=stream0)
        buf1198 = reinterpret_tensor(buf1191, (6144, 2048), (2048, 1)); del buf1191  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1197, (6144, 5632), (5632, 1), 0), permute_404, out=buf1198)
        buf1200 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1152], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_59.run(buf1135, buf1192, buf1198, rsqrt_117, buf1200, 6144, 2048, grid=grid(6144), stream=stream0)
        del rsqrt_117
        buf1201 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1200, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1197, (6144, 5632), (5632, 1), 0), out=buf1201)
        buf1202 = reinterpret_tensor(buf1197, (6144, 5632), (5632, 1)); del buf1197  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1200, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_404, (2048, 5632), (5632, 1), 0), out=buf1202)
        del permute_404
        buf1203 = empty_strided((3, 2048, 5632), (11534336, 5632, 1), device='cuda', dtype=torch.float16)
        buf1206 = reinterpret_tensor(buf1196, (3, 2048, 5632), (11534336, 5632, 1)); del buf1196  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf1206, buf1202, buf1195, buf1203, 34603008, grid=grid(34603008), stream=stream0)
        del buf1195
        del buf1202
        buf1204 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1203, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1194, (6144, 2048), (2048, 1), 0), out=buf1204)
        buf1205 = buf1198; del buf1198  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1203, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_403, (5632, 2048), (2048, 1), 0), out=buf1205)
        del buf1203
        del permute_403
        buf1207 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1206, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1194, (6144, 2048), (2048, 1), 0), out=buf1207)
        buf1208 = reinterpret_tensor(buf1194, (6144, 2048), (2048, 1)); del buf1194  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1206, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_402, (5632, 2048), (2048, 1), 0), out=buf1208)
        del permute_402
        buf1209 = buf1094; del buf1094  # reuse
        # Source Nodes: [add_1151, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf1205, buf1208, buf1192, buf1193, buf1209, 98304, 128, grid=grid(98304), stream=stream0)
        buf1210 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1151, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1209, buf1210, 2048, 48, grid=grid(2048), stream=stream0)
        buf1212 = buf1200; del buf1200  # reuse
        # Source Nodes: [add_1151, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf1212, buf1205, buf1208, primals_282, buf1192, buf1193, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1193
        del primals_282
        buf1213 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1212, (2048, 6144), (1, 2048), 0), buf1183, out=buf1213)
        buf1214 = buf1183; del buf1183  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1212, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_401, (2048, 2048), (2048, 1), 0), out=buf1214)
        del permute_401
        buf1215 = reinterpret_tensor(buf1208, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf1208  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1214, buf1215, 12582912, grid=grid(12582912), stream=stream0)
        buf1216 = reinterpret_tensor(buf1214, (48, 2048, 128), (262144, 128, 1)); del buf1214  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1169, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf1215, (48, 2048, 128), (262144, 128, 1), 0), out=buf1216)
        buf1217 = buf1166; del buf1166  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1215, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1181, (48, 128, 2048), (262144, 1, 128), 0), out=buf1217)
        buf1219 = empty_strided((3, 16, 2048, 2048), (67108864, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward1')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf1217, buf1169, slice_3, buf1219, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf1169
        buf1220 = reinterpret_tensor(buf1215, (48, 128, 2048), (262144, 2048, 1)); del buf1215  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1164, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf1219, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf1220)
        buf1221 = reinterpret_tensor(buf1164, (48, 2048, 128), (262144, 128, 1)); del buf1164  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1219, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1165, (48, 2048, 128), (262144, 1, 2048), 0), out=buf1221)
        buf1222 = reinterpret_tensor(buf1165, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1165  # reuse
        buf1223 = reinterpret_tensor(buf1181, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1181  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf1220, select_3, select_1, buf1221, buf1222, buf1223, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf1224 = reinterpret_tensor(buf1221, (6144, 2048), (2048, 1)); del buf1221  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1216, buf1224, 12582912, grid=grid(12582912), stream=stream0)
        buf1225 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1224, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1179, (6144, 2048), (2048, 1), 0), out=buf1225)
        buf1226 = reinterpret_tensor(buf1179, (6144, 2048), (2048, 1)); del buf1179  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf1224, reinterpret_tensor(permute_393, (2048, 2048), (2048, 1), 0), out=buf1226)
        del permute_393
        buf1227 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1222, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1145, (6144, 2048), (2048, 1), 0), out=buf1227)
        buf1228 = reinterpret_tensor(buf1145, (6144, 2048), (2048, 1)); del buf1145  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1222, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_392, (2048, 2048), (2048, 1), 0), out=buf1228)
        del permute_392
        buf1229 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1223, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1159, (6144, 2048), (2048, 1), 0), out=buf1229)
        buf1230 = reinterpret_tensor(buf1159, (6144, 2048), (2048, 1)); del buf1159  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1223, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_391, (2048, 2048), (2048, 1), 0), out=buf1230)
        del permute_391
        buf1231 = buf1209; del buf1209  # reuse
        # Source Nodes: [add_1127, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf1226, buf1177, buf1178, buf1231, 98304, 128, grid=grid(98304), stream=stream0)
        buf1232 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1127, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1231, buf1232, 2048, 48, grid=grid(2048), stream=stream0)
        buf1238 = reinterpret_tensor(buf1223, (3, 2048, 2048), (4194304, 2048, 1)); del buf1223  # reuse
        buf1234 = reinterpret_tensor(buf1222, (3, 2048, 2048), (4194304, 2048, 1)); del buf1222  # reuse
        buf1243 = buf1126; del buf1126  # reuse
        buf1271 = buf1125; del buf1125  # reuse
        buf1300 = buf1124; del buf1124  # reuse
        buf1244 = buf1122; del buf1122  # reuse
        buf1272 = buf1121; del buf1121  # reuse
        buf1301 = buf1120; del buf1120  # reuse
        buf1245 = buf1119; del buf1119  # reuse
        buf1274 = buf1117; del buf1117  # reuse
        buf1302 = buf1116; del buf1116  # reuse
        buf1246 = buf1115; del buf1115  # reuse
        buf1275 = buf1114; del buf1114  # reuse
        buf1304 = buf1112; del buf1112  # reuse
        buf1247 = buf1111; del buf1111  # reuse
        buf1276 = buf1110; del buf1110  # reuse
        buf1305 = buf1109; del buf1109  # reuse
        buf1249 = buf1107; del buf1107  # reuse
        buf1277 = buf1106; del buf1106  # reuse
        buf1306 = buf1105; del buf1105  # reuse
        buf1250 = buf1104; del buf1104  # reuse
        buf1279 = buf1102; del buf1102  # reuse
        buf1307 = buf1101; del buf1101  # reuse
        buf1251 = buf1100; del buf1100  # reuse
        buf1280 = buf1099; del buf1099  # reuse
        buf1309 = buf1098; del buf1098  # reuse
        buf1252 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1281 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1310 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1254 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1282 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1311 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1255 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1284 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1312 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1256 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1285 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1314 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1257 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1286 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1315 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1259 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1287 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1316 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1260 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1289 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1317 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1261 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1290 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1319 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1262 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1291 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1320 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1104, add_1127, add_128, add_162, add_198, add_200, add_242, add_288, add_336, add_338, add_392, add_450, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, mean_1, mean_2, mul_3, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_66.run(buf1228, primals_276, buf1143, buf1144, buf1226, primals_277, buf1177, buf1178, buf1212, buf1079, buf1072, buf1085, buf898, buf904, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf1238, buf1234, buf1243, buf1271, buf1300, buf1244, buf1272, buf1301, buf1245, buf1274, buf1302, buf1246, buf1275, buf1304, buf1247, buf1276, buf1305, buf1249, buf1277, buf1306, buf1250, buf1279, buf1307, buf1251, buf1280, buf1309, buf1252, buf1281, buf1310, buf1254, buf1282, buf1311, buf1255, buf1284, buf1312, buf1256, buf1285, buf1314, buf1257, buf1286, buf1315, buf1259, buf1287, buf1316, buf1260, buf1289, buf1317, buf1261, buf1290, buf1319, buf1262, buf1291, buf1320, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1177
        del buf1178
        del primals_276
        del primals_277
        buf1235 = buf1231; del buf1231  # reuse
        # Source Nodes: [add_1104, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf1228, buf1143, buf1144, buf1235, 98304, 128, grid=grid(98304), stream=stream0)
        del buf1144
        buf1236 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1104, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1235, buf1236, 2048, 48, grid=grid(2048), stream=stream0)
        buf1239 = buf1235; del buf1235  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf1230, buf1157, buf1158, buf1239, 98304, 128, grid=grid(98304), stream=stream0)
        buf1240 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1239, buf1240, 2048, 48, grid=grid(2048), stream=stream0)
        buf1242 = reinterpret_tensor(buf1228, (3, 2048, 2048), (4194304, 2048, 1)); del buf1228  # reuse
        buf1329 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1331 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1333 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1335 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1338 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1340 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1342 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1344 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1347 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1349 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1351 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1353 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1356 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1358 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1360 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1362 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1365 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1367 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1369 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1371 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1374 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1376 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1378 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_966, add_968, add_98, mean, mul, mul_4, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_68.run(buf1230, primals_275, buf1157, buf1158, buf1079, buf1072, buf1085, buf898, buf904, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1242, buf1329, buf1331, buf1333, buf1335, buf1338, buf1340, buf1342, buf1344, buf1347, buf1349, buf1351, buf1353, buf1356, buf1358, buf1360, buf1362, buf1365, buf1367, buf1369, buf1371, buf1374, buf1376, buf1378, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1158
        del primals_275
        buf1264 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1292 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1321 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1265 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1294 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1322 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1266 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1295 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1324 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1267 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1296 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1325 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1269 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1297 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1326 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1270 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1327 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1299 = empty_strided((3, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_50, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
        triton_red_fused_add_mul_sum_69.run(buf1212, buf138, buf144, buf1234, buf1238, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1264, buf1292, buf1321, buf1265, buf1294, buf1322, buf1266, buf1295, buf1324, buf1267, buf1296, buf1325, buf1269, buf1297, buf1326, buf1270, buf1327, buf1299, 6144, 2048, grid=grid(6144), stream=stream0)
        buf1248 = empty_strided((4, 3, 2048, 24), (147456, 49152, 24, 1), device='cuda', dtype=torch.float16)
        buf1253 = buf1248; del buf1248  # reuse
        buf1258 = buf1253; del buf1253  # reuse
        buf1263 = buf1258; del buf1258  # reuse
        buf1268 = buf1263; del buf1263  # reuse
        buf1273 = buf1268; del buf1268  # reuse
        buf1278 = buf1273; del buf1273  # reuse
        buf1283 = buf1278; del buf1278  # reuse
        buf1288 = buf1283; del buf1283  # reuse
        buf1293 = buf1288; del buf1288  # reuse
        buf1298 = buf1293; del buf1293  # reuse
        buf1303 = buf1298; del buf1298  # reuse
        buf1308 = buf1303; del buf1303  # reuse
        buf1313 = buf1308; del buf1308  # reuse
        buf1318 = buf1313; del buf1313  # reuse
        buf1323 = buf1318; del buf1318  # reuse
        buf1328 = buf1323; del buf1323  # reuse
        buf1337 = buf1328; del buf1328  # reuse
        buf1346 = buf1337; del buf1337  # reuse
        buf1355 = buf1346; del buf1346  # reuse
        buf1364 = buf1355; del buf1355  # reuse
        buf1373 = buf1364; del buf1364  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_70.run(buf1373, buf1243, buf1244, buf1245, buf1246, buf1247, buf1249, buf1250, buf1251, buf1252, buf1254, buf1255, buf1256, buf1257, buf1259, buf1260, buf1261, buf1262, buf1264, buf1265, buf1266, buf1267, buf1269, buf1270, buf1271, buf1272, buf1274, buf1275, buf1276, buf1277, buf1279, buf1280, buf1281, buf1282, buf1284, buf1285, buf1286, buf1287, buf1289, buf1290, buf1291, buf1292, buf1294, buf1295, buf1296, buf1297, buf1299, buf1300, buf1301, buf1302, buf1304, buf1305, buf1306, buf1307, buf1309, buf1310, buf1311, buf1312, buf1314, buf1315, buf1316, buf1317, buf1319, buf1320, buf1321, buf1322, buf1324, buf1325, buf1326, buf1327, buf1329, buf1331, buf1333, buf1335, buf1338, buf1340, buf1342, buf1344, buf1347, buf1349, buf1351, buf1353, buf1356, buf1358, buf1360, buf1362, buf1365, buf1367, buf1369, buf1371, 589824, grid=grid(589824), stream=stream0)
        del buf1243
        del buf1244
        del buf1245
        del buf1246
        buf1383 = empty_strided((3, 2048, 4, 24), (196608, 96, 24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_71.run(buf1373, buf1374, buf1376, buf1378, buf1383, 589824, grid=grid(589824), stream=stream0)
        buf1385 = empty_strided((6144, 96), (96, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1383, (6144, 96), (96, 1), 0), permute_465, out=buf1385)
        del permute_465
        buf1386 = reinterpret_tensor(buf1385, (3, 2048, 96), (196608, 96, 1)); del buf1385  # reuse
        # Source Nodes: [l__mod___dynamic_dense_22_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_72.run(buf1386, mm_205, 589824, grid=grid(589824), stream=stream0)
        del mm_205
        buf1388 = buf1230; del buf1230  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1386, (6144, 96), (96, 1), 0), permute_469, out=buf1388)
        del permute_469
        buf1330 = reinterpret_tensor(buf1226, (3, 2048, 2048), (4194304, 2048, 1)); del buf1226  # reuse
        buf1332 = reinterpret_tensor(buf1224, (3, 2048, 2048), (4194304, 2048, 1)); del buf1224  # reuse
        buf1334 = reinterpret_tensor(buf1216, (3, 2048, 2048), (4194304, 2048, 1)); del buf1216  # reuse
        buf1336 = reinterpret_tensor(buf1220, (3, 2048, 2048), (4194304, 2048, 1)); del buf1220  # reuse
        buf1339 = reinterpret_tensor(buf1205, (3, 2048, 2048), (4194304, 2048, 1)); del buf1205  # reuse
        buf1341 = buf1192; del buf1192  # reuse
        buf1343 = reinterpret_tensor(buf1135, (3, 2048, 2048), (4194304, 2048, 1)); del buf1135  # reuse
        buf1345 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1348 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1350 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1352 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1354 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1357 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1359 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1361 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1363 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1366 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1368 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1370 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1372 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1375 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1377 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1379 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        buf1390 = empty_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1058], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_73.run(buf1388, buf1020, buf1026, buf1097, unsqueeze_1296, buf1212, unsqueeze_1243, buf1234, unsqueeze_1220, buf1238, unsqueeze_1197, buf1242, unsqueeze_1174, unsqueeze_1295, unsqueeze_1242, unsqueeze_1219, unsqueeze_1196, unsqueeze_1173, unsqueeze_1294, unsqueeze_1241, unsqueeze_1218, unsqueeze_1195, unsqueeze_1172, unsqueeze_1293, unsqueeze_1240, unsqueeze_1217, unsqueeze_1194, unsqueeze_1171, unsqueeze_1292, unsqueeze_1239, unsqueeze_1216, unsqueeze_1193, unsqueeze_1170, unsqueeze_1291, unsqueeze_1238, unsqueeze_1215, unsqueeze_1192, unsqueeze_1169, unsqueeze_1290, unsqueeze_1237, unsqueeze_1214, unsqueeze_1191, unsqueeze_1168, unsqueeze_1289, unsqueeze_1236, unsqueeze_1213, unsqueeze_1190, unsqueeze_1167, unsqueeze_1288, unsqueeze_1235, unsqueeze_1212, unsqueeze_1189, unsqueeze_1166, unsqueeze_1287, unsqueeze_1234, unsqueeze_1211, unsqueeze_1188, unsqueeze_1165, unsqueeze_1286, unsqueeze_1233, unsqueeze_1210, unsqueeze_1187, unsqueeze_1164, unsqueeze_1285, unsqueeze_1232, unsqueeze_1209, unsqueeze_1186, unsqueeze_1163, unsqueeze_1284, unsqueeze_1231, unsqueeze_1208, unsqueeze_1185, unsqueeze_1162, unsqueeze_1283, unsqueeze_1230, unsqueeze_1207, unsqueeze_1184, unsqueeze_1161, unsqueeze_1282, unsqueeze_1229, unsqueeze_1206, unsqueeze_1183, unsqueeze_1160, unsqueeze_1281, unsqueeze_1228, unsqueeze_1205, unsqueeze_1182, unsqueeze_1159, unsqueeze_1280, unsqueeze_1227, unsqueeze_1204, unsqueeze_1181, unsqueeze_1158, unsqueeze_1279, unsqueeze_1226, unsqueeze_1203, unsqueeze_1180, unsqueeze_1157, unsqueeze_1278, unsqueeze_1225, unsqueeze_1202, unsqueeze_1179, unsqueeze_1156, unsqueeze_1277, unsqueeze_1224, unsqueeze_1201, unsqueeze_1178, unsqueeze_1155, unsqueeze_1276, unsqueeze_1223, unsqueeze_1200, unsqueeze_1177, unsqueeze_1154, unsqueeze_1275, unsqueeze_1222, unsqueeze_1199, unsqueeze_1176, unsqueeze_1153, unsqueeze_1274, unsqueeze_1221, unsqueeze_1198, unsqueeze_1175, unsqueeze_1152, unsqueeze_1297, rsqrt_112, buf1330, buf1332, buf1334, buf1336, buf1339, buf1341, buf1343, buf1345, buf1348, buf1350, buf1352, buf1354, buf1357, buf1359, buf1361, buf1363, buf1366, buf1368, buf1370, buf1372, buf1375, buf1377, buf1379, buf1390, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1026
        del buf1097
        del buf1212
        del buf1234
        del buf1238
        del buf1242
        del rsqrt_112
        del unsqueeze_1152
        del unsqueeze_1153
        del unsqueeze_1154
        del unsqueeze_1155
        del unsqueeze_1156
        del unsqueeze_1157
        del unsqueeze_1158
        del unsqueeze_1159
        del unsqueeze_1160
        del unsqueeze_1161
        del unsqueeze_1162
        del unsqueeze_1163
        del unsqueeze_1164
        del unsqueeze_1165
        del unsqueeze_1166
        del unsqueeze_1167
        del unsqueeze_1168
        del unsqueeze_1169
        del unsqueeze_1170
        del unsqueeze_1171
        del unsqueeze_1172
        del unsqueeze_1173
        del unsqueeze_1174
        del unsqueeze_1175
        del unsqueeze_1176
        del unsqueeze_1177
        del unsqueeze_1178
        del unsqueeze_1179
        del unsqueeze_1180
        del unsqueeze_1181
        del unsqueeze_1182
        del unsqueeze_1183
        del unsqueeze_1184
        del unsqueeze_1185
        del unsqueeze_1186
        del unsqueeze_1187
        del unsqueeze_1188
        del unsqueeze_1189
        del unsqueeze_1190
        del unsqueeze_1191
        del unsqueeze_1192
        del unsqueeze_1193
        del unsqueeze_1194
        del unsqueeze_1195
        del unsqueeze_1196
        del unsqueeze_1197
        del unsqueeze_1198
        del unsqueeze_1199
        del unsqueeze_1200
        del unsqueeze_1201
        del unsqueeze_1202
        del unsqueeze_1203
        del unsqueeze_1204
        del unsqueeze_1205
        del unsqueeze_1206
        del unsqueeze_1207
        del unsqueeze_1208
        del unsqueeze_1209
        del unsqueeze_1210
        del unsqueeze_1211
        del unsqueeze_1212
        del unsqueeze_1213
        del unsqueeze_1214
        del unsqueeze_1215
        del unsqueeze_1216
        del unsqueeze_1217
        del unsqueeze_1218
        del unsqueeze_1219
        del unsqueeze_1220
        del unsqueeze_1221
        del unsqueeze_1222
        del unsqueeze_1223
        del unsqueeze_1224
        del unsqueeze_1225
        del unsqueeze_1226
        del unsqueeze_1227
        del unsqueeze_1228
        del unsqueeze_1229
        del unsqueeze_1230
        del unsqueeze_1231
        del unsqueeze_1232
        del unsqueeze_1233
        del unsqueeze_1234
        del unsqueeze_1235
        del unsqueeze_1236
        del unsqueeze_1237
        del unsqueeze_1238
        del unsqueeze_1239
        del unsqueeze_1240
        del unsqueeze_1241
        del unsqueeze_1242
        del unsqueeze_1243
        del unsqueeze_1274
        del unsqueeze_1275
        del unsqueeze_1276
        del unsqueeze_1277
        del unsqueeze_1278
        del unsqueeze_1279
        del unsqueeze_1280
        del unsqueeze_1281
        del unsqueeze_1282
        del unsqueeze_1283
        del unsqueeze_1284
        del unsqueeze_1285
        del unsqueeze_1286
        del unsqueeze_1287
        del unsqueeze_1288
        del unsqueeze_1289
        del unsqueeze_1290
        del unsqueeze_1291
        del unsqueeze_1292
        del unsqueeze_1293
        del unsqueeze_1294
        del unsqueeze_1295
        del unsqueeze_1296
        del unsqueeze_1297
        buf1380 = empty_strided((4, 1, 1, 24, 48), (1152, 4608, 4608, 1, 24), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_74.run(buf1373, buf1374, buf1376, buf1378, buf1380, 4608, 128, grid=grid(4608), stream=stream0)
        del buf1373
        buf1381 = empty_strided((4, 1, 1, 24), (24, 96, 96, 1), device='cuda', dtype=torch.float16)
        buf1382 = reinterpret_tensor(buf1381, (4, 24), (24, 1)); del buf1381  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_75.run(buf1382, buf1380, 96, 48, grid=grid(96), stream=stream0)
        del buf1380
        buf1384 = empty_strided((96, 96), (96, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1383, (96, 6144), (1, 96), 0), view_802, out=buf1384)
        del buf1383
        del view_802
        buf1387 = empty_strided((96, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1386, (96, 6144), (1, 96), 0), view_800, out=buf1387)
        del buf1386
        del view_800
        buf1391 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1390, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1025, (6144, 5632), (5632, 1), 0), out=buf1391)
        buf1392 = reinterpret_tensor(buf1025, (6144, 5632), (5632, 1)); del buf1025  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1390, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_387, (2048, 5632), (5632, 1), 0), out=buf1392)
        del permute_387
        buf1393 = buf1206; del buf1206  # reuse
        buf1396 = reinterpret_tensor(buf1024, (3, 2048, 5632), (11534336, 5632, 1)); del buf1024  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf1396, buf1392, buf1023, buf1393, 34603008, grid=grid(34603008), stream=stream0)
        del buf1023
        del buf1392
        buf1394 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1393, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1022, (6144, 2048), (2048, 1), 0), out=buf1394)
        buf1395 = buf1388; del buf1388  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1393, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_386, (5632, 2048), (2048, 1), 0), out=buf1395)
        del buf1393
        del permute_386
        buf1397 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1396, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1022, (6144, 2048), (2048, 1), 0), out=buf1397)
        buf1398 = reinterpret_tensor(buf1022, (6144, 2048), (2048, 1)); del buf1022  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1396, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_385, (5632, 2048), (2048, 1), 0), out=buf1398)
        del permute_385
        buf1399 = buf1239; del buf1239  # reuse
        # Source Nodes: [add_1057, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf1395, buf1398, buf1020, buf1021, buf1399, 98304, 128, grid=grid(98304), stream=stream0)
        buf1400 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1057, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1399, buf1400, 2048, 48, grid=grid(2048), stream=stream0)
        buf1402 = buf1390; del buf1390  # reuse
        # Source Nodes: [add_1057, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf1402, buf1395, buf1398, primals_270, buf1020, buf1021, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1020
        del buf1395
        del primals_270
        buf1403 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1402, (2048, 6144), (1, 2048), 0), buf1011, out=buf1403)
        buf1404 = buf1011; del buf1011  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1402, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_384, (2048, 2048), (2048, 1), 0), out=buf1404)
        del permute_384
        buf1405 = reinterpret_tensor(buf1398, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf1398  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1404, buf1405, 12582912, grid=grid(12582912), stream=stream0)
        buf1406 = reinterpret_tensor(buf1404, (48, 2048, 128), (262144, 128, 1)); del buf1404  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf997, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf1405, (48, 2048, 128), (262144, 128, 1), 0), out=buf1406)
        buf1407 = reinterpret_tensor(buf1219, (48, 2048, 2048), (4194304, 2048, 1)); del buf1219  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1405, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1009, (48, 128, 2048), (262144, 1, 128), 0), out=buf1407)
        buf1409 = reinterpret_tensor(buf1217, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf1217  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward2')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf1407, buf997, slice_3, buf1409, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf1407
        buf1410 = reinterpret_tensor(buf1405, (48, 128, 2048), (262144, 2048, 1)); del buf1405  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf992, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf1409, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf1410)
        buf1411 = reinterpret_tensor(buf992, (48, 2048, 128), (262144, 128, 1)); del buf992  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1409, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf993, (48, 2048, 128), (262144, 1, 2048), 0), out=buf1411)
        buf1412 = reinterpret_tensor(buf993, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf993  # reuse
        buf1413 = reinterpret_tensor(buf1009, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1009  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf1410, select_3, select_1, buf1411, buf1412, buf1413, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1410
        buf1414 = reinterpret_tensor(buf1411, (6144, 2048), (2048, 1)); del buf1411  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1406, buf1414, 12582912, grid=grid(12582912), stream=stream0)
        del buf1406
        buf1415 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1414, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1007, (6144, 2048), (2048, 1), 0), out=buf1415)
        buf1416 = reinterpret_tensor(buf1007, (6144, 2048), (2048, 1)); del buf1007  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf1414, reinterpret_tensor(permute_376, (2048, 2048), (2048, 1), 0), out=buf1416)
        del buf1414
        del permute_376
        buf1417 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1412, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf973, (6144, 2048), (2048, 1), 0), out=buf1417)
        buf1418 = reinterpret_tensor(buf973, (6144, 2048), (2048, 1)); del buf973  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1412, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_375, (2048, 2048), (2048, 1), 0), out=buf1418)
        del buf1412
        del permute_375
        buf1419 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1413, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf987, (6144, 2048), (2048, 1), 0), out=buf1419)
        buf1420 = reinterpret_tensor(buf987, (6144, 2048), (2048, 1)); del buf987  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1413, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_374, (2048, 2048), (2048, 1), 0), out=buf1420)
        del buf1413
        del permute_374
        buf1421 = buf1399; del buf1399  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf1416, buf1006, buf1421, 98304, 128, grid=grid(98304), stream=stream0)
        del buf1006
        buf1422 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1421, buf1422, 2048, 48, grid=grid(2048), stream=stream0)
        buf1431 = buf1021; del buf1021  # reuse
        buf1433 = buf1378; del buf1378  # reuse
        buf1424 = buf1157; del buf1157  # reuse
        buf1428 = buf1143; del buf1143  # reuse
        buf1488 = buf1332; del buf1332  # reuse
        buf1491 = buf1334; del buf1334  # reuse
        buf1493 = buf1336; del buf1336  # reuse
        buf1495 = buf1339; del buf1339  # reuse
        buf1497 = buf1341; del buf1341  # reuse
        buf1500 = buf1343; del buf1343  # reuse
        buf1502 = buf1345; del buf1345  # reuse
        buf1504 = buf1348; del buf1348  # reuse
        buf1506 = buf1350; del buf1350  # reuse
        buf1509 = buf1352; del buf1352  # reuse
        buf1511 = buf1354; del buf1354  # reuse
        buf1513 = buf1357; del buf1357  # reuse
        buf1515 = buf1359; del buf1359  # reuse
        buf1518 = buf1361; del buf1361  # reuse
        buf1520 = buf1363; del buf1363  # reuse
        buf1522 = buf1366; del buf1366  # reuse
        buf1524 = buf1368; del buf1368  # reuse
        buf1527 = buf1370; del buf1370  # reuse
        buf1529 = buf1372; del buf1372  # reuse
        buf1531 = buf1375; del buf1375  # reuse
        buf1533 = buf1377; del buf1377  # reuse
        buf1536 = buf1379; del buf1379  # reuse
        buf1487 = buf1376; del buf1376  # reuse
        buf1490 = buf1374; del buf1374  # reuse
        buf1492 = buf1371; del buf1371  # reuse
        buf1494 = buf1369; del buf1369  # reuse
        buf1496 = buf1367; del buf1367  # reuse
        buf1499 = buf1365; del buf1365  # reuse
        buf1501 = buf1362; del buf1362  # reuse
        buf1503 = buf1360; del buf1360  # reuse
        buf1505 = buf1358; del buf1358  # reuse
        buf1508 = buf1356; del buf1356  # reuse
        buf1510 = buf1353; del buf1353  # reuse
        buf1512 = buf1351; del buf1351  # reuse
        buf1514 = buf1349; del buf1349  # reuse
        buf1517 = buf1347; del buf1347  # reuse
        buf1519 = buf1344; del buf1344  # reuse
        buf1521 = buf1342; del buf1342  # reuse
        buf1523 = buf1340; del buf1340  # reuse
        buf1526 = buf1338; del buf1338  # reuse
        buf1528 = buf1335; del buf1335  # reuse
        buf1530 = buf1333; del buf1333  # reuse
        buf1532 = buf1331; del buf1331  # reuse
        buf1535 = buf1329; del buf1329  # reuse
        # Source Nodes: [add_10, add_1011, add_1012, add_1033, add_1034, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, add_989, float_1, float_2, float_3, mean_1, mean_2, mul_1011, mul_3, mul_4, mul_6, mul_967, mul_989, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_77.run(buf1488, buf1491, buf1493, buf1495, buf1497, buf1500, buf1502, buf1504, buf1506, buf1509, buf1511, buf1513, buf1515, buf1518, buf1520, buf1522, buf1524, buf1527, buf1529, buf1531, buf1533, buf1536, buf1416, primals_265, buf1004, unsqueeze_1123, buf898, buf904, buf1418, primals_264, buf970, unsqueeze_1101, buf1420, primals_263, buf984, unsqueeze_1079, buf1402, buf1005, buf971, unsqueeze_1145, unsqueeze_1144, unsqueeze_1122, unsqueeze_1100, unsqueeze_1143, unsqueeze_1121, unsqueeze_1099, unsqueeze_1142, unsqueeze_1120, unsqueeze_1098, unsqueeze_1141, unsqueeze_1119, unsqueeze_1097, unsqueeze_1140, unsqueeze_1118, unsqueeze_1096, unsqueeze_1139, unsqueeze_1117, unsqueeze_1095, unsqueeze_1138, unsqueeze_1116, unsqueeze_1094, unsqueeze_1137, unsqueeze_1115, unsqueeze_1093, unsqueeze_1136, unsqueeze_1114, unsqueeze_1092, unsqueeze_1135, unsqueeze_1113, unsqueeze_1091, unsqueeze_1134, unsqueeze_1112, unsqueeze_1090, unsqueeze_1133, unsqueeze_1111, unsqueeze_1089, unsqueeze_1132, unsqueeze_1110, unsqueeze_1088, unsqueeze_1131, unsqueeze_1109, unsqueeze_1087, unsqueeze_1130, unsqueeze_1108, unsqueeze_1086, unsqueeze_1129, unsqueeze_1107, unsqueeze_1085, unsqueeze_1128, unsqueeze_1106, unsqueeze_1084, unsqueeze_1127, unsqueeze_1105, unsqueeze_1083, unsqueeze_1126, unsqueeze_1104, unsqueeze_1082, unsqueeze_1125, unsqueeze_1103, unsqueeze_1081, unsqueeze_1124, unsqueeze_1102, unsqueeze_1080, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1431, buf1433, buf1424, buf1428, buf1487, buf1490, buf1492, buf1494, buf1496, buf1499, buf1501, buf1503, buf1505, buf1508, buf1510, buf1512, buf1514, buf1517, buf1519, buf1521, buf1523, buf1526, buf1528, buf1530, buf1532, buf1535, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1004
        del buf970
        del buf971
        del primals_264
        del unsqueeze_1080
        del unsqueeze_1081
        del unsqueeze_1082
        del unsqueeze_1083
        del unsqueeze_1084
        del unsqueeze_1085
        del unsqueeze_1086
        del unsqueeze_1087
        del unsqueeze_1088
        del unsqueeze_1089
        del unsqueeze_1090
        del unsqueeze_1091
        del unsqueeze_1092
        del unsqueeze_1093
        del unsqueeze_1094
        del unsqueeze_1095
        del unsqueeze_1096
        del unsqueeze_1097
        del unsqueeze_1098
        del unsqueeze_1099
        del unsqueeze_1100
        del unsqueeze_1101
        del unsqueeze_1102
        del unsqueeze_1103
        del unsqueeze_1104
        del unsqueeze_1105
        del unsqueeze_1106
        del unsqueeze_1107
        del unsqueeze_1108
        del unsqueeze_1109
        del unsqueeze_1110
        del unsqueeze_1111
        del unsqueeze_1112
        del unsqueeze_1113
        del unsqueeze_1114
        del unsqueeze_1115
        del unsqueeze_1116
        del unsqueeze_1117
        del unsqueeze_1118
        del unsqueeze_1119
        del unsqueeze_1120
        del unsqueeze_1121
        del unsqueeze_1122
        del unsqueeze_1123
        del unsqueeze_1124
        del unsqueeze_1125
        del unsqueeze_1126
        del unsqueeze_1127
        del unsqueeze_1128
        del unsqueeze_1129
        del unsqueeze_1130
        del unsqueeze_1131
        del unsqueeze_1132
        del unsqueeze_1133
        del unsqueeze_1134
        del unsqueeze_1135
        del unsqueeze_1136
        del unsqueeze_1137
        del unsqueeze_1138
        del unsqueeze_1139
        del unsqueeze_1140
        del unsqueeze_1141
        del unsqueeze_1142
        del unsqueeze_1143
        del unsqueeze_1144
        del unsqueeze_1145
        buf1425 = buf1421; del buf1421  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf1418, buf972, buf1425, 98304, 128, grid=grid(98304), stream=stream0)
        del buf1418
        del buf972
        buf1426 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1425, buf1426, 2048, 48, grid=grid(2048), stream=stream0)
        buf1429 = buf1425; del buf1425  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf1420, buf986, buf1429, 98304, 128, grid=grid(98304), stream=stream0)
        del buf986
        buf1430 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1429, buf1430, 2048, 48, grid=grid(2048), stream=stream0)
        buf1432 = buf1428; del buf1428  # reuse
        buf1537 = buf1327; del buf1327  # reuse
        buf1538 = buf1326; del buf1326  # reuse
        buf1539 = buf1325; del buf1325  # reuse
        buf1541 = buf1324; del buf1324  # reuse
        buf1542 = buf1322; del buf1322  # reuse
        buf1543 = buf1321; del buf1321  # reuse
        buf1544 = buf1320; del buf1320  # reuse
        buf1546 = buf1319; del buf1319  # reuse
        buf1547 = buf1317; del buf1317  # reuse
        buf1548 = buf1316; del buf1316  # reuse
        buf1549 = buf1315; del buf1315  # reuse
        buf1551 = buf1314; del buf1314  # reuse
        buf1552 = buf1312; del buf1312  # reuse
        buf1553 = buf1311; del buf1311  # reuse
        buf1554 = buf1310; del buf1310  # reuse
        buf1556 = buf1309; del buf1309  # reuse
        buf1557 = buf1307; del buf1307  # reuse
        buf1558 = buf1306; del buf1306  # reuse
        buf1559 = buf1305; del buf1305  # reuse
        buf1561 = buf1304; del buf1304  # reuse
        buf1562 = buf1302; del buf1302  # reuse
        buf1563 = buf1301; del buf1301  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, add_989, float_1, mean, mul, mul_4, mul_967, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_79.run(buf1431, buf985, buf984, unsqueeze_1079, buf898, buf904, buf1420, primals_263, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1432, buf1537, buf1538, buf1539, buf1541, buf1542, buf1543, buf1544, buf1546, buf1547, buf1548, buf1549, buf1551, buf1552, buf1553, buf1554, buf1556, buf1557, buf1558, buf1559, buf1561, buf1562, buf1563, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1431
        del buf984
        buf1436 = buf1300; del buf1300  # reuse
        buf1437 = buf1299; del buf1299  # reuse
        buf1441 = buf1297; del buf1297  # reuse
        buf1447 = buf1296; del buf1296  # reuse
        buf1451 = buf1295; del buf1295  # reuse
        buf1452 = buf1294; del buf1294  # reuse
        buf1434 = buf1292; del buf1292  # reuse
        buf1440 = buf1291; del buf1291  # reuse
        buf1444 = buf1290; del buf1290  # reuse
        buf1445 = buf1289; del buf1289  # reuse
        buf1449 = buf1287; del buf1287  # reuse
        buf1455 = buf1286; del buf1286  # reuse
        buf1442 = buf1285; del buf1285  # reuse
        buf1446 = buf1284; del buf1284  # reuse
        buf1457 = buf1282; del buf1282  # reuse
        buf1435 = buf1281; del buf1281  # reuse
        buf1439 = buf1280; del buf1280  # reuse
        buf1450 = buf1279; del buf1279  # reuse
        buf1454 = buf1277; del buf1277  # reuse
        buf1456 = buf1276; del buf1276  # reuse
        buf1460 = buf1275; del buf1275  # reuse
        buf1461 = buf1274; del buf1274  # reuse
        buf1462 = buf1272; del buf1272  # reuse
        buf1464 = buf1271; del buf1271  # reuse
        buf1465 = buf1270; del buf1270  # reuse
        buf1466 = buf1269; del buf1269  # reuse
        buf1467 = buf1267; del buf1267  # reuse
        buf1469 = buf1266; del buf1266  # reuse
        buf1470 = buf1265; del buf1265  # reuse
        buf1471 = buf1264; del buf1264  # reuse
        buf1472 = buf1262; del buf1262  # reuse
        buf1474 = buf1261; del buf1261  # reuse
        buf1475 = buf1260; del buf1260  # reuse
        buf1476 = buf1259; del buf1259  # reuse
        buf1477 = buf1257; del buf1257  # reuse
        buf1479 = buf1256; del buf1256  # reuse
        buf1480 = buf1255; del buf1255  # reuse
        buf1481 = buf1254; del buf1254  # reuse
        buf1482 = buf1252; del buf1252  # reuse
        buf1484 = buf1251; del buf1251  # reuse
        buf1485 = buf1250; del buf1250  # reuse
        buf1486 = buf1249; del buf1249  # reuse
        buf1459 = buf1247; del buf1247  # reuse
        # Source Nodes: [add_10, add_1033, add_1034, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_96, add_98, float_3, mean_2, mul_1011, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_80.run(buf1402, buf839, buf845, buf678, buf684, buf623, buf629, buf294, buf300, buf251, buf257, buf138, buf144, buf957, buf963, buf572, buf578, buf521, buf527, buf384, buf390, buf337, buf343, buf68, buf74, buf474, buf470, buf480, buf427, buf424, buf433, embedding, buf33, buf39, buf784, buf778, buf790, buf729, buf724, buf735, buf212, buf210, buf218, buf173, buf172, buf179, unsqueeze_11, buf99, buf105, buf1416, primals_265, buf1005, buf1424, buf898, buf904, buf1436, buf1437, buf1441, buf1447, buf1451, buf1452, buf1434, buf1440, buf1444, buf1445, buf1449, buf1455, buf1442, buf1446, buf1457, buf1435, buf1439, buf1450, buf1454, buf1456, buf1460, buf1461, buf1462, buf1464, buf1465, buf1466, buf1467, buf1469, buf1470, buf1471, buf1472, buf1474, buf1475, buf1476, buf1477, buf1479, buf1480, buf1481, buf1482, buf1484, buf1485, buf1486, buf1459, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1005
        del buf1402
        del buf1424
        del primals_265
        buf1438 = empty_strided((4, 3, 2048, 23), (141312, 47104, 23, 1), device='cuda', dtype=torch.float16)
        buf1443 = buf1438; del buf1438  # reuse
        buf1448 = buf1443; del buf1443  # reuse
        buf1453 = buf1448; del buf1448  # reuse
        buf1458 = buf1453; del buf1453  # reuse
        buf1463 = buf1458; del buf1458  # reuse
        buf1468 = buf1463; del buf1463  # reuse
        buf1473 = buf1468; del buf1468  # reuse
        buf1478 = buf1473; del buf1473  # reuse
        buf1483 = buf1478; del buf1478  # reuse
        buf1489 = buf1483; del buf1483  # reuse
        buf1498 = buf1489; del buf1489  # reuse
        buf1507 = buf1498; del buf1498  # reuse
        buf1516 = buf1507; del buf1507  # reuse
        buf1525 = buf1516; del buf1516  # reuse
        buf1534 = buf1525; del buf1525  # reuse
        buf1540 = buf1534; del buf1534  # reuse
        buf1545 = buf1540; del buf1540  # reuse
        buf1550 = buf1545; del buf1545  # reuse
        buf1555 = buf1550; del buf1550  # reuse
        buf1560 = buf1555; del buf1555  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_81.run(buf1560, buf1433, buf1434, buf1435, buf1436, buf1437, buf1439, buf1440, buf1441, buf1442, buf1444, buf1445, buf1446, buf1447, buf1449, buf1450, buf1451, buf1452, buf1454, buf1455, buf1456, buf1457, buf1459, buf1460, buf1461, buf1462, buf1464, buf1465, buf1466, buf1467, buf1469, buf1470, buf1471, buf1472, buf1474, buf1475, buf1476, buf1477, buf1479, buf1480, buf1481, buf1482, buf1484, buf1485, buf1486, buf1487, buf1490, buf1492, buf1494, buf1496, buf1499, buf1501, buf1503, buf1505, buf1508, buf1510, buf1512, buf1514, buf1517, buf1519, buf1521, buf1523, buf1526, buf1528, buf1530, buf1532, buf1535, buf1537, buf1538, buf1539, buf1541, buf1542, buf1543, buf1544, buf1546, buf1547, buf1548, buf1549, buf1551, buf1552, buf1553, buf1554, buf1556, buf1557, buf1558, buf1559, 565248, grid=grid(565248), stream=stream0)
        del buf1433
        del buf1434
        del buf1435
        del buf1436
        buf1564 = empty_strided((4, 1, 1, 23, 48), (1104, 4416, 4416, 1, 23), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_82.run(buf1560, buf1561, buf1562, buf1563, buf1564, 4416, 128, grid=grid(4416), stream=stream0)
        buf1565 = empty_strided((4, 1, 1, 23), (23, 92, 92, 1), device='cuda', dtype=torch.float16)
        buf1566 = reinterpret_tensor(buf1565, (4, 23), (23, 1)); del buf1565  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_83.run(buf1566, buf1564, 92, 48, grid=grid(92), stream=stream0)
        del buf1564
        buf1567 = empty_strided((3, 2048, 4, 23), (188416, 92, 23, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_84.run(buf1560, buf1561, buf1562, buf1563, buf1567, 565248, grid=grid(565248), stream=stream0)
        buf1568 = empty_strided((92, 92), (92, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1567, (92, 6144), (1, 92), 0), view_767, out=buf1568)
        del view_767
        buf1569 = reinterpret_tensor(buf1560, (6144, 92), (92, 1)); del buf1560  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1567, (6144, 92), (92, 1), 0), permute_514, out=buf1569)
        del buf1567
        del permute_514
        buf1570 = reinterpret_tensor(buf1569, (3, 2048, 92), (188416, 92, 1)); del buf1569  # reuse
        # Source Nodes: [l__mod___dynamic_dense_21_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_85.run(buf1570, mm_default_3, 565248, grid=grid(565248), stream=stream0)
        del mm_default_3
        buf1571 = empty_strided((92, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1570, (92, 6144), (1, 92), 0), view_765, out=buf1571)
        del view_765
        buf1572 = buf1416; del buf1416  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1570, (6144, 92), (92, 1), 0), permute_518, out=buf1572)
        del buf1570
        del permute_518
        buf1574 = buf1330; del buf1330  # reuse
        # Source Nodes: [add_966, add_968], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_86.run(buf1574, buf1572, buf1079, buf1072, buf1085, rsqrt_107, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1085
        del rsqrt_107
        buf1575 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1574, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1084, (6144, 5632), (5632, 1), 0), out=buf1575)
        buf1576 = reinterpret_tensor(buf1084, (6144, 5632), (5632, 1)); del buf1084  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1574, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_370, (2048, 5632), (5632, 1), 0), out=buf1576)
        del permute_370
        buf1577 = buf1396; del buf1396  # reuse
        buf1580 = reinterpret_tensor(buf1083, (3, 2048, 5632), (11534336, 5632, 1)); del buf1083  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf1580, buf1576, buf1082, buf1577, 34603008, grid=grid(34603008), stream=stream0)
        del buf1082
        del buf1576
        buf1578 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1577, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1081, (6144, 2048), (2048, 1), 0), out=buf1578)
        buf1579 = buf1572; del buf1572  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1577, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_369, (5632, 2048), (2048, 1), 0), out=buf1579)
        del buf1577
        del permute_369
        buf1581 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1580, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf1081, (6144, 2048), (2048, 1), 0), out=buf1581)
        buf1582 = reinterpret_tensor(buf1081, (6144, 2048), (2048, 1)); del buf1081  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1580, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_368, (5632, 2048), (2048, 1), 0), out=buf1582)
        del permute_368
        buf1583 = buf1429; del buf1429  # reuse
        # Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf1579, buf1582, buf1079, buf1072, buf1080, buf1583, 98304, 128, grid=grid(98304), stream=stream0)
        buf1584 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1583, buf1584, 2048, 48, grid=grid(2048), stream=stream0)
        buf1587 = buf1574; del buf1574  # reuse
        # Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf1587, buf1579, buf1582, primals_258, buf1079, buf1072, buf1080, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1072
        del buf1079
        del buf1080
        del buf1579
        del primals_258
        buf1588 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1587, (2048, 6144), (1, 2048), 0), buf1071, out=buf1588)
        buf1589 = buf1071; del buf1071  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1587, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_367, (2048, 2048), (2048, 1), 0), out=buf1589)
        del permute_367
        buf1590 = reinterpret_tensor(buf1582, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf1582  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1589, buf1590, 12582912, grid=grid(12582912), stream=stream0)
        buf1591 = reinterpret_tensor(buf1589, (48, 2048, 128), (262144, 128, 1)); del buf1589  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1058, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf1590, (48, 2048, 128), (262144, 128, 1), 0), out=buf1591)
        buf1592 = reinterpret_tensor(buf1409, (48, 2048, 2048), (4194304, 2048, 1)); del buf1409  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1590, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1069, (48, 128, 2048), (262144, 1, 128), 0), out=buf1592)
        buf1594 = buf997; del buf997  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward3')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf1592, buf1058, slice_3, buf1594, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf1058
        buf1595 = reinterpret_tensor(buf1590, (48, 128, 2048), (262144, 2048, 1)); del buf1590  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1053, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf1594, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf1595)
        buf1596 = reinterpret_tensor(buf1053, (48, 2048, 128), (262144, 128, 1)); del buf1053  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1594, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1054, (48, 2048, 128), (262144, 1, 2048), 0), out=buf1596)
        buf1597 = reinterpret_tensor(buf1054, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1054  # reuse
        buf1598 = reinterpret_tensor(buf1069, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1069  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf1595, select_3, select_1, buf1596, buf1597, buf1598, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1595
        buf1599 = reinterpret_tensor(buf1596, (6144, 2048), (2048, 1)); del buf1596  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1591, buf1599, 12582912, grid=grid(12582912), stream=stream0)
        del buf1591
        buf1600 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1599, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1067, (6144, 2048), (2048, 1), 0), out=buf1600)
        buf1601 = reinterpret_tensor(buf1067, (6144, 2048), (2048, 1)); del buf1067  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf1599, reinterpret_tensor(permute_359, (2048, 2048), (2048, 1), 0), out=buf1601)
        del buf1599
        del permute_359
        buf1602 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1597, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1035, (6144, 2048), (2048, 1), 0), out=buf1602)
        buf1603 = reinterpret_tensor(buf1035, (6144, 2048), (2048, 1)); del buf1035  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1597, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_358, (2048, 2048), (2048, 1), 0), out=buf1603)
        del buf1597
        del permute_358
        buf1604 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1598, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf1048, (6144, 2048), (2048, 1), 0), out=buf1604)
        buf1605 = reinterpret_tensor(buf1048, (6144, 2048), (2048, 1)); del buf1048  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1598, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_357, (2048, 2048), (2048, 1), 0), out=buf1605)
        del permute_357
        buf1606 = buf1583; del buf1583  # reuse
        # Source Nodes: [add_945, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf1601, buf1065, buf1066, buf1606, 98304, 128, grid=grid(98304), stream=stream0)
        buf1607 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_945, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1606, buf1607, 2048, 48, grid=grid(2048), stream=stream0)
        buf1609 = reinterpret_tensor(buf1598, (3, 2048, 2048), (4194304, 2048, 1)); del buf1598  # reuse
        buf1645 = buf1491; del buf1491  # reuse
        buf1647 = buf1493; del buf1493  # reuse
        buf1649 = buf1495; del buf1495  # reuse
        buf1651 = buf1497; del buf1497  # reuse
        buf1654 = buf1500; del buf1500  # reuse
        buf1656 = buf1502; del buf1502  # reuse
        buf1658 = buf1504; del buf1504  # reuse
        buf1660 = buf1506; del buf1506  # reuse
        buf1663 = buf1509; del buf1509  # reuse
        buf1665 = buf1511; del buf1511  # reuse
        buf1667 = buf1513; del buf1513  # reuse
        buf1669 = buf1515; del buf1515  # reuse
        buf1672 = buf1518; del buf1518  # reuse
        buf1674 = buf1520; del buf1520  # reuse
        buf1676 = buf1522; del buf1522  # reuse
        buf1678 = buf1524; del buf1524  # reuse
        buf1681 = buf1527; del buf1527  # reuse
        buf1683 = buf1529; del buf1529  # reuse
        buf1685 = buf1531; del buf1531  # reuse
        buf1687 = buf1533; del buf1533  # reuse
        buf1690 = buf1536; del buf1536  # reuse
        buf1618 = buf1563; del buf1563  # reuse
        buf1644 = buf1562; del buf1562  # reuse
        buf1619 = buf1561; del buf1561  # reuse
        buf1646 = buf1559; del buf1559  # reuse
        buf1620 = buf1558; del buf1558  # reuse
        buf1648 = buf1557; del buf1557  # reuse
        buf1621 = buf1556; del buf1556  # reuse
        buf1650 = buf1554; del buf1554  # reuse
        buf1622 = buf1553; del buf1553  # reuse
        buf1653 = buf1552; del buf1552  # reuse
        buf1624 = buf1551; del buf1551  # reuse
        buf1655 = buf1549; del buf1549  # reuse
        buf1625 = buf1548; del buf1548  # reuse
        buf1657 = buf1547; del buf1547  # reuse
        buf1626 = buf1546; del buf1546  # reuse
        buf1659 = buf1544; del buf1544  # reuse
        buf1627 = buf1543; del buf1543  # reuse
        buf1662 = buf1542; del buf1542  # reuse
        buf1629 = buf1541; del buf1541  # reuse
        buf1664 = buf1539; del buf1539  # reuse
        buf1630 = buf1538; del buf1538  # reuse
        buf1666 = buf1537; del buf1537  # reuse
        buf1631 = buf1535; del buf1535  # reuse
        buf1668 = buf1532; del buf1532  # reuse
        buf1632 = buf1530; del buf1530  # reuse
        buf1634 = buf1528; del buf1528  # reuse
        buf1635 = buf1526; del buf1526  # reuse
        buf1636 = buf1523; del buf1523  # reuse
        buf1637 = buf1521; del buf1521  # reuse
        buf1639 = buf1519; del buf1519  # reuse
        buf1640 = buf1517; del buf1517  # reuse
        buf1641 = buf1514; del buf1514  # reuse
        buf1642 = buf1512; del buf1512  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_882, add_945, add_96, add_98, add_989, float_1, float_3, mean, mean_2, mul, mul_4, mul_6, mul_967, rsqrt, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_90.run(buf1645, buf1647, buf1649, buf1651, buf1654, buf1656, buf1658, buf1660, buf1663, buf1665, buf1667, buf1669, buf1672, buf1674, buf1676, buf1678, buf1681, buf1683, buf1685, buf1687, buf1690, buf1601, primals_253, buf1065, buf1066, buf1420, primals_263, buf985, buf1432, unsqueeze_1078, buf1587, unsqueeze_1051, unsqueeze_1030, unsqueeze_1077, unsqueeze_1050, unsqueeze_1029, unsqueeze_1076, unsqueeze_1049, unsqueeze_1028, unsqueeze_1075, unsqueeze_1048, unsqueeze_1027, unsqueeze_1074, unsqueeze_1047, unsqueeze_1026, unsqueeze_1073, unsqueeze_1046, unsqueeze_1025, unsqueeze_1072, unsqueeze_1045, unsqueeze_1024, unsqueeze_1071, unsqueeze_1044, unsqueeze_1023, unsqueeze_1070, unsqueeze_1043, unsqueeze_1022, unsqueeze_1069, unsqueeze_1042, unsqueeze_1021, unsqueeze_1068, unsqueeze_1041, unsqueeze_1020, unsqueeze_1067, unsqueeze_1040, unsqueeze_1019, unsqueeze_1066, unsqueeze_1039, unsqueeze_1018, unsqueeze_1065, unsqueeze_1038, unsqueeze_1017, unsqueeze_1064, unsqueeze_1037, unsqueeze_1016, unsqueeze_1063, unsqueeze_1036, unsqueeze_1015, unsqueeze_1062, unsqueeze_1035, unsqueeze_1014, unsqueeze_1061, unsqueeze_1034, unsqueeze_1013, unsqueeze_1060, unsqueeze_1033, unsqueeze_1012, unsqueeze_1059, unsqueeze_1032, unsqueeze_1011, unsqueeze_1058, unsqueeze_1031, unsqueeze_1010, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1609, buf1618, buf1644, buf1619, buf1646, buf1620, buf1648, buf1621, buf1650, buf1622, buf1653, buf1624, buf1655, buf1625, buf1657, buf1626, buf1659, buf1627, buf1662, buf1629, buf1664, buf1630, buf1666, buf1631, buf1668, buf1632, buf1634, buf1635, buf1636, buf1637, buf1639, buf1640, buf1641, buf1642, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1065
        del buf1066
        del primals_253
        del unsqueeze_1010
        del unsqueeze_1011
        del unsqueeze_1012
        del unsqueeze_1013
        del unsqueeze_1014
        del unsqueeze_1015
        del unsqueeze_1016
        del unsqueeze_1017
        del unsqueeze_1018
        del unsqueeze_1019
        del unsqueeze_1020
        del unsqueeze_1021
        del unsqueeze_1022
        del unsqueeze_1023
        del unsqueeze_1024
        del unsqueeze_1025
        del unsqueeze_1026
        del unsqueeze_1027
        del unsqueeze_1028
        del unsqueeze_1029
        del unsqueeze_1030
        del unsqueeze_1031
        del unsqueeze_1032
        del unsqueeze_1033
        del unsqueeze_1034
        del unsqueeze_1035
        del unsqueeze_1036
        del unsqueeze_1037
        del unsqueeze_1038
        del unsqueeze_1039
        del unsqueeze_1040
        del unsqueeze_1041
        del unsqueeze_1042
        del unsqueeze_1043
        del unsqueeze_1044
        del unsqueeze_1045
        del unsqueeze_1046
        del unsqueeze_1047
        del unsqueeze_1048
        del unsqueeze_1049
        del unsqueeze_1050
        del unsqueeze_1051
        del unsqueeze_1058
        del unsqueeze_1059
        del unsqueeze_1060
        del unsqueeze_1061
        del unsqueeze_1062
        del unsqueeze_1063
        del unsqueeze_1064
        del unsqueeze_1065
        del unsqueeze_1066
        del unsqueeze_1067
        del unsqueeze_1068
        del unsqueeze_1069
        del unsqueeze_1070
        del unsqueeze_1071
        del unsqueeze_1072
        del unsqueeze_1073
        del unsqueeze_1074
        del unsqueeze_1075
        del unsqueeze_1076
        del unsqueeze_1077
        del unsqueeze_1078
        buf1610 = buf1606; del buf1606  # reuse
        # Source Nodes: [add_924, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf1603, buf1033, buf1034, buf1610, 98304, 128, grid=grid(98304), stream=stream0)
        buf1611 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_924, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1610, buf1611, 2048, 48, grid=grid(2048), stream=stream0)
        buf1617 = reinterpret_tensor(buf1601, (3, 2048, 2048), (4194304, 2048, 1)); del buf1601  # reuse
        buf1613 = buf1587; del buf1587  # reuse
        buf1691 = buf1510; del buf1510  # reuse
        buf1717 = buf1508; del buf1508  # reuse
        buf1692 = buf1505; del buf1505  # reuse
        buf1718 = buf1503; del buf1503  # reuse
        buf1693 = buf1501; del buf1501  # reuse
        buf1720 = buf1499; del buf1499  # reuse
        buf1695 = buf1496; del buf1496  # reuse
        buf1721 = buf1494; del buf1494  # reuse
        buf1696 = buf1492; del buf1492  # reuse
        buf1722 = buf1490; del buf1490  # reuse
        buf1697 = buf1487; del buf1487  # reuse
        buf1723 = buf1486; del buf1486  # reuse
        buf1698 = buf1485; del buf1485  # reuse
        buf1725 = buf1484; del buf1484  # reuse
        buf1700 = buf1482; del buf1482  # reuse
        buf1726 = buf1481; del buf1481  # reuse
        buf1701 = buf1480; del buf1480  # reuse
        buf1727 = buf1479; del buf1479  # reuse
        buf1702 = buf1477; del buf1477  # reuse
        buf1728 = buf1476; del buf1476  # reuse
        buf1703 = buf1475; del buf1475  # reuse
        buf1730 = buf1474; del buf1474  # reuse
        buf1705 = buf1472; del buf1472  # reuse
        buf1731 = buf1471; del buf1471  # reuse
        buf1671 = buf1470; del buf1470  # reuse
        buf1706 = buf1469; del buf1469  # reuse
        buf1732 = buf1467; del buf1467  # reuse
        buf1673 = buf1466; del buf1466  # reuse
        buf1707 = buf1465; del buf1465  # reuse
        buf1733 = buf1464; del buf1464  # reuse
        buf1675 = buf1462; del buf1462  # reuse
        buf1708 = buf1461; del buf1461  # reuse
        buf1735 = buf1460; del buf1460  # reuse
        buf1677 = buf1459; del buf1459  # reuse
        buf1710 = buf1457; del buf1457  # reuse
        buf1736 = buf1456; del buf1456  # reuse
        buf1680 = buf1455; del buf1455  # reuse
        buf1711 = buf1454; del buf1454  # reuse
        buf1737 = buf1452; del buf1452  # reuse
        buf1682 = buf1451; del buf1451  # reuse
        buf1712 = buf1450; del buf1450  # reuse
        buf1738 = buf1449; del buf1449  # reuse
        buf1684 = buf1447; del buf1447  # reuse
        buf1713 = buf1446; del buf1446  # reuse
        buf1740 = buf1445; del buf1445  # reuse
        buf1686 = buf1444; del buf1444  # reuse
        buf1715 = buf1442; del buf1442  # reuse
        buf1741 = buf1441; del buf1441  # reuse
        buf1716 = buf1440; del buf1440  # reuse
        buf1742 = buf1439; del buf1439  # reuse
        buf1689 = buf1437; del buf1437  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_800, add_924, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_91.run(buf1605, primals_251, buf1046, buf1047, buf1603, primals_252, buf1033, buf1034, buf957, buf963, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf1609, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1617, buf1613, buf1691, buf1717, buf1692, buf1718, buf1693, buf1720, buf1695, buf1721, buf1696, buf1722, buf1697, buf1723, buf1698, buf1725, buf1700, buf1726, buf1701, buf1727, buf1702, buf1728, buf1703, buf1730, buf1705, buf1731, buf1671, buf1706, buf1732, buf1673, buf1707, buf1733, buf1675, buf1708, buf1735, buf1677, buf1710, buf1736, buf1680, buf1711, buf1737, buf1682, buf1712, buf1738, buf1684, buf1713, buf1740, buf1686, buf1715, buf1741, buf1716, buf1742, buf1689, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1033
        del buf1034
        del buf1603
        del buf1609
        del primals_251
        del primals_252
        buf1614 = buf1610; del buf1610  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf1605, buf1046, buf1047, buf1614, 98304, 128, grid=grid(98304), stream=stream0)
        del buf1046
        del buf1047
        buf1615 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1614, buf1615, 2048, 48, grid=grid(2048), stream=stream0)
        buf1623 = empty_strided((4, 3, 2048, 22), (135168, 45056, 22, 1), device='cuda', dtype=torch.float16)
        buf1628 = buf1623; del buf1623  # reuse
        buf1633 = buf1628; del buf1628  # reuse
        buf1638 = buf1633; del buf1633  # reuse
        buf1643 = buf1638; del buf1638  # reuse
        buf1652 = buf1643; del buf1643  # reuse
        buf1661 = buf1652; del buf1652  # reuse
        buf1670 = buf1661; del buf1661  # reuse
        buf1679 = buf1670; del buf1670  # reuse
        buf1688 = buf1679; del buf1679  # reuse
        buf1694 = buf1688; del buf1688  # reuse
        buf1699 = buf1694; del buf1694  # reuse
        buf1704 = buf1699; del buf1699  # reuse
        buf1709 = buf1704; del buf1704  # reuse
        buf1714 = buf1709; del buf1709  # reuse
        buf1719 = buf1714; del buf1714  # reuse
        buf1724 = buf1719; del buf1719  # reuse
        buf1729 = buf1724; del buf1724  # reuse
        buf1734 = buf1729; del buf1729  # reuse
        buf1739 = buf1734; del buf1734  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_93.run(buf1739, buf1618, buf1619, buf1620, buf1621, buf1622, buf1624, buf1625, buf1626, buf1627, buf1629, buf1630, buf1631, buf1632, buf1634, buf1635, buf1636, buf1637, buf1639, buf1640, buf1641, buf1642, buf1644, buf1646, buf1648, buf1650, buf1653, buf1655, buf1657, buf1659, buf1662, buf1664, buf1666, buf1668, buf1671, buf1673, buf1675, buf1677, buf1680, buf1682, buf1684, buf1686, buf1689, buf1691, buf1692, buf1693, buf1695, buf1696, buf1697, buf1698, buf1700, buf1701, buf1702, buf1703, buf1705, buf1706, buf1707, buf1708, buf1710, buf1711, buf1712, buf1713, buf1715, buf1716, buf1717, buf1718, buf1720, buf1721, buf1722, buf1723, buf1725, buf1726, buf1727, buf1728, buf1730, buf1731, buf1732, buf1733, buf1735, buf1736, buf1737, buf1738, 540672, grid=grid(540672), stream=stream0)
        del buf1618
        del buf1619
        del buf1620
        del buf1621
        buf1743 = empty_strided((4, 1, 1, 22, 48), (1056, 4224, 4224, 1, 22), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_94.run(buf1739, buf1740, buf1741, buf1742, buf1743, 4224, 128, grid=grid(4224), stream=stream0)
        buf1744 = empty_strided((4, 1, 1, 22), (22, 88, 88, 1), device='cuda', dtype=torch.float16)
        buf1745 = reinterpret_tensor(buf1744, (4, 22), (22, 1)); del buf1744  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_95.run(buf1745, buf1743, 88, 48, grid=grid(88), stream=stream0)
        del buf1743
        buf1746 = empty_strided((3, 2048, 4, 22), (180224, 88, 22, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_96.run(buf1739, buf1740, buf1741, buf1742, buf1746, 540672, grid=grid(540672), stream=stream0)
        buf1747 = empty_strided((88, 88), (88, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1746, (88, 6144), (1, 88), 0), view_732, out=buf1747)
        del view_732
        buf1748 = reinterpret_tensor(buf1739, (6144, 88), (88, 1)); del buf1739  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1746, (6144, 88), (88, 1), 0), permute_563, out=buf1748)
        del buf1746
        del permute_563
        buf1749 = reinterpret_tensor(buf1748, (3, 2048, 88), (180224, 88, 1)); del buf1748  # reuse
        # Source Nodes: [l__mod___dynamic_dense_20_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_97.run(buf1749, mm_187, 540672, grid=grid(540672), stream=stream0)
        del mm_187
        buf1750 = empty_strided((88, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1749, (88, 6144), (1, 88), 0), view_730, out=buf1750)
        del view_730
        buf1751 = buf1605; del buf1605  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1749, (6144, 88), (88, 1), 0), permute_567, out=buf1751)
        del buf1749
        del permute_567
        buf1753 = reinterpret_tensor(buf1420, (3, 2048, 2048), (4194304, 2048, 1)); del buf1420  # reuse
        # Source Nodes: [add, add_882, add_989, float_1, mean, mul, mul_967, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_98.run(buf1753, buf1751, buf898, buf904, buf1488, primals_263, buf985, buf1432, unsqueeze_1079, rsqrt_102, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1432
        del buf1488
        del buf1751
        del buf985
        del primals_263
        del rsqrt_102
        del unsqueeze_1079
        buf1754 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1753, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf903, (6144, 5632), (5632, 1), 0), out=buf1754)
        buf1755 = reinterpret_tensor(buf903, (6144, 5632), (5632, 1)); del buf903  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1753, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_353, (2048, 5632), (5632, 1), 0), out=buf1755)
        del permute_353
        buf1756 = buf1580; del buf1580  # reuse
        buf1759 = reinterpret_tensor(buf902, (3, 2048, 5632), (11534336, 5632, 1)); del buf902  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf1759, buf1755, buf901, buf1756, 34603008, grid=grid(34603008), stream=stream0)
        del buf1755
        del buf901
        buf1757 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1756, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf900, (6144, 2048), (2048, 1), 0), out=buf1757)
        buf1758 = buf904; del buf904  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1756, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_352, (5632, 2048), (2048, 1), 0), out=buf1758)
        del buf1756
        del permute_352
        buf1760 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1759, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf900, (6144, 2048), (2048, 1), 0), out=buf1760)
        buf1761 = reinterpret_tensor(buf900, (6144, 2048), (2048, 1)); del buf900  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1759, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_351, (5632, 2048), (2048, 1), 0), out=buf1761)
        del permute_351
        buf1762 = buf1614; del buf1614  # reuse
        # Source Nodes: [add_881, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf1758, buf1761, buf898, buf899, buf1762, 98304, 128, grid=grid(98304), stream=stream0)
        buf1763 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_881, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1762, buf1763, 2048, 48, grid=grid(2048), stream=stream0)
        buf1765 = buf1753; del buf1753  # reuse
        # Source Nodes: [add_881, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf1765, buf1758, buf1761, primals_246, buf898, buf899, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1758
        del buf1761
        del buf899
        del primals_246
        buf1766 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1765, (2048, 6144), (1, 2048), 0), buf890, out=buf1766)
        buf1767 = buf890; del buf890  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1765, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_350, (2048, 2048), (2048, 1), 0), out=buf1767)
        del permute_350
        buf1768 = reinterpret_tensor(buf898, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf898  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1767, buf1768, 12582912, grid=grid(12582912), stream=stream0)
        buf1769 = reinterpret_tensor(buf1767, (48, 2048, 128), (262144, 128, 1)); del buf1767  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf877, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf1768, (48, 2048, 128), (262144, 128, 1), 0), out=buf1769)
        buf1770 = reinterpret_tensor(buf1594, (48, 2048, 2048), (4194304, 2048, 1)); del buf1594  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1768, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf888, (48, 128, 2048), (262144, 1, 128), 0), out=buf1770)
        buf1772 = reinterpret_tensor(buf1592, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf1592  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward4')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf1770, buf877, slice_3, buf1772, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf1770
        buf1773 = reinterpret_tensor(buf888, (48, 128, 2048), (262144, 2048, 1)); del buf888  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf872, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf1772, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf1773)
        buf1774 = reinterpret_tensor(buf872, (48, 2048, 128), (262144, 128, 1)); del buf872  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1772, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf873, (48, 2048, 128), (262144, 1, 2048), 0), out=buf1774)
        buf1775 = reinterpret_tensor(buf873, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf873  # reuse
        buf1776 = reinterpret_tensor(buf1768, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1768  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf1773, select_3, select_1, buf1774, buf1775, buf1776, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1773
        buf1777 = reinterpret_tensor(buf1774, (6144, 2048), (2048, 1)); del buf1774  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1769, buf1777, 12582912, grid=grid(12582912), stream=stream0)
        del buf1769
        buf1778 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1777, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf886, (6144, 2048), (2048, 1), 0), out=buf1778)
        buf1779 = reinterpret_tensor(buf886, (6144, 2048), (2048, 1)); del buf886  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf1777, reinterpret_tensor(permute_342, (2048, 2048), (2048, 1), 0), out=buf1779)
        del buf1777
        del permute_342
        buf1780 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1775, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf854, (6144, 2048), (2048, 1), 0), out=buf1780)
        buf1781 = reinterpret_tensor(buf854, (6144, 2048), (2048, 1)); del buf854  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1775, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_341, (2048, 2048), (2048, 1), 0), out=buf1781)
        del buf1775
        del permute_341
        buf1782 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1776, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf867, (6144, 2048), (2048, 1), 0), out=buf1782)
        buf1783 = reinterpret_tensor(buf867, (6144, 2048), (2048, 1)); del buf867  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1776, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_340, (2048, 2048), (2048, 1), 0), out=buf1783)
        del permute_340
        buf1784 = buf1762; del buf1762  # reuse
        # Source Nodes: [add_860, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf1779, buf884, buf885, buf1784, 98304, 128, grid=grid(98304), stream=stream0)
        buf1785 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_860, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1784, buf1785, 2048, 48, grid=grid(2048), stream=stream0)
        buf1787 = reinterpret_tensor(buf1776, (3, 2048, 2048), (4194304, 2048, 1)); del buf1776  # reuse
        buf1821 = buf1647; del buf1647  # reuse
        buf1824 = buf1649; del buf1649  # reuse
        buf1826 = buf1651; del buf1651  # reuse
        buf1828 = buf1654; del buf1654  # reuse
        buf1830 = buf1656; del buf1656  # reuse
        buf1833 = buf1658; del buf1658  # reuse
        buf1835 = buf1660; del buf1660  # reuse
        buf1837 = buf1663; del buf1663  # reuse
        buf1839 = buf1665; del buf1665  # reuse
        buf1842 = buf1667; del buf1667  # reuse
        buf1844 = buf1669; del buf1669  # reuse
        buf1846 = buf1672; del buf1672  # reuse
        buf1848 = buf1674; del buf1674  # reuse
        buf1851 = buf1676; del buf1676  # reuse
        buf1853 = buf1678; del buf1678  # reuse
        buf1855 = buf1681; del buf1681  # reuse
        buf1857 = buf1683; del buf1683  # reuse
        buf1860 = buf1685; del buf1685  # reuse
        buf1862 = buf1687; del buf1687  # reuse
        buf1864 = buf1690; del buf1690  # reuse
        buf1796 = buf1742; del buf1742  # reuse
        buf1820 = buf1741; del buf1741  # reuse
        buf1797 = buf1740; del buf1740  # reuse
        buf1823 = buf1738; del buf1738  # reuse
        buf1798 = buf1737; del buf1737  # reuse
        buf1825 = buf1736; del buf1736  # reuse
        buf1799 = buf1735; del buf1735  # reuse
        buf1827 = buf1733; del buf1733  # reuse
        buf1800 = buf1732; del buf1732  # reuse
        buf1829 = buf1731; del buf1731  # reuse
        buf1802 = buf1730; del buf1730  # reuse
        buf1832 = buf1728; del buf1728  # reuse
        buf1803 = buf1727; del buf1727  # reuse
        buf1834 = buf1726; del buf1726  # reuse
        buf1804 = buf1725; del buf1725  # reuse
        buf1836 = buf1723; del buf1723  # reuse
        buf1805 = buf1722; del buf1722  # reuse
        buf1838 = buf1721; del buf1721  # reuse
        buf1807 = buf1720; del buf1720  # reuse
        buf1841 = buf1718; del buf1718  # reuse
        buf1808 = buf1717; del buf1717  # reuse
        buf1843 = buf1716; del buf1716  # reuse
        buf1809 = buf1715; del buf1715  # reuse
        buf1810 = buf1713; del buf1713  # reuse
        buf1812 = buf1712; del buf1712  # reuse
        buf1813 = buf1711; del buf1711  # reuse
        buf1814 = buf1710; del buf1710  # reuse
        buf1815 = buf1708; del buf1708  # reuse
        buf1817 = buf1707; del buf1707  # reuse
        buf1818 = buf1706; del buf1706  # reuse
        buf1819 = buf1705; del buf1705  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_860, add_96, add_98, mean_2, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_99.run(buf1821, buf1824, buf1826, buf1828, buf1830, buf1833, buf1835, buf1837, buf1839, buf1842, buf1844, buf1846, buf1848, buf1851, buf1853, buf1855, buf1857, buf1860, buf1862, buf1864, buf1779, primals_241, buf884, buf885, buf1613, unsqueeze_1008, buf1617, unsqueeze_987, buf1765, unsqueeze_961, unsqueeze_941, unsqueeze_1007, unsqueeze_986, unsqueeze_960, unsqueeze_940, unsqueeze_1006, unsqueeze_985, unsqueeze_959, unsqueeze_939, unsqueeze_1005, unsqueeze_984, unsqueeze_958, unsqueeze_938, unsqueeze_1004, unsqueeze_983, unsqueeze_957, unsqueeze_937, unsqueeze_1003, unsqueeze_982, unsqueeze_956, unsqueeze_936, unsqueeze_1002, unsqueeze_981, unsqueeze_955, unsqueeze_935, unsqueeze_1001, unsqueeze_980, unsqueeze_954, unsqueeze_934, unsqueeze_1000, unsqueeze_979, unsqueeze_953, unsqueeze_933, unsqueeze_999, unsqueeze_978, unsqueeze_952, unsqueeze_932, unsqueeze_998, unsqueeze_977, unsqueeze_951, unsqueeze_931, unsqueeze_997, unsqueeze_976, unsqueeze_950, unsqueeze_930, unsqueeze_996, unsqueeze_975, unsqueeze_949, unsqueeze_929, unsqueeze_995, unsqueeze_974, unsqueeze_948, unsqueeze_928, unsqueeze_994, unsqueeze_973, unsqueeze_947, unsqueeze_927, unsqueeze_993, unsqueeze_972, unsqueeze_946, unsqueeze_926, unsqueeze_992, unsqueeze_971, unsqueeze_945, unsqueeze_925, unsqueeze_991, unsqueeze_970, unsqueeze_944, unsqueeze_924, unsqueeze_990, unsqueeze_969, unsqueeze_943, unsqueeze_923, unsqueeze_989, unsqueeze_968, unsqueeze_942, unsqueeze_922, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1787, buf1796, buf1820, buf1797, buf1823, buf1798, buf1825, buf1799, buf1827, buf1800, buf1829, buf1802, buf1832, buf1803, buf1834, buf1804, buf1836, buf1805, buf1838, buf1807, buf1841, buf1808, buf1843, buf1809, buf1810, buf1812, buf1813, buf1814, buf1815, buf1817, buf1818, buf1819, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf885
        del primals_241
        del unsqueeze_1000
        del unsqueeze_1001
        del unsqueeze_1002
        del unsqueeze_1003
        del unsqueeze_1004
        del unsqueeze_1005
        del unsqueeze_1006
        del unsqueeze_1007
        del unsqueeze_1008
        del unsqueeze_922
        del unsqueeze_923
        del unsqueeze_924
        del unsqueeze_925
        del unsqueeze_926
        del unsqueeze_927
        del unsqueeze_928
        del unsqueeze_929
        del unsqueeze_930
        del unsqueeze_931
        del unsqueeze_932
        del unsqueeze_933
        del unsqueeze_934
        del unsqueeze_935
        del unsqueeze_936
        del unsqueeze_937
        del unsqueeze_938
        del unsqueeze_939
        del unsqueeze_940
        del unsqueeze_941
        del unsqueeze_942
        del unsqueeze_943
        del unsqueeze_944
        del unsqueeze_945
        del unsqueeze_946
        del unsqueeze_947
        del unsqueeze_948
        del unsqueeze_949
        del unsqueeze_950
        del unsqueeze_951
        del unsqueeze_952
        del unsqueeze_953
        del unsqueeze_954
        del unsqueeze_955
        del unsqueeze_956
        del unsqueeze_957
        del unsqueeze_958
        del unsqueeze_959
        del unsqueeze_960
        del unsqueeze_961
        del unsqueeze_968
        del unsqueeze_969
        del unsqueeze_970
        del unsqueeze_971
        del unsqueeze_972
        del unsqueeze_973
        del unsqueeze_974
        del unsqueeze_975
        del unsqueeze_976
        del unsqueeze_977
        del unsqueeze_978
        del unsqueeze_979
        del unsqueeze_980
        del unsqueeze_981
        del unsqueeze_982
        del unsqueeze_983
        del unsqueeze_984
        del unsqueeze_985
        del unsqueeze_986
        del unsqueeze_987
        del unsqueeze_989
        del unsqueeze_990
        del unsqueeze_991
        del unsqueeze_992
        del unsqueeze_993
        del unsqueeze_994
        del unsqueeze_995
        del unsqueeze_996
        del unsqueeze_997
        del unsqueeze_998
        del unsqueeze_999
        buf1788 = buf1784; del buf1784  # reuse
        # Source Nodes: [add_840, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf1781, buf852, buf853, buf1788, 98304, 128, grid=grid(98304), stream=stream0)
        buf1789 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_840, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1788, buf1789, 2048, 48, grid=grid(2048), stream=stream0)
        buf1795 = reinterpret_tensor(buf1779, (3, 2048, 2048), (4194304, 2048, 1)); del buf1779  # reuse
        buf1791 = buf1765; del buf1765  # reuse
        buf1865 = buf1703; del buf1703  # reuse
        buf1890 = buf1702; del buf1702  # reuse
        buf1867 = buf1701; del buf1701  # reuse
        buf1892 = buf1700; del buf1700  # reuse
        buf1868 = buf1698; del buf1698  # reuse
        buf1893 = buf1697; del buf1697  # reuse
        buf1869 = buf1696; del buf1696  # reuse
        buf1894 = buf1695; del buf1695  # reuse
        buf1870 = buf1693; del buf1693  # reuse
        buf1895 = buf1692; del buf1692  # reuse
        buf1872 = buf1691; del buf1691  # reuse
        buf1897 = buf1689; del buf1689  # reuse
        buf1873 = buf1686; del buf1686  # reuse
        buf1898 = buf1684; del buf1684  # reuse
        buf1874 = buf1682; del buf1682  # reuse
        buf1899 = buf1680; del buf1680  # reuse
        buf1875 = buf1677; del buf1677  # reuse
        buf1900 = buf1675; del buf1675  # reuse
        buf1877 = buf1673; del buf1673  # reuse
        buf1902 = buf1671; del buf1671  # reuse
        buf1878 = buf1668; del buf1668  # reuse
        buf1903 = buf1666; del buf1666  # reuse
        buf1845 = buf1664; del buf1664  # reuse
        buf1879 = buf1662; del buf1662  # reuse
        buf1904 = buf1659; del buf1659  # reuse
        buf1847 = buf1657; del buf1657  # reuse
        buf1880 = buf1655; del buf1655  # reuse
        buf1905 = buf1653; del buf1653  # reuse
        buf1850 = buf1650; del buf1650  # reuse
        buf1882 = buf1648; del buf1648  # reuse
        buf1907 = buf1646; del buf1646  # reuse
        buf1852 = buf1644; del buf1644  # reuse
        buf1883 = buf1642; del buf1642  # reuse
        buf1908 = buf1641; del buf1641  # reuse
        buf1854 = buf1640; del buf1640  # reuse
        buf1884 = buf1639; del buf1639  # reuse
        buf1909 = buf1637; del buf1637  # reuse
        buf1856 = buf1636; del buf1636  # reuse
        buf1885 = buf1635; del buf1635  # reuse
        buf1910 = buf1634; del buf1634  # reuse
        buf1859 = buf1632; del buf1632  # reuse
        buf1887 = buf1631; del buf1631  # reuse
        buf1912 = buf1630; del buf1630  # reuse
        buf1861 = buf1629; del buf1629  # reuse
        buf1888 = buf1627; del buf1627  # reuse
        buf1913 = buf1626; del buf1626  # reuse
        buf1889 = buf1625; del buf1625  # reuse
        buf1914 = buf1624; del buf1624  # reuse
        buf1863 = buf1622; del buf1622  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_720, add_722, add_840, add_96, add_98, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_100.run(buf1783, primals_239, buf865, buf866, buf1781, primals_240, buf852, buf853, buf784, buf778, buf790, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf1787, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1795, buf1791, buf1865, buf1890, buf1867, buf1892, buf1868, buf1893, buf1869, buf1894, buf1870, buf1895, buf1872, buf1897, buf1873, buf1898, buf1874, buf1899, buf1875, buf1900, buf1877, buf1902, buf1878, buf1903, buf1845, buf1879, buf1904, buf1847, buf1880, buf1905, buf1850, buf1882, buf1907, buf1852, buf1883, buf1908, buf1854, buf1884, buf1909, buf1856, buf1885, buf1910, buf1859, buf1887, buf1912, buf1861, buf1888, buf1913, buf1889, buf1914, buf1863, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1781
        del buf1787
        del buf853
        del primals_239
        del primals_240
        buf1792 = buf1788; del buf1788  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf1783, buf865, buf866, buf1792, 98304, 128, grid=grid(98304), stream=stream0)
        del buf866
        buf1793 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1792, buf1793, 2048, 48, grid=grid(2048), stream=stream0)
        buf1801 = empty_strided((4, 3, 2048, 21), (129024, 43008, 21, 1), device='cuda', dtype=torch.float16)
        buf1806 = buf1801; del buf1801  # reuse
        buf1811 = buf1806; del buf1806  # reuse
        buf1816 = buf1811; del buf1811  # reuse
        buf1822 = buf1816; del buf1816  # reuse
        buf1831 = buf1822; del buf1822  # reuse
        buf1840 = buf1831; del buf1831  # reuse
        buf1849 = buf1840; del buf1840  # reuse
        buf1858 = buf1849; del buf1849  # reuse
        buf1866 = buf1858; del buf1858  # reuse
        buf1871 = buf1866; del buf1866  # reuse
        buf1876 = buf1871; del buf1871  # reuse
        buf1881 = buf1876; del buf1876  # reuse
        buf1886 = buf1881; del buf1881  # reuse
        buf1891 = buf1886; del buf1886  # reuse
        buf1896 = buf1891; del buf1891  # reuse
        buf1901 = buf1896; del buf1896  # reuse
        buf1906 = buf1901; del buf1901  # reuse
        buf1911 = buf1906; del buf1906  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_101.run(buf1911, buf1796, buf1797, buf1798, buf1799, buf1800, buf1802, buf1803, buf1804, buf1805, buf1807, buf1808, buf1809, buf1810, buf1812, buf1813, buf1814, buf1815, buf1817, buf1818, buf1819, buf1820, buf1823, buf1825, buf1827, buf1829, buf1832, buf1834, buf1836, buf1838, buf1841, buf1843, buf1845, buf1847, buf1850, buf1852, buf1854, buf1856, buf1859, buf1861, buf1863, buf1865, buf1867, buf1868, buf1869, buf1870, buf1872, buf1873, buf1874, buf1875, buf1877, buf1878, buf1879, buf1880, buf1882, buf1883, buf1884, buf1885, buf1887, buf1888, buf1889, buf1890, buf1892, buf1893, buf1894, buf1895, buf1897, buf1898, buf1899, buf1900, buf1902, buf1903, buf1904, buf1905, buf1907, buf1908, buf1909, buf1910, 516096, grid=grid(516096), stream=stream0)
        del buf1796
        del buf1797
        del buf1798
        del buf1799
        buf1915 = empty_strided((4, 1, 1, 21, 48), (1008, 4032, 4032, 1, 21), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_102.run(buf1911, buf1912, buf1913, buf1914, buf1915, 4032, 128, grid=grid(4032), stream=stream0)
        buf1916 = empty_strided((4, 1, 1, 21), (21, 84, 84, 1), device='cuda', dtype=torch.float16)
        buf1917 = reinterpret_tensor(buf1916, (4, 21), (21, 1)); del buf1916  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_103.run(buf1917, buf1915, 84, 48, grid=grid(84), stream=stream0)
        del buf1915
        buf1918 = empty_strided((3, 2048, 4, 21), (172032, 84, 21, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_104.run(buf1911, buf1912, buf1913, buf1914, buf1918, 516096, grid=grid(516096), stream=stream0)
        buf1919 = empty_strided((84, 84), (84, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1918, (84, 6144), (1, 84), 0), view_697, out=buf1919)
        del view_697
        buf1920 = reinterpret_tensor(buf1911, (6144, 84), (84, 1)); del buf1911  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1918, (6144, 84), (84, 1), 0), permute_612, out=buf1920)
        del buf1918
        del permute_612
        buf1921 = reinterpret_tensor(buf1920, (3, 2048, 84), (172032, 84, 1)); del buf1920  # reuse
        # Source Nodes: [l__mod___dynamic_dense_19_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_105.run(buf1921, mm_178, 516096, grid=grid(516096), stream=stream0)
        del mm_178
        buf1922 = empty_strided((84, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1921, (84, 6144), (1, 84), 0), view_695, out=buf1922)
        del view_695
        buf1923 = buf1783; del buf1783  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1921, (6144, 84), (84, 1), 0), permute_616, out=buf1923)
        del buf1921
        del permute_616
        buf1925 = buf1613; del buf1613  # reuse
        # Source Nodes: [add_800], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_106.run(buf1925, buf1923, buf957, buf963, buf1645, unsqueeze_1009, buf1617, unsqueeze_988, rsqrt_97, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1617
        del buf1645
        del buf1923
        del rsqrt_97
        del unsqueeze_1009
        del unsqueeze_988
        buf1926 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1925, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf962, (6144, 5632), (5632, 1), 0), out=buf1926)
        buf1927 = reinterpret_tensor(buf962, (6144, 5632), (5632, 1)); del buf962  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1925, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_336, (2048, 5632), (5632, 1), 0), out=buf1927)
        del permute_336
        buf1928 = buf1759; del buf1759  # reuse
        buf1931 = reinterpret_tensor(buf961, (3, 2048, 5632), (11534336, 5632, 1)); del buf961  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf1931, buf1927, buf960, buf1928, 34603008, grid=grid(34603008), stream=stream0)
        del buf1927
        del buf960
        buf1929 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1928, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf959, (6144, 2048), (2048, 1), 0), out=buf1929)
        buf1930 = buf963; del buf963  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1928, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_335, (5632, 2048), (2048, 1), 0), out=buf1930)
        del buf1928
        del permute_335
        buf1932 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1931, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf959, (6144, 2048), (2048, 1), 0), out=buf1932)
        buf1933 = reinterpret_tensor(buf959, (6144, 2048), (2048, 1)); del buf959  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1931, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_334, (5632, 2048), (2048, 1), 0), out=buf1933)
        del permute_334
        buf1934 = buf1792; del buf1792  # reuse
        # Source Nodes: [add_799, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf1930, buf1933, buf957, buf958, buf1934, 98304, 128, grid=grid(98304), stream=stream0)
        buf1935 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_799, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1934, buf1935, 2048, 48, grid=grid(2048), stream=stream0)
        buf1937 = buf1925; del buf1925  # reuse
        # Source Nodes: [add_799, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf1937, buf1930, buf1933, primals_234, buf957, buf958, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1930
        del buf1933
        del buf958
        del primals_234
        buf1938 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1937, (2048, 6144), (1, 2048), 0), buf949, out=buf1938)
        buf1939 = buf949; del buf949  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1937, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_333, (2048, 2048), (2048, 1), 0), out=buf1939)
        del permute_333
        buf1940 = reinterpret_tensor(buf957, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf957  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf1939, buf1940, 12582912, grid=grid(12582912), stream=stream0)
        buf1941 = reinterpret_tensor(buf1939, (48, 2048, 128), (262144, 128, 1)); del buf1939  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf936, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf1940, (48, 2048, 128), (262144, 128, 1), 0), out=buf1941)
        buf1942 = reinterpret_tensor(buf1772, (48, 2048, 2048), (4194304, 2048, 1)); del buf1772  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1940, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf947, (48, 128, 2048), (262144, 1, 128), 0), out=buf1942)
        buf1944 = buf877; del buf877  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward5')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf1942, buf936, slice_3, buf1944, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf1942
        buf1945 = reinterpret_tensor(buf947, (48, 128, 2048), (262144, 2048, 1)); del buf947  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf931, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf1944, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf1945)
        buf1946 = reinterpret_tensor(buf931, (48, 2048, 128), (262144, 128, 1)); del buf931  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1944, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf932, (48, 2048, 128), (262144, 1, 2048), 0), out=buf1946)
        buf1947 = reinterpret_tensor(buf932, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf932  # reuse
        buf1948 = reinterpret_tensor(buf1940, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf1940  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf1945, select_3, select_1, buf1946, buf1947, buf1948, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf1945
        buf1949 = reinterpret_tensor(buf1946, (6144, 2048), (2048, 1)); del buf1946  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf1941, buf1949, 12582912, grid=grid(12582912), stream=stream0)
        del buf1941
        buf1950 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1949, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf945, (6144, 2048), (2048, 1), 0), out=buf1950)
        buf1951 = reinterpret_tensor(buf945, (6144, 2048), (2048, 1)); del buf945  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf1949, reinterpret_tensor(permute_325, (2048, 2048), (2048, 1), 0), out=buf1951)
        del buf1949
        del permute_325
        buf1952 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1947, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf913, (6144, 2048), (2048, 1), 0), out=buf1952)
        buf1953 = reinterpret_tensor(buf913, (6144, 2048), (2048, 1)); del buf913  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1947, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_324, (2048, 2048), (2048, 1), 0), out=buf1953)
        del buf1947
        del permute_324
        buf1954 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1948, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf926, (6144, 2048), (2048, 1), 0), out=buf1954)
        buf1955 = reinterpret_tensor(buf926, (6144, 2048), (2048, 1)); del buf926  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1948, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_323, (2048, 2048), (2048, 1), 0), out=buf1955)
        del buf1948
        del permute_323
        buf1956 = buf1934; del buf1934  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf1951, buf944, buf1956, 98304, 128, grid=grid(98304), stream=stream0)
        del buf944
        buf1957 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1956, buf1957, 2048, 48, grid=grid(2048), stream=stream0)
        buf1968 = buf1914; del buf1914  # reuse
        buf1959 = buf865; del buf865  # reuse
        buf1992 = buf1824; del buf1824  # reuse
        buf1994 = buf1826; del buf1826  # reuse
        buf1997 = buf1828; del buf1828  # reuse
        buf1999 = buf1830; del buf1830  # reuse
        buf2001 = buf1833; del buf1833  # reuse
        buf2003 = buf1835; del buf1835  # reuse
        buf2006 = buf1837; del buf1837  # reuse
        buf2008 = buf1839; del buf1839  # reuse
        buf2010 = buf1842; del buf1842  # reuse
        buf2012 = buf1844; del buf1844  # reuse
        buf2015 = buf1846; del buf1846  # reuse
        buf2017 = buf1848; del buf1848  # reuse
        buf2019 = buf1851; del buf1851  # reuse
        buf2021 = buf1853; del buf1853  # reuse
        buf2024 = buf1855; del buf1855  # reuse
        buf2026 = buf1857; del buf1857  # reuse
        buf2028 = buf1860; del buf1860  # reuse
        buf2030 = buf1862; del buf1862  # reuse
        buf2033 = buf1864; del buf1864  # reuse
        buf1963 = buf852; del buf852  # reuse
        buf1967 = buf884; del buf884  # reuse
        buf2059 = buf1992; del buf1992  # reuse
        buf2061 = buf1994; del buf1994  # reuse
        buf2063 = buf1997; del buf1997  # reuse
        buf2065 = buf1999; del buf1999  # reuse
        buf2068 = buf2001; del buf2001  # reuse
        buf2070 = buf2003; del buf2003  # reuse
        buf2072 = buf2006; del buf2006  # reuse
        buf2074 = buf2008; del buf2008  # reuse
        buf2077 = buf2010; del buf2010  # reuse
        buf2079 = buf2012; del buf2012  # reuse
        buf2081 = buf2015; del buf2015  # reuse
        buf2083 = buf2017; del buf2017  # reuse
        buf2086 = buf2019; del buf2019  # reuse
        buf2088 = buf2021; del buf2021  # reuse
        buf2090 = buf2024; del buf2024  # reuse
        buf2092 = buf2026; del buf2026  # reuse
        buf2095 = buf2028; del buf2028  # reuse
        buf2097 = buf2030; del buf2030  # reuse
        buf2099 = buf2033; del buf2033  # reuse
        # Source Nodes: [add, add_648, add_740, add_759, add_760, add_778, add_779, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_6, mul_721, mul_740, mul_759, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_107.run(buf2059, buf2061, buf2063, buf2065, buf2068, buf2070, buf2072, buf2074, buf2077, buf2079, buf2081, buf2083, buf2086, buf2088, buf2090, buf2092, buf2095, buf2097, buf2099, buf1951, primals_229, buf942, unsqueeze_856, buf839, buf845, buf1953, primals_228, buf910, unsqueeze_837, buf1955, primals_227, buf923, unsqueeze_818, buf1937, buf943, buf1791, unsqueeze_920, buf1795, unsqueeze_900, unsqueeze_875, unsqueeze_919, unsqueeze_899, unsqueeze_874, unsqueeze_855, unsqueeze_918, unsqueeze_898, unsqueeze_873, unsqueeze_854, unsqueeze_917, unsqueeze_897, unsqueeze_872, unsqueeze_853, unsqueeze_916, unsqueeze_896, unsqueeze_871, unsqueeze_852, unsqueeze_915, unsqueeze_895, unsqueeze_870, unsqueeze_851, unsqueeze_914, unsqueeze_894, unsqueeze_869, unsqueeze_850, unsqueeze_913, unsqueeze_893, unsqueeze_868, unsqueeze_849, unsqueeze_912, unsqueeze_892, unsqueeze_867, unsqueeze_848, unsqueeze_911, unsqueeze_891, unsqueeze_866, unsqueeze_847, unsqueeze_910, unsqueeze_890, unsqueeze_865, unsqueeze_846, unsqueeze_909, unsqueeze_889, unsqueeze_864, unsqueeze_845, unsqueeze_908, unsqueeze_888, unsqueeze_863, unsqueeze_844, unsqueeze_907, unsqueeze_887, unsqueeze_862, unsqueeze_843, unsqueeze_906, unsqueeze_886, unsqueeze_861, unsqueeze_842, unsqueeze_905, unsqueeze_885, unsqueeze_860, unsqueeze_841, unsqueeze_904, unsqueeze_884, unsqueeze_859, unsqueeze_840, unsqueeze_903, unsqueeze_883, unsqueeze_858, unsqueeze_839, unsqueeze_902, unsqueeze_882, unsqueeze_857, unsqueeze_838, buf911, buf924, unsqueeze_836, unsqueeze_817, unsqueeze_835, unsqueeze_816, unsqueeze_834, unsqueeze_815, unsqueeze_833, unsqueeze_814, unsqueeze_832, unsqueeze_813, unsqueeze_831, unsqueeze_812, unsqueeze_830, unsqueeze_811, unsqueeze_829, unsqueeze_810, unsqueeze_828, unsqueeze_809, unsqueeze_827, unsqueeze_808, unsqueeze_826, unsqueeze_807, unsqueeze_825, unsqueeze_806, unsqueeze_824, unsqueeze_805, unsqueeze_823, unsqueeze_804, unsqueeze_822, unsqueeze_803, unsqueeze_821, unsqueeze_802, unsqueeze_820, unsqueeze_801, unsqueeze_819, unsqueeze_800, buf1968, buf1959, buf1963, buf1967, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf910
        del buf923
        del buf942
        del unsqueeze_800
        del unsqueeze_801
        del unsqueeze_802
        del unsqueeze_803
        del unsqueeze_804
        del unsqueeze_805
        del unsqueeze_806
        del unsqueeze_807
        del unsqueeze_808
        del unsqueeze_809
        del unsqueeze_810
        del unsqueeze_811
        del unsqueeze_812
        del unsqueeze_813
        del unsqueeze_814
        del unsqueeze_815
        del unsqueeze_816
        del unsqueeze_817
        del unsqueeze_818
        del unsqueeze_819
        del unsqueeze_820
        del unsqueeze_821
        del unsqueeze_822
        del unsqueeze_823
        del unsqueeze_824
        del unsqueeze_825
        del unsqueeze_826
        del unsqueeze_827
        del unsqueeze_828
        del unsqueeze_829
        del unsqueeze_830
        del unsqueeze_831
        del unsqueeze_832
        del unsqueeze_833
        del unsqueeze_834
        del unsqueeze_835
        del unsqueeze_836
        del unsqueeze_837
        del unsqueeze_838
        del unsqueeze_839
        del unsqueeze_840
        del unsqueeze_841
        del unsqueeze_842
        del unsqueeze_843
        del unsqueeze_844
        del unsqueeze_845
        del unsqueeze_846
        del unsqueeze_847
        del unsqueeze_848
        del unsqueeze_849
        del unsqueeze_850
        del unsqueeze_851
        del unsqueeze_852
        del unsqueeze_853
        del unsqueeze_854
        del unsqueeze_855
        del unsqueeze_856
        del unsqueeze_857
        del unsqueeze_858
        del unsqueeze_859
        del unsqueeze_860
        del unsqueeze_861
        del unsqueeze_862
        del unsqueeze_863
        del unsqueeze_864
        del unsqueeze_865
        del unsqueeze_866
        del unsqueeze_867
        del unsqueeze_868
        del unsqueeze_869
        del unsqueeze_870
        del unsqueeze_871
        del unsqueeze_872
        del unsqueeze_873
        del unsqueeze_874
        del unsqueeze_875
        del unsqueeze_882
        del unsqueeze_883
        del unsqueeze_884
        del unsqueeze_885
        del unsqueeze_886
        del unsqueeze_887
        del unsqueeze_888
        del unsqueeze_889
        del unsqueeze_890
        del unsqueeze_891
        del unsqueeze_892
        del unsqueeze_893
        del unsqueeze_894
        del unsqueeze_895
        del unsqueeze_896
        del unsqueeze_897
        del unsqueeze_898
        del unsqueeze_899
        del unsqueeze_900
        del unsqueeze_902
        del unsqueeze_903
        del unsqueeze_904
        del unsqueeze_905
        del unsqueeze_906
        del unsqueeze_907
        del unsqueeze_908
        del unsqueeze_909
        del unsqueeze_910
        del unsqueeze_911
        del unsqueeze_912
        del unsqueeze_913
        del unsqueeze_914
        del unsqueeze_915
        del unsqueeze_916
        del unsqueeze_917
        del unsqueeze_918
        del unsqueeze_919
        del unsqueeze_920
        buf1960 = buf1956; del buf1956  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf1953, buf912, buf1960, 98304, 128, grid=grid(98304), stream=stream0)
        del buf912
        buf1961 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1960, buf1961, 2048, 48, grid=grid(2048), stream=stream0)
        buf1964 = buf1960; del buf1960  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf1955, buf925, buf1964, 98304, 128, grid=grid(98304), stream=stream0)
        del buf925
        buf1965 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf1964, buf1965, 2048, 48, grid=grid(2048), stream=stream0)
        buf1986 = buf1913; del buf1913  # reuse
        buf1982 = buf1912; del buf1912  # reuse
        buf1984 = buf1910; del buf1910  # reuse
        buf1980 = buf1909; del buf1909  # reuse
        buf1979 = buf1908; del buf1908  # reuse
        buf1976 = buf1907; del buf1907  # reuse
        buf1975 = buf1905; del buf1905  # reuse
        buf1972 = buf1904; del buf1904  # reuse
        buf1971 = buf1903; del buf1903  # reuse
        buf1969 = buf1902; del buf1902  # reuse
        buf1989 = buf1900; del buf1900  # reuse
        buf1985 = buf1899; del buf1899  # reuse
        buf1981 = buf1898; del buf1898  # reuse
        buf1977 = buf1897; del buf1897  # reuse
        buf1974 = buf1895; del buf1895  # reuse
        buf1970 = buf1894; del buf1894  # reuse
        buf1987 = buf1893; del buf1893  # reuse
        buf1991 = buf1892; del buf1892  # reuse
        buf1993 = buf1890; del buf1890  # reuse
        buf1996 = buf1889; del buf1889  # reuse
        buf1998 = buf1888; del buf1888  # reuse
        buf2000 = buf1887; del buf1887  # reuse
        buf2002 = buf1885; del buf1885  # reuse
        buf2005 = buf1884; del buf1884  # reuse
        buf2007 = buf1883; del buf1883  # reuse
        buf2009 = buf1882; del buf1882  # reuse
        buf2011 = buf1880; del buf1880  # reuse
        buf2014 = buf1879; del buf1879  # reuse
        buf2016 = buf1878; del buf1878  # reuse
        buf2018 = buf1877; del buf1877  # reuse
        buf2020 = buf1875; del buf1875  # reuse
        buf2023 = buf1874; del buf1874  # reuse
        buf2025 = buf1873; del buf1873  # reuse
        buf2027 = buf1872; del buf1872  # reuse
        buf2029 = buf1870; del buf1870  # reuse
        buf2032 = buf1869; del buf1869  # reuse
        buf1990 = buf1868; del buf1868  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_778, add_779, add_96, add_98, float_3, mean_2, mul_4, mul_6, mul_759, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_108.run(buf1937, buf68, buf74, buf251, buf257, buf138, buf144, buf337, buf343, buf294, buf300, buf384, buf390, buf521, buf527, buf623, buf629, buf572, buf578, buf678, buf684, embedding, buf33, buf39, buf173, buf172, buf179, buf212, buf210, buf218, buf427, buf424, buf433, buf474, buf470, buf480, buf729, buf724, buf735, unsqueeze_11, buf99, buf105, buf1951, primals_229, buf943, buf1959, buf839, buf845, buf1986, buf1982, buf1984, buf1980, buf1979, buf1976, buf1975, buf1972, buf1971, buf1969, buf1989, buf1985, buf1981, buf1977, buf1974, buf1970, buf1987, buf1991, buf1993, buf1996, buf1998, buf2000, buf2002, buf2005, buf2007, buf2009, buf2011, buf2014, buf2016, buf2018, buf2020, buf2023, buf2025, buf2027, buf2029, buf2032, buf1990, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1937
        del buf1951
        del buf1959
        del buf943
        del primals_229
        buf2034 = buf1867; del buf1867  # reuse
        buf2035 = buf1865; del buf1865  # reuse
        buf2036 = buf1863; del buf1863  # reuse
        buf2038 = buf1861; del buf1861  # reuse
        buf2039 = buf1859; del buf1859  # reuse
        buf2040 = buf1856; del buf1856  # reuse
        buf2041 = buf1854; del buf1854  # reuse
        buf2043 = buf1852; del buf1852  # reuse
        buf2044 = buf1850; del buf1850  # reuse
        buf2045 = buf1847; del buf1847  # reuse
        buf2046 = buf1845; del buf1845  # reuse
        buf2048 = buf1843; del buf1843  # reuse
        buf2049 = buf1841; del buf1841  # reuse
        buf2050 = buf1838; del buf1838  # reuse
        buf2051 = buf1836; del buf1836  # reuse
        buf2053 = buf1834; del buf1834  # reuse
        buf2054 = buf1832; del buf1832  # reuse
        buf2055 = buf1829; del buf1829  # reuse
        buf2056 = buf1827; del buf1827  # reuse
        buf2058 = buf1825; del buf1825  # reuse
        buf2060 = buf1823; del buf1823  # reuse
        buf2062 = buf1820; del buf1820  # reuse
        buf2064 = buf1819; del buf1819  # reuse
        buf2067 = buf1818; del buf1818  # reuse
        buf2069 = buf1817; del buf1817  # reuse
        buf2071 = buf1815; del buf1815  # reuse
        buf2073 = buf1814; del buf1814  # reuse
        buf2076 = buf1813; del buf1813  # reuse
        buf2078 = buf1812; del buf1812  # reuse
        buf2080 = buf1810; del buf1810  # reuse
        buf2082 = buf1809; del buf1809  # reuse
        buf2085 = buf1808; del buf1808  # reuse
        buf2087 = buf1807; del buf1807  # reuse
        buf2089 = buf1805; del buf1805  # reuse
        buf2091 = buf1804; del buf1804  # reuse
        buf2094 = buf1803; del buf1803  # reuse
        buf2096 = buf1802; del buf1802  # reuse
        buf2098 = buf1800; del buf1800  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_72, add_740, add_759, add_760, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, mul_721, mul_740, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_109.run(buf1953, primals_228, buf911, buf1963, buf839, buf845, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf1955, primals_227, buf924, buf1967, buf2034, buf2035, buf2036, buf2038, buf2039, buf2040, buf2041, buf2043, buf2044, buf2045, buf2046, buf2048, buf2049, buf2050, buf2051, buf2053, buf2054, buf2055, buf2056, buf2058, buf2060, buf2062, buf2064, buf2067, buf2069, buf2071, buf2073, buf2076, buf2078, buf2080, buf2082, buf2085, buf2087, buf2089, buf2091, buf2094, buf2096, buf2098, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1953
        del buf1963
        del buf1967
        del buf911
        del buf924
        del primals_227
        del primals_228
        buf1973 = empty_strided((4, 3, 2048, 20), (122880, 40960, 20, 1), device='cuda', dtype=torch.float16)
        buf1978 = buf1973; del buf1973  # reuse
        buf1983 = buf1978; del buf1978  # reuse
        buf1988 = buf1983; del buf1983  # reuse
        buf1995 = buf1988; del buf1988  # reuse
        buf2004 = buf1995; del buf1995  # reuse
        buf2013 = buf2004; del buf2004  # reuse
        buf2022 = buf2013; del buf2013  # reuse
        buf2031 = buf2022; del buf2022  # reuse
        buf2037 = buf2031; del buf2031  # reuse
        buf2042 = buf2037; del buf2037  # reuse
        buf2047 = buf2042; del buf2042  # reuse
        buf2052 = buf2047; del buf2047  # reuse
        buf2057 = buf2052; del buf2052  # reuse
        buf2066 = buf2057; del buf2057  # reuse
        buf2075 = buf2066; del buf2066  # reuse
        buf2084 = buf2075; del buf2075  # reuse
        buf2093 = buf2084; del buf2084  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_110.run(buf2093, buf1968, buf1969, buf1970, buf1971, buf1972, buf1974, buf1975, buf1976, buf1977, buf1979, buf1980, buf1981, buf1982, buf1984, buf1985, buf1986, buf1987, buf1989, buf1990, buf1991, buf1993, buf1996, buf1998, buf2000, buf2002, buf2005, buf2007, buf2009, buf2011, buf2014, buf2016, buf2018, buf2020, buf2023, buf2025, buf2027, buf2029, buf2032, buf2034, buf2035, buf2036, buf2038, buf2039, buf2040, buf2041, buf2043, buf2044, buf2045, buf2046, buf2048, buf2049, buf2050, buf2051, buf2053, buf2054, buf2055, buf2056, buf2058, buf2060, buf2062, buf2064, buf2067, buf2069, buf2071, buf2073, buf2076, buf2078, buf2080, buf2082, buf2085, buf2087, buf2089, buf2091, 491520, grid=grid(491520), stream=stream0)
        del buf1968
        del buf1969
        del buf1970
        del buf1971
        buf2100 = empty_strided((4, 1, 1, 20, 48), (960, 3840, 3840, 1, 20), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_111.run(buf2093, buf2094, buf2096, buf2098, buf2100, 3840, 128, grid=grid(3840), stream=stream0)
        buf2101 = empty_strided((4, 1, 1, 20), (20, 80, 80, 1), device='cuda', dtype=torch.float16)
        buf2102 = reinterpret_tensor(buf2101, (4, 20), (20, 1)); del buf2101  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_112.run(buf2102, buf2100, 80, 48, grid=grid(80), stream=stream0)
        del buf2100
        buf2103 = empty_strided((3, 2048, 4, 20), (163840, 80, 20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_113.run(buf2093, buf2094, buf2096, buf2098, buf2103, 491520, grid=grid(491520), stream=stream0)
        buf2104 = empty_strided((80, 80), (80, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2103, (80, 6144), (1, 80), 0), view_662, out=buf2104)
        del view_662
        buf2105 = reinterpret_tensor(buf2093, (6144, 80), (80, 1)); del buf2093  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2103, (6144, 80), (80, 1), 0), permute_661, out=buf2105)
        del buf2103
        del permute_661
        buf2106 = reinterpret_tensor(buf2105, (3, 2048, 80), (163840, 80, 1)); del buf2105  # reuse
        # Source Nodes: [l__mod___dynamic_dense_18_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_114.run(buf2106, mm_169, 491520, grid=grid(491520), stream=stream0)
        del mm_169
        buf2107 = empty_strided((80, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2106, (80, 6144), (1, 80), 0), view_660, out=buf2107)
        del view_660
        buf2108 = buf1955; del buf1955  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2106, (6144, 80), (80, 1), 0), permute_665, out=buf2108)
        del buf2106
        del permute_665
        buf2110 = buf1791; del buf1791  # reuse
        # Source Nodes: [add_720, add_722], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_115.run(buf2110, buf2108, buf784, buf778, buf790, buf1821, unsqueeze_921, buf1795, unsqueeze_901, rsqrt_92, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf1795
        del buf1821
        del buf2108
        del rsqrt_92
        del unsqueeze_901
        del unsqueeze_921
        buf2111 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2110, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf789, (6144, 5632), (5632, 1), 0), out=buf2111)
        buf2112 = reinterpret_tensor(buf789, (6144, 5632), (5632, 1)); del buf789  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2110, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_319, (2048, 5632), (5632, 1), 0), out=buf2112)
        del permute_319
        buf2113 = buf1931; del buf1931  # reuse
        buf2116 = reinterpret_tensor(buf788, (3, 2048, 5632), (11534336, 5632, 1)); del buf788  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2116, buf2112, buf787, buf2113, 34603008, grid=grid(34603008), stream=stream0)
        del buf2112
        del buf787
        buf2114 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2113, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf786, (6144, 2048), (2048, 1), 0), out=buf2114)
        buf2115 = buf790; del buf790  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2113, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_318, (5632, 2048), (2048, 1), 0), out=buf2115)
        del buf2113
        del permute_318
        buf2117 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2116, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf786, (6144, 2048), (2048, 1), 0), out=buf2117)
        buf2118 = reinterpret_tensor(buf786, (6144, 2048), (2048, 1)); del buf786  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2116, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_317, (5632, 2048), (2048, 1), 0), out=buf2118)
        del permute_317
        buf2119 = buf1964; del buf1964  # reuse
        # Source Nodes: [add_720, add_721, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf2115, buf2118, buf784, buf778, buf785, buf2119, 98304, 128, grid=grid(98304), stream=stream0)
        buf2120 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_720, add_721, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2119, buf2120, 2048, 48, grid=grid(2048), stream=stream0)
        buf2123 = buf2110; del buf2110  # reuse
        # Source Nodes: [add_720, add_721, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf2123, buf2115, buf2118, primals_222, buf784, buf778, buf785, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2115
        del buf2118
        del buf778
        del buf785
        del primals_222
        buf2124 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2123, (2048, 6144), (1, 2048), 0), buf777, out=buf2124)
        buf2125 = buf777; del buf777  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2123, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_316, (2048, 2048), (2048, 1), 0), out=buf2125)
        del permute_316
        buf2126 = reinterpret_tensor(buf784, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf784  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2125, buf2126, 12582912, grid=grid(12582912), stream=stream0)
        buf2127 = reinterpret_tensor(buf2125, (48, 2048, 128), (262144, 128, 1)); del buf2125  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf765, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2126, (48, 2048, 128), (262144, 128, 1), 0), out=buf2127)
        buf2128 = reinterpret_tensor(buf1944, (48, 2048, 2048), (4194304, 2048, 1)); del buf1944  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2126, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf775, (48, 128, 2048), (262144, 1, 128), 0), out=buf2128)
        buf2130 = buf936; del buf936  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward6')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2128, buf765, slice_3, buf2130, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2128
        buf2131 = reinterpret_tensor(buf775, (48, 128, 2048), (262144, 2048, 1)); del buf775  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf760, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2130, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2131)
        buf2132 = reinterpret_tensor(buf760, (48, 2048, 128), (262144, 128, 1)); del buf760  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2130, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf761, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2132)
        buf2133 = reinterpret_tensor(buf761, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf761  # reuse
        buf2134 = reinterpret_tensor(buf2126, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2126  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2131, select_3, select_1, buf2132, buf2133, buf2134, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2131
        buf2135 = reinterpret_tensor(buf2132, (6144, 2048), (2048, 1)); del buf2132  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2127, buf2135, 12582912, grid=grid(12582912), stream=stream0)
        del buf2127
        buf2136 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2135, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf773, (6144, 2048), (2048, 1), 0), out=buf2136)
        buf2137 = reinterpret_tensor(buf773, (6144, 2048), (2048, 1)); del buf773  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2135, reinterpret_tensor(permute_308, (2048, 2048), (2048, 1), 0), out=buf2137)
        del permute_308
        buf2138 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2133, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf743, (6144, 2048), (2048, 1), 0), out=buf2138)
        buf2139 = reinterpret_tensor(buf743, (6144, 2048), (2048, 1)); del buf743  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2133, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_307, (2048, 2048), (2048, 1), 0), out=buf2139)
        del permute_307
        buf2140 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2134, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf755, (6144, 2048), (2048, 1), 0), out=buf2140)
        buf2141 = reinterpret_tensor(buf755, (6144, 2048), (2048, 1)); del buf755  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2134, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_306, (2048, 2048), (2048, 1), 0), out=buf2141)
        del permute_306
        buf2142 = buf2119; del buf2119  # reuse
        # Source Nodes: [add_702, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf2137, buf771, buf772, buf2142, 98304, 128, grid=grid(98304), stream=stream0)
        buf2143 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_702, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2142, buf2143, 2048, 48, grid=grid(2048), stream=stream0)
        buf2145 = reinterpret_tensor(buf2134, (3, 2048, 2048), (4194304, 2048, 1)); del buf2134  # reuse
        buf2149 = reinterpret_tensor(buf2133, (3, 2048, 2048), (4194304, 2048, 1)); del buf2133  # reuse
        buf2153 = reinterpret_tensor(buf2135, (3, 2048, 2048), (4194304, 2048, 1)); del buf2135  # reuse
        buf2222 = buf2061; del buf2061  # reuse
        buf2224 = buf2063; del buf2063  # reuse
        buf2226 = buf2065; del buf2065  # reuse
        buf2229 = buf2068; del buf2068  # reuse
        buf2231 = buf2070; del buf2070  # reuse
        buf2233 = buf2072; del buf2072  # reuse
        buf2235 = buf2074; del buf2074  # reuse
        buf2238 = buf2077; del buf2077  # reuse
        buf2240 = buf2079; del buf2079  # reuse
        buf2242 = buf2081; del buf2081  # reuse
        buf2244 = buf2083; del buf2083  # reuse
        buf2247 = buf2086; del buf2086  # reuse
        buf2249 = buf2088; del buf2088  # reuse
        buf2251 = buf2090; del buf2090  # reuse
        buf2253 = buf2092; del buf2092  # reuse
        buf2256 = buf2095; del buf2095  # reuse
        buf2258 = buf2097; del buf2097  # reuse
        buf2260 = buf2099; del buf2099  # reuse
        buf2221 = buf2098; del buf2098  # reuse
        buf2223 = buf2096; del buf2096  # reuse
        buf2225 = buf2094; del buf2094  # reuse
        buf2228 = buf2091; del buf2091  # reuse
        buf2230 = buf2089; del buf2089  # reuse
        buf2232 = buf2087; del buf2087  # reuse
        buf2234 = buf2085; del buf2085  # reuse
        buf2237 = buf2082; del buf2082  # reuse
        buf2239 = buf2080; del buf2080  # reuse
        buf2241 = buf2078; del buf2078  # reuse
        buf2243 = buf2076; del buf2076  # reuse
        buf2246 = buf2073; del buf2073  # reuse
        buf2248 = buf2071; del buf2071  # reuse
        buf2250 = buf2069; del buf2069  # reuse
        buf2252 = buf2067; del buf2067  # reuse
        buf2255 = buf2064; del buf2064  # reuse
        buf2257 = buf2062; del buf2062  # reuse
        buf2259 = buf2060; del buf2060  # reuse
        buf2170 = buf2058; del buf2058  # reuse
        buf2192 = buf2056; del buf2056  # reuse
        buf2215 = buf2055; del buf2055  # reuse
        buf2171 = buf2054; del buf2054  # reuse
        buf2193 = buf2053; del buf2053  # reuse
        buf2216 = buf2051; del buf2051  # reuse
        buf2172 = buf2050; del buf2050  # reuse
        buf2195 = buf2049; del buf2049  # reuse
        buf2217 = buf2048; del buf2048  # reuse
        buf2173 = buf2046; del buf2046  # reuse
        buf2196 = buf2045; del buf2045  # reuse
        buf2218 = buf2044; del buf2044  # reuse
        buf2197 = buf2043; del buf2043  # reuse
        buf2175 = buf2041; del buf2041  # reuse
        buf2220 = buf2040; del buf2040  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_684, add_702, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_116.run(buf2222, buf2224, buf2226, buf2229, buf2231, buf2233, buf2235, buf2238, buf2240, buf2242, buf2244, buf2247, buf2249, buf2251, buf2253, buf2256, buf2258, buf2260, buf2137, primals_217, buf771, buf2141, primals_215, buf753, buf2139, primals_216, buf741, buf772, buf742, buf754, buf2123, unsqueeze_793, unsqueeze_775, unsqueeze_757, unsqueeze_739, unsqueeze_792, unsqueeze_774, unsqueeze_756, unsqueeze_738, unsqueeze_791, unsqueeze_773, unsqueeze_755, unsqueeze_737, unsqueeze_790, unsqueeze_772, unsqueeze_754, unsqueeze_736, unsqueeze_789, unsqueeze_771, unsqueeze_753, unsqueeze_735, unsqueeze_788, unsqueeze_770, unsqueeze_752, unsqueeze_734, unsqueeze_787, unsqueeze_769, unsqueeze_751, unsqueeze_733, unsqueeze_786, unsqueeze_768, unsqueeze_750, unsqueeze_732, unsqueeze_785, unsqueeze_767, unsqueeze_749, unsqueeze_731, unsqueeze_784, unsqueeze_766, unsqueeze_748, unsqueeze_730, unsqueeze_783, unsqueeze_765, unsqueeze_747, unsqueeze_729, unsqueeze_782, unsqueeze_764, unsqueeze_746, unsqueeze_728, unsqueeze_781, unsqueeze_763, unsqueeze_745, unsqueeze_727, unsqueeze_780, unsqueeze_762, unsqueeze_744, unsqueeze_726, unsqueeze_779, unsqueeze_761, unsqueeze_743, unsqueeze_725, unsqueeze_778, unsqueeze_760, unsqueeze_742, unsqueeze_724, unsqueeze_777, unsqueeze_759, unsqueeze_741, unsqueeze_723, unsqueeze_776, unsqueeze_758, unsqueeze_740, unsqueeze_722, buf678, buf684, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2145, buf2149, buf2153, buf2221, buf2223, buf2225, buf2228, buf2230, buf2232, buf2234, buf2237, buf2239, buf2241, buf2243, buf2246, buf2248, buf2250, buf2252, buf2255, buf2257, buf2259, buf2170, buf2192, buf2215, buf2171, buf2193, buf2216, buf2172, buf2195, buf2217, buf2173, buf2196, buf2218, buf2197, buf2175, buf2220, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2137
        del buf2153
        del buf771
        del buf772
        del primals_215
        del primals_216
        del primals_217
        del unsqueeze_722
        del unsqueeze_723
        del unsqueeze_724
        del unsqueeze_725
        del unsqueeze_726
        del unsqueeze_727
        del unsqueeze_728
        del unsqueeze_729
        del unsqueeze_730
        del unsqueeze_731
        del unsqueeze_732
        del unsqueeze_733
        del unsqueeze_734
        del unsqueeze_735
        del unsqueeze_736
        del unsqueeze_737
        del unsqueeze_738
        del unsqueeze_739
        del unsqueeze_740
        del unsqueeze_741
        del unsqueeze_742
        del unsqueeze_743
        del unsqueeze_744
        del unsqueeze_745
        del unsqueeze_746
        del unsqueeze_747
        del unsqueeze_748
        del unsqueeze_749
        del unsqueeze_750
        del unsqueeze_751
        del unsqueeze_752
        del unsqueeze_753
        del unsqueeze_754
        del unsqueeze_755
        del unsqueeze_756
        del unsqueeze_757
        del unsqueeze_758
        del unsqueeze_759
        del unsqueeze_760
        del unsqueeze_761
        del unsqueeze_762
        del unsqueeze_763
        del unsqueeze_764
        del unsqueeze_765
        del unsqueeze_766
        del unsqueeze_767
        del unsqueeze_768
        del unsqueeze_769
        del unsqueeze_770
        del unsqueeze_771
        del unsqueeze_772
        del unsqueeze_773
        del unsqueeze_774
        del unsqueeze_775
        del unsqueeze_776
        del unsqueeze_777
        del unsqueeze_778
        del unsqueeze_779
        del unsqueeze_780
        del unsqueeze_781
        del unsqueeze_782
        del unsqueeze_783
        del unsqueeze_784
        del unsqueeze_785
        del unsqueeze_786
        del unsqueeze_787
        del unsqueeze_788
        del unsqueeze_789
        del unsqueeze_790
        del unsqueeze_791
        del unsqueeze_792
        del unsqueeze_793
        buf2146 = buf2142; del buf2142  # reuse
        # Source Nodes: [add_684, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf2139, buf741, buf742, buf2146, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2139
        del buf741
        del buf742
        buf2147 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_684, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2146, buf2147, 2048, 48, grid=grid(2048), stream=stream0)
        buf2150 = buf2146; del buf2146  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf2141, buf753, buf754, buf2150, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2141
        del buf753
        del buf754
        buf2151 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2150, buf2151, 2048, 48, grid=grid(2048), stream=stream0)
        buf2154 = buf2039; del buf2039  # reuse
        buf2176 = buf2038; del buf2038  # reuse
        buf2198 = buf2036; del buf2036  # reuse
        buf2155 = buf2035; del buf2035  # reuse
        buf2177 = buf2034; del buf2034  # reuse
        buf2200 = buf2032; del buf2032  # reuse
        buf2156 = buf2029; del buf2029  # reuse
        buf2178 = buf2027; del buf2027  # reuse
        buf2201 = buf2025; del buf2025  # reuse
        buf2157 = buf2023; del buf2023  # reuse
        buf2180 = buf2020; del buf2020  # reuse
        buf2202 = buf2018; del buf2018  # reuse
        buf2158 = buf2016; del buf2016  # reuse
        buf2181 = buf2014; del buf2014  # reuse
        buf2203 = buf2011; del buf2011  # reuse
        buf2160 = buf2009; del buf2009  # reuse
        buf2182 = buf2007; del buf2007  # reuse
        buf2205 = buf2005; del buf2005  # reuse
        buf2161 = buf2002; del buf2002  # reuse
        buf2183 = buf2000; del buf2000  # reuse
        buf2206 = buf1998; del buf1998  # reuse
        buf2162 = buf1996; del buf1996  # reuse
        buf2185 = buf1993; del buf1993  # reuse
        buf2207 = buf1991; del buf1991  # reuse
        buf2163 = buf1990; del buf1990  # reuse
        buf2186 = buf1989; del buf1989  # reuse
        buf2208 = buf1987; del buf1987  # reuse
        buf2165 = buf1986; del buf1986  # reuse
        buf2187 = buf1985; del buf1985  # reuse
        buf2210 = buf1984; del buf1984  # reuse
        buf2166 = buf1982; del buf1982  # reuse
        buf2188 = buf1981; del buf1981  # reuse
        buf2211 = buf1980; del buf1980  # reuse
        buf2167 = buf1979; del buf1979  # reuse
        buf2190 = buf1977; del buf1977  # reuse
        buf2212 = buf1976; del buf1976  # reuse
        buf2168 = buf1975; del buf1975  # reuse
        buf2191 = buf1974; del buf1974  # reuse
        buf2213 = buf1972; del buf1972  # reuse
        # Source Nodes: [add_128, add_162, add_198, add_200, add_242, add_288, add_336, add_338, add_392, add_450, add_50, add_510, add_512, add_578, add_72, add_96, add_98], Original ATen: [aten.add, aten.mul, aten.sum]
        triton_red_fused_add_mul_sum_117.run(buf2123, buf678, buf684, buf2145, buf2149, buf729, buf724, buf735, buf572, buf578, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf2154, buf2176, buf2198, buf2155, buf2177, buf2200, buf2156, buf2178, buf2201, buf2157, buf2180, buf2202, buf2158, buf2181, buf2203, buf2160, buf2182, buf2205, buf2161, buf2183, buf2206, buf2162, buf2185, buf2207, buf2163, buf2186, buf2208, buf2165, buf2187, buf2210, buf2166, buf2188, buf2211, buf2167, buf2190, buf2212, buf2168, buf2191, buf2213, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2123
        del buf2145
        buf2159 = empty_strided((4, 3, 2048, 19), (116736, 38912, 19, 1), device='cuda', dtype=torch.float16)
        buf2164 = buf2159; del buf2159  # reuse
        buf2169 = buf2164; del buf2164  # reuse
        buf2174 = buf2169; del buf2169  # reuse
        buf2179 = buf2174; del buf2174  # reuse
        buf2184 = buf2179; del buf2179  # reuse
        buf2189 = buf2184; del buf2184  # reuse
        buf2194 = buf2189; del buf2189  # reuse
        buf2199 = buf2194; del buf2194  # reuse
        buf2204 = buf2199; del buf2199  # reuse
        buf2209 = buf2204; del buf2204  # reuse
        buf2214 = buf2209; del buf2209  # reuse
        buf2219 = buf2214; del buf2214  # reuse
        buf2227 = buf2219; del buf2219  # reuse
        buf2236 = buf2227; del buf2227  # reuse
        buf2245 = buf2236; del buf2236  # reuse
        buf2254 = buf2245; del buf2245  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_118.run(buf2254, buf2154, buf2155, buf2156, buf2157, buf2158, buf2160, buf2161, buf2162, buf2163, buf2165, buf2166, buf2167, buf2168, buf2170, buf2171, buf2172, buf2173, buf2175, buf2176, buf2177, buf2178, buf2180, buf2181, buf2182, buf2183, buf2185, buf2186, buf2187, buf2188, buf2190, buf2191, buf2192, buf2193, buf2195, buf2196, buf2197, buf2198, buf2200, buf2201, buf2202, buf2203, buf2205, buf2206, buf2207, buf2208, buf2210, buf2211, buf2212, buf2213, buf2215, buf2216, buf2217, buf2218, buf2220, buf2221, buf2223, buf2225, buf2228, buf2230, buf2232, buf2234, buf2237, buf2239, buf2241, buf2243, buf2246, buf2248, buf2250, buf2252, 466944, grid=grid(466944), stream=stream0)
        del buf2154
        del buf2155
        del buf2156
        del buf2157
        buf2261 = empty_strided((4, 1, 1, 19, 48), (912, 3648, 3648, 1, 19), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_119.run(buf2254, buf2255, buf2257, buf2259, buf2261, 3648, 128, grid=grid(3648), stream=stream0)
        buf2262 = empty_strided((4, 1, 1, 19), (19, 76, 76, 1), device='cuda', dtype=torch.float16)
        buf2263 = reinterpret_tensor(buf2262, (4, 19), (19, 1)); del buf2262  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_120.run(buf2263, buf2261, 76, 48, grid=grid(76), stream=stream0)
        del buf2261
        buf2264 = empty_strided((3, 2048, 4, 19), (155648, 76, 19, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_121.run(buf2254, buf2255, buf2257, buf2259, buf2264, 466944, grid=grid(466944), stream=stream0)
        buf2265 = empty_strided((76, 76), (76, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2264, (76, 6144), (1, 76), 0), view_627, out=buf2265)
        del view_627
        buf2266 = reinterpret_tensor(buf2254, (6144, 76), (76, 1)); del buf2254  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2264, (6144, 76), (76, 1), 0), permute_710, out=buf2266)
        del buf2264
        del permute_710
        buf2267 = reinterpret_tensor(buf2266, (3, 2048, 76), (155648, 76, 1)); del buf2266  # reuse
        # Source Nodes: [l__mod___dynamic_dense_17_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_122.run(buf2267, mm_160, 466944, grid=grid(466944), stream=stream0)
        del mm_160
        buf2268 = empty_strided((76, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2267, (76, 6144), (1, 76), 0), view_625, out=buf2268)
        del view_625
        buf2269 = reinterpret_tensor(buf2149, (6144, 2048), (2048, 1)); del buf2149  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2267, (6144, 76), (76, 1), 0), permute_714, out=buf2269)
        del buf2267
        del permute_714
        buf2271 = buf2059; del buf2059  # reuse
        # Source Nodes: [add_648], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf2271, buf2269, buf839, buf845, rsqrt_87, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2269
        del rsqrt_87
        buf2272 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2271, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf844, (6144, 5632), (5632, 1), 0), out=buf2272)
        buf2273 = reinterpret_tensor(buf844, (6144, 5632), (5632, 1)); del buf844  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2271, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_302, (2048, 5632), (5632, 1), 0), out=buf2273)
        del permute_302
        buf2274 = buf2116; del buf2116  # reuse
        buf2277 = reinterpret_tensor(buf843, (3, 2048, 5632), (11534336, 5632, 1)); del buf843  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2277, buf2273, buf842, buf2274, 34603008, grid=grid(34603008), stream=stream0)
        del buf2273
        del buf842
        buf2275 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2274, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf841, (6144, 2048), (2048, 1), 0), out=buf2275)
        buf2276 = buf845; del buf845  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2274, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_301, (5632, 2048), (2048, 1), 0), out=buf2276)
        del buf2274
        del permute_301
        buf2278 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2277, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf841, (6144, 2048), (2048, 1), 0), out=buf2278)
        buf2279 = reinterpret_tensor(buf841, (6144, 2048), (2048, 1)); del buf841  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2277, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_300, (5632, 2048), (2048, 1), 0), out=buf2279)
        del permute_300
        buf2280 = buf2150; del buf2150  # reuse
        # Source Nodes: [add_647, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf2276, buf2279, buf839, buf840, buf2280, 98304, 128, grid=grid(98304), stream=stream0)
        buf2281 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_647, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2280, buf2281, 2048, 48, grid=grid(2048), stream=stream0)
        buf2283 = buf2271; del buf2271  # reuse
        # Source Nodes: [add_647, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf2283, buf2276, buf2279, primals_210, buf839, buf840, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2276
        del buf2279
        del buf840
        del primals_210
        buf2284 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2283, (2048, 6144), (1, 2048), 0), buf832, out=buf2284)
        buf2285 = buf832; del buf832  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2283, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_299, (2048, 2048), (2048, 1), 0), out=buf2285)
        del permute_299
        buf2286 = reinterpret_tensor(buf839, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf839  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2285, buf2286, 12582912, grid=grid(12582912), stream=stream0)
        buf2287 = reinterpret_tensor(buf2285, (48, 2048, 128), (262144, 128, 1)); del buf2285  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf820, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2286, (48, 2048, 128), (262144, 128, 1), 0), out=buf2287)
        buf2288 = reinterpret_tensor(buf2130, (48, 2048, 2048), (4194304, 2048, 1)); del buf2130  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2286, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf830, (48, 128, 2048), (262144, 1, 128), 0), out=buf2288)
        buf2290 = buf765; del buf765  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward7')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2288, buf820, slice_3, buf2290, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2288
        buf2291 = reinterpret_tensor(buf830, (48, 128, 2048), (262144, 2048, 1)); del buf830  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf815, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2290, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2291)
        buf2292 = reinterpret_tensor(buf815, (48, 2048, 128), (262144, 128, 1)); del buf815  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2290, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf816, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2292)
        buf2293 = reinterpret_tensor(buf816, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf816  # reuse
        buf2294 = reinterpret_tensor(buf2286, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2286  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2291, select_3, select_1, buf2292, buf2293, buf2294, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2291
        buf2295 = reinterpret_tensor(buf2292, (6144, 2048), (2048, 1)); del buf2292  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2287, buf2295, 12582912, grid=grid(12582912), stream=stream0)
        del buf2287
        buf2296 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2295, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf828, (6144, 2048), (2048, 1), 0), out=buf2296)
        buf2297 = reinterpret_tensor(buf828, (6144, 2048), (2048, 1)); del buf828  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2295, reinterpret_tensor(permute_291, (2048, 2048), (2048, 1), 0), out=buf2297)
        del permute_291
        buf2298 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2293, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf798, (6144, 2048), (2048, 1), 0), out=buf2298)
        buf2299 = reinterpret_tensor(buf798, (6144, 2048), (2048, 1)); del buf798  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2293, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_290, (2048, 2048), (2048, 1), 0), out=buf2299)
        del permute_290
        buf2300 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2294, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf810, (6144, 2048), (2048, 1), 0), out=buf2300)
        buf2301 = reinterpret_tensor(buf810, (6144, 2048), (2048, 1)); del buf810  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2294, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_289, (2048, 2048), (2048, 1), 0), out=buf2301)
        del permute_289
        buf2302 = buf2280; del buf2280  # reuse
        # Source Nodes: [add_629, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf2297, buf826, buf827, buf2302, 98304, 128, grid=grid(98304), stream=stream0)
        buf2303 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_629, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2302, buf2303, 2048, 48, grid=grid(2048), stream=stream0)
        buf2305 = reinterpret_tensor(buf2294, (3, 2048, 2048), (4194304, 2048, 1)); del buf2294  # reuse
        buf2309 = reinterpret_tensor(buf2293, (3, 2048, 2048), (4194304, 2048, 1)); del buf2293  # reuse
        buf2313 = reinterpret_tensor(buf2295, (3, 2048, 2048), (4194304, 2048, 1)); del buf2295  # reuse
        buf2378 = buf2224; del buf2224  # reuse
        buf2380 = buf2226; del buf2226  # reuse
        buf2383 = buf2229; del buf2229  # reuse
        buf2385 = buf2231; del buf2231  # reuse
        buf2387 = buf2233; del buf2233  # reuse
        buf2389 = buf2235; del buf2235  # reuse
        buf2392 = buf2238; del buf2238  # reuse
        buf2394 = buf2240; del buf2240  # reuse
        buf2396 = buf2242; del buf2242  # reuse
        buf2398 = buf2244; del buf2244  # reuse
        buf2401 = buf2247; del buf2247  # reuse
        buf2403 = buf2249; del buf2249  # reuse
        buf2405 = buf2251; del buf2251  # reuse
        buf2407 = buf2253; del buf2253  # reuse
        buf2410 = buf2256; del buf2256  # reuse
        buf2412 = buf2258; del buf2258  # reuse
        buf2414 = buf2260; del buf2260  # reuse
        buf2382 = buf2259; del buf2259  # reuse
        buf2384 = buf2257; del buf2257  # reuse
        buf2386 = buf2255; del buf2255  # reuse
        buf2388 = buf2252; del buf2252  # reuse
        buf2391 = buf2250; del buf2250  # reuse
        buf2393 = buf2248; del buf2248  # reuse
        buf2395 = buf2246; del buf2246  # reuse
        buf2397 = buf2243; del buf2243  # reuse
        buf2400 = buf2241; del buf2241  # reuse
        buf2402 = buf2239; del buf2239  # reuse
        buf2404 = buf2237; del buf2237  # reuse
        buf2406 = buf2234; del buf2234  # reuse
        buf2409 = buf2232; del buf2232  # reuse
        buf2411 = buf2230; del buf2230  # reuse
        buf2413 = buf2228; del buf2228  # reuse
        buf2314 = buf2225; del buf2225  # reuse
        buf2335 = buf2223; del buf2223  # reuse
        buf2356 = buf2221; del buf2221  # reuse
        buf2377 = buf2220; del buf2220  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_5, add_50, add_510, add_512, add_612, add_629, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_124.run(buf2378, buf2380, buf2383, buf2385, buf2387, buf2389, buf2392, buf2394, buf2396, buf2398, buf2401, buf2403, buf2405, buf2407, buf2410, buf2412, buf2414, buf2297, primals_205, buf826, buf2301, primals_203, buf808, buf2299, primals_204, buf796, buf827, buf797, buf809, buf2283, unsqueeze_715, unsqueeze_698, unsqueeze_681, unsqueeze_664, unsqueeze_714, unsqueeze_697, unsqueeze_680, unsqueeze_663, unsqueeze_713, unsqueeze_696, unsqueeze_679, unsqueeze_662, unsqueeze_712, unsqueeze_695, unsqueeze_678, unsqueeze_661, unsqueeze_711, unsqueeze_694, unsqueeze_677, unsqueeze_660, unsqueeze_710, unsqueeze_693, unsqueeze_676, unsqueeze_659, unsqueeze_709, unsqueeze_692, unsqueeze_675, unsqueeze_658, unsqueeze_708, unsqueeze_691, unsqueeze_674, unsqueeze_657, unsqueeze_707, unsqueeze_690, unsqueeze_673, unsqueeze_656, unsqueeze_706, unsqueeze_689, unsqueeze_672, unsqueeze_655, unsqueeze_705, unsqueeze_688, unsqueeze_671, unsqueeze_654, unsqueeze_704, unsqueeze_687, unsqueeze_670, unsqueeze_653, unsqueeze_703, unsqueeze_686, unsqueeze_669, unsqueeze_652, unsqueeze_702, unsqueeze_685, unsqueeze_668, unsqueeze_651, unsqueeze_701, unsqueeze_684, unsqueeze_667, unsqueeze_650, unsqueeze_700, unsqueeze_683, unsqueeze_666, unsqueeze_649, unsqueeze_699, unsqueeze_682, unsqueeze_665, unsqueeze_648, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf729, buf724, buf735, buf2305, buf2309, buf2313, buf2382, buf2384, buf2386, buf2388, buf2391, buf2393, buf2395, buf2397, buf2400, buf2402, buf2404, buf2406, buf2409, buf2411, buf2413, buf2314, buf2335, buf2356, buf2377, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2297
        del buf826
        del buf827
        del primals_203
        del primals_204
        del primals_205
        del unsqueeze_648
        del unsqueeze_649
        del unsqueeze_650
        del unsqueeze_651
        del unsqueeze_652
        del unsqueeze_653
        del unsqueeze_654
        del unsqueeze_655
        del unsqueeze_656
        del unsqueeze_657
        del unsqueeze_658
        del unsqueeze_659
        del unsqueeze_660
        del unsqueeze_661
        del unsqueeze_662
        del unsqueeze_663
        del unsqueeze_664
        del unsqueeze_665
        del unsqueeze_666
        del unsqueeze_667
        del unsqueeze_668
        del unsqueeze_669
        del unsqueeze_670
        del unsqueeze_671
        del unsqueeze_672
        del unsqueeze_673
        del unsqueeze_674
        del unsqueeze_675
        del unsqueeze_676
        del unsqueeze_677
        del unsqueeze_678
        del unsqueeze_679
        del unsqueeze_680
        del unsqueeze_681
        del unsqueeze_682
        del unsqueeze_683
        del unsqueeze_684
        del unsqueeze_685
        del unsqueeze_686
        del unsqueeze_687
        del unsqueeze_688
        del unsqueeze_689
        del unsqueeze_690
        del unsqueeze_691
        del unsqueeze_692
        del unsqueeze_693
        del unsqueeze_694
        del unsqueeze_695
        del unsqueeze_696
        del unsqueeze_697
        del unsqueeze_698
        del unsqueeze_699
        del unsqueeze_700
        del unsqueeze_701
        del unsqueeze_702
        del unsqueeze_703
        del unsqueeze_704
        del unsqueeze_705
        del unsqueeze_706
        del unsqueeze_707
        del unsqueeze_708
        del unsqueeze_709
        del unsqueeze_710
        del unsqueeze_711
        del unsqueeze_712
        del unsqueeze_713
        del unsqueeze_714
        del unsqueeze_715
        buf2306 = buf2302; del buf2302  # reuse
        # Source Nodes: [add_612, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf2299, buf796, buf797, buf2306, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2299
        del buf797
        buf2307 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_612, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2306, buf2307, 2048, 48, grid=grid(2048), stream=stream0)
        buf2310 = buf2306; del buf2306  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf2301, buf808, buf809, buf2310, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2301
        del buf809
        buf2311 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2310, buf2311, 2048, 48, grid=grid(2048), stream=stream0)
        buf2315 = buf2218; del buf2218  # reuse
        buf2336 = buf2217; del buf2217  # reuse
        buf2357 = buf2216; del buf2216  # reuse
        buf2379 = buf2215; del buf2215  # reuse
        buf2316 = buf2213; del buf2213  # reuse
        buf2337 = buf2212; del buf2212  # reuse
        buf2358 = buf2211; del buf2211  # reuse
        buf2317 = buf2210; del buf2210  # reuse
        buf2338 = buf2208; del buf2208  # reuse
        buf2360 = buf2207; del buf2207  # reuse
        buf2318 = buf2206; del buf2206  # reuse
        buf2340 = buf2205; del buf2205  # reuse
        buf2361 = buf2203; del buf2203  # reuse
        buf2320 = buf2202; del buf2202  # reuse
        buf2341 = buf2201; del buf2201  # reuse
        buf2362 = buf2200; del buf2200  # reuse
        buf2321 = buf2198; del buf2198  # reuse
        buf2342 = buf2197; del buf2197  # reuse
        buf2363 = buf2196; del buf2196  # reuse
        buf2322 = buf2195; del buf2195  # reuse
        buf2343 = buf2193; del buf2193  # reuse
        buf2365 = buf2192; del buf2192  # reuse
        buf2323 = buf2191; del buf2191  # reuse
        buf2345 = buf2190; del buf2190  # reuse
        buf2366 = buf2188; del buf2188  # reuse
        buf2325 = buf2187; del buf2187  # reuse
        buf2346 = buf2186; del buf2186  # reuse
        buf2367 = buf2185; del buf2185  # reuse
        buf2326 = buf2183; del buf2183  # reuse
        buf2347 = buf2182; del buf2182  # reuse
        buf2368 = buf2181; del buf2181  # reuse
        buf2327 = buf2180; del buf2180  # reuse
        buf2348 = buf2178; del buf2178  # reuse
        buf2370 = buf2177; del buf2177  # reuse
        buf2328 = buf2176; del buf2176  # reuse
        buf2350 = buf2175; del buf2175  # reuse
        buf2371 = buf2173; del buf2173  # reuse
        buf2330 = buf2172; del buf2172  # reuse
        buf2351 = buf2171; del buf2171  # reuse
        buf2372 = buf2170; del buf2170  # reuse
        buf2331 = buf2168; del buf2168  # reuse
        buf2352 = buf2167; del buf2167  # reuse
        buf2373 = buf2166; del buf2166  # reuse
        buf2332 = buf2165; del buf2165  # reuse
        buf2353 = buf2163; del buf2163  # reuse
        buf2375 = buf2162; del buf2162  # reuse
        buf2333 = buf2161; del buf2161  # reuse
        buf2376 = buf2160; del buf2160  # reuse
        buf2355 = buf2158; del buf2158  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_72, add_96, add_98, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
        triton_red_fused_add_mul_sum_125.run(buf2283, buf572, buf578, buf2305, buf2309, buf2313, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2315, buf2336, buf2357, buf2379, buf2316, buf2337, buf2358, buf2317, buf2338, buf2360, buf2318, buf2340, buf2361, buf2320, buf2341, buf2362, buf2321, buf2342, buf2363, buf2322, buf2343, buf2365, buf2323, buf2345, buf2366, buf2325, buf2346, buf2367, buf2326, buf2347, buf2368, buf2327, buf2348, buf2370, buf2328, buf2350, buf2371, buf2330, buf2351, buf2372, buf2331, buf2352, buf2373, buf2332, buf2353, buf2375, buf2333, buf2376, buf2355, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2283
        del buf2305
        del buf2309
        buf2319 = empty_strided((4, 3, 2048, 18), (110592, 36864, 18, 1), device='cuda', dtype=torch.float16)
        buf2324 = buf2319; del buf2319  # reuse
        buf2329 = buf2324; del buf2324  # reuse
        buf2334 = buf2329; del buf2329  # reuse
        buf2339 = buf2334; del buf2334  # reuse
        buf2344 = buf2339; del buf2339  # reuse
        buf2349 = buf2344; del buf2344  # reuse
        buf2354 = buf2349; del buf2349  # reuse
        buf2359 = buf2354; del buf2354  # reuse
        buf2364 = buf2359; del buf2359  # reuse
        buf2369 = buf2364; del buf2364  # reuse
        buf2374 = buf2369; del buf2369  # reuse
        buf2381 = buf2374; del buf2374  # reuse
        buf2390 = buf2381; del buf2381  # reuse
        buf2399 = buf2390; del buf2390  # reuse
        buf2408 = buf2399; del buf2399  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_126.run(buf2408, buf2314, buf2315, buf2316, buf2317, buf2318, buf2320, buf2321, buf2322, buf2323, buf2325, buf2326, buf2327, buf2328, buf2330, buf2331, buf2332, buf2333, buf2335, buf2336, buf2337, buf2338, buf2340, buf2341, buf2342, buf2343, buf2345, buf2346, buf2347, buf2348, buf2350, buf2351, buf2352, buf2353, buf2355, buf2356, buf2357, buf2358, buf2360, buf2361, buf2362, buf2363, buf2365, buf2366, buf2367, buf2368, buf2370, buf2371, buf2372, buf2373, buf2375, buf2376, buf2377, buf2379, buf2382, buf2384, buf2386, buf2388, buf2391, buf2393, buf2395, buf2397, buf2400, buf2402, buf2404, buf2406, 442368, grid=grid(442368), stream=stream0)
        del buf2314
        del buf2315
        del buf2316
        del buf2317
        buf2415 = empty_strided((4, 1, 1, 18, 48), (864, 3456, 3456, 1, 18), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_127.run(buf2408, buf2409, buf2411, buf2413, buf2415, 3456, 128, grid=grid(3456), stream=stream0)
        buf2416 = empty_strided((4, 1, 1, 18), (18, 72, 72, 1), device='cuda', dtype=torch.float16)
        buf2417 = reinterpret_tensor(buf2416, (4, 18), (18, 1)); del buf2416  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_128.run(buf2417, buf2415, 72, 48, grid=grid(72), stream=stream0)
        del buf2415
        buf2418 = empty_strided((3, 2048, 4, 18), (147456, 72, 18, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_129.run(buf2408, buf2409, buf2411, buf2413, buf2418, 442368, grid=grid(442368), stream=stream0)
        buf2419 = empty_strided((72, 72), (72, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2418, (72, 6144), (1, 72), 0), view_592, out=buf2419)
        del view_592
        buf2420 = reinterpret_tensor(buf2408, (6144, 72), (72, 1)); del buf2408  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2418, (6144, 72), (72, 1), 0), permute_759, out=buf2420)
        del buf2418
        del permute_759
        buf2421 = reinterpret_tensor(buf2420, (3, 2048, 72), (147456, 72, 1)); del buf2420  # reuse
        # Source Nodes: [l__mod___dynamic_dense_16_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_130.run(buf2421, mm_151, 442368, grid=grid(442368), stream=stream0)
        del mm_151
        buf2422 = empty_strided((72, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2421, (72, 6144), (1, 72), 0), view_590, out=buf2422)
        del view_590
        buf2423 = reinterpret_tensor(buf2313, (6144, 2048), (2048, 1)); del buf2313  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2421, (6144, 72), (72, 1), 0), permute_763, out=buf2423)
        del buf2421
        del permute_763
        buf2425 = buf2222; del buf2222  # reuse
        # Source Nodes: [add_578], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf2425, buf2423, buf678, buf684, rsqrt_82, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2423
        del rsqrt_82
        buf2426 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2425, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf683, (6144, 5632), (5632, 1), 0), out=buf2426)
        buf2427 = reinterpret_tensor(buf683, (6144, 5632), (5632, 1)); del buf683  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2425, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_285, (2048, 5632), (5632, 1), 0), out=buf2427)
        del permute_285
        buf2428 = buf2277; del buf2277  # reuse
        buf2431 = reinterpret_tensor(buf682, (3, 2048, 5632), (11534336, 5632, 1)); del buf682  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2431, buf2427, buf681, buf2428, 34603008, grid=grid(34603008), stream=stream0)
        del buf2427
        del buf681
        buf2429 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2428, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf680, (6144, 2048), (2048, 1), 0), out=buf2429)
        buf2430 = buf684; del buf684  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2428, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_284, (5632, 2048), (2048, 1), 0), out=buf2430)
        del buf2428
        del permute_284
        buf2432 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2431, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf680, (6144, 2048), (2048, 1), 0), out=buf2432)
        buf2433 = reinterpret_tensor(buf680, (6144, 2048), (2048, 1)); del buf680  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2431, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_283, (5632, 2048), (2048, 1), 0), out=buf2433)
        del permute_283
        buf2434 = buf2310; del buf2310  # reuse
        # Source Nodes: [add_577, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf2430, buf2433, buf678, buf679, buf2434, 98304, 128, grid=grid(98304), stream=stream0)
        buf2435 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_577, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2434, buf2435, 2048, 48, grid=grid(2048), stream=stream0)
        buf2437 = buf2425; del buf2425  # reuse
        # Source Nodes: [add_577, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf2437, buf2430, buf2433, primals_198, buf678, buf679, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2430
        del buf2433
        del primals_198
        buf2438 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2437, (2048, 6144), (1, 2048), 0), buf671, out=buf2438)
        buf2439 = buf671; del buf671  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2437, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_282, (2048, 2048), (2048, 1), 0), out=buf2439)
        del permute_282
        buf2440 = reinterpret_tensor(buf678, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf678  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2439, buf2440, 12582912, grid=grid(12582912), stream=stream0)
        buf2441 = reinterpret_tensor(buf2439, (48, 2048, 128), (262144, 128, 1)); del buf2439  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf659, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2440, (48, 2048, 128), (262144, 128, 1), 0), out=buf2441)
        buf2442 = reinterpret_tensor(buf2290, (48, 2048, 2048), (4194304, 2048, 1)); del buf2290  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2440, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf669, (48, 128, 2048), (262144, 1, 128), 0), out=buf2442)
        buf2444 = buf820; del buf820  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward8')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2442, buf659, slice_3, buf2444, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2442
        buf2445 = reinterpret_tensor(buf669, (48, 128, 2048), (262144, 2048, 1)); del buf669  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf654, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2444, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2445)
        buf2446 = reinterpret_tensor(buf654, (48, 2048, 128), (262144, 128, 1)); del buf654  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2444, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf655, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2446)
        buf2447 = reinterpret_tensor(buf655, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf655  # reuse
        buf2448 = reinterpret_tensor(buf2440, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2440  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2445, select_3, select_1, buf2446, buf2447, buf2448, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2445
        buf2449 = reinterpret_tensor(buf2446, (6144, 2048), (2048, 1)); del buf2446  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2441, buf2449, 12582912, grid=grid(12582912), stream=stream0)
        del buf2441
        buf2450 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2449, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf667, (6144, 2048), (2048, 1), 0), out=buf2450)
        buf2451 = reinterpret_tensor(buf667, (6144, 2048), (2048, 1)); del buf667  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2449, reinterpret_tensor(permute_274, (2048, 2048), (2048, 1), 0), out=buf2451)
        del buf2449
        del permute_274
        buf2452 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2447, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf637, (6144, 2048), (2048, 1), 0), out=buf2452)
        buf2453 = reinterpret_tensor(buf637, (6144, 2048), (2048, 1)); del buf637  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2447, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_273, (2048, 2048), (2048, 1), 0), out=buf2453)
        del buf2447
        del permute_273
        buf2454 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2448, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf649, (6144, 2048), (2048, 1), 0), out=buf2454)
        buf2455 = reinterpret_tensor(buf649, (6144, 2048), (2048, 1)); del buf649  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2448, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_272, (2048, 2048), (2048, 1), 0), out=buf2455)
        del buf2448
        del permute_272
        buf2456 = buf2434; del buf2434  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf2451, buf666, buf2456, 98304, 128, grid=grid(98304), stream=stream0)
        del buf666
        buf2457 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2456, buf2457, 2048, 48, grid=grid(2048), stream=stream0)
        buf2466 = buf679; del buf679  # reuse
        buf2468 = buf2413; del buf2413  # reuse
        buf2459 = buf808; del buf808  # reuse
        buf2463 = buf796; del buf796  # reuse
        buf2508 = buf2380; del buf2380  # reuse
        buf2511 = buf2383; del buf2383  # reuse
        buf2513 = buf2385; del buf2385  # reuse
        buf2515 = buf2387; del buf2387  # reuse
        buf2517 = buf2389; del buf2389  # reuse
        buf2520 = buf2392; del buf2392  # reuse
        buf2522 = buf2394; del buf2394  # reuse
        buf2524 = buf2396; del buf2396  # reuse
        buf2526 = buf2398; del buf2398  # reuse
        buf2529 = buf2401; del buf2401  # reuse
        buf2531 = buf2403; del buf2403  # reuse
        buf2533 = buf2405; del buf2405  # reuse
        buf2535 = buf2407; del buf2407  # reuse
        buf2538 = buf2410; del buf2410  # reuse
        buf2540 = buf2412; del buf2412  # reuse
        buf2542 = buf2414; del buf2414  # reuse
        buf2469 = buf2411; del buf2411  # reuse
        buf2471 = buf2409; del buf2409  # reuse
        buf2472 = buf2406; del buf2406  # reuse
        buf2476 = buf2404; del buf2404  # reuse
        buf2475 = buf2402; del buf2402  # reuse
        buf2479 = buf2400; del buf2400  # reuse
        buf2480 = buf2397; del buf2397  # reuse
        buf2482 = buf2395; del buf2395  # reuse
        buf2470 = buf2393; del buf2393  # reuse
        buf2474 = buf2391; del buf2391  # reuse
        buf2477 = buf2388; del buf2388  # reuse
        buf2481 = buf2386; del buf2386  # reuse
        buf2485 = buf2384; del buf2384  # reuse
        buf2484 = buf2382; del buf2382  # reuse
        buf2487 = buf2379; del buf2379  # reuse
        buf2489 = buf2377; del buf2377  # reuse
        buf2490 = buf2376; del buf2376  # reuse
        buf2491 = buf2375; del buf2375  # reuse
        buf2492 = buf2373; del buf2373  # reuse
        buf2494 = buf2372; del buf2372  # reuse
        buf2495 = buf2371; del buf2371  # reuse
        buf2496 = buf2370; del buf2370  # reuse
        buf2497 = buf2368; del buf2368  # reuse
        buf2499 = buf2367; del buf2367  # reuse
        buf2500 = buf2366; del buf2366  # reuse
        buf2501 = buf2365; del buf2365  # reuse
        buf2502 = buf2363; del buf2363  # reuse
        buf2504 = buf2362; del buf2362  # reuse
        buf2505 = buf2361; del buf2361  # reuse
        buf2506 = buf2360; del buf2360  # reuse
        buf2486 = buf2358; del buf2358  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_527, add_543, add_544, add_559, add_560, add_72, add_96, add_98, float_1, float_2, float_3, mean_1, mean_2, mul_3, mul_4, mul_511, mul_527, mul_543, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_131.run(buf2508, buf2511, buf2513, buf2515, buf2517, buf2520, buf2522, buf2524, buf2526, buf2529, buf2531, buf2533, buf2535, buf2538, buf2540, buf2542, buf2451, primals_193, buf664, unsqueeze_625, buf572, buf578, buf2453, primals_192, buf634, unsqueeze_609, buf2455, primals_191, buf646, unsqueeze_593, buf2437, buf665, buf635, unsqueeze_641, unsqueeze_640, unsqueeze_624, unsqueeze_608, unsqueeze_639, unsqueeze_623, unsqueeze_607, unsqueeze_638, unsqueeze_622, unsqueeze_606, unsqueeze_637, unsqueeze_621, unsqueeze_605, unsqueeze_636, unsqueeze_620, unsqueeze_604, unsqueeze_635, unsqueeze_619, unsqueeze_603, unsqueeze_634, unsqueeze_618, unsqueeze_602, unsqueeze_633, unsqueeze_617, unsqueeze_601, unsqueeze_632, unsqueeze_616, unsqueeze_600, unsqueeze_631, unsqueeze_615, unsqueeze_599, unsqueeze_630, unsqueeze_614, unsqueeze_598, unsqueeze_629, unsqueeze_613, unsqueeze_597, unsqueeze_628, unsqueeze_612, unsqueeze_596, unsqueeze_627, unsqueeze_611, unsqueeze_595, unsqueeze_626, unsqueeze_610, unsqueeze_594, buf623, buf629, buf521, buf527, buf384, buf390, buf337, buf343, buf294, buf300, buf251, buf257, buf138, buf144, buf68, buf74, buf474, buf470, buf480, buf427, buf424, buf433, buf212, buf210, buf218, buf173, buf172, buf179, embedding, buf33, buf39, unsqueeze_11, buf99, buf105, buf2466, buf2468, buf2459, buf2463, buf2469, buf2471, buf2472, buf2476, buf2475, buf2479, buf2480, buf2482, buf2470, buf2474, buf2477, buf2481, buf2485, buf2484, buf2487, buf2489, buf2490, buf2491, buf2492, buf2494, buf2495, buf2496, buf2497, buf2499, buf2500, buf2501, buf2502, buf2504, buf2505, buf2506, buf2486, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2437
        del buf2451
        del buf634
        del buf664
        del buf665
        del primals_193
        del unsqueeze_594
        del unsqueeze_595
        del unsqueeze_596
        del unsqueeze_597
        del unsqueeze_598
        del unsqueeze_599
        del unsqueeze_600
        del unsqueeze_601
        del unsqueeze_602
        del unsqueeze_603
        del unsqueeze_604
        del unsqueeze_605
        del unsqueeze_606
        del unsqueeze_607
        del unsqueeze_608
        del unsqueeze_609
        del unsqueeze_610
        del unsqueeze_611
        del unsqueeze_612
        del unsqueeze_613
        del unsqueeze_614
        del unsqueeze_615
        del unsqueeze_616
        del unsqueeze_617
        del unsqueeze_618
        del unsqueeze_619
        del unsqueeze_620
        del unsqueeze_621
        del unsqueeze_622
        del unsqueeze_623
        del unsqueeze_624
        del unsqueeze_625
        del unsqueeze_626
        del unsqueeze_627
        del unsqueeze_628
        del unsqueeze_629
        del unsqueeze_630
        del unsqueeze_631
        del unsqueeze_632
        del unsqueeze_633
        del unsqueeze_634
        del unsqueeze_635
        del unsqueeze_636
        del unsqueeze_637
        del unsqueeze_638
        del unsqueeze_639
        del unsqueeze_640
        del unsqueeze_641
        buf2460 = buf2456; del buf2456  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf2453, buf636, buf2460, 98304, 128, grid=grid(98304), stream=stream0)
        del buf636
        buf2461 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2460, buf2461, 2048, 48, grid=grid(2048), stream=stream0)
        buf2464 = buf2460; del buf2460  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf2455, buf648, buf2464, 98304, 128, grid=grid(98304), stream=stream0)
        del buf648
        buf2465 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2464, buf2465, 2048, 48, grid=grid(2048), stream=stream0)
        buf2467 = buf2459; del buf2459  # reuse
        buf2507 = buf2357; del buf2357  # reuse
        buf2510 = buf2356; del buf2356  # reuse
        buf2512 = buf2355; del buf2355  # reuse
        buf2514 = buf2353; del buf2353  # reuse
        buf2516 = buf2352; del buf2352  # reuse
        buf2519 = buf2351; del buf2351  # reuse
        buf2521 = buf2350; del buf2350  # reuse
        buf2523 = buf2348; del buf2348  # reuse
        buf2525 = buf2347; del buf2347  # reuse
        buf2528 = buf2346; del buf2346  # reuse
        buf2530 = buf2345; del buf2345  # reuse
        buf2532 = buf2343; del buf2343  # reuse
        buf2534 = buf2342; del buf2342  # reuse
        buf2537 = buf2341; del buf2341  # reuse
        buf2539 = buf2340; del buf2340  # reuse
        buf2541 = buf2338; del buf2338  # reuse
        buf2543 = buf2337; del buf2337  # reuse
        buf2545 = buf2336; del buf2336  # reuse
        buf2546 = buf2335; del buf2335  # reuse
        buf2547 = buf2333; del buf2333  # reuse
        buf2548 = buf2332; del buf2332  # reuse
        buf2550 = buf2331; del buf2331  # reuse
        buf2551 = buf2330; del buf2330  # reuse
        buf2552 = buf2328; del buf2328  # reuse
        buf2553 = buf2327; del buf2327  # reuse
        buf2555 = buf2326; del buf2326  # reuse
        buf2556 = buf2325; del buf2325  # reuse
        buf2557 = buf2323; del buf2323  # reuse
        buf2558 = buf2322; del buf2322  # reuse
        buf2560 = buf2321; del buf2321  # reuse
        buf2561 = buf2320; del buf2320  # reuse
        buf2562 = buf2318; del buf2318  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_5, add_50, add_527, add_543, add_544, add_72, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, mul_511, mul_527, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_132.run(buf2466, buf647, buf646, unsqueeze_593, buf572, buf578, buf2453, primals_192, buf635, buf2463, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2455, primals_191, buf2467, buf2507, buf2510, buf2512, buf2514, buf2516, buf2519, buf2521, buf2523, buf2525, buf2528, buf2530, buf2532, buf2534, buf2537, buf2539, buf2541, buf2543, buf2545, buf2546, buf2547, buf2548, buf2550, buf2551, buf2552, buf2553, buf2555, buf2556, buf2557, buf2558, buf2560, buf2561, buf2562, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2453
        del buf2463
        del buf2466
        del buf635
        del primals_192
        buf2473 = empty_strided((4, 3, 2048, 17), (104448, 34816, 17, 1), device='cuda', dtype=torch.float16)
        buf2478 = buf2473; del buf2473  # reuse
        buf2483 = buf2478; del buf2478  # reuse
        buf2488 = buf2483; del buf2483  # reuse
        buf2493 = buf2488; del buf2488  # reuse
        buf2498 = buf2493; del buf2493  # reuse
        buf2503 = buf2498; del buf2498  # reuse
        buf2509 = buf2503; del buf2503  # reuse
        buf2518 = buf2509; del buf2509  # reuse
        buf2527 = buf2518; del buf2518  # reuse
        buf2536 = buf2527; del buf2527  # reuse
        buf2544 = buf2536; del buf2536  # reuse
        buf2549 = buf2544; del buf2544  # reuse
        buf2554 = buf2549; del buf2549  # reuse
        buf2559 = buf2554; del buf2554  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_133.run(buf2559, buf2468, buf2469, buf2470, buf2471, buf2472, buf2474, buf2475, buf2476, buf2477, buf2479, buf2480, buf2481, buf2482, buf2484, buf2485, buf2486, buf2487, buf2489, buf2490, buf2491, buf2492, buf2494, buf2495, buf2496, buf2497, buf2499, buf2500, buf2501, buf2502, buf2504, buf2505, buf2506, buf2507, buf2510, buf2512, buf2514, buf2516, buf2519, buf2521, buf2523, buf2525, buf2528, buf2530, buf2532, buf2534, buf2537, buf2539, buf2541, buf2543, buf2545, buf2546, buf2547, buf2548, buf2550, buf2551, buf2552, buf2553, buf2555, buf2556, buf2557, buf2558, 417792, grid=grid(417792), stream=stream0)
        del buf2468
        del buf2469
        del buf2470
        del buf2471
        buf2563 = empty_strided((4, 1, 1, 17, 48), (816, 3264, 3264, 1, 17), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_134.run(buf2559, buf2560, buf2561, buf2562, buf2563, 3264, 128, grid=grid(3264), stream=stream0)
        buf2564 = empty_strided((4, 1, 1, 17), (17, 68, 68, 1), device='cuda', dtype=torch.float16)
        buf2565 = reinterpret_tensor(buf2564, (4, 17), (17, 1)); del buf2564  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_135.run(buf2565, buf2563, 68, 48, grid=grid(68), stream=stream0)
        del buf2563
        buf2566 = empty_strided((3, 2048, 4, 17), (139264, 68, 17, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_136.run(buf2559, buf2560, buf2561, buf2562, buf2566, 417792, grid=grid(417792), stream=stream0)
        buf2567 = empty_strided((68, 68), (68, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2566, (68, 6144), (1, 68), 0), view_557, out=buf2567)
        del view_557
        buf2568 = reinterpret_tensor(buf2559, (6144, 68), (68, 1)); del buf2559  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2566, (6144, 68), (68, 1), 0), permute_808, out=buf2568)
        del buf2566
        del permute_808
        buf2569 = reinterpret_tensor(buf2568, (3, 2048, 68), (139264, 68, 1)); del buf2568  # reuse
        # Source Nodes: [l__mod___dynamic_dense_15_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_137.run(buf2569, mm_142, 417792, grid=grid(417792), stream=stream0)
        del mm_142
        buf2570 = empty_strided((68, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2569, (68, 6144), (1, 68), 0), view_555, out=buf2570)
        del view_555
        buf2571 = reinterpret_tensor(buf646, (6144, 2048), (2048, 1)); del buf646  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2569, (6144, 68), (68, 1), 0), permute_812, out=buf2571)
        del buf2569
        del permute_812
        buf2573 = buf2378; del buf2378  # reuse
        # Source Nodes: [add_510, add_512], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_86.run(buf2573, buf2571, buf729, buf724, buf735, rsqrt_77, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2571
        del rsqrt_77
        buf2574 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2573, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf734, (6144, 5632), (5632, 1), 0), out=buf2574)
        buf2575 = reinterpret_tensor(buf734, (6144, 5632), (5632, 1)); del buf734  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2573, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_268, (2048, 5632), (5632, 1), 0), out=buf2575)
        del permute_268
        buf2576 = buf2431; del buf2431  # reuse
        buf2579 = reinterpret_tensor(buf733, (3, 2048, 5632), (11534336, 5632, 1)); del buf733  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2579, buf2575, buf732, buf2576, 34603008, grid=grid(34603008), stream=stream0)
        del buf2575
        del buf732
        buf2577 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2576, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf731, (6144, 2048), (2048, 1), 0), out=buf2577)
        buf2578 = buf735; del buf735  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2576, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_267, (5632, 2048), (2048, 1), 0), out=buf2578)
        del buf2576
        del permute_267
        buf2580 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2579, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf731, (6144, 2048), (2048, 1), 0), out=buf2580)
        buf2581 = reinterpret_tensor(buf731, (6144, 2048), (2048, 1)); del buf731  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2579, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_266, (5632, 2048), (2048, 1), 0), out=buf2581)
        del permute_266
        buf2582 = buf2464; del buf2464  # reuse
        # Source Nodes: [add_510, add_511, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf2578, buf2581, buf729, buf724, buf730, buf2582, 98304, 128, grid=grid(98304), stream=stream0)
        buf2583 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_510, add_511, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2582, buf2583, 2048, 48, grid=grid(2048), stream=stream0)
        buf2586 = buf2573; del buf2573  # reuse
        # Source Nodes: [add_510, add_511, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf2586, buf2578, buf2581, primals_186, buf729, buf724, buf730, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2578
        del buf2581
        del buf724
        del buf730
        del primals_186
        buf2587 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2586, (2048, 6144), (1, 2048), 0), buf723, out=buf2587)
        buf2588 = buf723; del buf723  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2586, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_265, (2048, 2048), (2048, 1), 0), out=buf2588)
        del permute_265
        buf2589 = reinterpret_tensor(buf729, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf729  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2588, buf2589, 12582912, grid=grid(12582912), stream=stream0)
        buf2590 = reinterpret_tensor(buf2588, (48, 2048, 128), (262144, 128, 1)); del buf2588  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf712, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2589, (48, 2048, 128), (262144, 128, 1), 0), out=buf2590)
        buf2591 = reinterpret_tensor(buf2444, (48, 2048, 2048), (4194304, 2048, 1)); del buf2444  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2589, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf721, (48, 128, 2048), (262144, 1, 128), 0), out=buf2591)
        buf2593 = buf659; del buf659  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward9')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2591, buf712, slice_3, buf2593, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2591
        buf2594 = reinterpret_tensor(buf721, (48, 128, 2048), (262144, 2048, 1)); del buf721  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf707, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2593, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2594)
        buf2595 = reinterpret_tensor(buf707, (48, 2048, 128), (262144, 128, 1)); del buf707  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2593, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf708, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2595)
        buf2596 = reinterpret_tensor(buf708, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf708  # reuse
        buf2597 = reinterpret_tensor(buf2589, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2589  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2594, select_3, select_1, buf2595, buf2596, buf2597, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2594
        buf2598 = reinterpret_tensor(buf2595, (6144, 2048), (2048, 1)); del buf2595  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2590, buf2598, 12582912, grid=grid(12582912), stream=stream0)
        del buf2590
        buf2599 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2598, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf719, (6144, 2048), (2048, 1), 0), out=buf2599)
        buf2600 = reinterpret_tensor(buf719, (6144, 2048), (2048, 1)); del buf719  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2598, reinterpret_tensor(permute_257, (2048, 2048), (2048, 1), 0), out=buf2600)
        del buf2598
        del permute_257
        buf2601 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2596, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf691, (6144, 2048), (2048, 1), 0), out=buf2601)
        buf2602 = reinterpret_tensor(buf691, (6144, 2048), (2048, 1)); del buf691  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2596, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_256, (2048, 2048), (2048, 1), 0), out=buf2602)
        del buf2596
        del permute_256
        buf2603 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2597, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf702, (6144, 2048), (2048, 1), 0), out=buf2603)
        buf2604 = reinterpret_tensor(buf702, (6144, 2048), (2048, 1)); del buf702  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2597, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_255, (2048, 2048), (2048, 1), 0), out=buf2604)
        del permute_255
        buf2605 = buf2582; del buf2582  # reuse
        # Source Nodes: [add_495, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf2600, buf717, buf718, buf2605, 98304, 128, grid=grid(98304), stream=stream0)
        buf2606 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_495, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2605, buf2606, 2048, 48, grid=grid(2048), stream=stream0)
        buf2608 = reinterpret_tensor(buf2597, (3, 2048, 2048), (4194304, 2048, 1)); del buf2597  # reuse
        buf2636 = buf2511; del buf2511  # reuse
        buf2638 = buf2513; del buf2513  # reuse
        buf2641 = buf2515; del buf2515  # reuse
        buf2643 = buf2517; del buf2517  # reuse
        buf2645 = buf2520; del buf2520  # reuse
        buf2647 = buf2522; del buf2522  # reuse
        buf2650 = buf2524; del buf2524  # reuse
        buf2652 = buf2526; del buf2526  # reuse
        buf2654 = buf2529; del buf2529  # reuse
        buf2656 = buf2531; del buf2531  # reuse
        buf2659 = buf2533; del buf2533  # reuse
        buf2661 = buf2535; del buf2535  # reuse
        buf2663 = buf2538; del buf2538  # reuse
        buf2665 = buf2540; del buf2540  # reuse
        buf2668 = buf2542; del buf2542  # reuse
        buf2617 = buf2562; del buf2562  # reuse
        buf2635 = buf2561; del buf2561  # reuse
        buf2618 = buf2560; del buf2560  # reuse
        buf2637 = buf2558; del buf2558  # reuse
        buf2619 = buf2557; del buf2557  # reuse
        buf2640 = buf2556; del buf2556  # reuse
        buf2620 = buf2555; del buf2555  # reuse
        buf2642 = buf2553; del buf2553  # reuse
        buf2621 = buf2552; del buf2552  # reuse
        buf2644 = buf2551; del buf2551  # reuse
        buf2623 = buf2550; del buf2550  # reuse
        buf2646 = buf2548; del buf2548  # reuse
        buf2624 = buf2547; del buf2547  # reuse
        buf2649 = buf2546; del buf2546  # reuse
        buf2625 = buf2545; del buf2545  # reuse
        buf2651 = buf2543; del buf2543  # reuse
        buf2626 = buf2541; del buf2541  # reuse
        buf2628 = buf2539; del buf2539  # reuse
        buf2629 = buf2537; del buf2537  # reuse
        buf2630 = buf2534; del buf2534  # reuse
        buf2631 = buf2532; del buf2532  # reuse
        buf2633 = buf2530; del buf2530  # reuse
        buf2634 = buf2528; del buf2528  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_450, add_495, add_5, add_50, add_527, add_72, add_96, add_98, float_1, float_3, mean, mean_2, mul, mul_4, mul_511, mul_6, rsqrt, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_138.run(buf2636, buf2638, buf2641, buf2643, buf2645, buf2647, buf2650, buf2652, buf2654, buf2656, buf2659, buf2661, buf2663, buf2665, buf2668, buf2600, primals_181, buf717, buf718, buf2455, primals_191, buf647, buf2467, unsqueeze_592, buf2586, unsqueeze_571, unsqueeze_556, unsqueeze_591, unsqueeze_570, unsqueeze_555, unsqueeze_590, unsqueeze_569, unsqueeze_554, unsqueeze_589, unsqueeze_568, unsqueeze_553, unsqueeze_588, unsqueeze_567, unsqueeze_552, unsqueeze_587, unsqueeze_566, unsqueeze_551, unsqueeze_586, unsqueeze_565, unsqueeze_550, unsqueeze_585, unsqueeze_564, unsqueeze_549, unsqueeze_584, unsqueeze_563, unsqueeze_548, unsqueeze_583, unsqueeze_562, unsqueeze_547, unsqueeze_582, unsqueeze_561, unsqueeze_546, unsqueeze_581, unsqueeze_560, unsqueeze_545, unsqueeze_580, unsqueeze_559, unsqueeze_544, unsqueeze_579, unsqueeze_558, unsqueeze_543, unsqueeze_578, unsqueeze_557, unsqueeze_542, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2608, buf2617, buf2635, buf2618, buf2637, buf2619, buf2640, buf2620, buf2642, buf2621, buf2644, buf2623, buf2646, buf2624, buf2649, buf2625, buf2651, buf2626, buf2628, buf2629, buf2630, buf2631, buf2633, buf2634, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2586
        del buf718
        del primals_181
        del unsqueeze_542
        del unsqueeze_543
        del unsqueeze_544
        del unsqueeze_545
        del unsqueeze_546
        del unsqueeze_547
        del unsqueeze_548
        del unsqueeze_549
        del unsqueeze_550
        del unsqueeze_551
        del unsqueeze_552
        del unsqueeze_553
        del unsqueeze_554
        del unsqueeze_555
        del unsqueeze_556
        del unsqueeze_557
        del unsqueeze_558
        del unsqueeze_559
        del unsqueeze_560
        del unsqueeze_561
        del unsqueeze_562
        del unsqueeze_563
        del unsqueeze_564
        del unsqueeze_565
        del unsqueeze_566
        del unsqueeze_567
        del unsqueeze_568
        del unsqueeze_569
        del unsqueeze_570
        del unsqueeze_571
        del unsqueeze_578
        del unsqueeze_579
        del unsqueeze_580
        del unsqueeze_581
        del unsqueeze_582
        del unsqueeze_583
        del unsqueeze_584
        del unsqueeze_585
        del unsqueeze_586
        del unsqueeze_587
        del unsqueeze_588
        del unsqueeze_589
        del unsqueeze_590
        del unsqueeze_591
        del unsqueeze_592
        buf2609 = buf2605; del buf2605  # reuse
        # Source Nodes: [add_480, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf2602, buf689, buf690, buf2609, 98304, 128, grid=grid(98304), stream=stream0)
        buf2610 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_480, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2609, buf2610, 2048, 48, grid=grid(2048), stream=stream0)
        buf2616 = buf717; del buf717  # reuse
        buf2612 = reinterpret_tensor(buf2600, (3, 2048, 2048), (4194304, 2048, 1)); del buf2600  # reuse
        buf2669 = buf2525; del buf2525  # reuse
        buf2688 = buf2523; del buf2523  # reuse
        buf2670 = buf2521; del buf2521  # reuse
        buf2689 = buf2519; del buf2519  # reuse
        buf2671 = buf2516; del buf2516  # reuse
        buf2690 = buf2514; del buf2514  # reuse
        buf2673 = buf2512; del buf2512  # reuse
        buf2691 = buf2510; del buf2510  # reuse
        buf2674 = buf2507; del buf2507  # reuse
        buf2693 = buf2506; del buf2506  # reuse
        buf2675 = buf2505; del buf2505  # reuse
        buf2694 = buf2504; del buf2504  # reuse
        buf2676 = buf2502; del buf2502  # reuse
        buf2695 = buf2501; del buf2501  # reuse
        buf2678 = buf2500; del buf2500  # reuse
        buf2696 = buf2499; del buf2499  # reuse
        buf2653 = buf2497; del buf2497  # reuse
        buf2679 = buf2496; del buf2496  # reuse
        buf2698 = buf2495; del buf2495  # reuse
        buf2655 = buf2494; del buf2494  # reuse
        buf2680 = buf2492; del buf2492  # reuse
        buf2699 = buf2491; del buf2491  # reuse
        buf2658 = buf2490; del buf2490  # reuse
        buf2681 = buf2489; del buf2489  # reuse
        buf2700 = buf2487; del buf2487  # reuse
        buf2660 = buf2486; del buf2486  # reuse
        buf2683 = buf2485; del buf2485  # reuse
        buf2701 = buf2484; del buf2484  # reuse
        buf2662 = buf2482; del buf2482  # reuse
        buf2684 = buf2481; del buf2481  # reuse
        buf2703 = buf2480; del buf2480  # reuse
        buf2664 = buf2479; del buf2479  # reuse
        buf2685 = buf2477; del buf2477  # reuse
        buf2704 = buf2476; del buf2476  # reuse
        buf2686 = buf2475; del buf2475  # reuse
        buf2705 = buf2474; del buf2474  # reuse
        buf2667 = buf2472; del buf2472  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_392, add_480, add_5, add_50, add_72, add_96, add_98, float_1, float_2, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_139.run(buf2604, primals_179, buf700, buf701, buf2602, primals_180, buf689, buf690, buf623, buf629, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf2608, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2616, buf2612, buf2669, buf2688, buf2670, buf2689, buf2671, buf2690, buf2673, buf2691, buf2674, buf2693, buf2675, buf2694, buf2676, buf2695, buf2678, buf2696, buf2653, buf2679, buf2698, buf2655, buf2680, buf2699, buf2658, buf2681, buf2700, buf2660, buf2683, buf2701, buf2662, buf2684, buf2703, buf2664, buf2685, buf2704, buf2686, buf2705, buf2667, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2602
        del buf2608
        del buf689
        del buf690
        del primals_179
        del primals_180
        buf2613 = buf2609; del buf2609  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf2604, buf700, buf701, buf2613, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2604
        del buf701
        buf2614 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2613, buf2614, 2048, 48, grid=grid(2048), stream=stream0)
        buf2622 = empty_strided((4, 3, 2048, 16), (98304, 32768, 16, 1), device='cuda', dtype=torch.float16)
        buf2627 = buf2622; del buf2622  # reuse
        buf2632 = buf2627; del buf2627  # reuse
        buf2639 = buf2632; del buf2632  # reuse
        buf2648 = buf2639; del buf2639  # reuse
        buf2657 = buf2648; del buf2648  # reuse
        buf2666 = buf2657; del buf2657  # reuse
        buf2672 = buf2666; del buf2666  # reuse
        buf2677 = buf2672; del buf2672  # reuse
        buf2682 = buf2677; del buf2677  # reuse
        buf2687 = buf2682; del buf2682  # reuse
        buf2692 = buf2687; del buf2687  # reuse
        buf2697 = buf2692; del buf2692  # reuse
        buf2702 = buf2697; del buf2697  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_140.run(buf2702, buf2617, buf2618, buf2619, buf2620, buf2621, buf2623, buf2624, buf2625, buf2626, buf2628, buf2629, buf2630, buf2631, buf2633, buf2634, buf2635, buf2637, buf2640, buf2642, buf2644, buf2646, buf2649, buf2651, buf2653, buf2655, buf2658, buf2660, buf2662, buf2664, buf2667, buf2669, buf2670, buf2671, buf2673, buf2674, buf2675, buf2676, buf2678, buf2679, buf2680, buf2681, buf2683, buf2684, buf2685, buf2686, buf2688, buf2689, buf2690, buf2691, buf2693, buf2694, buf2695, buf2696, buf2698, buf2699, buf2700, buf2701, 393216, grid=grid(393216), stream=stream0)
        del buf2617
        del buf2618
        del buf2619
        del buf2620
        buf2706 = empty_strided((4, 1, 1, 16, 48), (768, 3072, 3072, 1, 16), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_141.run(buf2702, buf2703, buf2704, buf2705, buf2706, 3072, 128, grid=grid(3072), stream=stream0)
        buf2707 = empty_strided((4, 1, 1, 16), (16, 64, 64, 1), device='cuda', dtype=torch.float16)
        buf2708 = reinterpret_tensor(buf2707, (4, 16), (16, 1)); del buf2707  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_142.run(buf2708, buf2706, 64, 48, grid=grid(64), stream=stream0)
        del buf2706
        buf2709 = empty_strided((3, 2048, 4, 16), (131072, 64, 16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_143.run(buf2702, buf2703, buf2704, buf2705, buf2709, 393216, grid=grid(393216), stream=stream0)
        buf2710 = empty_strided((64, 64), (64, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2709, (64, 6144), (1, 64), 0), view_522, out=buf2710)
        del view_522
        buf2711 = reinterpret_tensor(buf2702, (6144, 64), (64, 1)); del buf2702  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2709, (6144, 64), (64, 1), 0), permute_857, out=buf2711)
        del buf2709
        del permute_857
        buf2712 = reinterpret_tensor(buf2711, (3, 2048, 64), (131072, 64, 1)); del buf2711  # reuse
        # Source Nodes: [l__mod___dynamic_dense_14_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_144.run(buf2712, mm_133, 393216, grid=grid(393216), stream=stream0)
        del mm_133
        buf2713 = empty_strided((64, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2712, (64, 6144), (1, 64), 0), view_520, out=buf2713)
        del view_520
        buf2714 = reinterpret_tensor(buf700, (6144, 2048), (2048, 1)); del buf700  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2712, (6144, 64), (64, 1), 0), permute_861, out=buf2714)
        del buf2712
        del permute_861
        buf2716 = reinterpret_tensor(buf2455, (3, 2048, 2048), (4194304, 2048, 1)); del buf2455  # reuse
        # Source Nodes: [add, add_450, add_527, float_1, mean, mul, mul_511, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_145.run(buf2716, buf2714, buf572, buf578, buf2508, primals_191, buf647, buf2467, unsqueeze_593, rsqrt_72, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2467
        del buf2508
        del buf2714
        del buf647
        del primals_191
        del rsqrt_72
        del unsqueeze_593
        buf2717 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2716, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf577, (6144, 5632), (5632, 1), 0), out=buf2717)
        buf2718 = reinterpret_tensor(buf577, (6144, 5632), (5632, 1)); del buf577  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2716, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_251, (2048, 5632), (5632, 1), 0), out=buf2718)
        del permute_251
        buf2719 = buf2579; del buf2579  # reuse
        buf2722 = reinterpret_tensor(buf576, (3, 2048, 5632), (11534336, 5632, 1)); del buf576  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2722, buf2718, buf575, buf2719, 34603008, grid=grid(34603008), stream=stream0)
        del buf2718
        del buf575
        buf2720 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2719, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf574, (6144, 2048), (2048, 1), 0), out=buf2720)
        buf2721 = buf578; del buf578  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2719, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_250, (5632, 2048), (2048, 1), 0), out=buf2721)
        del buf2719
        del permute_250
        buf2723 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2722, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf574, (6144, 2048), (2048, 1), 0), out=buf2723)
        buf2724 = reinterpret_tensor(buf574, (6144, 2048), (2048, 1)); del buf574  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2722, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_249, (5632, 2048), (2048, 1), 0), out=buf2724)
        del permute_249
        buf2725 = buf2613; del buf2613  # reuse
        # Source Nodes: [add_449, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf2721, buf2724, buf572, buf573, buf2725, 98304, 128, grid=grid(98304), stream=stream0)
        buf2726 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_449, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2725, buf2726, 2048, 48, grid=grid(2048), stream=stream0)
        buf2728 = buf2716; del buf2716  # reuse
        # Source Nodes: [add_449, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf2728, buf2721, buf2724, primals_174, buf572, buf573, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2721
        del buf2724
        del buf573
        del primals_174
        buf2729 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2728, (2048, 6144), (1, 2048), 0), buf566, out=buf2729)
        buf2730 = buf566; del buf566  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2728, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_248, (2048, 2048), (2048, 1), 0), out=buf2730)
        del permute_248
        buf2731 = reinterpret_tensor(buf572, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf572  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2730, buf2731, 12582912, grid=grid(12582912), stream=stream0)
        buf2732 = reinterpret_tensor(buf2730, (48, 2048, 128), (262144, 128, 1)); del buf2730  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf555, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2731, (48, 2048, 128), (262144, 128, 1), 0), out=buf2732)
        buf2733 = reinterpret_tensor(buf2593, (48, 2048, 2048), (4194304, 2048, 1)); del buf2593  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2731, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf564, (48, 128, 2048), (262144, 1, 128), 0), out=buf2733)
        buf2735 = buf712; del buf712  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward10')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2733, buf555, slice_3, buf2735, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2733
        buf2736 = reinterpret_tensor(buf564, (48, 128, 2048), (262144, 2048, 1)); del buf564  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf550, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2735, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2736)
        buf2737 = reinterpret_tensor(buf550, (48, 2048, 128), (262144, 128, 1)); del buf550  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2735, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf551, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2737)
        buf2738 = reinterpret_tensor(buf551, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf551  # reuse
        buf2739 = reinterpret_tensor(buf2731, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2731  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2736, select_3, select_1, buf2737, buf2738, buf2739, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2736
        buf2740 = reinterpret_tensor(buf2737, (6144, 2048), (2048, 1)); del buf2737  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2732, buf2740, 12582912, grid=grid(12582912), stream=stream0)
        del buf2732
        buf2741 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2740, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf562, (6144, 2048), (2048, 1), 0), out=buf2741)
        buf2742 = reinterpret_tensor(buf562, (6144, 2048), (2048, 1)); del buf562  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2740, reinterpret_tensor(permute_240, (2048, 2048), (2048, 1), 0), out=buf2742)
        del buf2740
        del permute_240
        buf2743 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2738, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf534, (6144, 2048), (2048, 1), 0), out=buf2743)
        buf2744 = reinterpret_tensor(buf534, (6144, 2048), (2048, 1)); del buf534  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2738, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_239, (2048, 2048), (2048, 1), 0), out=buf2744)
        del buf2738
        del permute_239
        buf2745 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2739, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf545, (6144, 2048), (2048, 1), 0), out=buf2745)
        buf2746 = reinterpret_tensor(buf545, (6144, 2048), (2048, 1)); del buf545  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2739, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_238, (2048, 2048), (2048, 1), 0), out=buf2746)
        del permute_238
        buf2747 = buf2725; del buf2725  # reuse
        # Source Nodes: [add_434, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf2742, buf560, buf561, buf2747, 98304, 128, grid=grid(98304), stream=stream0)
        buf2748 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_434, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2747, buf2748, 2048, 48, grid=grid(2048), stream=stream0)
        buf2750 = reinterpret_tensor(buf2739, (3, 2048, 2048), (4194304, 2048, 1)); del buf2739  # reuse
        buf2777 = buf2638; del buf2638  # reuse
        buf2779 = buf2641; del buf2641  # reuse
        buf2781 = buf2643; del buf2643  # reuse
        buf2784 = buf2645; del buf2645  # reuse
        buf2786 = buf2647; del buf2647  # reuse
        buf2788 = buf2650; del buf2650  # reuse
        buf2790 = buf2652; del buf2652  # reuse
        buf2793 = buf2654; del buf2654  # reuse
        buf2795 = buf2656; del buf2656  # reuse
        buf2797 = buf2659; del buf2659  # reuse
        buf2799 = buf2661; del buf2661  # reuse
        buf2802 = buf2663; del buf2663  # reuse
        buf2804 = buf2665; del buf2665  # reuse
        buf2806 = buf2668; del buf2668  # reuse
        buf2759 = buf2705; del buf2705  # reuse
        buf2776 = buf2704; del buf2704  # reuse
        buf2760 = buf2703; del buf2703  # reuse
        buf2778 = buf2701; del buf2701  # reuse
        buf2761 = buf2700; del buf2700  # reuse
        buf2780 = buf2699; del buf2699  # reuse
        buf2762 = buf2698; del buf2698  # reuse
        buf2783 = buf2696; del buf2696  # reuse
        buf2763 = buf2695; del buf2695  # reuse
        buf2785 = buf2694; del buf2694  # reuse
        buf2765 = buf2693; del buf2693  # reuse
        buf2787 = buf2691; del buf2691  # reuse
        buf2766 = buf2690; del buf2690  # reuse
        buf2789 = buf2689; del buf2689  # reuse
        buf2767 = buf2688; del buf2688  # reuse
        buf2768 = buf2686; del buf2686  # reuse
        buf2770 = buf2685; del buf2685  # reuse
        buf2771 = buf2684; del buf2684  # reuse
        buf2772 = buf2683; del buf2683  # reuse
        buf2773 = buf2681; del buf2681  # reuse
        buf2775 = buf2680; del buf2680  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_434, add_5, add_50, add_72, add_96, add_98, mean_2, mul_4, mul_6, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_146.run(buf2777, buf2779, buf2781, buf2784, buf2786, buf2788, buf2790, buf2793, buf2795, buf2797, buf2799, buf2802, buf2804, buf2806, buf2742, primals_169, buf560, buf561, buf2612, unsqueeze_540, buf2616, unsqueeze_525, buf2728, unsqueeze_505, unsqueeze_491, unsqueeze_539, unsqueeze_524, unsqueeze_504, unsqueeze_490, unsqueeze_538, unsqueeze_523, unsqueeze_503, unsqueeze_489, unsqueeze_537, unsqueeze_522, unsqueeze_502, unsqueeze_488, unsqueeze_536, unsqueeze_521, unsqueeze_501, unsqueeze_487, unsqueeze_535, unsqueeze_520, unsqueeze_500, unsqueeze_486, unsqueeze_534, unsqueeze_519, unsqueeze_499, unsqueeze_485, unsqueeze_533, unsqueeze_518, unsqueeze_498, unsqueeze_484, unsqueeze_532, unsqueeze_517, unsqueeze_497, unsqueeze_483, unsqueeze_531, unsqueeze_516, unsqueeze_496, unsqueeze_482, unsqueeze_530, unsqueeze_515, unsqueeze_495, unsqueeze_481, unsqueeze_529, unsqueeze_514, unsqueeze_494, unsqueeze_480, unsqueeze_528, unsqueeze_513, unsqueeze_493, unsqueeze_479, unsqueeze_527, unsqueeze_512, unsqueeze_492, unsqueeze_478, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2750, buf2759, buf2776, buf2760, buf2778, buf2761, buf2780, buf2762, buf2783, buf2763, buf2785, buf2765, buf2787, buf2766, buf2789, buf2767, buf2768, buf2770, buf2771, buf2772, buf2773, buf2775, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf561
        del primals_169
        del unsqueeze_478
        del unsqueeze_479
        del unsqueeze_480
        del unsqueeze_481
        del unsqueeze_482
        del unsqueeze_483
        del unsqueeze_484
        del unsqueeze_485
        del unsqueeze_486
        del unsqueeze_487
        del unsqueeze_488
        del unsqueeze_489
        del unsqueeze_490
        del unsqueeze_491
        del unsqueeze_492
        del unsqueeze_493
        del unsqueeze_494
        del unsqueeze_495
        del unsqueeze_496
        del unsqueeze_497
        del unsqueeze_498
        del unsqueeze_499
        del unsqueeze_500
        del unsqueeze_501
        del unsqueeze_502
        del unsqueeze_503
        del unsqueeze_504
        del unsqueeze_505
        del unsqueeze_512
        del unsqueeze_513
        del unsqueeze_514
        del unsqueeze_515
        del unsqueeze_516
        del unsqueeze_517
        del unsqueeze_518
        del unsqueeze_519
        del unsqueeze_520
        del unsqueeze_521
        del unsqueeze_522
        del unsqueeze_523
        del unsqueeze_524
        del unsqueeze_525
        del unsqueeze_527
        del unsqueeze_528
        del unsqueeze_529
        del unsqueeze_530
        del unsqueeze_531
        del unsqueeze_532
        del unsqueeze_533
        del unsqueeze_534
        del unsqueeze_535
        del unsqueeze_536
        del unsqueeze_537
        del unsqueeze_538
        del unsqueeze_539
        del unsqueeze_540
        buf2751 = buf2747; del buf2747  # reuse
        # Source Nodes: [add_420, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf2744, buf532, buf533, buf2751, 98304, 128, grid=grid(98304), stream=stream0)
        buf2752 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_420, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2751, buf2752, 2048, 48, grid=grid(2048), stream=stream0)
        buf2758 = reinterpret_tensor(buf2742, (3, 2048, 2048), (4194304, 2048, 1)); del buf2742  # reuse
        buf2754 = buf2728; del buf2728  # reuse
        buf2807 = buf2679; del buf2679  # reuse
        buf2825 = buf2678; del buf2678  # reuse
        buf2809 = buf2676; del buf2676  # reuse
        buf2826 = buf2675; del buf2675  # reuse
        buf2810 = buf2674; del buf2674  # reuse
        buf2827 = buf2673; del buf2673  # reuse
        buf2811 = buf2671; del buf2671  # reuse
        buf2829 = buf2670; del buf2670  # reuse
        buf2812 = buf2669; del buf2669  # reuse
        buf2830 = buf2667; del buf2667  # reuse
        buf2814 = buf2664; del buf2664  # reuse
        buf2831 = buf2662; del buf2662  # reuse
        buf2815 = buf2660; del buf2660  # reuse
        buf2832 = buf2658; del buf2658  # reuse
        buf2792 = buf2655; del buf2655  # reuse
        buf2816 = buf2653; del buf2653  # reuse
        buf2834 = buf2651; del buf2651  # reuse
        buf2794 = buf2649; del buf2649  # reuse
        buf2817 = buf2646; del buf2646  # reuse
        buf2835 = buf2644; del buf2644  # reuse
        buf2796 = buf2642; del buf2642  # reuse
        buf2819 = buf2640; del buf2640  # reuse
        buf2836 = buf2637; del buf2637  # reuse
        buf2798 = buf2635; del buf2635  # reuse
        buf2820 = buf2634; del buf2634  # reuse
        buf2837 = buf2633; del buf2633  # reuse
        buf2801 = buf2631; del buf2631  # reuse
        buf2821 = buf2630; del buf2630  # reuse
        buf2839 = buf2629; del buf2629  # reuse
        buf2803 = buf2628; del buf2628  # reuse
        buf2822 = buf2626; del buf2626  # reuse
        buf2840 = buf2625; del buf2625  # reuse
        buf2841 = buf2624; del buf2624  # reuse
        buf2805 = buf2623; del buf2623  # reuse
        buf2824 = buf2621; del buf2621  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_336, add_338, add_420, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mul, mul_3, mul_4, rsqrt, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_147.run(buf2746, primals_167, buf543, buf544, buf2744, primals_168, buf532, buf533, buf474, buf470, buf480, buf521, buf527, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf2750, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2758, buf2754, buf2807, buf2825, buf2809, buf2826, buf2810, buf2827, buf2811, buf2829, buf2812, buf2830, buf2814, buf2831, buf2815, buf2832, buf2792, buf2816, buf2834, buf2794, buf2817, buf2835, buf2796, buf2819, buf2836, buf2798, buf2820, buf2837, buf2801, buf2821, buf2839, buf2803, buf2822, buf2840, buf2841, buf2805, buf2824, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2744
        del buf2750
        del buf533
        del primals_167
        del primals_168
        buf2755 = buf2751; del buf2751  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf2746, buf543, buf544, buf2755, 98304, 128, grid=grid(98304), stream=stream0)
        del buf544
        buf2756 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2755, buf2756, 2048, 48, grid=grid(2048), stream=stream0)
        buf2764 = empty_strided((4, 3, 2048, 15), (92160, 30720, 15, 1), device='cuda', dtype=torch.float16)
        buf2769 = buf2764; del buf2764  # reuse
        buf2774 = buf2769; del buf2769  # reuse
        buf2782 = buf2774; del buf2774  # reuse
        buf2791 = buf2782; del buf2782  # reuse
        buf2800 = buf2791; del buf2791  # reuse
        buf2808 = buf2800; del buf2800  # reuse
        buf2813 = buf2808; del buf2808  # reuse
        buf2818 = buf2813; del buf2813  # reuse
        buf2823 = buf2818; del buf2818  # reuse
        buf2828 = buf2823; del buf2823  # reuse
        buf2833 = buf2828; del buf2828  # reuse
        buf2838 = buf2833; del buf2833  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_148.run(buf2838, buf2759, buf2760, buf2761, buf2762, buf2763, buf2765, buf2766, buf2767, buf2768, buf2770, buf2771, buf2772, buf2773, buf2775, buf2776, buf2778, buf2780, buf2783, buf2785, buf2787, buf2789, buf2792, buf2794, buf2796, buf2798, buf2801, buf2803, buf2805, buf2807, buf2809, buf2810, buf2811, buf2812, buf2814, buf2815, buf2816, buf2817, buf2819, buf2820, buf2821, buf2822, buf2824, buf2825, buf2826, buf2827, buf2829, buf2830, buf2831, buf2832, buf2834, buf2835, buf2836, buf2837, 368640, grid=grid(368640), stream=stream0)
        del buf2759
        del buf2760
        del buf2761
        del buf2762
        buf2842 = empty_strided((4, 1, 1, 15, 48), (720, 2880, 2880, 1, 15), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_149.run(buf2838, buf2839, buf2840, buf2841, buf2842, 2880, 128, grid=grid(2880), stream=stream0)
        buf2843 = empty_strided((4, 1, 1, 15), (15, 60, 60, 1), device='cuda', dtype=torch.float16)
        buf2844 = reinterpret_tensor(buf2843, (4, 15), (15, 1)); del buf2843  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_150.run(buf2844, buf2842, 60, 48, grid=grid(60), stream=stream0)
        del buf2842
        buf2845 = empty_strided((3, 2048, 4, 15), (122880, 60, 15, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_151.run(buf2838, buf2839, buf2840, buf2841, buf2845, 368640, grid=grid(368640), stream=stream0)
        buf2846 = empty_strided((60, 60), (60, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2845, (60, 6144), (1, 60), 0), view_487, out=buf2846)
        del view_487
        buf2847 = reinterpret_tensor(buf2838, (6144, 60), (60, 1)); del buf2838  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2845, (6144, 60), (60, 1), 0), permute_906, out=buf2847)
        del buf2845
        del permute_906
        buf2848 = reinterpret_tensor(buf2847, (3, 2048, 60), (122880, 60, 1)); del buf2847  # reuse
        # Source Nodes: [l__mod___dynamic_dense_13_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_152.run(buf2848, mm_124, 368640, grid=grid(368640), stream=stream0)
        del mm_124
        buf2849 = empty_strided((60, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2848, (60, 6144), (1, 60), 0), view_485, out=buf2849)
        del view_485
        buf2850 = buf2746; del buf2746  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2848, (6144, 60), (60, 1), 0), permute_910, out=buf2850)
        del buf2848
        del permute_910
        buf2852 = buf2612; del buf2612  # reuse
        # Source Nodes: [add_392], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_153.run(buf2852, buf2850, buf623, buf629, buf2636, unsqueeze_541, buf2616, unsqueeze_526, rsqrt_67, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2616
        del buf2636
        del buf2850
        del rsqrt_67
        del unsqueeze_526
        del unsqueeze_541
        buf2853 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2852, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf628, (6144, 5632), (5632, 1), 0), out=buf2853)
        buf2854 = reinterpret_tensor(buf628, (6144, 5632), (5632, 1)); del buf628  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2852, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_234, (2048, 5632), (5632, 1), 0), out=buf2854)
        del permute_234
        buf2855 = buf2722; del buf2722  # reuse
        buf2858 = reinterpret_tensor(buf627, (3, 2048, 5632), (11534336, 5632, 1)); del buf627  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf2858, buf2854, buf626, buf2855, 34603008, grid=grid(34603008), stream=stream0)
        del buf2854
        del buf626
        buf2856 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2855, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf625, (6144, 2048), (2048, 1), 0), out=buf2856)
        buf2857 = buf629; del buf629  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2855, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_233, (5632, 2048), (2048, 1), 0), out=buf2857)
        del buf2855
        del permute_233
        buf2859 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2858, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf625, (6144, 2048), (2048, 1), 0), out=buf2859)
        buf2860 = reinterpret_tensor(buf625, (6144, 2048), (2048, 1)); del buf625  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2858, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_232, (5632, 2048), (2048, 1), 0), out=buf2860)
        del permute_232
        buf2861 = buf2755; del buf2755  # reuse
        # Source Nodes: [add_391, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf2857, buf2860, buf623, buf624, buf2861, 98304, 128, grid=grid(98304), stream=stream0)
        buf2862 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_391, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2861, buf2862, 2048, 48, grid=grid(2048), stream=stream0)
        buf2864 = buf2852; del buf2852  # reuse
        # Source Nodes: [add_391, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf2864, buf2857, buf2860, primals_162, buf623, buf624, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2857
        del buf2860
        del buf624
        del primals_162
        buf2865 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2864, (2048, 6144), (1, 2048), 0), buf617, out=buf2865)
        buf2866 = buf617; del buf617  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2864, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_231, (2048, 2048), (2048, 1), 0), out=buf2866)
        del permute_231
        buf2867 = reinterpret_tensor(buf623, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf623  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf2866, buf2867, 12582912, grid=grid(12582912), stream=stream0)
        buf2868 = reinterpret_tensor(buf2866, (48, 2048, 128), (262144, 128, 1)); del buf2866  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf606, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf2867, (48, 2048, 128), (262144, 128, 1), 0), out=buf2868)
        buf2869 = reinterpret_tensor(buf2735, (48, 2048, 2048), (4194304, 2048, 1)); del buf2735  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2867, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf615, (48, 128, 2048), (262144, 1, 128), 0), out=buf2869)
        buf2871 = buf555; del buf555  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward11')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf2869, buf606, slice_3, buf2871, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf2869
        buf2872 = reinterpret_tensor(buf615, (48, 128, 2048), (262144, 2048, 1)); del buf615  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf601, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf2871, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf2872)
        buf2873 = reinterpret_tensor(buf601, (48, 2048, 128), (262144, 128, 1)); del buf601  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2871, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf602, (48, 2048, 128), (262144, 1, 2048), 0), out=buf2873)
        buf2874 = reinterpret_tensor(buf602, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf602  # reuse
        buf2875 = reinterpret_tensor(buf2867, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf2867  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf2872, select_3, select_1, buf2873, buf2874, buf2875, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf2872
        buf2876 = reinterpret_tensor(buf2873, (6144, 2048), (2048, 1)); del buf2873  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf2868, buf2876, 12582912, grid=grid(12582912), stream=stream0)
        del buf2868
        buf2877 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2876, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf613, (6144, 2048), (2048, 1), 0), out=buf2877)
        buf2878 = reinterpret_tensor(buf613, (6144, 2048), (2048, 1)); del buf613  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf2876, reinterpret_tensor(permute_223, (2048, 2048), (2048, 1), 0), out=buf2878)
        del buf2876
        del permute_223
        buf2879 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2874, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf585, (6144, 2048), (2048, 1), 0), out=buf2879)
        buf2880 = reinterpret_tensor(buf585, (6144, 2048), (2048, 1)); del buf585  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2874, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_222, (2048, 2048), (2048, 1), 0), out=buf2880)
        del buf2874
        del permute_222
        buf2881 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2875, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf596, (6144, 2048), (2048, 1), 0), out=buf2881)
        buf2882 = reinterpret_tensor(buf596, (6144, 2048), (2048, 1)); del buf596  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2875, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_221, (2048, 2048), (2048, 1), 0), out=buf2882)
        del buf2875
        del permute_221
        buf2883 = buf2861; del buf2861  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf2878, buf612, buf2883, 98304, 128, grid=grid(98304), stream=stream0)
        del buf612
        buf2884 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2883, buf2884, 2048, 48, grid=grid(2048), stream=stream0)
        buf2895 = buf2841; del buf2841  # reuse
        buf2886 = buf543; del buf543  # reuse
        buf2912 = buf2779; del buf2779  # reuse
        buf2914 = buf2781; del buf2781  # reuse
        buf2916 = buf2784; del buf2784  # reuse
        buf2918 = buf2786; del buf2786  # reuse
        buf2921 = buf2788; del buf2788  # reuse
        buf2923 = buf2790; del buf2790  # reuse
        buf2925 = buf2793; del buf2793  # reuse
        buf2927 = buf2795; del buf2795  # reuse
        buf2930 = buf2797; del buf2797  # reuse
        buf2932 = buf2799; del buf2799  # reuse
        buf2934 = buf2802; del buf2802  # reuse
        buf2936 = buf2804; del buf2804  # reuse
        buf2939 = buf2806; del buf2806  # reuse
        buf2890 = buf532; del buf532  # reuse
        buf2894 = buf560; del buf560  # reuse
        buf2957 = buf2912; del buf2912  # reuse
        buf2959 = buf2914; del buf2914  # reuse
        buf2962 = buf2916; del buf2916  # reuse
        buf2964 = buf2918; del buf2918  # reuse
        buf2966 = buf2921; del buf2921  # reuse
        buf2968 = buf2923; del buf2923  # reuse
        buf2971 = buf2925; del buf2925  # reuse
        buf2973 = buf2927; del buf2927  # reuse
        buf2975 = buf2930; del buf2930  # reuse
        buf2977 = buf2932; del buf2932  # reuse
        buf2980 = buf2934; del buf2934  # reuse
        buf2982 = buf2936; del buf2936  # reuse
        buf2984 = buf2939; del buf2939  # reuse
        buf2956 = buf2840; del buf2840  # reuse
        buf2958 = buf2839; del buf2839  # reuse
        buf2961 = buf2837; del buf2837  # reuse
        buf2963 = buf2836; del buf2836  # reuse
        buf2965 = buf2835; del buf2835  # reuse
        buf2967 = buf2834; del buf2834  # reuse
        buf2970 = buf2832; del buf2832  # reuse
        buf2972 = buf2831; del buf2831  # reuse
        buf2974 = buf2830; del buf2830  # reuse
        buf2976 = buf2829; del buf2829  # reuse
        buf2979 = buf2827; del buf2827  # reuse
        buf2981 = buf2826; del buf2826  # reuse
        buf2983 = buf2825; del buf2825  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_350, add_363, add_364, add_376, add_377, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_337, mul_350, mul_363, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_154.run(buf2957, buf2959, buf2962, buf2964, buf2966, buf2968, buf2971, buf2973, buf2975, buf2977, buf2980, buf2982, buf2984, buf2878, primals_157, buf610, unsqueeze_430, buf521, buf527, buf2880, primals_156, buf582, unsqueeze_417, buf2882, primals_155, buf593, unsqueeze_404, buf2864, buf611, buf2754, unsqueeze_476, buf2758, unsqueeze_462, unsqueeze_443, unsqueeze_475, unsqueeze_461, unsqueeze_442, unsqueeze_429, unsqueeze_474, unsqueeze_460, unsqueeze_441, unsqueeze_428, unsqueeze_473, unsqueeze_459, unsqueeze_440, unsqueeze_427, unsqueeze_472, unsqueeze_458, unsqueeze_439, unsqueeze_426, unsqueeze_471, unsqueeze_457, unsqueeze_438, unsqueeze_425, unsqueeze_470, unsqueeze_456, unsqueeze_437, unsqueeze_424, unsqueeze_469, unsqueeze_455, unsqueeze_436, unsqueeze_423, unsqueeze_468, unsqueeze_454, unsqueeze_435, unsqueeze_422, unsqueeze_467, unsqueeze_453, unsqueeze_434, unsqueeze_421, unsqueeze_466, unsqueeze_452, unsqueeze_433, unsqueeze_420, unsqueeze_465, unsqueeze_451, unsqueeze_432, unsqueeze_419, unsqueeze_464, unsqueeze_450, unsqueeze_431, unsqueeze_418, buf583, buf594, unsqueeze_416, unsqueeze_403, unsqueeze_415, unsqueeze_402, unsqueeze_414, unsqueeze_401, unsqueeze_413, unsqueeze_400, unsqueeze_412, unsqueeze_399, unsqueeze_411, unsqueeze_398, unsqueeze_410, unsqueeze_397, unsqueeze_409, unsqueeze_396, unsqueeze_408, unsqueeze_395, unsqueeze_407, unsqueeze_394, unsqueeze_406, unsqueeze_393, unsqueeze_405, unsqueeze_392, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf2895, buf2886, buf2890, buf2894, buf2956, buf2958, buf2961, buf2963, buf2965, buf2967, buf2970, buf2972, buf2974, buf2976, buf2979, buf2981, buf2983, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2894
        del buf582
        del buf593
        del buf594
        del buf610
        del primals_155
        del unsqueeze_392
        del unsqueeze_393
        del unsqueeze_394
        del unsqueeze_395
        del unsqueeze_396
        del unsqueeze_397
        del unsqueeze_398
        del unsqueeze_399
        del unsqueeze_400
        del unsqueeze_401
        del unsqueeze_402
        del unsqueeze_403
        del unsqueeze_404
        del unsqueeze_405
        del unsqueeze_406
        del unsqueeze_407
        del unsqueeze_408
        del unsqueeze_409
        del unsqueeze_410
        del unsqueeze_411
        del unsqueeze_412
        del unsqueeze_413
        del unsqueeze_414
        del unsqueeze_415
        del unsqueeze_416
        del unsqueeze_417
        del unsqueeze_418
        del unsqueeze_419
        del unsqueeze_420
        del unsqueeze_421
        del unsqueeze_422
        del unsqueeze_423
        del unsqueeze_424
        del unsqueeze_425
        del unsqueeze_426
        del unsqueeze_427
        del unsqueeze_428
        del unsqueeze_429
        del unsqueeze_430
        del unsqueeze_431
        del unsqueeze_432
        del unsqueeze_433
        del unsqueeze_434
        del unsqueeze_435
        del unsqueeze_436
        del unsqueeze_437
        del unsqueeze_438
        del unsqueeze_439
        del unsqueeze_440
        del unsqueeze_441
        del unsqueeze_442
        del unsqueeze_443
        del unsqueeze_450
        del unsqueeze_451
        del unsqueeze_452
        del unsqueeze_453
        del unsqueeze_454
        del unsqueeze_455
        del unsqueeze_456
        del unsqueeze_457
        del unsqueeze_458
        del unsqueeze_459
        del unsqueeze_460
        del unsqueeze_461
        del unsqueeze_462
        del unsqueeze_464
        del unsqueeze_465
        del unsqueeze_466
        del unsqueeze_467
        del unsqueeze_468
        del unsqueeze_469
        del unsqueeze_470
        del unsqueeze_471
        del unsqueeze_472
        del unsqueeze_473
        del unsqueeze_474
        del unsqueeze_475
        del unsqueeze_476
        buf2887 = buf2883; del buf2883  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf2880, buf584, buf2887, 98304, 128, grid=grid(98304), stream=stream0)
        del buf584
        buf2888 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2887, buf2888, 2048, 48, grid=grid(2048), stream=stream0)
        buf2891 = buf2887; del buf2887  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf2882, buf595, buf2891, 98304, 128, grid=grid(98304), stream=stream0)
        del buf2882
        del buf595
        buf2892 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf2891, buf2892, 2048, 48, grid=grid(2048), stream=stream0)
        buf2906 = buf2824; del buf2824  # reuse
        buf2903 = buf2822; del buf2822  # reuse
        buf2902 = buf2821; del buf2821  # reuse
        buf2899 = buf2820; del buf2820  # reuse
        buf2898 = buf2819; del buf2819  # reuse
        buf2896 = buf2817; del buf2817  # reuse
        buf2908 = buf2816; del buf2816  # reuse
        buf2904 = buf2815; del buf2815  # reuse
        buf2901 = buf2814; del buf2814  # reuse
        buf2897 = buf2812; del buf2812  # reuse
        buf2907 = buf2811; del buf2811  # reuse
        buf2911 = buf2810; del buf2810  # reuse
        buf2913 = buf2809; del buf2809  # reuse
        buf2915 = buf2807; del buf2807  # reuse
        buf2917 = buf2805; del buf2805  # reuse
        buf2920 = buf2803; del buf2803  # reuse
        buf2922 = buf2801; del buf2801  # reuse
        buf2924 = buf2798; del buf2798  # reuse
        buf2926 = buf2796; del buf2796  # reuse
        buf2929 = buf2794; del buf2794  # reuse
        buf2931 = buf2792; del buf2792  # reuse
        buf2933 = buf2789; del buf2789  # reuse
        buf2935 = buf2787; del buf2787  # reuse
        buf2938 = buf2785; del buf2785  # reuse
        buf2940 = buf2783; del buf2783  # reuse
        buf2941 = buf2780; del buf2780  # reuse
        buf2942 = buf2778; del buf2778  # reuse
        buf2944 = buf2776; del buf2776  # reuse
        buf2945 = buf2775; del buf2775  # reuse
        buf2946 = buf2773; del buf2773  # reuse
        buf2947 = buf2772; del buf2772  # reuse
        buf2949 = buf2771; del buf2771  # reuse
        buf2950 = buf2770; del buf2770  # reuse
        buf2951 = buf2768; del buf2768  # reuse
        buf2952 = buf2767; del buf2767  # reuse
        buf2954 = buf2766; del buf2766  # reuse
        buf2955 = buf2765; del buf2765  # reuse
        buf2909 = buf2763; del buf2763  # reuse
        # Source Nodes: [add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_3, add_31, add_33, add_363, add_364, add_376, add_377, add_5, add_50, add_72, add_96, add_98, float_2, float_3, mean_1, mean_2, mul_3, mul_350, mul_363, mul_4, mul_6, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_155.run(buf2864, buf68, buf74, buf138, buf144, buf251, buf257, buf337, buf343, buf294, buf300, buf384, buf390, embedding, buf33, buf39, buf173, buf172, buf179, buf212, buf210, buf218, buf427, buf424, buf433, unsqueeze_11, buf99, buf105, buf2878, primals_157, buf611, buf2886, buf521, buf527, buf2880, primals_156, buf583, buf2890, buf2906, buf2903, buf2902, buf2899, buf2898, buf2896, buf2908, buf2904, buf2901, buf2897, buf2907, buf2911, buf2913, buf2915, buf2917, buf2920, buf2922, buf2924, buf2926, buf2929, buf2931, buf2933, buf2935, buf2938, buf2940, buf2941, buf2942, buf2944, buf2945, buf2946, buf2947, buf2949, buf2950, buf2951, buf2952, buf2954, buf2955, buf2909, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2864
        del buf2878
        del buf2886
        del buf2890
        del buf583
        del buf611
        del primals_156
        del primals_157
        buf2900 = empty_strided((4, 3, 2048, 14), (86016, 28672, 14, 1), device='cuda', dtype=torch.float16)
        buf2905 = buf2900; del buf2900  # reuse
        buf2910 = buf2905; del buf2905  # reuse
        buf2919 = buf2910; del buf2910  # reuse
        buf2928 = buf2919; del buf2919  # reuse
        buf2937 = buf2928; del buf2928  # reuse
        buf2943 = buf2937; del buf2937  # reuse
        buf2948 = buf2943; del buf2943  # reuse
        buf2953 = buf2948; del buf2948  # reuse
        buf2960 = buf2953; del buf2953  # reuse
        buf2969 = buf2960; del buf2960  # reuse
        buf2978 = buf2969; del buf2969  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_156.run(buf2978, buf2895, buf2896, buf2897, buf2898, buf2899, buf2901, buf2902, buf2903, buf2904, buf2906, buf2907, buf2908, buf2909, buf2911, buf2913, buf2915, buf2917, buf2920, buf2922, buf2924, buf2926, buf2929, buf2931, buf2933, buf2935, buf2938, buf2940, buf2941, buf2942, buf2944, buf2945, buf2946, buf2947, buf2949, buf2950, buf2951, buf2952, buf2954, buf2955, buf2956, buf2958, buf2961, buf2963, buf2965, buf2967, buf2970, buf2972, buf2974, buf2976, 344064, grid=grid(344064), stream=stream0)
        del buf2895
        del buf2896
        del buf2897
        del buf2898
        buf2985 = empty_strided((4, 1, 1, 14, 48), (672, 2688, 2688, 1, 14), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_157.run(buf2978, buf2979, buf2981, buf2983, buf2985, 2688, 128, grid=grid(2688), stream=stream0)
        buf2986 = empty_strided((4, 1, 1, 14), (14, 56, 56, 1), device='cuda', dtype=torch.float16)
        buf2987 = reinterpret_tensor(buf2986, (4, 14), (14, 1)); del buf2986  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_158.run(buf2987, buf2985, 56, 48, grid=grid(56), stream=stream0)
        del buf2985
        buf2988 = empty_strided((3, 2048, 4, 14), (114688, 56, 14, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_159.run(buf2978, buf2979, buf2981, buf2983, buf2988, 344064, grid=grid(344064), stream=stream0)
        buf2989 = empty_strided((56, 56), (56, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2988, (56, 6144), (1, 56), 0), view_452, out=buf2989)
        del view_452
        buf2990 = reinterpret_tensor(buf2978, (6144, 56), (56, 1)); del buf2978  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2988, (6144, 56), (56, 1), 0), permute_955, out=buf2990)
        del buf2988
        del permute_955
        buf2991 = reinterpret_tensor(buf2990, (3, 2048, 56), (114688, 56, 1)); del buf2990  # reuse
        # Source Nodes: [l__mod___dynamic_dense_12_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_160.run(buf2991, mm_115, 344064, grid=grid(344064), stream=stream0)
        del mm_115
        buf2992 = empty_strided((56, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2991, (56, 6144), (1, 56), 0), view_450, out=buf2992)
        del view_450
        buf2993 = buf2880; del buf2880  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2991, (6144, 56), (56, 1), 0), permute_959, out=buf2993)
        del buf2991
        del permute_959
        buf2995 = buf2754; del buf2754  # reuse
        # Source Nodes: [add_336, add_338], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_161.run(buf2995, buf2993, buf474, buf470, buf480, buf2777, unsqueeze_477, buf2758, unsqueeze_463, rsqrt_62, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf2758
        del buf2777
        del buf2993
        del rsqrt_62
        del unsqueeze_463
        del unsqueeze_477
        buf2996 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2995, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf479, (6144, 5632), (5632, 1), 0), out=buf2996)
        buf2997 = reinterpret_tensor(buf479, (6144, 5632), (5632, 1)); del buf479  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2995, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_217, (2048, 5632), (5632, 1), 0), out=buf2997)
        del permute_217
        buf2998 = buf2858; del buf2858  # reuse
        buf3001 = reinterpret_tensor(buf478, (3, 2048, 5632), (11534336, 5632, 1)); del buf478  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3001, buf2997, buf477, buf2998, 34603008, grid=grid(34603008), stream=stream0)
        del buf2997
        del buf477
        buf2999 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2998, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf476, (6144, 2048), (2048, 1), 0), out=buf2999)
        buf3000 = buf480; del buf480  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2998, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_216, (5632, 2048), (2048, 1), 0), out=buf3000)
        del buf2998
        del permute_216
        buf3002 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3001, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf476, (6144, 2048), (2048, 1), 0), out=buf3002)
        buf3003 = reinterpret_tensor(buf476, (6144, 2048), (2048, 1)); del buf476  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3001, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_215, (5632, 2048), (2048, 1), 0), out=buf3003)
        del permute_215
        buf3004 = buf2891; del buf2891  # reuse
        # Source Nodes: [add_336, add_337, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf3000, buf3003, buf474, buf470, buf475, buf3004, 98304, 128, grid=grid(98304), stream=stream0)
        buf3005 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_336, add_337, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3004, buf3005, 2048, 48, grid=grid(2048), stream=stream0)
        buf3008 = buf2995; del buf2995  # reuse
        # Source Nodes: [add_336, add_337, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf3008, buf3000, buf3003, primals_150, buf474, buf470, buf475, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3000
        del buf3003
        del buf470
        del buf475
        del primals_150
        buf3009 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3008, (2048, 6144), (1, 2048), 0), buf469, out=buf3009)
        buf3010 = buf469; del buf469  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3008, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_214, (2048, 2048), (2048, 1), 0), out=buf3010)
        del permute_214
        buf3011 = reinterpret_tensor(buf474, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf474  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3010, buf3011, 12582912, grid=grid(12582912), stream=stream0)
        buf3012 = reinterpret_tensor(buf3010, (48, 2048, 128), (262144, 128, 1)); del buf3010  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf459, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3011, (48, 2048, 128), (262144, 128, 1), 0), out=buf3012)
        buf3013 = reinterpret_tensor(buf2871, (48, 2048, 2048), (4194304, 2048, 1)); del buf2871  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3011, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf467, (48, 128, 2048), (262144, 1, 128), 0), out=buf3013)
        buf3015 = buf606; del buf606  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward12')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3013, buf459, slice_3, buf3015, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf3013
        buf3016 = reinterpret_tensor(buf467, (48, 128, 2048), (262144, 2048, 1)); del buf467  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf454, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3015, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3016)
        buf3017 = reinterpret_tensor(buf454, (48, 2048, 128), (262144, 128, 1)); del buf454  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3015, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf455, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3017)
        buf3018 = reinterpret_tensor(buf455, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf455  # reuse
        buf3019 = reinterpret_tensor(buf3011, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf3011  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3016, select_3, select_1, buf3017, buf3018, buf3019, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3016
        buf3020 = reinterpret_tensor(buf3017, (6144, 2048), (2048, 1)); del buf3017  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3012, buf3020, 12582912, grid=grid(12582912), stream=stream0)
        del buf3012
        buf3021 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3020, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf465, (6144, 2048), (2048, 1), 0), out=buf3021)
        buf3022 = reinterpret_tensor(buf465, (6144, 2048), (2048, 1)); del buf465  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3020, reinterpret_tensor(permute_206, (2048, 2048), (2048, 1), 0), out=buf3022)
        del permute_206
        buf3023 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3018, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf439, (6144, 2048), (2048, 1), 0), out=buf3023)
        buf3024 = reinterpret_tensor(buf439, (6144, 2048), (2048, 1)); del buf439  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3018, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_205, (2048, 2048), (2048, 1), 0), out=buf3024)
        del permute_205
        buf3025 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3019, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf449, (6144, 2048), (2048, 1), 0), out=buf3025)
        buf3026 = reinterpret_tensor(buf449, (6144, 2048), (2048, 1)); del buf449  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3019, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_204, (2048, 2048), (2048, 1), 0), out=buf3026)
        del permute_204
        buf3027 = buf3004; del buf3004  # reuse
        # Source Nodes: [add_324, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf3022, buf463, buf464, buf3027, 98304, 128, grid=grid(98304), stream=stream0)
        buf3028 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_324, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3027, buf3028, 2048, 48, grid=grid(2048), stream=stream0)
        buf3030 = reinterpret_tensor(buf3019, (3, 2048, 2048), (4194304, 2048, 1)); del buf3019  # reuse
        buf3034 = reinterpret_tensor(buf3018, (3, 2048, 2048), (4194304, 2048, 1)); del buf3018  # reuse
        buf3038 = reinterpret_tensor(buf3020, (3, 2048, 2048), (4194304, 2048, 1)); del buf3020  # reuse
        buf3084 = buf2959; del buf2959  # reuse
        buf3087 = buf2962; del buf2962  # reuse
        buf3089 = buf2964; del buf2964  # reuse
        buf3091 = buf2966; del buf2966  # reuse
        buf3093 = buf2968; del buf2968  # reuse
        buf3096 = buf2971; del buf2971  # reuse
        buf3098 = buf2973; del buf2973  # reuse
        buf3100 = buf2975; del buf2975  # reuse
        buf3102 = buf2977; del buf2977  # reuse
        buf3105 = buf2980; del buf2980  # reuse
        buf3107 = buf2982; del buf2982  # reuse
        buf3109 = buf2984; del buf2984  # reuse
        buf3039 = buf2983; del buf2983  # reuse
        buf3053 = buf2981; del buf2981  # reuse
        buf3068 = buf2979; del buf2979  # reuse
        buf3083 = buf2976; del buf2976  # reuse
        buf3040 = buf2974; del buf2974  # reuse
        buf3055 = buf2972; del buf2972  # reuse
        buf3070 = buf2970; del buf2970  # reuse
        buf3086 = buf2967; del buf2967  # reuse
        buf3041 = buf2965; del buf2965  # reuse
        buf3056 = buf2963; del buf2963  # reuse
        buf3071 = buf2961; del buf2961  # reuse
        buf3088 = buf2958; del buf2958  # reuse
        buf3042 = buf2956; del buf2956  # reuse
        buf3057 = buf2955; del buf2955  # reuse
        buf3072 = buf2954; del buf2954  # reuse
        buf3090 = buf2952; del buf2952  # reuse
        buf3043 = buf2951; del buf2951  # reuse
        buf3058 = buf2950; del buf2950  # reuse
        buf3073 = buf2949; del buf2949  # reuse
        buf3092 = buf2947; del buf2947  # reuse
        buf3045 = buf2946; del buf2946  # reuse
        buf3060 = buf2945; del buf2945  # reuse
        buf3075 = buf2944; del buf2944  # reuse
        buf3095 = buf2942; del buf2942  # reuse
        buf3046 = buf2941; del buf2941  # reuse
        buf3061 = buf2940; del buf2940  # reuse
        buf3076 = buf2938; del buf2938  # reuse
        buf3097 = buf2935; del buf2935  # reuse
        buf3047 = buf2933; del buf2933  # reuse
        buf3062 = buf2931; del buf2931  # reuse
        buf3077 = buf2929; del buf2929  # reuse
        buf3099 = buf2926; del buf2926  # reuse
        buf3048 = buf2924; del buf2924  # reuse
        buf3063 = buf2922; del buf2922  # reuse
        buf3078 = buf2920; del buf2920  # reuse
        buf3101 = buf2917; del buf2917  # reuse
        # Source Nodes: [add, add_128, add_162, add_198, add_20, add_200, add_242, add_31, add_312, add_324, add_33, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_162.run(buf3084, buf3087, buf3089, buf3091, buf3093, buf3096, buf3098, buf3100, buf3102, buf3105, buf3107, buf3109, buf3022, primals_145, buf463, buf3026, primals_143, buf447, buf3024, primals_144, buf437, buf464, buf438, buf448, buf3008, unsqueeze_385, unsqueeze_373, unsqueeze_361, unsqueeze_349, unsqueeze_384, unsqueeze_372, unsqueeze_360, unsqueeze_348, unsqueeze_383, unsqueeze_371, unsqueeze_359, unsqueeze_347, unsqueeze_382, unsqueeze_370, unsqueeze_358, unsqueeze_346, unsqueeze_381, unsqueeze_369, unsqueeze_357, unsqueeze_345, unsqueeze_380, unsqueeze_368, unsqueeze_356, unsqueeze_344, unsqueeze_379, unsqueeze_367, unsqueeze_355, unsqueeze_343, unsqueeze_378, unsqueeze_366, unsqueeze_354, unsqueeze_342, unsqueeze_377, unsqueeze_365, unsqueeze_353, unsqueeze_341, unsqueeze_376, unsqueeze_364, unsqueeze_352, unsqueeze_340, unsqueeze_375, unsqueeze_363, unsqueeze_351, unsqueeze_339, unsqueeze_374, unsqueeze_362, unsqueeze_350, unsqueeze_338, buf384, buf390, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, buf3030, buf3034, buf3038, buf3039, buf3053, buf3068, buf3083, buf3040, buf3055, buf3070, buf3086, buf3041, buf3056, buf3071, buf3088, buf3042, buf3057, buf3072, buf3090, buf3043, buf3058, buf3073, buf3092, buf3045, buf3060, buf3075, buf3095, buf3046, buf3061, buf3076, buf3097, buf3047, buf3062, buf3077, buf3099, buf3048, buf3063, buf3078, buf3101, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3022
        del buf463
        del buf464
        del primals_143
        del primals_144
        del primals_145
        del unsqueeze_338
        del unsqueeze_339
        del unsqueeze_340
        del unsqueeze_341
        del unsqueeze_342
        del unsqueeze_343
        del unsqueeze_344
        del unsqueeze_345
        del unsqueeze_346
        del unsqueeze_347
        del unsqueeze_348
        del unsqueeze_349
        del unsqueeze_350
        del unsqueeze_351
        del unsqueeze_352
        del unsqueeze_353
        del unsqueeze_354
        del unsqueeze_355
        del unsqueeze_356
        del unsqueeze_357
        del unsqueeze_358
        del unsqueeze_359
        del unsqueeze_360
        del unsqueeze_361
        del unsqueeze_362
        del unsqueeze_363
        del unsqueeze_364
        del unsqueeze_365
        del unsqueeze_366
        del unsqueeze_367
        del unsqueeze_368
        del unsqueeze_369
        del unsqueeze_370
        del unsqueeze_371
        del unsqueeze_372
        del unsqueeze_373
        del unsqueeze_374
        del unsqueeze_375
        del unsqueeze_376
        del unsqueeze_377
        del unsqueeze_378
        del unsqueeze_379
        del unsqueeze_380
        del unsqueeze_381
        del unsqueeze_382
        del unsqueeze_383
        del unsqueeze_384
        del unsqueeze_385
        buf3031 = buf3027; del buf3027  # reuse
        # Source Nodes: [add_312, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3024, buf437, buf438, buf3031, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3024
        del buf437
        del buf438
        buf3032 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_312, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3031, buf3032, 2048, 48, grid=grid(2048), stream=stream0)
        buf3035 = buf3031; del buf3031  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3026, buf447, buf448, buf3035, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3026
        del buf447
        del buf448
        buf3036 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3035, buf3036, 2048, 48, grid=grid(2048), stream=stream0)
        buf3050 = buf2915; del buf2915  # reuse
        buf3065 = buf2913; del buf2913  # reuse
        buf3080 = buf2911; del buf2911  # reuse
        buf3104 = buf2909; del buf2909  # reuse
        buf3051 = buf2908; del buf2908  # reuse
        buf3066 = buf2907; del buf2907  # reuse
        buf3081 = buf2906; del buf2906  # reuse
        buf3106 = buf2904; del buf2904  # reuse
        buf3052 = buf2903; del buf2903  # reuse
        buf3067 = buf2902; del buf2902  # reuse
        buf3082 = buf2901; del buf2901  # reuse
        buf3108 = buf2899; del buf2899  # reuse
        # Source Nodes: [add_10, add_12, add_3, add_5, mul_4], Original ATen: [aten.add, aten.mul, aten.sum]
        triton_red_fused_add_mul_sum_163.run(buf3008, unsqueeze_11, embedding, buf99, buf105, buf3030, buf3034, buf3038, buf33, buf39, buf3050, buf3065, buf3080, buf3104, buf3051, buf3066, buf3081, buf3106, buf3052, buf3067, buf3082, buf3108, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3008
        del buf3030
        del buf3034
        buf3044 = empty_strided((4, 3, 2048, 13), (79872, 26624, 13, 1), device='cuda', dtype=torch.float16)
        buf3049 = buf3044; del buf3044  # reuse
        buf3054 = buf3049; del buf3049  # reuse
        buf3059 = buf3054; del buf3054  # reuse
        buf3064 = buf3059; del buf3059  # reuse
        buf3069 = buf3064; del buf3064  # reuse
        buf3074 = buf3069; del buf3069  # reuse
        buf3079 = buf3074; del buf3074  # reuse
        buf3085 = buf3079; del buf3079  # reuse
        buf3094 = buf3085; del buf3085  # reuse
        buf3103 = buf3094; del buf3094  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_164.run(buf3103, buf3039, buf3040, buf3041, buf3042, buf3043, buf3045, buf3046, buf3047, buf3048, buf3050, buf3051, buf3052, buf3053, buf3055, buf3056, buf3057, buf3058, buf3060, buf3061, buf3062, buf3063, buf3065, buf3066, buf3067, buf3068, buf3070, buf3071, buf3072, buf3073, buf3075, buf3076, buf3077, buf3078, buf3080, buf3081, buf3082, buf3083, buf3086, buf3088, buf3090, buf3092, buf3095, buf3097, buf3099, buf3101, 319488, grid=grid(319488), stream=stream0)
        del buf3039
        del buf3040
        del buf3041
        del buf3042
        buf3110 = empty_strided((4, 1, 1, 13, 48), (624, 2496, 2496, 1, 13), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_165.run(buf3103, buf3104, buf3106, buf3108, buf3110, 2496, 128, grid=grid(2496), stream=stream0)
        buf3111 = empty_strided((4, 1, 1, 13), (13, 52, 52, 1), device='cuda', dtype=torch.float16)
        buf3112 = reinterpret_tensor(buf3111, (4, 13), (13, 1)); del buf3111  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_166.run(buf3112, buf3110, 52, 48, grid=grid(52), stream=stream0)
        del buf3110
        buf3113 = empty_strided((3, 2048, 4, 13), (106496, 52, 13, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_167.run(buf3103, buf3104, buf3106, buf3108, buf3113, 319488, grid=grid(319488), stream=stream0)
        buf3114 = empty_strided((52, 52), (52, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3113, (52, 6144), (1, 52), 0), view_417, out=buf3114)
        del view_417
        buf3115 = reinterpret_tensor(buf3103, (6144, 52), (52, 1)); del buf3103  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3113, (6144, 52), (52, 1), 0), permute_1004, out=buf3115)
        del buf3113
        del permute_1004
        buf3116 = reinterpret_tensor(buf3115, (3, 2048, 52), (106496, 52, 1)); del buf3115  # reuse
        # Source Nodes: [l__mod___dynamic_dense_11_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_168.run(buf3116, mm_106, 319488, grid=grid(319488), stream=stream0)
        del mm_106
        buf3117 = empty_strided((52, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3116, (52, 6144), (1, 52), 0), view_415, out=buf3117)
        del view_415
        buf3118 = reinterpret_tensor(buf3038, (6144, 2048), (2048, 1)); del buf3038  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3116, (6144, 52), (52, 1), 0), permute_1008, out=buf3118)
        del buf3116
        del permute_1008
        buf3120 = buf2957; del buf2957  # reuse
        # Source Nodes: [add_288], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf3120, buf3118, buf521, buf527, rsqrt_57, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3118
        del rsqrt_57
        buf3121 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3120, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf526, (6144, 5632), (5632, 1), 0), out=buf3121)
        buf3122 = reinterpret_tensor(buf526, (6144, 5632), (5632, 1)); del buf526  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3120, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_200, (2048, 5632), (5632, 1), 0), out=buf3122)
        del permute_200
        buf3123 = buf3001; del buf3001  # reuse
        buf3126 = reinterpret_tensor(buf525, (3, 2048, 5632), (11534336, 5632, 1)); del buf525  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3126, buf3122, buf524, buf3123, 34603008, grid=grid(34603008), stream=stream0)
        del buf3122
        del buf524
        buf3124 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3123, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf523, (6144, 2048), (2048, 1), 0), out=buf3124)
        buf3125 = buf527; del buf527  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3123, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_199, (5632, 2048), (2048, 1), 0), out=buf3125)
        del buf3123
        del permute_199
        buf3127 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3126, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf523, (6144, 2048), (2048, 1), 0), out=buf3127)
        buf3128 = reinterpret_tensor(buf523, (6144, 2048), (2048, 1)); del buf523  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3126, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_198, (5632, 2048), (2048, 1), 0), out=buf3128)
        del permute_198
        buf3129 = buf3035; del buf3035  # reuse
        # Source Nodes: [add_287, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3125, buf3128, buf521, buf522, buf3129, 98304, 128, grid=grid(98304), stream=stream0)
        buf3130 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_287, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3129, buf3130, 2048, 48, grid=grid(2048), stream=stream0)
        buf3132 = buf3120; del buf3120  # reuse
        # Source Nodes: [add_287, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3132, buf3125, buf3128, primals_138, buf521, buf522, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3125
        del buf3128
        del buf522
        del primals_138
        buf3133 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3132, (2048, 6144), (1, 2048), 0), buf516, out=buf3133)
        buf3134 = buf516; del buf516  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3132, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_197, (2048, 2048), (2048, 1), 0), out=buf3134)
        del permute_197
        buf3135 = reinterpret_tensor(buf521, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf521  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3134, buf3135, 12582912, grid=grid(12582912), stream=stream0)
        buf3136 = reinterpret_tensor(buf3134, (48, 2048, 128), (262144, 128, 1)); del buf3134  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf506, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3135, (48, 2048, 128), (262144, 128, 1), 0), out=buf3136)
        buf3137 = reinterpret_tensor(buf3015, (48, 2048, 2048), (4194304, 2048, 1)); del buf3015  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3135, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf514, (48, 128, 2048), (262144, 1, 128), 0), out=buf3137)
        buf3139 = buf459; del buf459  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward13')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3137, buf506, slice_3, buf3139, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf3137
        buf3140 = reinterpret_tensor(buf514, (48, 128, 2048), (262144, 2048, 1)); del buf514  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf501, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3139, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3140)
        buf3141 = reinterpret_tensor(buf501, (48, 2048, 128), (262144, 128, 1)); del buf501  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3139, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf502, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3141)
        buf3142 = reinterpret_tensor(buf502, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf502  # reuse
        buf3143 = reinterpret_tensor(buf3135, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf3135  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3140, select_3, select_1, buf3141, buf3142, buf3143, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3140
        buf3144 = reinterpret_tensor(buf3141, (6144, 2048), (2048, 1)); del buf3141  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3136, buf3144, 12582912, grid=grid(12582912), stream=stream0)
        del buf3136
        buf3145 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3144, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf512, (6144, 2048), (2048, 1), 0), out=buf3145)
        buf3146 = reinterpret_tensor(buf512, (6144, 2048), (2048, 1)); del buf512  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3144, reinterpret_tensor(permute_189, (2048, 2048), (2048, 1), 0), out=buf3146)
        del permute_189
        buf3147 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3142, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf486, (6144, 2048), (2048, 1), 0), out=buf3147)
        buf3148 = reinterpret_tensor(buf486, (6144, 2048), (2048, 1)); del buf486  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3142, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_188, (2048, 2048), (2048, 1), 0), out=buf3148)
        del permute_188
        buf3149 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3143, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf496, (6144, 2048), (2048, 1), 0), out=buf3149)
        buf3150 = reinterpret_tensor(buf496, (6144, 2048), (2048, 1)); del buf496  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3143, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_187, (2048, 2048), (2048, 1), 0), out=buf3150)
        del permute_187
        buf3151 = buf3129; del buf3129  # reuse
        # Source Nodes: [add_275, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf3146, buf510, buf511, buf3151, 98304, 128, grid=grid(98304), stream=stream0)
        buf3152 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_275, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3151, buf3152, 2048, 48, grid=grid(2048), stream=stream0)
        buf3154 = reinterpret_tensor(buf3143, (3, 2048, 2048), (4194304, 2048, 1)); del buf3143  # reuse
        buf3158 = reinterpret_tensor(buf3142, (3, 2048, 2048), (4194304, 2048, 1)); del buf3142  # reuse
        buf3162 = reinterpret_tensor(buf3144, (3, 2048, 2048), (4194304, 2048, 1)); del buf3144  # reuse
        buf3205 = buf3087; del buf3087  # reuse
        buf3207 = buf3089; del buf3089  # reuse
        buf3209 = buf3091; del buf3091  # reuse
        buf3211 = buf3093; del buf3093  # reuse
        buf3214 = buf3096; del buf3096  # reuse
        buf3216 = buf3098; del buf3098  # reuse
        buf3218 = buf3100; del buf3100  # reuse
        buf3220 = buf3102; del buf3102  # reuse
        buf3223 = buf3105; del buf3105  # reuse
        buf3225 = buf3107; del buf3107  # reuse
        buf3227 = buf3109; del buf3109  # reuse
        buf3163 = buf3108; del buf3108  # reuse
        buf3176 = buf3106; del buf3106  # reuse
        buf3190 = buf3104; del buf3104  # reuse
        buf3204 = buf3101; del buf3101  # reuse
        buf3164 = buf3099; del buf3099  # reuse
        buf3177 = buf3097; del buf3097  # reuse
        buf3191 = buf3095; del buf3095  # reuse
        buf3206 = buf3092; del buf3092  # reuse
        buf3165 = buf3090; del buf3090  # reuse
        buf3179 = buf3088; del buf3088  # reuse
        buf3192 = buf3086; del buf3086  # reuse
        buf3208 = buf3083; del buf3083  # reuse
        buf3166 = buf3082; del buf3082  # reuse
        buf3180 = buf3081; del buf3081  # reuse
        buf3194 = buf3080; del buf3080  # reuse
        buf3210 = buf3078; del buf3078  # reuse
        buf3167 = buf3077; del buf3077  # reuse
        buf3181 = buf3076; del buf3076  # reuse
        buf3195 = buf3075; del buf3075  # reuse
        buf3213 = buf3073; del buf3073  # reuse
        buf3169 = buf3072; del buf3072  # reuse
        buf3182 = buf3071; del buf3071  # reuse
        buf3196 = buf3070; del buf3070  # reuse
        buf3215 = buf3068; del buf3068  # reuse
        buf3170 = buf3067; del buf3067  # reuse
        buf3184 = buf3066; del buf3066  # reuse
        buf3197 = buf3065; del buf3065  # reuse
        buf3217 = buf3063; del buf3063  # reuse
        buf3171 = buf3062; del buf3062  # reuse
        buf3185 = buf3061; del buf3061  # reuse
        buf3199 = buf3060; del buf3060  # reuse
        buf3219 = buf3058; del buf3058  # reuse
        buf3172 = buf3057; del buf3057  # reuse
        buf3186 = buf3056; del buf3056  # reuse
        buf3200 = buf3055; del buf3055  # reuse
        buf3222 = buf3053; del buf3053  # reuse
        buf3174 = buf3052; del buf3052  # reuse
        buf3187 = buf3051; del buf3051  # reuse
        buf3201 = buf3050; del buf3050  # reuse
        buf3224 = buf3048; del buf3048  # reuse
        buf3175 = buf3047; del buf3047  # reuse
        buf3202 = buf3046; del buf3046  # reuse
        buf3189 = buf3045; del buf3045  # reuse
        buf3226 = buf3043; del buf3043  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_198, add_20, add_200, add_264, add_275, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_169.run(buf3205, buf3207, buf3209, buf3211, buf3214, buf3216, buf3218, buf3220, buf3223, buf3225, buf3227, buf3146, primals_133, buf510, buf3150, primals_131, buf494, buf3148, primals_132, buf484, buf511, buf485, buf495, buf3132, unsqueeze_331, unsqueeze_320, unsqueeze_309, unsqueeze_298, unsqueeze_330, unsqueeze_319, unsqueeze_308, unsqueeze_297, unsqueeze_329, unsqueeze_318, unsqueeze_307, unsqueeze_296, unsqueeze_328, unsqueeze_317, unsqueeze_306, unsqueeze_295, unsqueeze_327, unsqueeze_316, unsqueeze_305, unsqueeze_294, unsqueeze_326, unsqueeze_315, unsqueeze_304, unsqueeze_293, unsqueeze_325, unsqueeze_314, unsqueeze_303, unsqueeze_292, unsqueeze_324, unsqueeze_313, unsqueeze_302, unsqueeze_291, unsqueeze_323, unsqueeze_312, unsqueeze_301, unsqueeze_290, unsqueeze_322, unsqueeze_311, unsqueeze_300, unsqueeze_289, unsqueeze_321, unsqueeze_310, unsqueeze_299, unsqueeze_288, buf427, buf424, buf433, buf294, buf300, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3154, buf3158, buf3162, buf3163, buf3176, buf3190, buf3204, buf3164, buf3177, buf3191, buf3206, buf3165, buf3179, buf3192, buf3208, buf3166, buf3180, buf3194, buf3210, buf3167, buf3181, buf3195, buf3213, buf3169, buf3182, buf3196, buf3215, buf3170, buf3184, buf3197, buf3217, buf3171, buf3185, buf3199, buf3219, buf3172, buf3186, buf3200, buf3222, buf3174, buf3187, buf3201, buf3224, buf3175, buf3202, buf3189, buf3226, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3132
        del buf3146
        del buf3154
        del buf3158
        del buf3162
        del buf511
        del primals_131
        del primals_132
        del primals_133
        del unsqueeze_288
        del unsqueeze_289
        del unsqueeze_290
        del unsqueeze_291
        del unsqueeze_292
        del unsqueeze_293
        del unsqueeze_294
        del unsqueeze_295
        del unsqueeze_296
        del unsqueeze_297
        del unsqueeze_298
        del unsqueeze_299
        del unsqueeze_300
        del unsqueeze_301
        del unsqueeze_302
        del unsqueeze_303
        del unsqueeze_304
        del unsqueeze_305
        del unsqueeze_306
        del unsqueeze_307
        del unsqueeze_308
        del unsqueeze_309
        del unsqueeze_310
        del unsqueeze_311
        del unsqueeze_312
        del unsqueeze_313
        del unsqueeze_314
        del unsqueeze_315
        del unsqueeze_316
        del unsqueeze_317
        del unsqueeze_318
        del unsqueeze_319
        del unsqueeze_320
        del unsqueeze_321
        del unsqueeze_322
        del unsqueeze_323
        del unsqueeze_324
        del unsqueeze_325
        del unsqueeze_326
        del unsqueeze_327
        del unsqueeze_328
        del unsqueeze_329
        del unsqueeze_330
        del unsqueeze_331
        buf3155 = buf3151; del buf3151  # reuse
        # Source Nodes: [add_264, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3148, buf484, buf485, buf3155, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3148
        del buf485
        buf3156 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_264, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3155, buf3156, 2048, 48, grid=grid(2048), stream=stream0)
        buf3159 = buf3155; del buf3155  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3150, buf494, buf495, buf3159, 98304, 128, grid=grid(98304), stream=stream0)
        del buf495
        buf3160 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3159, buf3160, 2048, 48, grid=grid(2048), stream=stream0)
        buf3168 = empty_strided((4, 3, 2048, 12), (73728, 24576, 12, 1), device='cuda', dtype=torch.float16)
        buf3173 = buf3168; del buf3168  # reuse
        buf3178 = buf3173; del buf3173  # reuse
        buf3183 = buf3178; del buf3178  # reuse
        buf3188 = buf3183; del buf3183  # reuse
        buf3193 = buf3188; del buf3188  # reuse
        buf3198 = buf3193; del buf3193  # reuse
        buf3203 = buf3198; del buf3198  # reuse
        buf3212 = buf3203; del buf3203  # reuse
        buf3221 = buf3212; del buf3212  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_170.run(buf3221, buf3163, buf3164, buf3165, buf3166, buf3167, buf3169, buf3170, buf3171, buf3172, buf3174, buf3175, buf3176, buf3177, buf3179, buf3180, buf3181, buf3182, buf3184, buf3185, buf3186, buf3187, buf3189, buf3190, buf3191, buf3192, buf3194, buf3195, buf3196, buf3197, buf3199, buf3200, buf3201, buf3202, buf3204, buf3206, buf3208, buf3210, buf3213, buf3215, buf3217, buf3219, 294912, grid=grid(294912), stream=stream0)
        del buf3163
        del buf3164
        del buf3165
        del buf3166
        buf3228 = empty_strided((4, 1, 1, 12, 48), (576, 2304, 2304, 1, 12), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_171.run(buf3221, buf3222, buf3224, buf3226, buf3228, 2304, 128, grid=grid(2304), stream=stream0)
        buf3229 = empty_strided((4, 1, 1, 12), (12, 48, 48, 1), device='cuda', dtype=torch.float16)
        buf3230 = reinterpret_tensor(buf3229, (4, 12), (12, 1)); del buf3229  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_172.run(buf3230, buf3228, 48, 48, grid=grid(48), stream=stream0)
        del buf3228
        buf3231 = empty_strided((3, 2048, 4, 12), (98304, 48, 12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_173.run(buf3221, buf3222, buf3224, buf3226, buf3231, 294912, grid=grid(294912), stream=stream0)
        buf3232 = empty_strided((48, 48), (48, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3231, (48, 6144), (1, 48), 0), view_382, out=buf3232)
        del view_382
        buf3233 = reinterpret_tensor(buf3221, (6144, 48), (48, 1)); del buf3221  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3231, (6144, 48), (48, 1), 0), permute_1053, out=buf3233)
        del buf3231
        del permute_1053
        buf3234 = reinterpret_tensor(buf3233, (3, 2048, 48), (98304, 48, 1)); del buf3233  # reuse
        # Source Nodes: [l__mod___dynamic_dense_10_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_174.run(buf3234, mm_97, 294912, grid=grid(294912), stream=stream0)
        del mm_97
        buf3235 = empty_strided((48, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3234, (48, 6144), (1, 48), 0), view_380, out=buf3235)
        del view_380
        buf3236 = buf3150; del buf3150  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3234, (6144, 48), (48, 1), 0), permute_1057, out=buf3236)
        del buf3234
        del permute_1057
        buf3238 = buf3084; del buf3084  # reuse
        # Source Nodes: [add_242], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf3238, buf3236, buf384, buf390, rsqrt_52, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3236
        del rsqrt_52
        buf3239 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3238, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf389, (6144, 5632), (5632, 1), 0), out=buf3239)
        buf3240 = reinterpret_tensor(buf389, (6144, 5632), (5632, 1)); del buf389  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3238, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_183, (2048, 5632), (5632, 1), 0), out=buf3240)
        del permute_183
        buf3241 = buf3126; del buf3126  # reuse
        buf3244 = reinterpret_tensor(buf388, (3, 2048, 5632), (11534336, 5632, 1)); del buf388  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3244, buf3240, buf387, buf3241, 34603008, grid=grid(34603008), stream=stream0)
        del buf3240
        del buf387
        buf3242 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3241, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf386, (6144, 2048), (2048, 1), 0), out=buf3242)
        buf3243 = buf390; del buf390  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3241, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_182, (5632, 2048), (2048, 1), 0), out=buf3243)
        del buf3241
        del permute_182
        buf3245 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3244, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf386, (6144, 2048), (2048, 1), 0), out=buf3245)
        buf3246 = reinterpret_tensor(buf386, (6144, 2048), (2048, 1)); del buf386  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3244, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_181, (5632, 2048), (2048, 1), 0), out=buf3246)
        del permute_181
        buf3247 = buf3159; del buf3159  # reuse
        # Source Nodes: [add_241, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3243, buf3246, buf384, buf385, buf3247, 98304, 128, grid=grid(98304), stream=stream0)
        buf3248 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_241, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3247, buf3248, 2048, 48, grid=grid(2048), stream=stream0)
        buf3250 = buf3238; del buf3238  # reuse
        # Source Nodes: [add_241, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3250, buf3243, buf3246, primals_126, buf384, buf385, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3243
        del buf3246
        del buf385
        del primals_126
        buf3251 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3250, (2048, 6144), (1, 2048), 0), buf379, out=buf3251)
        buf3252 = buf379; del buf379  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3250, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_180, (2048, 2048), (2048, 1), 0), out=buf3252)
        del permute_180
        buf3253 = reinterpret_tensor(buf384, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf384  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3252, buf3253, 12582912, grid=grid(12582912), stream=stream0)
        buf3254 = reinterpret_tensor(buf3252, (48, 2048, 128), (262144, 128, 1)); del buf3252  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf369, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3253, (48, 2048, 128), (262144, 128, 1), 0), out=buf3254)
        buf3255 = reinterpret_tensor(buf3139, (48, 2048, 2048), (4194304, 2048, 1)); del buf3139  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3253, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf377, (48, 128, 2048), (262144, 1, 128), 0), out=buf3255)
        buf3257 = buf506; del buf506  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward14')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3255, buf369, slice_3, buf3257, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf3255
        buf3258 = reinterpret_tensor(buf377, (48, 128, 2048), (262144, 2048, 1)); del buf377  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf364, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3257, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3258)
        buf3259 = reinterpret_tensor(buf364, (48, 2048, 128), (262144, 128, 1)); del buf364  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3257, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf365, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3259)
        buf3260 = reinterpret_tensor(buf365, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf365  # reuse
        buf3261 = reinterpret_tensor(buf3253, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf3253  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3258, select_3, select_1, buf3259, buf3260, buf3261, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3258
        buf3262 = reinterpret_tensor(buf3259, (6144, 2048), (2048, 1)); del buf3259  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3254, buf3262, 12582912, grid=grid(12582912), stream=stream0)
        del buf3254
        buf3263 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3262, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf375, (6144, 2048), (2048, 1), 0), out=buf3263)
        buf3264 = reinterpret_tensor(buf375, (6144, 2048), (2048, 1)); del buf375  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3262, reinterpret_tensor(permute_172, (2048, 2048), (2048, 1), 0), out=buf3264)
        del buf3262
        del permute_172
        buf3265 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3260, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf349, (6144, 2048), (2048, 1), 0), out=buf3265)
        buf3266 = reinterpret_tensor(buf349, (6144, 2048), (2048, 1)); del buf349  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3260, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_171, (2048, 2048), (2048, 1), 0), out=buf3266)
        del buf3260
        del permute_171
        buf3267 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3261, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf359, (6144, 2048), (2048, 1), 0), out=buf3267)
        buf3268 = reinterpret_tensor(buf359, (6144, 2048), (2048, 1)); del buf359  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3261, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_170, (2048, 2048), (2048, 1), 0), out=buf3268)
        del buf3261
        del permute_170
        buf3269 = buf3247; del buf3247  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf3264, buf374, buf3269, 98304, 128, grid=grid(98304), stream=stream0)
        del buf374
        buf3270 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3269, buf3270, 2048, 48, grid=grid(2048), stream=stream0)
        buf3281 = buf3226; del buf3226  # reuse
        buf3272 = buf494; del buf494  # reuse
        buf3276 = buf484; del buf484  # reuse
        buf3306 = buf3207; del buf3207  # reuse
        buf3309 = buf3209; del buf3209  # reuse
        buf3311 = buf3211; del buf3211  # reuse
        buf3313 = buf3214; del buf3214  # reuse
        buf3315 = buf3216; del buf3216  # reuse
        buf3318 = buf3218; del buf3218  # reuse
        buf3320 = buf3220; del buf3220  # reuse
        buf3322 = buf3223; del buf3223  # reuse
        buf3324 = buf3225; del buf3225  # reuse
        buf3327 = buf3227; del buf3227  # reuse
        buf3280 = buf510; del buf510  # reuse
        buf3284 = buf3224; del buf3224  # reuse
        buf3285 = buf3222; del buf3222  # reuse
        buf3282 = buf3219; del buf3219  # reuse
        buf3288 = buf3217; del buf3217  # reuse
        buf3290 = buf3215; del buf3215  # reuse
        buf3283 = buf3213; del buf3213  # reuse
        buf3287 = buf3210; del buf3210  # reuse
        buf3289 = buf3208; del buf3208  # reuse
        buf3293 = buf3206; del buf3206  # reuse
        buf3294 = buf3204; del buf3204  # reuse
        buf3295 = buf3202; del buf3202  # reuse
        buf3297 = buf3201; del buf3201  # reuse
        buf3298 = buf3200; del buf3200  # reuse
        buf3299 = buf3199; del buf3199  # reuse
        buf3300 = buf3197; del buf3197  # reuse
        buf3302 = buf3196; del buf3196  # reuse
        buf3303 = buf3195; del buf3195  # reuse
        buf3304 = buf3194; del buf3194  # reuse
        buf3305 = buf3192; del buf3192  # reuse
        buf3308 = buf3191; del buf3191  # reuse
        buf3310 = buf3190; del buf3190  # reuse
        buf3312 = buf3189; del buf3189  # reuse
        buf3314 = buf3187; del buf3187  # reuse
        buf3317 = buf3186; del buf3186  # reuse
        buf3319 = buf3185; del buf3185  # reuse
        buf3321 = buf3184; del buf3184  # reuse
        buf3323 = buf3182; del buf3182  # reuse
        buf3326 = buf3181; del buf3181  # reuse
        buf3328 = buf3180; del buf3180  # reuse
        buf3329 = buf3179; del buf3179  # reuse
        buf3330 = buf3177; del buf3177  # reuse
        buf3332 = buf3176; del buf3176  # reuse
        buf3333 = buf3175; del buf3175  # reuse
        buf3334 = buf3174; del buf3174  # reuse
        buf3335 = buf3172; del buf3172  # reuse
        buf3337 = buf3171; del buf3171  # reuse
        buf3338 = buf3170; del buf3170  # reuse
        buf3339 = buf3169; del buf3169  # reuse
        buf3292 = buf3167; del buf3167  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_162, add_20, add_209, add_219, add_220, add_229, add_230, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_199, mul_209, mul_219, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_175.run(buf3306, buf3309, buf3311, buf3313, buf3315, buf3318, buf3320, buf3322, buf3324, buf3327, buf3264, primals_121, buf372, unsqueeze_271, buf294, buf300, buf3266, primals_120, buf346, unsqueeze_261, buf3268, primals_119, buf356, unsqueeze_251, buf3250, buf373, buf347, unsqueeze_281, unsqueeze_280, unsqueeze_270, unsqueeze_260, unsqueeze_279, unsqueeze_269, unsqueeze_259, unsqueeze_278, unsqueeze_268, unsqueeze_258, unsqueeze_277, unsqueeze_267, unsqueeze_257, unsqueeze_276, unsqueeze_266, unsqueeze_256, unsqueeze_275, unsqueeze_265, unsqueeze_255, unsqueeze_274, unsqueeze_264, unsqueeze_254, unsqueeze_273, unsqueeze_263, unsqueeze_253, unsqueeze_272, unsqueeze_262, unsqueeze_252, buf357, buf251, buf257, buf138, buf144, buf337, buf343, buf68, buf74, embedding, buf33, buf39, buf212, buf210, buf218, buf173, buf172, buf179, unsqueeze_11, buf99, buf105, buf3281, buf3272, buf3276, buf3280, buf3284, buf3285, buf3282, buf3288, buf3290, buf3283, buf3287, buf3289, buf3293, buf3294, buf3295, buf3297, buf3298, buf3299, buf3300, buf3302, buf3303, buf3304, buf3305, buf3308, buf3310, buf3312, buf3314, buf3317, buf3319, buf3321, buf3323, buf3326, buf3328, buf3329, buf3330, buf3332, buf3333, buf3334, buf3335, buf3337, buf3338, buf3339, buf3292, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3250
        del buf3264
        del buf3272
        del buf3276
        del buf346
        del buf347
        del buf356
        del buf372
        del buf373
        del primals_120
        del primals_121
        del unsqueeze_252
        del unsqueeze_253
        del unsqueeze_254
        del unsqueeze_255
        del unsqueeze_256
        del unsqueeze_257
        del unsqueeze_258
        del unsqueeze_259
        del unsqueeze_260
        del unsqueeze_261
        del unsqueeze_262
        del unsqueeze_263
        del unsqueeze_264
        del unsqueeze_265
        del unsqueeze_266
        del unsqueeze_267
        del unsqueeze_268
        del unsqueeze_269
        del unsqueeze_270
        del unsqueeze_271
        del unsqueeze_272
        del unsqueeze_273
        del unsqueeze_274
        del unsqueeze_275
        del unsqueeze_276
        del unsqueeze_277
        del unsqueeze_278
        del unsqueeze_279
        del unsqueeze_280
        del unsqueeze_281
        buf3273 = buf3269; del buf3269  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf3266, buf348, buf3273, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3266
        del buf348
        buf3274 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3273, buf3274, 2048, 48, grid=grid(2048), stream=stream0)
        buf3277 = buf3273; del buf3273  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf3268, buf358, buf3277, 98304, 128, grid=grid(98304), stream=stream0)
        buf3278 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3277, buf3278, 2048, 48, grid=grid(2048), stream=stream0)
        buf3286 = empty_strided((4, 3, 2048, 11), (67584, 22528, 11, 1), device='cuda', dtype=torch.float16)
        buf3291 = buf3286; del buf3286  # reuse
        buf3296 = buf3291; del buf3291  # reuse
        buf3301 = buf3296; del buf3296  # reuse
        buf3307 = buf3301; del buf3301  # reuse
        buf3316 = buf3307; del buf3307  # reuse
        buf3325 = buf3316; del buf3316  # reuse
        buf3331 = buf3325; del buf3325  # reuse
        buf3336 = buf3331; del buf3331  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_176.run(buf3336, buf3281, buf3282, buf3283, buf3284, buf3285, buf3287, buf3288, buf3289, buf3290, buf3292, buf3293, buf3294, buf3295, buf3297, buf3298, buf3299, buf3300, buf3302, buf3303, buf3304, buf3305, buf3308, buf3310, buf3312, buf3314, buf3317, buf3319, buf3321, buf3323, buf3326, buf3328, buf3329, buf3330, buf3332, buf3333, buf3334, buf3335, 270336, grid=grid(270336), stream=stream0)
        del buf3281
        del buf3282
        del buf3283
        del buf3284
        buf3340 = empty_strided((4, 1, 1, 11, 48), (528, 2112, 2112, 1, 11), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_177.run(buf3336, buf3337, buf3338, buf3339, buf3340, 2112, 128, grid=grid(2112), stream=stream0)
        buf3341 = empty_strided((4, 1, 1, 11), (11, 44, 44, 1), device='cuda', dtype=torch.float16)
        buf3342 = reinterpret_tensor(buf3341, (4, 11), (11, 1)); del buf3341  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_178.run(buf3342, buf3340, 44, 48, grid=grid(44), stream=stream0)
        del buf3340
        buf3343 = empty_strided((3, 2048, 4, 11), (90112, 44, 11, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_179.run(buf3336, buf3337, buf3338, buf3339, buf3343, 270336, grid=grid(270336), stream=stream0)
        buf3344 = empty_strided((44, 44), (44, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3343, (44, 6144), (1, 44), 0), view_347, out=buf3344)
        del view_347
        buf3345 = reinterpret_tensor(buf3336, (6144, 44), (44, 1)); del buf3336  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3343, (6144, 44), (44, 1), 0), permute_1102, out=buf3345)
        del buf3343
        del permute_1102
        buf3346 = reinterpret_tensor(buf3345, (3, 2048, 44), (90112, 44, 1)); del buf3345  # reuse
        # Source Nodes: [l__mod___dynamic_dense_9_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_180.run(buf3346, mm_88, 270336, grid=grid(270336), stream=stream0)
        del mm_88
        buf3347 = empty_strided((44, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3346, (44, 6144), (1, 44), 0), view_345, out=buf3347)
        del view_345
        buf3348 = reinterpret_tensor(buf358, (6144, 2048), (2048, 1)); del buf358  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3346, (6144, 44), (44, 1), 0), permute_1106, out=buf3348)
        del buf3346
        del permute_1106
        buf3350 = buf3205; del buf3205  # reuse
        # Source Nodes: [add_198, add_200], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_86.run(buf3350, buf3348, buf427, buf424, buf433, rsqrt_47, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3348
        del rsqrt_47
        buf3351 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3350, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf432, (6144, 5632), (5632, 1), 0), out=buf3351)
        buf3352 = reinterpret_tensor(buf432, (6144, 5632), (5632, 1)); del buf432  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3350, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_166, (2048, 5632), (5632, 1), 0), out=buf3352)
        del permute_166
        buf3353 = buf3244; del buf3244  # reuse
        buf3356 = reinterpret_tensor(buf431, (3, 2048, 5632), (11534336, 5632, 1)); del buf431  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3356, buf3352, buf430, buf3353, 34603008, grid=grid(34603008), stream=stream0)
        del buf3352
        del buf430
        buf3354 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3353, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf429, (6144, 2048), (2048, 1), 0), out=buf3354)
        buf3355 = buf433; del buf433  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3353, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_165, (5632, 2048), (2048, 1), 0), out=buf3355)
        del buf3353
        del permute_165
        buf3357 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3356, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf429, (6144, 2048), (2048, 1), 0), out=buf3357)
        buf3358 = reinterpret_tensor(buf429, (6144, 2048), (2048, 1)); del buf429  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3356, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_164, (5632, 2048), (2048, 1), 0), out=buf3358)
        del permute_164
        buf3359 = buf3277; del buf3277  # reuse
        # Source Nodes: [add_198, add_199, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf3355, buf3358, buf427, buf424, buf428, buf3359, 98304, 128, grid=grid(98304), stream=stream0)
        buf3360 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_198, add_199, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3359, buf3360, 2048, 48, grid=grid(2048), stream=stream0)
        buf3363 = buf3350; del buf3350  # reuse
        # Source Nodes: [add_198, add_199, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf3363, buf3355, buf3358, primals_114, buf427, buf424, buf428, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3355
        del buf3358
        del buf424
        del buf428
        del primals_114
        buf3364 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3363, (2048, 6144), (1, 2048), 0), buf423, out=buf3364)
        buf3365 = buf423; del buf423  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3363, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_163, (2048, 2048), (2048, 1), 0), out=buf3365)
        del permute_163
        buf3366 = reinterpret_tensor(buf427, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf427  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3365, buf3366, 12582912, grid=grid(12582912), stream=stream0)
        buf3367 = reinterpret_tensor(buf3365, (48, 2048, 128), (262144, 128, 1)); del buf3365  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf414, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3366, (48, 2048, 128), (262144, 128, 1), 0), out=buf3367)
        buf3368 = reinterpret_tensor(buf3257, (48, 2048, 2048), (4194304, 2048, 1)); del buf3257  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3366, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf421, (48, 128, 2048), (262144, 1, 128), 0), out=buf3368)
        buf3370 = buf369; del buf369  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward15')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3368, buf414, slice_3, buf3370, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf3368
        buf3371 = reinterpret_tensor(buf421, (48, 128, 2048), (262144, 2048, 1)); del buf421  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf409, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3370, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3371)
        buf3372 = reinterpret_tensor(buf409, (48, 2048, 128), (262144, 128, 1)); del buf409  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3370, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf410, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3372)
        buf3373 = reinterpret_tensor(buf410, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf410  # reuse
        buf3374 = reinterpret_tensor(buf3366, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf3366  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3371, select_3, select_1, buf3372, buf3373, buf3374, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3371
        buf3375 = reinterpret_tensor(buf3372, (6144, 2048), (2048, 1)); del buf3372  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3367, buf3375, 12582912, grid=grid(12582912), stream=stream0)
        del buf3367
        buf3376 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3375, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf419, (6144, 2048), (2048, 1), 0), out=buf3376)
        buf3377 = reinterpret_tensor(buf419, (6144, 2048), (2048, 1)); del buf419  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3375, reinterpret_tensor(permute_155, (2048, 2048), (2048, 1), 0), out=buf3377)
        del permute_155
        buf3378 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3373, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf395, (6144, 2048), (2048, 1), 0), out=buf3378)
        buf3379 = reinterpret_tensor(buf395, (6144, 2048), (2048, 1)); del buf395  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3373, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_154, (2048, 2048), (2048, 1), 0), out=buf3379)
        del permute_154
        buf3380 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3374, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf404, (6144, 2048), (2048, 1), 0), out=buf3380)
        buf3381 = reinterpret_tensor(buf404, (6144, 2048), (2048, 1)); del buf404  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3374, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_153, (2048, 2048), (2048, 1), 0), out=buf3381)
        del permute_153
        buf3382 = buf3359; del buf3359  # reuse
        # Source Nodes: [add_189, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf3377, buf417, buf418, buf3382, 98304, 128, grid=grid(98304), stream=stream0)
        buf3383 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_189, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3382, buf3383, 2048, 48, grid=grid(2048), stream=stream0)
        buf3393 = reinterpret_tensor(buf3374, (3, 2048, 2048), (4194304, 2048, 1)); del buf3374  # reuse
        buf3389 = reinterpret_tensor(buf3373, (3, 2048, 2048), (4194304, 2048, 1)); del buf3373  # reuse
        buf3385 = reinterpret_tensor(buf3375, (3, 2048, 2048), (4194304, 2048, 1)); del buf3375  # reuse
        buf3394 = buf3339; del buf3339  # reuse
        buf3405 = buf3338; del buf3338  # reuse
        buf3425 = buf3337; del buf3337  # reuse
        buf3436 = buf3335; del buf3335  # reuse
        buf3395 = buf3334; del buf3334  # reuse
        buf3407 = buf3333; del buf3333  # reuse
        buf3426 = buf3332; del buf3332  # reuse
        buf3437 = buf3330; del buf3330  # reuse
        buf3396 = buf3329; del buf3329  # reuse
        buf3409 = buf3328; del buf3328  # reuse
        buf3427 = buf3326; del buf3326  # reuse
        buf3439 = buf3323; del buf3323  # reuse
        buf3397 = buf3321; del buf3321  # reuse
        buf3411 = buf3319; del buf3319  # reuse
        buf3429 = buf3317; del buf3317  # reuse
        buf3440 = buf3314; del buf3314  # reuse
        buf3398 = buf3312; del buf3312  # reuse
        buf3414 = buf3310; del buf3310  # reuse
        buf3430 = buf3308; del buf3308  # reuse
        buf3441 = buf3305; del buf3305  # reuse
        buf3400 = buf3304; del buf3304  # reuse
        buf3416 = buf3303; del buf3303  # reuse
        buf3431 = buf3302; del buf3302  # reuse
        buf3442 = buf3300; del buf3300  # reuse
        buf3401 = buf3299; del buf3299  # reuse
        buf3418 = buf3298; del buf3298  # reuse
        buf3432 = buf3297; del buf3297  # reuse
        buf3444 = buf3295; del buf3295  # reuse
        buf3402 = buf3294; del buf3294  # reuse
        buf3420 = buf3293; del buf3293  # reuse
        buf3434 = buf3292; del buf3292  # reuse
        buf3445 = buf3290; del buf3290  # reuse
        buf3403 = buf3289; del buf3289  # reuse
        buf3435 = buf3288; del buf3288  # reuse
        buf3446 = buf3287; del buf3287  # reuse
        buf3423 = buf3285; del buf3285  # reuse
        # Source Nodes: [add, add_10, add_12, add_128, add_180, add_189, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_181.run(buf3381, primals_107, buf402, buf403, buf3379, primals_108, buf393, buf394, buf3377, primals_109, buf417, buf418, buf3363, buf337, buf343, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3393, buf3389, buf3385, buf3394, buf3405, buf3425, buf3436, buf3395, buf3407, buf3426, buf3437, buf3396, buf3409, buf3427, buf3439, buf3397, buf3411, buf3429, buf3440, buf3398, buf3414, buf3430, buf3441, buf3400, buf3416, buf3431, buf3442, buf3401, buf3418, buf3432, buf3444, buf3402, buf3420, buf3434, buf3445, buf3403, buf3435, buf3446, buf3423, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3377
        del buf417
        del buf418
        del primals_107
        del primals_108
        del primals_109
        buf3386 = buf3382; del buf3382  # reuse
        # Source Nodes: [add_180, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3379, buf393, buf394, buf3386, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3379
        del buf393
        del buf394
        buf3387 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_180, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3386, buf3387, 2048, 48, grid=grid(2048), stream=stream0)
        buf3390 = buf3386; del buf3386  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3381, buf402, buf403, buf3390, 98304, 128, grid=grid(98304), stream=stream0)
        del buf3381
        del buf403
        buf3391 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3390, buf3391, 2048, 48, grid=grid(2048), stream=stream0)
        buf3399 = empty_strided((4, 3, 2048, 10), (61440, 20480, 10, 1), device='cuda', dtype=torch.float16)
        buf3404 = buf3399; del buf3399  # reuse
        buf3413 = buf3404; del buf3404  # reuse
        buf3422 = buf3413; del buf3413  # reuse
        buf3428 = buf3422; del buf3422  # reuse
        buf3433 = buf3428; del buf3428  # reuse
        buf3438 = buf3433; del buf3433  # reuse
        buf3443 = buf3438; del buf3438  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_182.run(buf3443, buf3394, buf3395, buf3396, buf3397, buf3398, buf3400, buf3401, buf3402, buf3403, buf3405, buf3407, buf3409, buf3411, buf3414, buf3416, buf3418, buf3420, buf3423, buf3425, buf3426, buf3427, buf3429, buf3430, buf3431, buf3432, buf3434, buf3435, buf3436, buf3437, buf3439, buf3440, buf3441, buf3442, 245760, grid=grid(245760), stream=stream0)
        del buf3394
        del buf3395
        del buf3396
        del buf3397
        buf3450 = empty_strided((3, 2048, 4, 10), (81920, 40, 10, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_183.run(buf3443, buf3444, buf3445, buf3446, buf3450, 245760, grid=grid(245760), stream=stream0)
        buf3452 = empty_strided((6144, 40), (40, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3450, (6144, 40), (40, 1), 0), permute_1151, out=buf3452)
        del permute_1151
        buf3453 = reinterpret_tensor(buf3452, (3, 2048, 40), (81920, 40, 1)); del buf3452  # reuse
        # Source Nodes: [l__mod___dynamic_dense_8_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_184.run(buf3453, mm_79, 245760, grid=grid(245760), stream=stream0)
        del mm_79
        buf3455 = reinterpret_tensor(buf402, (6144, 2048), (2048, 1)); del buf402  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3453, (6144, 40), (40, 1), 0), permute_1155, out=buf3455)
        del permute_1155
        buf3406 = buf3309; del buf3309  # reuse
        buf3408 = buf3311; del buf3311  # reuse
        buf3410 = buf3313; del buf3313  # reuse
        buf3412 = buf3315; del buf3315  # reuse
        buf3415 = buf3318; del buf3318  # reuse
        buf3417 = buf3320; del buf3320  # reuse
        buf3419 = buf3322; del buf3322  # reuse
        buf3421 = buf3324; del buf3324  # reuse
        buf3424 = buf3327; del buf3327  # reuse
        buf3457 = buf3306; del buf3306  # reuse
        # Source Nodes: [add, add_162, add_209, float_1, mean, mul, mul_199, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_185.run(buf3406, buf3408, buf3410, buf3412, buf3415, buf3417, buf3419, buf3421, buf3424, buf3457, buf3455, buf294, buf300, buf3268, primals_119, buf357, buf3280, unsqueeze_250, buf3363, unsqueeze_235, buf3385, unsqueeze_226, unsqueeze_249, unsqueeze_234, unsqueeze_225, unsqueeze_248, unsqueeze_233, unsqueeze_224, unsqueeze_247, unsqueeze_232, unsqueeze_223, unsqueeze_246, unsqueeze_231, unsqueeze_222, unsqueeze_245, unsqueeze_230, unsqueeze_221, unsqueeze_244, unsqueeze_229, unsqueeze_220, unsqueeze_243, unsqueeze_228, unsqueeze_219, unsqueeze_242, unsqueeze_227, unsqueeze_218, unsqueeze_251, rsqrt_42, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf300
        del buf3268
        del buf3280
        del buf3363
        del buf3385
        del buf357
        del primals_119
        del rsqrt_42
        del unsqueeze_218
        del unsqueeze_219
        del unsqueeze_220
        del unsqueeze_221
        del unsqueeze_222
        del unsqueeze_223
        del unsqueeze_224
        del unsqueeze_225
        del unsqueeze_226
        del unsqueeze_227
        del unsqueeze_228
        del unsqueeze_229
        del unsqueeze_230
        del unsqueeze_231
        del unsqueeze_232
        del unsqueeze_233
        del unsqueeze_234
        del unsqueeze_235
        del unsqueeze_242
        del unsqueeze_243
        del unsqueeze_244
        del unsqueeze_245
        del unsqueeze_246
        del unsqueeze_247
        del unsqueeze_248
        del unsqueeze_249
        del unsqueeze_250
        del unsqueeze_251
        buf3447 = empty_strided((4, 1, 1, 10, 48), (480, 1920, 1920, 1, 10), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_186.run(buf3443, buf3444, buf3445, buf3446, buf3447, 1920, 128, grid=grid(1920), stream=stream0)
        del buf3443
        buf3448 = empty_strided((4, 1, 1, 10), (10, 40, 40, 1), device='cuda', dtype=torch.float16)
        buf3449 = reinterpret_tensor(buf3448, (4, 10), (10, 1)); del buf3448  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_187.run(buf3449, buf3447, 40, 48, grid=grid(40), stream=stream0)
        del buf3447
        buf3451 = empty_strided((40, 40), (40, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3450, (40, 6144), (1, 40), 0), view_312, out=buf3451)
        del buf3450
        del view_312
        buf3454 = empty_strided((40, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3453, (40, 6144), (1, 40), 0), view_310, out=buf3454)
        del buf3453
        del view_310
        buf3458 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3457, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf299, (6144, 5632), (5632, 1), 0), out=buf3458)
        buf3459 = reinterpret_tensor(buf299, (6144, 5632), (5632, 1)); del buf299  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3457, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_149, (2048, 5632), (5632, 1), 0), out=buf3459)
        del permute_149
        buf3460 = buf3356; del buf3356  # reuse
        buf3463 = reinterpret_tensor(buf298, (3, 2048, 5632), (11534336, 5632, 1)); del buf298  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3463, buf3459, buf297, buf3460, 34603008, grid=grid(34603008), stream=stream0)
        del buf297
        del buf3459
        buf3461 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3460, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf296, (6144, 2048), (2048, 1), 0), out=buf3461)
        buf3462 = buf3455; del buf3455  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3460, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_148, (5632, 2048), (2048, 1), 0), out=buf3462)
        del buf3460
        del permute_148
        buf3464 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3463, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf296, (6144, 2048), (2048, 1), 0), out=buf3464)
        buf3465 = reinterpret_tensor(buf296, (6144, 2048), (2048, 1)); del buf296  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3463, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_147, (5632, 2048), (2048, 1), 0), out=buf3465)
        del permute_147
        buf3466 = buf3390; del buf3390  # reuse
        # Source Nodes: [add_161, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3462, buf3465, buf294, buf295, buf3466, 98304, 128, grid=grid(98304), stream=stream0)
        buf3467 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_161, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3466, buf3467, 2048, 48, grid=grid(2048), stream=stream0)
        buf3469 = buf3457; del buf3457  # reuse
        # Source Nodes: [add_161, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3469, buf3462, buf3465, primals_102, buf294, buf295, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf294
        del buf295
        del buf3462
        del primals_102
        buf3470 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3469, (2048, 6144), (1, 2048), 0), buf290, out=buf3470)
        buf3471 = buf290; del buf290  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3469, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_146, (2048, 2048), (2048, 1), 0), out=buf3471)
        del permute_146
        buf3472 = reinterpret_tensor(buf3465, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3465  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3471, buf3472, 12582912, grid=grid(12582912), stream=stream0)
        buf3473 = reinterpret_tensor(buf3471, (48, 2048, 128), (262144, 128, 1)); del buf3471  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf281, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3472, (48, 2048, 128), (262144, 128, 1), 0), out=buf3473)
        buf3474 = reinterpret_tensor(buf3370, (48, 2048, 2048), (4194304, 2048, 1)); del buf3370  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3472, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf288, (48, 128, 2048), (262144, 1, 128), 0), out=buf3474)
        buf3476 = buf414; del buf414  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward16')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3474, buf281, slice_3, buf3476, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf281
        buf3477 = reinterpret_tensor(buf3472, (48, 128, 2048), (262144, 2048, 1)); del buf3472  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf276, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3476, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3477)
        buf3478 = reinterpret_tensor(buf276, (48, 2048, 128), (262144, 128, 1)); del buf276  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3476, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf277, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3478)
        buf3479 = reinterpret_tensor(buf277, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf277  # reuse
        buf3480 = reinterpret_tensor(buf288, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf288  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3477, select_3, select_1, buf3478, buf3479, buf3480, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3477
        buf3481 = reinterpret_tensor(buf3478, (6144, 2048), (2048, 1)); del buf3478  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3473, buf3481, 12582912, grid=grid(12582912), stream=stream0)
        del buf3473
        buf3482 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3481, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf286, (6144, 2048), (2048, 1), 0), out=buf3482)
        buf3483 = reinterpret_tensor(buf286, (6144, 2048), (2048, 1)); del buf286  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3481, reinterpret_tensor(permute_138, (2048, 2048), (2048, 1), 0), out=buf3483)
        del permute_138
        buf3484 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3479, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf262, (6144, 2048), (2048, 1), 0), out=buf3484)
        buf3485 = reinterpret_tensor(buf262, (6144, 2048), (2048, 1)); del buf262  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3479, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_137, (2048, 2048), (2048, 1), 0), out=buf3485)
        del permute_137
        buf3486 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3480, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf271, (6144, 2048), (2048, 1), 0), out=buf3486)
        buf3487 = reinterpret_tensor(buf271, (6144, 2048), (2048, 1)); del buf271  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3480, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_136, (2048, 2048), (2048, 1), 0), out=buf3487)
        del permute_136
        buf3488 = buf3466; del buf3466  # reuse
        # Source Nodes: [add_152, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf3483, buf284, buf285, buf3488, 98304, 128, grid=grid(98304), stream=stream0)
        buf3489 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_152, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3488, buf3489, 2048, 48, grid=grid(2048), stream=stream0)
        buf3499 = reinterpret_tensor(buf3480, (3, 2048, 2048), (4194304, 2048, 1)); del buf3480  # reuse
        buf3495 = reinterpret_tensor(buf3479, (3, 2048, 2048), (4194304, 2048, 1)); del buf3479  # reuse
        buf3491 = reinterpret_tensor(buf3481, (3, 2048, 2048), (4194304, 2048, 1)); del buf3481  # reuse
        buf3500 = buf3446; del buf3446  # reuse
        buf3509 = buf3445; del buf3445  # reuse
        buf3527 = buf3444; del buf3444  # reuse
        buf3537 = buf3442; del buf3442  # reuse
        buf3501 = buf3441; del buf3441  # reuse
        buf3512 = buf3440; del buf3440  # reuse
        buf3529 = buf3439; del buf3439  # reuse
        buf3539 = buf3437; del buf3437  # reuse
        buf3502 = buf3436; del buf3436  # reuse
        buf3514 = buf3435; del buf3435  # reuse
        buf3530 = buf3434; del buf3434  # reuse
        buf3540 = buf3432; del buf3432  # reuse
        buf3503 = buf3431; del buf3431  # reuse
        buf3516 = buf3430; del buf3430  # reuse
        buf3531 = buf3429; del buf3429  # reuse
        buf3541 = buf3427; del buf3427  # reuse
        buf3504 = buf3426; del buf3426  # reuse
        buf3518 = buf3425; del buf3425  # reuse
        buf3532 = buf3423; del buf3423  # reuse
        buf3542 = buf3420; del buf3420  # reuse
        buf3506 = buf3418; del buf3418  # reuse
        buf3521 = buf3416; del buf3416  # reuse
        buf3534 = buf3414; del buf3414  # reuse
        buf3544 = buf3411; del buf3411  # reuse
        buf3507 = buf3409; del buf3409  # reuse
        buf3523 = buf3407; del buf3407  # reuse
        buf3535 = buf3405; del buf3405  # reuse
        buf3545 = buf3403; del buf3403  # reuse
        buf3508 = buf3402; del buf3402  # reuse
        buf3536 = buf3401; del buf3401  # reuse
        buf3546 = buf3400; del buf3400  # reuse
        buf3525 = buf3398; del buf3398  # reuse
        # Source Nodes: [add, add_10, add_12, add_144, add_152, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_96, add_98, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_188.run(buf3487, primals_95, buf269, buf270, buf3485, primals_96, buf260, buf261, buf3483, primals_97, buf284, buf285, buf3469, buf212, buf210, buf218, buf251, buf257, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3499, buf3495, buf3491, buf3500, buf3509, buf3527, buf3537, buf3501, buf3512, buf3529, buf3539, buf3502, buf3514, buf3530, buf3540, buf3503, buf3516, buf3531, buf3541, buf3504, buf3518, buf3532, buf3542, buf3506, buf3521, buf3534, buf3544, buf3507, buf3523, buf3535, buf3545, buf3508, buf3536, buf3546, buf3525, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf285
        del buf3483
        del primals_95
        del primals_96
        del primals_97
        buf3492 = buf3488; del buf3488  # reuse
        # Source Nodes: [add_144, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3485, buf260, buf261, buf3492, 98304, 128, grid=grid(98304), stream=stream0)
        del buf261
        del buf3485
        buf3493 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_144, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3492, buf3493, 2048, 48, grid=grid(2048), stream=stream0)
        buf3496 = buf3492; del buf3492  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3487, buf269, buf270, buf3496, 98304, 128, grid=grid(98304), stream=stream0)
        del buf270
        buf3497 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3496, buf3497, 2048, 48, grid=grid(2048), stream=stream0)
        buf3505 = empty_strided((4, 3, 2048, 9), (55296, 18432, 9, 1), device='cuda', dtype=torch.float16)
        buf3511 = buf3505; del buf3505  # reuse
        buf3520 = buf3511; del buf3511  # reuse
        buf3528 = buf3520; del buf3520  # reuse
        buf3533 = buf3528; del buf3528  # reuse
        buf3538 = buf3533; del buf3533  # reuse
        buf3543 = buf3538; del buf3538  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_189.run(buf3543, buf3500, buf3501, buf3502, buf3503, buf3504, buf3506, buf3507, buf3508, buf3509, buf3512, buf3514, buf3516, buf3518, buf3521, buf3523, buf3525, buf3527, buf3529, buf3530, buf3531, buf3532, buf3534, buf3535, buf3536, buf3537, buf3539, buf3540, buf3541, buf3542, 221184, grid=grid(221184), stream=stream0)
        del buf3500
        del buf3501
        del buf3502
        del buf3503
        buf3550 = empty_strided((3, 2048, 4, 9), (73728, 36, 9, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_190.run(buf3543, buf3544, buf3545, buf3546, buf3550, 221184, grid=grid(221184), stream=stream0)
        buf3552 = empty_strided((6144, 36), (36, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3550, (6144, 36), (36, 1), 0), permute_1200, out=buf3552)
        del permute_1200
        buf3553 = reinterpret_tensor(buf3552, (3, 2048, 36), (73728, 36, 1)); del buf3552  # reuse
        # Source Nodes: [l__mod___dynamic_dense_7_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_191.run(buf3553, mm_70, 221184, grid=grid(221184), stream=stream0)
        del mm_70
        buf3555 = buf3487; del buf3487  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3553, (6144, 36), (36, 1), 0), permute_1204, out=buf3555)
        del permute_1204
        buf3510 = buf3408; del buf3408  # reuse
        buf3513 = buf3410; del buf3410  # reuse
        buf3515 = buf3412; del buf3412  # reuse
        buf3517 = buf3415; del buf3415  # reuse
        buf3519 = buf3417; del buf3417  # reuse
        buf3522 = buf3419; del buf3419  # reuse
        buf3524 = buf3421; del buf3421  # reuse
        buf3526 = buf3424; del buf3424  # reuse
        buf3557 = buf3406; del buf3406  # reuse
        # Source Nodes: [add_128], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_192.run(buf3510, buf3513, buf3515, buf3517, buf3519, buf3522, buf3524, buf3526, buf3557, buf3555, buf337, buf343, buf3389, unsqueeze_216, buf3393, unsqueeze_207, buf3469, unsqueeze_193, buf3491, unsqueeze_185, unsqueeze_215, unsqueeze_206, unsqueeze_192, unsqueeze_184, unsqueeze_214, unsqueeze_205, unsqueeze_191, unsqueeze_183, unsqueeze_213, unsqueeze_204, unsqueeze_190, unsqueeze_182, unsqueeze_212, unsqueeze_203, unsqueeze_189, unsqueeze_181, unsqueeze_211, unsqueeze_202, unsqueeze_188, unsqueeze_180, unsqueeze_210, unsqueeze_201, unsqueeze_187, unsqueeze_179, unsqueeze_209, unsqueeze_200, unsqueeze_186, unsqueeze_178, unsqueeze_217, unsqueeze_208, rsqrt_37, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3389
        del buf3393
        del buf343
        del buf3469
        del buf3491
        del rsqrt_37
        del unsqueeze_178
        del unsqueeze_179
        del unsqueeze_180
        del unsqueeze_181
        del unsqueeze_182
        del unsqueeze_183
        del unsqueeze_184
        del unsqueeze_185
        del unsqueeze_186
        del unsqueeze_187
        del unsqueeze_188
        del unsqueeze_189
        del unsqueeze_190
        del unsqueeze_191
        del unsqueeze_192
        del unsqueeze_193
        del unsqueeze_200
        del unsqueeze_201
        del unsqueeze_202
        del unsqueeze_203
        del unsqueeze_204
        del unsqueeze_205
        del unsqueeze_206
        del unsqueeze_207
        del unsqueeze_208
        del unsqueeze_209
        del unsqueeze_210
        del unsqueeze_211
        del unsqueeze_212
        del unsqueeze_213
        del unsqueeze_214
        del unsqueeze_215
        del unsqueeze_216
        del unsqueeze_217
        buf3547 = empty_strided((4, 1, 1, 9, 48), (432, 1728, 1728, 1, 9), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_193.run(buf3543, buf3544, buf3545, buf3546, buf3547, 1728, 128, grid=grid(1728), stream=stream0)
        del buf3543
        buf3548 = empty_strided((4, 1, 1, 9), (9, 36, 36, 1), device='cuda', dtype=torch.float16)
        buf3549 = reinterpret_tensor(buf3548, (4, 9), (9, 1)); del buf3548  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_194.run(buf3549, buf3547, 36, 48, grid=grid(36), stream=stream0)
        del buf3547
        buf3551 = empty_strided((36, 36), (36, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3550, (36, 6144), (1, 36), 0), view_277, out=buf3551)
        del buf3550
        del view_277
        buf3554 = empty_strided((36, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3553, (36, 6144), (1, 36), 0), view_275, out=buf3554)
        del buf3553
        del view_275
        buf3558 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3557, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf342, (6144, 5632), (5632, 1), 0), out=buf3558)
        buf3559 = reinterpret_tensor(buf342, (6144, 5632), (5632, 1)); del buf342  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3557, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_132, (2048, 5632), (5632, 1), 0), out=buf3559)
        del permute_132
        buf3560 = buf3463; del buf3463  # reuse
        buf3563 = reinterpret_tensor(buf341, (3, 2048, 5632), (11534336, 5632, 1)); del buf341  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3563, buf3559, buf340, buf3560, 34603008, grid=grid(34603008), stream=stream0)
        del buf340
        del buf3559
        buf3561 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3560, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf339, (6144, 2048), (2048, 1), 0), out=buf3561)
        buf3562 = buf3555; del buf3555  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3560, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_131, (5632, 2048), (2048, 1), 0), out=buf3562)
        del buf3560
        del permute_131
        buf3564 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3563, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf339, (6144, 2048), (2048, 1), 0), out=buf3564)
        buf3565 = reinterpret_tensor(buf339, (6144, 2048), (2048, 1)); del buf339  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3563, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_130, (5632, 2048), (2048, 1), 0), out=buf3565)
        del permute_130
        buf3566 = buf3496; del buf3496  # reuse
        # Source Nodes: [add_127, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3562, buf3565, buf337, buf338, buf3566, 98304, 128, grid=grid(98304), stream=stream0)
        buf3567 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_127, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3566, buf3567, 2048, 48, grid=grid(2048), stream=stream0)
        buf3569 = buf3557; del buf3557  # reuse
        # Source Nodes: [add_127, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3569, buf3562, buf3565, primals_90, buf337, buf338, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf337
        del buf338
        del buf3562
        del primals_90
        buf3570 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3569, (2048, 6144), (1, 2048), 0), buf333, out=buf3570)
        buf3571 = buf333; del buf333  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3569, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_129, (2048, 2048), (2048, 1), 0), out=buf3571)
        del permute_129
        buf3572 = reinterpret_tensor(buf3565, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3565  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3571, buf3572, 12582912, grid=grid(12582912), stream=stream0)
        buf3573 = reinterpret_tensor(buf3571, (48, 2048, 128), (262144, 128, 1)); del buf3571  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf324, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3572, (48, 2048, 128), (262144, 128, 1), 0), out=buf3573)
        buf3574 = reinterpret_tensor(buf3476, (48, 2048, 2048), (4194304, 2048, 1)); del buf3476  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3572, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf331, (48, 128, 2048), (262144, 1, 128), 0), out=buf3574)
        buf3576 = reinterpret_tensor(buf3474, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3474  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward17')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3574, buf324, slice_3, buf3576, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf324
        buf3577 = reinterpret_tensor(buf3572, (48, 128, 2048), (262144, 2048, 1)); del buf3572  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf319, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3576, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3577)
        buf3578 = reinterpret_tensor(buf319, (48, 2048, 128), (262144, 128, 1)); del buf319  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3576, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf320, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3578)
        buf3579 = reinterpret_tensor(buf320, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf320  # reuse
        buf3580 = reinterpret_tensor(buf331, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf331  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3577, select_3, select_1, buf3578, buf3579, buf3580, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3577
        buf3581 = reinterpret_tensor(buf3578, (6144, 2048), (2048, 1)); del buf3578  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3573, buf3581, 12582912, grid=grid(12582912), stream=stream0)
        del buf3573
        buf3582 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3581, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf329, (6144, 2048), (2048, 1), 0), out=buf3582)
        buf3583 = reinterpret_tensor(buf329, (6144, 2048), (2048, 1)); del buf329  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3581, reinterpret_tensor(permute_121, (2048, 2048), (2048, 1), 0), out=buf3583)
        del buf3581
        del permute_121
        buf3584 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3579, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf305, (6144, 2048), (2048, 1), 0), out=buf3584)
        buf3585 = reinterpret_tensor(buf305, (6144, 2048), (2048, 1)); del buf305  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3579, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_120, (2048, 2048), (2048, 1), 0), out=buf3585)
        del buf3579
        del permute_120
        buf3586 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3580, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf314, (6144, 2048), (2048, 1), 0), out=buf3586)
        buf3587 = reinterpret_tensor(buf314, (6144, 2048), (2048, 1)); del buf314  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3580, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_119, (2048, 2048), (2048, 1), 0), out=buf3587)
        del buf3580
        del permute_119
        buf3588 = buf3566; del buf3566  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf3583, buf328, buf3588, 98304, 128, grid=grid(98304), stream=stream0)
        del buf328
        buf3589 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3588, buf3589, 2048, 48, grid=grid(2048), stream=stream0)
        buf3600 = buf3546; del buf3546  # reuse
        buf3591 = buf269; del buf269  # reuse
        buf3609 = buf3513; del buf3513  # reuse
        buf3611 = buf3515; del buf3515  # reuse
        buf3614 = buf3517; del buf3517  # reuse
        buf3616 = buf3519; del buf3519  # reuse
        buf3618 = buf3522; del buf3522  # reuse
        buf3620 = buf3524; del buf3524  # reuse
        buf3623 = buf3526; del buf3526  # reuse
        buf3595 = buf260; del buf260  # reuse
        buf3599 = buf284; del buf284  # reuse
        buf3634 = buf3609; del buf3609  # reuse
        buf3636 = buf3611; del buf3611  # reuse
        buf3638 = buf3614; del buf3614  # reuse
        buf3640 = buf3616; del buf3616  # reuse
        buf3643 = buf3618; del buf3618  # reuse
        buf3645 = buf3620; del buf3620  # reuse
        buf3647 = buf3623; del buf3623  # reuse
        buf3603 = buf3545; del buf3545  # reuse
        buf3601 = buf3544; del buf3544  # reuse
        buf3606 = buf3542; del buf3542  # reuse
        buf3602 = buf3541; del buf3541  # reuse
        buf3604 = buf3540; del buf3540  # reuse
        buf3608 = buf3539; del buf3539  # reuse
        buf3610 = buf3537; del buf3537  # reuse
        buf3613 = buf3536; del buf3536  # reuse
        buf3615 = buf3535; del buf3535  # reuse
        buf3617 = buf3534; del buf3534  # reuse
        buf3619 = buf3532; del buf3532  # reuse
        buf3622 = buf3531; del buf3531  # reuse
        buf3624 = buf3530; del buf3530  # reuse
        buf3625 = buf3529; del buf3529  # reuse
        buf3626 = buf3527; del buf3527  # reuse
        buf3628 = buf3525; del buf3525  # reuse
        buf3629 = buf3523; del buf3523  # reuse
        buf3630 = buf3521; del buf3521  # reuse
        buf3631 = buf3518; del buf3518  # reuse
        buf3633 = buf3516; del buf3516  # reuse
        buf3635 = buf3514; del buf3514  # reuse
        buf3637 = buf3512; del buf3512  # reuse
        buf3639 = buf3509; del buf3509  # reuse
        buf3642 = buf3508; del buf3508  # reuse
        buf3644 = buf3507; del buf3507  # reuse
        buf3646 = buf3506; del buf3506  # reuse
        buf3607 = buf3504; del buf3504  # reuse
        # Source Nodes: [add, add_10, add_104, add_111, add_112, add_118, add_119, add_12, add_20, add_3, add_31, add_33, add_5, add_50, add_72, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_104, mul_111, mul_3, mul_4, mul_6, mul_97, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_195.run(buf3634, buf3636, buf3638, buf3640, buf3643, buf3645, buf3647, buf3583, primals_85, buf326, unsqueeze_148, buf251, buf257, buf3585, primals_84, buf302, unsqueeze_141, buf3587, primals_83, buf311, unsqueeze_134, buf3569, buf327, buf3495, unsqueeze_176, buf3499, unsqueeze_168, unsqueeze_155, unsqueeze_175, unsqueeze_167, unsqueeze_154, unsqueeze_147, unsqueeze_174, unsqueeze_166, unsqueeze_153, unsqueeze_146, unsqueeze_173, unsqueeze_165, unsqueeze_152, unsqueeze_145, unsqueeze_172, unsqueeze_164, unsqueeze_151, unsqueeze_144, unsqueeze_171, unsqueeze_163, unsqueeze_150, unsqueeze_143, unsqueeze_170, unsqueeze_162, unsqueeze_149, unsqueeze_142, buf303, buf312, unsqueeze_140, unsqueeze_133, unsqueeze_139, unsqueeze_132, unsqueeze_138, unsqueeze_131, unsqueeze_137, unsqueeze_130, unsqueeze_136, unsqueeze_129, unsqueeze_135, unsqueeze_128, buf68, buf74, buf138, buf144, embedding, buf33, buf39, buf173, buf172, buf179, unsqueeze_11, buf99, buf105, buf3600, buf3591, buf3595, buf3599, buf3603, buf3601, buf3606, buf3602, buf3604, buf3608, buf3610, buf3613, buf3615, buf3617, buf3619, buf3622, buf3624, buf3625, buf3626, buf3628, buf3629, buf3630, buf3631, buf3633, buf3635, buf3637, buf3639, buf3642, buf3644, buf3646, buf3607, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf302
        del buf303
        del buf311
        del buf312
        del buf326
        del buf327
        del buf3569
        del buf3583
        del buf3591
        del buf3595
        del buf3599
        del primals_83
        del primals_84
        del primals_85
        del unsqueeze_128
        del unsqueeze_129
        del unsqueeze_130
        del unsqueeze_131
        del unsqueeze_132
        del unsqueeze_133
        del unsqueeze_134
        del unsqueeze_135
        del unsqueeze_136
        del unsqueeze_137
        del unsqueeze_138
        del unsqueeze_139
        del unsqueeze_140
        del unsqueeze_141
        del unsqueeze_142
        del unsqueeze_143
        del unsqueeze_144
        del unsqueeze_145
        del unsqueeze_146
        del unsqueeze_147
        del unsqueeze_148
        del unsqueeze_149
        del unsqueeze_150
        del unsqueeze_151
        del unsqueeze_152
        del unsqueeze_153
        del unsqueeze_154
        del unsqueeze_155
        del unsqueeze_162
        del unsqueeze_163
        del unsqueeze_164
        del unsqueeze_165
        del unsqueeze_166
        del unsqueeze_167
        del unsqueeze_168
        del unsqueeze_170
        del unsqueeze_171
        del unsqueeze_172
        del unsqueeze_173
        del unsqueeze_174
        del unsqueeze_175
        del unsqueeze_176
        buf3592 = buf3588; del buf3588  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf3585, buf304, buf3592, 98304, 128, grid=grid(98304), stream=stream0)
        del buf304
        del buf3585
        buf3593 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3592, buf3593, 2048, 48, grid=grid(2048), stream=stream0)
        buf3596 = buf3592; del buf3592  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf3587, buf313, buf3596, 98304, 128, grid=grid(98304), stream=stream0)
        del buf313
        buf3597 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3596, buf3597, 2048, 48, grid=grid(2048), stream=stream0)
        buf3605 = empty_strided((4, 3, 2048, 8), (49152, 16384, 8, 1), device='cuda', dtype=torch.float16)
        buf3612 = buf3605; del buf3605  # reuse
        buf3621 = buf3612; del buf3612  # reuse
        buf3627 = buf3621; del buf3621  # reuse
        buf3632 = buf3627; del buf3627  # reuse
        buf3641 = buf3632; del buf3632  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_196.run(buf3641, buf3600, buf3601, buf3602, buf3603, buf3604, buf3606, buf3607, buf3608, buf3610, buf3613, buf3615, buf3617, buf3619, buf3622, buf3624, buf3625, buf3626, buf3628, buf3629, buf3630, buf3631, buf3633, buf3635, buf3637, buf3639, 196608, grid=grid(196608), stream=stream0)
        del buf3600
        del buf3601
        del buf3602
        del buf3603
        buf3648 = empty_strided((4, 1, 1, 8, 48), (384, 1536, 1536, 1, 8), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_197.run(buf3641, buf3642, buf3644, buf3646, buf3648, 1536, 128, grid=grid(1536), stream=stream0)
        buf3649 = empty_strided((4, 1, 1, 8), (8, 32, 32, 1), device='cuda', dtype=torch.float16)
        buf3650 = reinterpret_tensor(buf3649, (4, 8), (8, 1)); del buf3649  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_198.run(buf3650, buf3648, 32, 48, grid=grid(32), stream=stream0)
        del buf3648
        buf3651 = empty_strided((3, 2048, 4, 8), (65536, 32, 8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_199.run(buf3641, buf3642, buf3644, buf3646, buf3651, 196608, grid=grid(196608), stream=stream0)
        buf3652 = empty_strided((32, 32), (32, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3651, (32, 6144), (1, 32), 0), view_242, out=buf3652)
        del view_242
        buf3653 = reinterpret_tensor(buf3641, (6144, 32), (32, 1)); del buf3641  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3651, (6144, 32), (32, 1), 0), permute_1249, out=buf3653)
        del buf3651
        del permute_1249
        buf3654 = reinterpret_tensor(buf3653, (3, 2048, 32), (65536, 32, 1)); del buf3653  # reuse
        # Source Nodes: [l__mod___dynamic_dense_6_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_200.run(buf3654, mm_61, 196608, grid=grid(196608), stream=stream0)
        del mm_61
        buf3655 = empty_strided((32, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3654, (32, 6144), (1, 32), 0), view_240, out=buf3655)
        del view_240
        buf3656 = buf3587; del buf3587  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3654, (6144, 32), (32, 1), 0), permute_1253, out=buf3656)
        del buf3654
        del permute_1253
        buf3658 = buf3495; del buf3495  # reuse
        # Source Nodes: [add_96, add_98], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_201.run(buf3658, buf3656, buf212, buf210, buf218, buf3510, unsqueeze_177, buf3499, unsqueeze_169, rsqrt_32, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf218
        del buf3499
        del buf3510
        del rsqrt_32
        del unsqueeze_169
        del unsqueeze_177
        buf3659 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3658, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf217, (6144, 5632), (5632, 1), 0), out=buf3659)
        buf3660 = reinterpret_tensor(buf217, (6144, 5632), (5632, 1)); del buf217  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3658, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_115, (2048, 5632), (5632, 1), 0), out=buf3660)
        del permute_115
        buf3661 = buf3563; del buf3563  # reuse
        buf3664 = reinterpret_tensor(buf216, (3, 2048, 5632), (11534336, 5632, 1)); del buf216  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3664, buf3660, buf215, buf3661, 34603008, grid=grid(34603008), stream=stream0)
        del buf215
        del buf3660
        buf3662 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3661, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf214, (6144, 2048), (2048, 1), 0), out=buf3662)
        buf3663 = buf3656; del buf3656  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3661, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_114, (5632, 2048), (2048, 1), 0), out=buf3663)
        del buf3661
        del permute_114
        buf3665 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3664, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf214, (6144, 2048), (2048, 1), 0), out=buf3665)
        buf3666 = reinterpret_tensor(buf214, (6144, 2048), (2048, 1)); del buf214  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3664, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_113, (5632, 2048), (2048, 1), 0), out=buf3666)
        del permute_113
        buf3667 = buf3596; del buf3596  # reuse
        # Source Nodes: [add_96, add_97, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf3663, buf3666, buf212, buf210, buf213, buf3667, 98304, 128, grid=grid(98304), stream=stream0)
        buf3668 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_96, add_97, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3667, buf3668, 2048, 48, grid=grid(2048), stream=stream0)
        buf3671 = buf3658; del buf3658  # reuse
        # Source Nodes: [add_96, add_97, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf3671, buf3663, buf3666, primals_78, buf212, buf210, buf213, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf210
        del buf212
        del buf213
        del buf3663
        del primals_78
        buf3672 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3671, (2048, 6144), (1, 2048), 0), buf209, out=buf3672)
        buf3673 = buf209; del buf209  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3671, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_112, (2048, 2048), (2048, 1), 0), out=buf3673)
        del permute_112
        buf3674 = reinterpret_tensor(buf3666, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3666  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3673, buf3674, 12582912, grid=grid(12582912), stream=stream0)
        buf3675 = reinterpret_tensor(buf3673, (48, 2048, 128), (262144, 128, 1)); del buf3673  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf201, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3674, (48, 2048, 128), (262144, 128, 1), 0), out=buf3675)
        buf3676 = reinterpret_tensor(buf3576, (48, 2048, 2048), (4194304, 2048, 1)); del buf3576  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3674, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf207, (48, 128, 2048), (262144, 1, 128), 0), out=buf3676)
        buf3678 = reinterpret_tensor(buf3574, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3574  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward18')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3676, buf201, slice_3, buf3678, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf201
        buf3679 = reinterpret_tensor(buf3674, (48, 128, 2048), (262144, 2048, 1)); del buf3674  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf196, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3678, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3679)
        buf3680 = reinterpret_tensor(buf196, (48, 2048, 128), (262144, 128, 1)); del buf196  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3678, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf197, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3680)
        buf3681 = reinterpret_tensor(buf197, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf197  # reuse
        buf3682 = reinterpret_tensor(buf207, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf207  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3679, select_3, select_1, buf3680, buf3681, buf3682, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3679
        buf3683 = reinterpret_tensor(buf3680, (6144, 2048), (2048, 1)); del buf3680  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3675, buf3683, 12582912, grid=grid(12582912), stream=stream0)
        del buf3675
        buf3684 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3683, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf205, (6144, 2048), (2048, 1), 0), out=buf3684)
        buf3685 = reinterpret_tensor(buf205, (6144, 2048), (2048, 1)); del buf205  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3683, reinterpret_tensor(permute_104, (2048, 2048), (2048, 1), 0), out=buf3685)
        del permute_104
        buf3686 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3681, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf183, (6144, 2048), (2048, 1), 0), out=buf3686)
        buf3687 = reinterpret_tensor(buf183, (6144, 2048), (2048, 1)); del buf183  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3681, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_103, (2048, 2048), (2048, 1), 0), out=buf3687)
        del permute_103
        buf3688 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3682, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf191, (6144, 2048), (2048, 1), 0), out=buf3688)
        buf3689 = reinterpret_tensor(buf191, (6144, 2048), (2048, 1)); del buf191  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3682, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_102, (2048, 2048), (2048, 1), 0), out=buf3689)
        del permute_102
        buf3690 = buf3667; del buf3667  # reuse
        # Source Nodes: [add_90, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf3685, buf203, buf204, buf3690, 98304, 128, grid=grid(98304), stream=stream0)
        buf3691 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_90, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3690, buf3691, 2048, 48, grid=grid(2048), stream=stream0)
        buf3693 = reinterpret_tensor(buf3682, (3, 2048, 2048), (4194304, 2048, 1)); del buf3682  # reuse
        buf3697 = reinterpret_tensor(buf3681, (3, 2048, 2048), (4194304, 2048, 1)); del buf3681  # reuse
        buf3701 = reinterpret_tensor(buf3683, (3, 2048, 2048), (4194304, 2048, 1)); del buf3683  # reuse
        buf3725 = buf3636; del buf3636  # reuse
        buf3727 = buf3638; del buf3638  # reuse
        buf3729 = buf3640; del buf3640  # reuse
        buf3732 = buf3643; del buf3643  # reuse
        buf3734 = buf3645; del buf3645  # reuse
        buf3736 = buf3647; del buf3647  # reuse
        buf3702 = buf3646; del buf3646  # reuse
        buf3709 = buf3644; del buf3644  # reuse
        buf3716 = buf3642; del buf3642  # reuse
        buf3724 = buf3639; del buf3639  # reuse
        buf3703 = buf3637; del buf3637  # reuse
        buf3710 = buf3635; del buf3635  # reuse
        buf3718 = buf3633; del buf3633  # reuse
        buf3726 = buf3631; del buf3631  # reuse
        buf3704 = buf3630; del buf3630  # reuse
        buf3711 = buf3629; del buf3629  # reuse
        buf3719 = buf3628; del buf3628  # reuse
        buf3728 = buf3626; del buf3626  # reuse
        buf3705 = buf3625; del buf3625  # reuse
        buf3713 = buf3624; del buf3624  # reuse
        buf3720 = buf3622; del buf3622  # reuse
        buf3731 = buf3619; del buf3619  # reuse
        buf3706 = buf3617; del buf3617  # reuse
        buf3714 = buf3615; del buf3615  # reuse
        buf3721 = buf3613; del buf3613  # reuse
        buf3733 = buf3610; del buf3610  # reuse
        buf3715 = buf3608; del buf3608  # reuse
        buf3708 = buf3607; del buf3607  # reuse
        buf3723 = buf3606; del buf3606  # reuse
        buf3735 = buf3604; del buf3604  # reuse
        # Source Nodes: [add, add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_50, add_84, add_90, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_202.run(buf3725, buf3727, buf3729, buf3732, buf3734, buf3736, buf3685, primals_73, buf203, buf3689, primals_71, buf189, buf3687, primals_72, buf181, buf204, buf182, buf190, buf3671, unsqueeze_121, unsqueeze_115, unsqueeze_109, unsqueeze_103, unsqueeze_120, unsqueeze_114, unsqueeze_108, unsqueeze_102, unsqueeze_119, unsqueeze_113, unsqueeze_107, unsqueeze_101, unsqueeze_118, unsqueeze_112, unsqueeze_106, unsqueeze_100, unsqueeze_117, unsqueeze_111, unsqueeze_105, unsqueeze_99, unsqueeze_116, unsqueeze_110, unsqueeze_104, unsqueeze_98, buf138, buf144, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3693, buf3697, buf3701, buf3702, buf3709, buf3716, buf3724, buf3703, buf3710, buf3718, buf3726, buf3704, buf3711, buf3719, buf3728, buf3705, buf3713, buf3720, buf3731, buf3706, buf3714, buf3721, buf3733, buf3715, buf3708, buf3723, buf3735, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf203
        del buf204
        del buf3671
        del buf3685
        del buf3693
        del buf3697
        del buf3701
        del primals_71
        del primals_72
        del primals_73
        del unsqueeze_100
        del unsqueeze_101
        del unsqueeze_102
        del unsqueeze_103
        del unsqueeze_104
        del unsqueeze_105
        del unsqueeze_106
        del unsqueeze_107
        del unsqueeze_108
        del unsqueeze_109
        del unsqueeze_110
        del unsqueeze_111
        del unsqueeze_112
        del unsqueeze_113
        del unsqueeze_114
        del unsqueeze_115
        del unsqueeze_116
        del unsqueeze_117
        del unsqueeze_118
        del unsqueeze_119
        del unsqueeze_120
        del unsqueeze_121
        del unsqueeze_98
        del unsqueeze_99
        buf3694 = buf3690; del buf3690  # reuse
        # Source Nodes: [add_84, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3687, buf181, buf182, buf3694, 98304, 128, grid=grid(98304), stream=stream0)
        del buf181
        del buf182
        del buf3687
        buf3695 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_84, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3694, buf3695, 2048, 48, grid=grid(2048), stream=stream0)
        buf3698 = buf3694; del buf3694  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3689, buf189, buf190, buf3698, 98304, 128, grid=grid(98304), stream=stream0)
        del buf189
        del buf190
        buf3699 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3698, buf3699, 2048, 48, grid=grid(2048), stream=stream0)
        buf3707 = empty_strided((4, 3, 2048, 7), (43008, 14336, 7, 1), device='cuda', dtype=torch.float16)
        buf3712 = buf3707; del buf3707  # reuse
        buf3717 = buf3712; del buf3712  # reuse
        buf3722 = buf3717; del buf3717  # reuse
        buf3730 = buf3722; del buf3722  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_203.run(buf3730, buf3702, buf3703, buf3704, buf3705, buf3706, buf3708, buf3709, buf3710, buf3711, buf3713, buf3714, buf3715, buf3716, buf3718, buf3719, buf3720, buf3721, buf3723, buf3724, buf3726, buf3728, 172032, grid=grid(172032), stream=stream0)
        del buf3702
        del buf3703
        del buf3704
        del buf3705
        buf3737 = empty_strided((4, 1, 1, 7, 48), (336, 1344, 1344, 1, 7), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_204.run(buf3730, buf3731, buf3733, buf3735, buf3737, 1344, 128, grid=grid(1344), stream=stream0)
        buf3738 = empty_strided((4, 1, 1, 7), (7, 28, 28, 1), device='cuda', dtype=torch.float16)
        buf3739 = reinterpret_tensor(buf3738, (4, 7), (7, 1)); del buf3738  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_205.run(buf3739, buf3737, 28, 48, grid=grid(28), stream=stream0)
        del buf3737
        buf3740 = empty_strided((3, 2048, 4, 7), (57344, 28, 7, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_206.run(buf3730, buf3731, buf3733, buf3735, buf3740, 172032, grid=grid(172032), stream=stream0)
        buf3741 = empty_strided((28, 28), (28, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3740, (28, 6144), (1, 28), 0), view_207, out=buf3741)
        del view_207
        buf3742 = reinterpret_tensor(buf3730, (6144, 28), (28, 1)); del buf3730  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3740, (6144, 28), (28, 1), 0), permute_1298, out=buf3742)
        del buf3740
        del permute_1298
        buf3743 = reinterpret_tensor(buf3742, (3, 2048, 28), (57344, 28, 1)); del buf3742  # reuse
        # Source Nodes: [l__mod___dynamic_dense_5_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_207.run(buf3743, mm_52, 172032, grid=grid(172032), stream=stream0)
        del mm_52
        buf3744 = empty_strided((28, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3743, (28, 6144), (1, 28), 0), view_205, out=buf3744)
        del view_205
        buf3745 = buf3689; del buf3689  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3743, (6144, 28), (28, 1), 0), permute_1302, out=buf3745)
        del buf3743
        del permute_1302
        buf3747 = buf3634; del buf3634  # reuse
        # Source Nodes: [add_72], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf3747, buf3745, buf251, buf257, rsqrt_27, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf257
        del rsqrt_27
        buf3748 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3747, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf256, (6144, 5632), (5632, 1), 0), out=buf3748)
        buf3749 = reinterpret_tensor(buf256, (6144, 5632), (5632, 1)); del buf256  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3747, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_98, (2048, 5632), (5632, 1), 0), out=buf3749)
        del permute_98
        buf3750 = buf3664; del buf3664  # reuse
        buf3753 = reinterpret_tensor(buf255, (3, 2048, 5632), (11534336, 5632, 1)); del buf255  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3753, buf3749, buf254, buf3750, 34603008, grid=grid(34603008), stream=stream0)
        del buf254
        del buf3749
        buf3751 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3750, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf253, (6144, 2048), (2048, 1), 0), out=buf3751)
        buf3752 = buf3745; del buf3745  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3750, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_97, (5632, 2048), (2048, 1), 0), out=buf3752)
        del buf3750
        del permute_97
        buf3754 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3753, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf253, (6144, 2048), (2048, 1), 0), out=buf3754)
        buf3755 = reinterpret_tensor(buf253, (6144, 2048), (2048, 1)); del buf253  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3753, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_96, (5632, 2048), (2048, 1), 0), out=buf3755)
        del permute_96
        buf3756 = buf3698; del buf3698  # reuse
        # Source Nodes: [add_71, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3752, buf3755, buf251, buf252, buf3756, 98304, 128, grid=grid(98304), stream=stream0)
        buf3757 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_71, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3756, buf3757, 2048, 48, grid=grid(2048), stream=stream0)
        buf3759 = buf3747; del buf3747  # reuse
        # Source Nodes: [add_71, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3759, buf3752, buf3755, primals_66, buf251, buf252, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf251
        del buf252
        del buf3752
        del primals_66
        buf3760 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3759, (2048, 6144), (1, 2048), 0), buf248, out=buf3760)
        buf3761 = buf248; del buf248  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3759, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_95, (2048, 2048), (2048, 1), 0), out=buf3761)
        del permute_95
        buf3762 = reinterpret_tensor(buf3755, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3755  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3761, buf3762, 12582912, grid=grid(12582912), stream=stream0)
        buf3763 = reinterpret_tensor(buf3761, (48, 2048, 128), (262144, 128, 1)); del buf3761  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf240, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3762, (48, 2048, 128), (262144, 128, 1), 0), out=buf3763)
        buf3764 = reinterpret_tensor(buf3678, (48, 2048, 2048), (4194304, 2048, 1)); del buf3678  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3762, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf246, (48, 128, 2048), (262144, 1, 128), 0), out=buf3764)
        buf3766 = reinterpret_tensor(buf3676, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3676  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward19')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3764, buf240, slice_3, buf3766, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf240
        buf3767 = reinterpret_tensor(buf3762, (48, 128, 2048), (262144, 2048, 1)); del buf3762  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf235, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3766, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3767)
        buf3768 = reinterpret_tensor(buf235, (48, 2048, 128), (262144, 128, 1)); del buf235  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3766, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf236, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3768)
        buf3769 = reinterpret_tensor(buf236, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf236  # reuse
        buf3770 = reinterpret_tensor(buf246, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf246  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3767, select_3, select_1, buf3768, buf3769, buf3770, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3767
        buf3771 = reinterpret_tensor(buf3768, (6144, 2048), (2048, 1)); del buf3768  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3763, buf3771, 12582912, grid=grid(12582912), stream=stream0)
        del buf3763
        buf3772 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3771, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf244, (6144, 2048), (2048, 1), 0), out=buf3772)
        buf3773 = reinterpret_tensor(buf244, (6144, 2048), (2048, 1)); del buf244  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3771, reinterpret_tensor(permute_87, (2048, 2048), (2048, 1), 0), out=buf3773)
        del permute_87
        buf3774 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3769, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf222, (6144, 2048), (2048, 1), 0), out=buf3774)
        buf3775 = reinterpret_tensor(buf222, (6144, 2048), (2048, 1)); del buf222  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3769, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_86, (2048, 2048), (2048, 1), 0), out=buf3775)
        del permute_86
        buf3776 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3770, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf230, (6144, 2048), (2048, 1), 0), out=buf3776)
        buf3777 = reinterpret_tensor(buf230, (6144, 2048), (2048, 1)); del buf230  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3770, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_85, (2048, 2048), (2048, 1), 0), out=buf3777)
        del permute_85
        buf3778 = buf3756; del buf3756  # reuse
        # Source Nodes: [add_65, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf3773, buf242, buf243, buf3778, 98304, 128, grid=grid(98304), stream=stream0)
        buf3779 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_65, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3778, buf3779, 2048, 48, grid=grid(2048), stream=stream0)
        buf3781 = reinterpret_tensor(buf3770, (3, 2048, 2048), (4194304, 2048, 1)); del buf3770  # reuse
        buf3785 = reinterpret_tensor(buf3769, (3, 2048, 2048), (4194304, 2048, 1)); del buf3769  # reuse
        buf3789 = reinterpret_tensor(buf3771, (3, 2048, 2048), (4194304, 2048, 1)); del buf3771  # reuse
        buf3809 = buf3727; del buf3727  # reuse
        buf3811 = buf3729; del buf3729  # reuse
        buf3814 = buf3732; del buf3732  # reuse
        buf3816 = buf3734; del buf3734  # reuse
        buf3818 = buf3736; del buf3736  # reuse
        buf3790 = buf3735; del buf3735  # reuse
        buf3796 = buf3733; del buf3733  # reuse
        buf3802 = buf3731; del buf3731  # reuse
        buf3808 = buf3728; del buf3728  # reuse
        buf3791 = buf3726; del buf3726  # reuse
        buf3797 = buf3724; del buf3724  # reuse
        buf3803 = buf3723; del buf3723  # reuse
        buf3810 = buf3721; del buf3721  # reuse
        buf3792 = buf3720; del buf3720  # reuse
        buf3798 = buf3719; del buf3719  # reuse
        buf3804 = buf3718; del buf3718  # reuse
        buf3813 = buf3716; del buf3716  # reuse
        buf3793 = buf3715; del buf3715  # reuse
        buf3799 = buf3714; del buf3714  # reuse
        buf3806 = buf3713; del buf3713  # reuse
        buf3815 = buf3711; del buf3711  # reuse
        buf3794 = buf3710; del buf3710  # reuse
        buf3807 = buf3709; del buf3709  # reuse
        buf3801 = buf3708; del buf3708  # reuse
        buf3817 = buf3706; del buf3706  # reuse
        # Source Nodes: [add, add_10, add_12, add_20, add_3, add_31, add_33, add_5, add_60, add_65, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_208.run(buf3809, buf3811, buf3814, buf3816, buf3818, buf3773, primals_61, buf242, buf3777, primals_59, buf228, buf3775, primals_60, buf220, buf243, buf221, buf229, buf3759, unsqueeze_91, unsqueeze_86, unsqueeze_81, unsqueeze_76, unsqueeze_90, unsqueeze_85, unsqueeze_80, unsqueeze_75, unsqueeze_89, unsqueeze_84, unsqueeze_79, unsqueeze_74, unsqueeze_88, unsqueeze_83, unsqueeze_78, unsqueeze_73, unsqueeze_87, unsqueeze_82, unsqueeze_77, unsqueeze_72, buf173, buf172, buf179, buf68, buf74, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3781, buf3785, buf3789, buf3790, buf3796, buf3802, buf3808, buf3791, buf3797, buf3803, buf3810, buf3792, buf3798, buf3804, buf3813, buf3793, buf3799, buf3806, buf3815, buf3794, buf3807, buf3801, buf3817, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf243
        del buf3759
        del buf3773
        del buf3781
        del buf3785
        del buf3789
        del primals_59
        del primals_60
        del primals_61
        del unsqueeze_72
        del unsqueeze_73
        del unsqueeze_74
        del unsqueeze_75
        del unsqueeze_76
        del unsqueeze_77
        del unsqueeze_78
        del unsqueeze_79
        del unsqueeze_80
        del unsqueeze_81
        del unsqueeze_82
        del unsqueeze_83
        del unsqueeze_84
        del unsqueeze_85
        del unsqueeze_86
        del unsqueeze_87
        del unsqueeze_88
        del unsqueeze_89
        del unsqueeze_90
        del unsqueeze_91
        buf3782 = buf3778; del buf3778  # reuse
        # Source Nodes: [add_60, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3775, buf220, buf221, buf3782, 98304, 128, grid=grid(98304), stream=stream0)
        del buf221
        del buf3775
        buf3783 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_60, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3782, buf3783, 2048, 48, grid=grid(2048), stream=stream0)
        buf3786 = buf3782; del buf3782  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf3777, buf228, buf229, buf3786, 98304, 128, grid=grid(98304), stream=stream0)
        del buf229
        buf3787 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3786, buf3787, 2048, 48, grid=grid(2048), stream=stream0)
        buf3795 = empty_strided((4, 3, 2048, 6), (36864, 12288, 6, 1), device='cuda', dtype=torch.float16)
        buf3800 = buf3795; del buf3795  # reuse
        buf3805 = buf3800; del buf3800  # reuse
        buf3812 = buf3805; del buf3805  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_209.run(buf3812, buf3790, buf3791, buf3792, buf3793, buf3794, buf3796, buf3797, buf3798, buf3799, buf3801, buf3802, buf3803, buf3804, buf3806, buf3807, buf3808, buf3810, 147456, grid=grid(147456), stream=stream0)
        del buf3790
        del buf3791
        del buf3792
        del buf3793
        buf3819 = empty_strided((4, 1, 1, 6, 48), (288, 1152, 1152, 1, 6), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_210.run(buf3812, buf3813, buf3815, buf3817, buf3819, 1152, 128, grid=grid(1152), stream=stream0)
        buf3820 = empty_strided((4, 1, 1, 6), (6, 24, 24, 1), device='cuda', dtype=torch.float16)
        buf3821 = reinterpret_tensor(buf3820, (4, 6), (6, 1)); del buf3820  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_211.run(buf3821, buf3819, 24, 48, grid=grid(24), stream=stream0)
        del buf3819
        buf3822 = empty_strided((3, 2048, 4, 6), (49152, 24, 6, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_212.run(buf3812, buf3813, buf3815, buf3817, buf3822, 147456, grid=grid(147456), stream=stream0)
        buf3823 = empty_strided((24, 24), (24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3822, (24, 6144), (1, 24), 0), view_172, out=buf3823)
        del view_172
        buf3824 = reinterpret_tensor(buf3812, (6144, 24), (24, 1)); del buf3812  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3822, (6144, 24), (24, 1), 0), permute_1347, out=buf3824)
        del buf3822
        del permute_1347
        buf3825 = reinterpret_tensor(buf3824, (3, 2048, 24), (49152, 24, 1)); del buf3824  # reuse
        # Source Nodes: [l__mod___dynamic_dense_4_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_213.run(buf3825, mm_43, 147456, grid=grid(147456), stream=stream0)
        del mm_43
        buf3826 = empty_strided((24, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3825, (24, 6144), (1, 24), 0), view_170, out=buf3826)
        del view_170
        buf3827 = buf3777; del buf3777  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3825, (6144, 24), (24, 1), 0), permute_1351, out=buf3827)
        del buf3825
        del permute_1351
        buf3829 = buf3725; del buf3725  # reuse
        # Source Nodes: [add_50], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_123.run(buf3829, buf3827, buf138, buf144, rsqrt_22, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf144
        del rsqrt_22
        buf3830 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3829, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf143, (6144, 5632), (5632, 1), 0), out=buf3830)
        buf3831 = reinterpret_tensor(buf143, (6144, 5632), (5632, 1)); del buf143  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3829, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_81, (2048, 5632), (5632, 1), 0), out=buf3831)
        del permute_81
        buf3832 = buf3753; del buf3753  # reuse
        buf3835 = reinterpret_tensor(buf142, (3, 2048, 5632), (11534336, 5632, 1)); del buf142  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3835, buf3831, buf141, buf3832, 34603008, grid=grid(34603008), stream=stream0)
        del buf141
        del buf3831
        buf3833 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3832, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf140, (6144, 2048), (2048, 1), 0), out=buf3833)
        buf3834 = buf3827; del buf3827  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3832, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_80, (5632, 2048), (2048, 1), 0), out=buf3834)
        del buf3832
        del permute_80
        buf3836 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3835, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf140, (6144, 2048), (2048, 1), 0), out=buf3836)
        buf3837 = reinterpret_tensor(buf140, (6144, 2048), (2048, 1)); del buf140  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3835, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_79, (5632, 2048), (2048, 1), 0), out=buf3837)
        del permute_79
        buf3838 = buf3786; del buf3786  # reuse
        # Source Nodes: [add_49, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3834, buf3837, buf138, buf139, buf3838, 98304, 128, grid=grid(98304), stream=stream0)
        buf3839 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_49, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3838, buf3839, 2048, 48, grid=grid(2048), stream=stream0)
        buf3841 = buf3829; del buf3829  # reuse
        # Source Nodes: [add_49, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3841, buf3834, buf3837, primals_54, buf138, buf139, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf138
        del buf139
        del buf3834
        del primals_54
        buf3842 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3841, (2048, 6144), (1, 2048), 0), buf135, out=buf3842)
        buf3843 = buf135; del buf135  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3841, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_78, (2048, 2048), (2048, 1), 0), out=buf3843)
        del permute_78
        buf3844 = reinterpret_tensor(buf3837, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3837  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3843, buf3844, 12582912, grid=grid(12582912), stream=stream0)
        buf3845 = reinterpret_tensor(buf3843, (48, 2048, 128), (262144, 128, 1)); del buf3843  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf127, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3844, (48, 2048, 128), (262144, 128, 1), 0), out=buf3845)
        buf3846 = reinterpret_tensor(buf3766, (48, 2048, 2048), (4194304, 2048, 1)); del buf3766  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3844, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf133, (48, 128, 2048), (262144, 1, 128), 0), out=buf3846)
        buf3848 = reinterpret_tensor(buf3764, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3764  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward20')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3846, buf127, slice_3, buf3848, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf127
        buf3849 = reinterpret_tensor(buf3844, (48, 128, 2048), (262144, 2048, 1)); del buf3844  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf122, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3848, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3849)
        buf3850 = reinterpret_tensor(buf122, (48, 2048, 128), (262144, 128, 1)); del buf122  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3848, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf123, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3850)
        buf3851 = reinterpret_tensor(buf123, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf123  # reuse
        buf3852 = reinterpret_tensor(buf133, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf133  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3849, select_3, select_1, buf3850, buf3851, buf3852, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3849
        buf3853 = reinterpret_tensor(buf3850, (6144, 2048), (2048, 1)); del buf3850  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3845, buf3853, 12582912, grid=grid(12582912), stream=stream0)
        del buf3845
        buf3854 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3853, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf131, (6144, 2048), (2048, 1), 0), out=buf3854)
        buf3855 = reinterpret_tensor(buf131, (6144, 2048), (2048, 1)); del buf131  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3853, reinterpret_tensor(permute_70, (2048, 2048), (2048, 1), 0), out=buf3855)
        del buf3853
        del permute_70
        buf3856 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3851, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf109, (6144, 2048), (2048, 1), 0), out=buf3856)
        buf3857 = reinterpret_tensor(buf109, (6144, 2048), (2048, 1)); del buf109  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3851, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_69, (2048, 2048), (2048, 1), 0), out=buf3857)
        del buf3851
        del permute_69
        buf3858 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3852, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf117, (6144, 2048), (2048, 1), 0), out=buf3858)
        buf3859 = reinterpret_tensor(buf117, (6144, 2048), (2048, 1)); del buf117  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3852, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_68, (2048, 2048), (2048, 1), 0), out=buf3859)
        del buf3852
        del permute_68
        buf3860 = buf3838; del buf3838  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf3855, buf130, buf3860, 98304, 128, grid=grid(98304), stream=stream0)
        del buf130
        buf3861 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3860, buf3861, 2048, 48, grid=grid(2048), stream=stream0)
        buf3872 = buf3817; del buf3817  # reuse
        buf3863 = buf228; del buf228  # reuse
        buf3867 = buf220; del buf220  # reuse
        buf3882 = buf3811; del buf3811  # reuse
        buf3885 = buf3814; del buf3814  # reuse
        buf3887 = buf3816; del buf3816  # reuse
        buf3889 = buf3818; del buf3818  # reuse
        buf3871 = buf242; del buf242  # reuse
        buf3874 = buf3815; del buf3815  # reuse
        buf3873 = buf3813; del buf3813  # reuse
        buf3876 = buf3810; del buf3810  # reuse
        buf3878 = buf3808; del buf3808  # reuse
        buf3879 = buf3807; del buf3807  # reuse
        buf3880 = buf3806; del buf3806  # reuse
        buf3881 = buf3804; del buf3804  # reuse
        buf3884 = buf3803; del buf3803  # reuse
        buf3886 = buf3802; del buf3802  # reuse
        buf3888 = buf3801; del buf3801  # reuse
        buf3890 = buf3799; del buf3799  # reuse
        buf3892 = buf3798; del buf3798  # reuse
        buf3893 = buf3797; del buf3797  # reuse
        buf3894 = buf3796; del buf3796  # reuse
        buf3875 = buf3794; del buf3794  # reuse
        # Source Nodes: [add, add_10, add_12, add_20, add_3, add_35, add_39, add_40, add_43, add_44, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_31, mul_35, mul_39, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_214.run(buf3882, buf3885, buf3887, buf3889, buf3855, primals_49, buf128, unsqueeze_61, buf68, buf74, buf3857, primals_48, buf106, unsqueeze_57, buf3859, primals_47, buf114, unsqueeze_53, buf3841, buf129, buf107, unsqueeze_65, unsqueeze_64, unsqueeze_60, unsqueeze_56, unsqueeze_63, unsqueeze_59, unsqueeze_55, unsqueeze_62, unsqueeze_58, unsqueeze_54, buf115, embedding, buf33, buf39, unsqueeze_11, buf99, buf105, buf3872, buf3863, buf3867, buf3871, buf3874, buf3873, buf3876, buf3878, buf3879, buf3880, buf3881, buf3884, buf3886, buf3888, buf3890, buf3892, buf3893, buf3894, buf3875, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf106
        del buf107
        del buf114
        del buf128
        del buf129
        del buf3841
        del buf3855
        del buf3863
        del buf3867
        del primals_48
        del primals_49
        del unsqueeze_54
        del unsqueeze_55
        del unsqueeze_56
        del unsqueeze_57
        del unsqueeze_58
        del unsqueeze_59
        del unsqueeze_60
        del unsqueeze_61
        del unsqueeze_62
        del unsqueeze_63
        del unsqueeze_64
        del unsqueeze_65
        buf3864 = buf3860; del buf3860  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_78.run(buf3857, buf108, buf3864, 98304, 128, grid=grid(98304), stream=stream0)
        del buf108
        del buf3857
        buf3865 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3864, buf3865, 2048, 48, grid=grid(2048), stream=stream0)
        buf3868 = buf3864; del buf3864  # reuse
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_red_fused_mul_sum_76.run(buf3859, buf116, buf3868, 98304, 128, grid=grid(98304), stream=stream0)
        buf3869 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mul, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3868, buf3869, 2048, 48, grid=grid(2048), stream=stream0)
        buf3877 = empty_strided((4, 3, 2048, 5), (30720, 10240, 5, 1), device='cuda', dtype=torch.float16)
        buf3883 = buf3877; del buf3877  # reuse
        buf3891 = buf3883; del buf3883  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_215.run(buf3891, buf3872, buf3873, buf3874, buf3875, buf3876, buf3878, buf3879, buf3880, buf3881, buf3884, buf3886, buf3888, buf3890, 122880, grid=grid(122880), stream=stream0)
        del buf3872
        del buf3873
        del buf3874
        del buf3875
        buf3895 = empty_strided((4, 1, 1, 5, 48), (240, 960, 960, 1, 5), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_216.run(buf3891, buf3892, buf3893, buf3894, buf3895, 960, 128, grid=grid(960), stream=stream0)
        buf3896 = empty_strided((4, 1, 1, 5), (5, 20, 20, 1), device='cuda', dtype=torch.float16)
        buf3897 = reinterpret_tensor(buf3896, (4, 5), (5, 1)); del buf3896  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_217.run(buf3897, buf3895, 20, 48, grid=grid(20), stream=stream0)
        del buf3895
        buf3898 = empty_strided((3, 2048, 4, 5), (40960, 20, 5, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_218.run(buf3891, buf3892, buf3893, buf3894, buf3898, 122880, grid=grid(122880), stream=stream0)
        buf3899 = empty_strided((20, 20), (20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3898, (20, 6144), (1, 20), 0), view_137, out=buf3899)
        del view_137
        buf3900 = reinterpret_tensor(buf3891, (6144, 20), (20, 1)); del buf3891  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3898, (6144, 20), (20, 1), 0), permute_1396, out=buf3900)
        del buf3898
        del permute_1396
        buf3901 = reinterpret_tensor(buf3900, (3, 2048, 20), (40960, 20, 1)); del buf3900  # reuse
        # Source Nodes: [l__mod___dynamic_dense_3_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_219.run(buf3901, mm_34, 122880, grid=grid(122880), stream=stream0)
        del mm_34
        buf3902 = empty_strided((20, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3901, (20, 6144), (1, 20), 0), view_135, out=buf3902)
        del view_135
        buf3903 = reinterpret_tensor(buf116, (6144, 2048), (2048, 1)); del buf116  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3901, (6144, 20), (20, 1), 0), permute_1400, out=buf3903)
        del buf3901
        del permute_1400
        buf3905 = buf3809; del buf3809  # reuse
        # Source Nodes: [add_31, add_33], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_86.run(buf3905, buf3903, buf173, buf172, buf179, rsqrt_17, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf179
        del rsqrt_17
        buf3906 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3905, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf178, (6144, 5632), (5632, 1), 0), out=buf3906)
        buf3907 = reinterpret_tensor(buf178, (6144, 5632), (5632, 1)); del buf178  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3905, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_64, (2048, 5632), (5632, 1), 0), out=buf3907)
        del permute_64
        buf3908 = buf3835; del buf3835  # reuse
        buf3911 = reinterpret_tensor(buf177, (3, 2048, 5632), (11534336, 5632, 1)); del buf177  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3911, buf3907, buf176, buf3908, 34603008, grid=grid(34603008), stream=stream0)
        del buf176
        del buf3907
        buf3909 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3908, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf175, (6144, 2048), (2048, 1), 0), out=buf3909)
        buf3910 = buf3903; del buf3903  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3908, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_63, (5632, 2048), (2048, 1), 0), out=buf3910)
        del buf3908
        del permute_63
        buf3912 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3911, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf175, (6144, 2048), (2048, 1), 0), out=buf3912)
        buf3913 = reinterpret_tensor(buf175, (6144, 2048), (2048, 1)); del buf175  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3911, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_62, (5632, 2048), (2048, 1), 0), out=buf3913)
        del permute_62
        buf3914 = buf3868; del buf3868  # reuse
        # Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_87.run(buf3910, buf3913, buf173, buf172, buf174, buf3914, 98304, 128, grid=grid(98304), stream=stream0)
        buf3915 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3914, buf3915, 2048, 48, grid=grid(2048), stream=stream0)
        buf3918 = buf3905; del buf3905  # reuse
        # Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_88.run(buf3918, buf3910, buf3913, primals_42, buf173, buf172, buf174, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf172
        del buf173
        del buf174
        del buf3910
        del primals_42
        buf3919 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3918, (2048, 6144), (1, 2048), 0), buf171, out=buf3919)
        buf3920 = buf171; del buf171  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3918, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_61, (2048, 2048), (2048, 1), 0), out=buf3920)
        del permute_61
        buf3921 = reinterpret_tensor(buf3913, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3913  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3920, buf3921, 12582912, grid=grid(12582912), stream=stream0)
        buf3922 = reinterpret_tensor(buf3920, (48, 2048, 128), (262144, 128, 1)); del buf3920  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf164, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3921, (48, 2048, 128), (262144, 128, 1), 0), out=buf3922)
        buf3923 = reinterpret_tensor(buf3848, (48, 2048, 2048), (4194304, 2048, 1)); del buf3848  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3921, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf169, (48, 128, 2048), (262144, 1, 128), 0), out=buf3923)
        buf3925 = reinterpret_tensor(buf3846, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3846  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward21')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3923, buf164, slice_3, buf3925, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf164
        buf3926 = reinterpret_tensor(buf3921, (48, 128, 2048), (262144, 2048, 1)); del buf3921  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf159, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3925, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3926)
        buf3927 = reinterpret_tensor(buf159, (48, 2048, 128), (262144, 128, 1)); del buf159  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3925, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf160, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3927)
        buf3928 = reinterpret_tensor(buf160, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf160  # reuse
        buf3929 = reinterpret_tensor(buf169, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf169  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3926, select_3, select_1, buf3927, buf3928, buf3929, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3926
        buf3930 = reinterpret_tensor(buf3927, (6144, 2048), (2048, 1)); del buf3927  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3922, buf3930, 12582912, grid=grid(12582912), stream=stream0)
        del buf3922
        buf3931 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3930, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf167, (6144, 2048), (2048, 1), 0), out=buf3931)
        buf3932 = reinterpret_tensor(buf167, (6144, 2048), (2048, 1)); del buf167  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf3930, reinterpret_tensor(permute_53, (2048, 2048), (2048, 1), 0), out=buf3932)
        del permute_53
        buf3933 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3928, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf147, (6144, 2048), (2048, 1), 0), out=buf3933)
        buf3934 = reinterpret_tensor(buf147, (6144, 2048), (2048, 1)); del buf147  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3928, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_52, (2048, 2048), (2048, 1), 0), out=buf3934)
        del permute_52
        buf3935 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3929, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf154, (6144, 2048), (2048, 1), 0), out=buf3935)
        buf3936 = reinterpret_tensor(buf154, (6144, 2048), (2048, 1)); del buf154  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3929, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_51, (2048, 2048), (2048, 1), 0), out=buf3936)
        del permute_51
        buf3937 = buf3914; del buf3914  # reuse
        # Source Nodes: [add_27, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_89.run(buf3932, buf165, buf166, buf3937, 98304, 128, grid=grid(98304), stream=stream0)
        buf3938 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_27, float_3, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3937, buf3938, 2048, 48, grid=grid(2048), stream=stream0)
        buf3948 = reinterpret_tensor(buf3929, (3, 2048, 2048), (4194304, 2048, 1)); del buf3929  # reuse
        buf3944 = reinterpret_tensor(buf3928, (3, 2048, 2048), (4194304, 2048, 1)); del buf3928  # reuse
        buf3940 = reinterpret_tensor(buf3930, (3, 2048, 2048), (4194304, 2048, 1)); del buf3930  # reuse
        buf3949 = buf3894; del buf3894  # reuse
        buf3952 = buf3893; del buf3893  # reuse
        buf3959 = buf3892; del buf3892  # reuse
        buf3963 = buf3890; del buf3890  # reuse
        buf3950 = buf3888; del buf3888  # reuse
        buf3954 = buf3886; del buf3886  # reuse
        buf3960 = buf3884; del buf3884  # reuse
        buf3964 = buf3881; del buf3881  # reuse
        buf3951 = buf3880; del buf3880  # reuse
        buf3961 = buf3879; del buf3879  # reuse
        buf3965 = buf3878; del buf3878  # reuse
        buf3957 = buf3876; del buf3876  # reuse
        # Source Nodes: [add, add_10, add_12, add_24, add_27, add_3, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_3, mul_4, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_220.run(buf3936, primals_35, buf152, buf153, buf3934, primals_36, buf145, buf146, buf3932, primals_37, buf165, buf166, buf3918, unsqueeze_11, embedding, buf99, buf105, buf33, buf39, buf3948, buf3944, buf3940, buf3949, buf3952, buf3959, buf3963, buf3950, buf3954, buf3960, buf3964, buf3951, buf3961, buf3965, buf3957, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf165
        del buf166
        del buf3932
        del primals_35
        del primals_36
        del primals_37
        buf3941 = buf3937; del buf3937  # reuse
        # Source Nodes: [add_24, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3934, buf145, buf146, buf3941, 98304, 128, grid=grid(98304), stream=stream0)
        del buf145
        del buf146
        del buf3934
        buf3942 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_24, float_2, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3941, buf3942, 2048, 48, grid=grid(2048), stream=stream0)
        buf3945 = buf3941; del buf3941  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_92.run(buf3936, buf152, buf153, buf3945, 98304, 128, grid=grid(98304), stream=stream0)
        del buf152
        del buf153
        buf3946 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3945, buf3946, 2048, 48, grid=grid(2048), stream=stream0)
        buf3956 = empty_strided((4, 3, 2048, 4), (24576, 8192, 4, 1), device='cuda', dtype=torch.float16)
        buf3962 = buf3956; del buf3956  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_221.run(buf3962, buf3949, buf3950, buf3951, buf3952, buf3954, buf3957, buf3959, buf3960, buf3961, 98304, grid=grid(98304), stream=stream0)
        del buf3949
        del buf3950
        del buf3951
        del buf3952
        buf3969 = empty_strided((3, 2048, 4, 4), (32768, 16, 4, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_222.run(buf3962, buf3963, buf3964, buf3965, buf3969, 98304, grid=grid(98304), stream=stream0)
        buf3971 = empty_strided((6144, 16), (16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3969, (6144, 16), (16, 1), 0), permute_1445, out=buf3971)
        del permute_1445
        buf3972 = reinterpret_tensor(buf3971, (3, 2048, 16), (32768, 16, 1)); del buf3971  # reuse
        # Source Nodes: [l__mod___dynamic_dense_2_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_223.run(buf3972, mm_25, 98304, grid=grid(98304), stream=stream0)
        del mm_25
        buf3974 = buf3936; del buf3936  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3972, (6144, 16), (16, 1), 0), permute_1449, out=buf3974)
        del permute_1449
        buf3953 = buf3885; del buf3885  # reuse
        buf3955 = buf3887; del buf3887  # reuse
        buf3958 = buf3889; del buf3889  # reuse
        buf3976 = buf3882; del buf3882  # reuse
        # Source Nodes: [add, add_20, add_35, float_1, mean, mul, mul_31, rsqrt], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_pow_rsqrt_sum_224.run(buf3953, buf3955, buf3958, buf3976, buf3974, buf68, buf74, buf3859, primals_47, buf115, buf3871, unsqueeze_52, buf3918, unsqueeze_43, buf3940, unsqueeze_40, unsqueeze_51, unsqueeze_42, unsqueeze_39, unsqueeze_50, unsqueeze_41, unsqueeze_38, unsqueeze_53, rsqrt_12, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf115
        del buf3859
        del buf3871
        del buf3918
        del buf3940
        del buf3974
        del primals_47
        del rsqrt_12
        del unsqueeze_38
        del unsqueeze_39
        del unsqueeze_40
        del unsqueeze_41
        del unsqueeze_42
        del unsqueeze_43
        del unsqueeze_50
        del unsqueeze_51
        del unsqueeze_52
        del unsqueeze_53
        buf3966 = empty_strided((4, 1, 1, 4, 48), (192, 768, 768, 1, 4), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_225.run(buf3962, buf3963, buf3964, buf3965, buf3966, 768, 128, grid=grid(768), stream=stream0)
        del buf3962
        buf3967 = empty_strided((4, 1, 1, 4), (4, 16, 16, 1), device='cuda', dtype=torch.float16)
        buf3968 = reinterpret_tensor(buf3967, (4, 4), (4, 1)); del buf3967  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_226.run(buf3968, buf3966, 16, 48, grid=grid(16), stream=stream0)
        del buf3966
        buf3970 = empty_strided((16, 16), (16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3969, (16, 6144), (1, 16), 0), view_102, out=buf3970)
        del buf3969
        del view_102
        buf3973 = empty_strided((16, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3972, (16, 6144), (1, 16), 0), view_100, out=buf3973)
        del buf3972
        del view_100
        buf3977 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3976, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf73, (6144, 5632), (5632, 1), 0), out=buf3977)
        buf3978 = reinterpret_tensor(buf73, (6144, 5632), (5632, 1)); del buf73  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3976, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_47, (2048, 5632), (5632, 1), 0), out=buf3978)
        del permute_47
        buf3979 = buf3911; del buf3911  # reuse
        buf3982 = reinterpret_tensor(buf72, (3, 2048, 5632), (11534336, 5632, 1)); del buf72  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf3982, buf3978, buf71, buf3979, 34603008, grid=grid(34603008), stream=stream0)
        del buf3978
        del buf71
        buf3980 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3979, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf70, (6144, 2048), (2048, 1), 0), out=buf3980)
        buf3981 = buf74; del buf74  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3979, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_46, (5632, 2048), (2048, 1), 0), out=buf3981)
        del buf3979
        del permute_46
        buf3983 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3982, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf70, (6144, 2048), (2048, 1), 0), out=buf3983)
        buf3984 = reinterpret_tensor(buf70, (6144, 2048), (2048, 1)); del buf70  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3982, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_45, (5632, 2048), (2048, 1), 0), out=buf3984)
        del permute_45
        buf3985 = buf3945; del buf3945  # reuse
        # Source Nodes: [add_19, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_61.run(buf3981, buf3984, buf68, buf69, buf3985, 98304, 128, grid=grid(98304), stream=stream0)
        buf3986 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_19, float_6, mean_3, mul_18, mul_19, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf3985, buf3986, 2048, 48, grid=grid(2048), stream=stream0)
        buf3988 = buf3976; del buf3976  # reuse
        # Source Nodes: [add_19, float_6, mean_3, mul_18, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_62.run(buf3988, buf3981, buf3984, primals_30, buf68, buf69, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf3981
        del buf3984
        del buf69
        del primals_30
        buf3989 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3988, (2048, 6144), (1, 2048), 0), buf66, out=buf3989)
        buf3990 = buf66; del buf66  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3988, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_44, (2048, 2048), (2048, 1), 0), out=buf3990)
        del permute_44
        buf3991 = reinterpret_tensor(buf68, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf68  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf3990, buf3991, 12582912, grid=grid(12582912), stream=stream0)
        buf3992 = reinterpret_tensor(buf3990, (48, 2048, 128), (262144, 128, 1)); del buf3990  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf59, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf3991, (48, 2048, 128), (262144, 128, 1), 0), out=buf3992)
        buf3993 = reinterpret_tensor(buf3925, (48, 2048, 2048), (4194304, 2048, 1)); del buf3925  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3991, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf64, (48, 128, 2048), (262144, 1, 128), 0), out=buf3993)
        buf3995 = reinterpret_tensor(buf3923, (3, 16, 2048, 2048), (67108864, 4194304, 2048, 1)); del buf3923  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward22')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf3993, buf59, slice_3, buf3995, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf3993
        buf3996 = reinterpret_tensor(buf64, (48, 128, 2048), (262144, 2048, 1)); del buf64  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf54, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf3995, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf3996)
        buf3997 = reinterpret_tensor(buf54, (48, 2048, 128), (262144, 128, 1)); del buf54  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf3995, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf55, (48, 2048, 128), (262144, 1, 2048), 0), out=buf3997)
        buf3998 = reinterpret_tensor(buf55, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf55  # reuse
        buf3999 = reinterpret_tensor(buf3991, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf3991  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf3996, select_3, select_1, buf3997, buf3998, buf3999, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf3996
        buf4000 = reinterpret_tensor(buf3997, (6144, 2048), (2048, 1)); del buf3997  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf3992, buf4000, 12582912, grid=grid(12582912), stream=stream0)
        del buf3992
        buf4001 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4000, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf62, (6144, 2048), (2048, 1), 0), out=buf4001)
        buf4002 = reinterpret_tensor(buf62, (6144, 2048), (2048, 1)); del buf62  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf4000, reinterpret_tensor(permute_36, (2048, 2048), (2048, 1), 0), out=buf4002)
        del permute_36
        buf4003 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3998, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf42, (6144, 2048), (2048, 1), 0), out=buf4003)
        buf4004 = reinterpret_tensor(buf42, (6144, 2048), (2048, 1)); del buf42  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3998, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_35, (2048, 2048), (2048, 1), 0), out=buf4004)
        del permute_35
        buf4005 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3999, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf49, (6144, 2048), (2048, 1), 0), out=buf4005)
        buf4006 = reinterpret_tensor(buf49, (6144, 2048), (2048, 1)); del buf49  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf3999, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_34, (2048, 2048), (2048, 1), 0), out=buf4006)
        del permute_34
        buf4007 = buf3985; del buf3985  # reuse
        # Source Nodes: [add_14, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_65.run(buf4002, buf60, buf61, buf4007, 98304, 128, grid=grid(98304), stream=stream0)
        buf4008 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_14, mean_2, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4007, buf4008, 2048, 48, grid=grid(2048), stream=stream0)
        buf4014 = reinterpret_tensor(buf3999, (3, 2048, 2048), (4194304, 2048, 1)); del buf3999  # reuse
        buf4010 = reinterpret_tensor(buf3998, (3, 2048, 2048), (4194304, 2048, 1)); del buf3998  # reuse
        buf4018 = reinterpret_tensor(buf4000, (3, 2048, 2048), (4194304, 2048, 1)); del buf4000  # reuse
        buf4019 = buf3965; del buf3965  # reuse
        buf4021 = buf3964; del buf3964  # reuse
        buf4025 = buf3963; del buf3963  # reuse
        buf4028 = buf3961; del buf3961  # reuse
        buf4020 = buf3960; del buf3960  # reuse
        buf4029 = buf3959; del buf3959  # reuse
        buf4023 = buf3957; del buf3957  # reuse
        buf4027 = buf3954; del buf3954  # reuse
        # Source Nodes: [add, add_12, add_14, add_3, add_5, mean, mean_1, mean_2, mul, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_227.run(buf4004, primals_24, buf40, buf41, buf4002, primals_25, buf60, buf61, buf4006, primals_23, buf47, buf48, buf3988, embedding, buf33, buf39, buf4014, buf4010, buf4018, buf4019, buf4021, buf4025, buf4028, buf4020, buf4029, buf4023, buf4027, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf4002
        del buf61
        del primals_23
        del primals_24
        del primals_25
        buf4011 = buf4007; del buf4007  # reuse
        # Source Nodes: [add_12, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf4004, buf40, buf41, buf4011, 98304, 128, grid=grid(98304), stream=stream0)
        del buf4004
        del buf41
        buf4012 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_12, mean_1, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4011, buf4012, 2048, 48, grid=grid(2048), stream=stream0)
        buf4015 = buf4011; del buf4011  # reuse
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_67.run(buf4006, buf47, buf48, buf4015, 98304, 128, grid=grid(98304), stream=stream0)
        del buf48
        buf4016 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4015, buf4016, 2048, 48, grid=grid(2048), stream=stream0)
        buf4026 = empty_strided((4, 3, 2048, 3), (18432, 6144, 3, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward]
        triton_poi_fused_add_select_backward_slice_backward_228.run(buf4019, buf4020, buf4021, buf4023, buf4025, buf4026, 73728, grid=grid(73728), stream=stream0)
        del buf4019
        del buf4020
        del buf4021
        del buf4023
        buf4033 = empty_strided((3, 2048, 4, 3), (24576, 12, 3, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_229.run(buf4026, buf4027, buf4028, buf4029, buf4033, 73728, grid=grid(73728), stream=stream0)
        buf4035 = empty_strided((6144, 12), (12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4033, (6144, 12), (12, 1), 0), permute_1494, out=buf4035)
        del permute_1494
        buf4036 = reinterpret_tensor(buf4035, (3, 2048, 12), (24576, 12, 1)); del buf4035  # reuse
        # Source Nodes: [l__mod___dynamic_dense_1_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_230.run(buf4036, mm_16, 73728, grid=grid(73728), stream=stream0)
        del mm_16
        buf4038 = buf4006; del buf4006  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4036, (6144, 12), (12, 1), 0), permute_1498, out=buf4038)
        del permute_1498
        buf4022 = buf3955; del buf3955  # reuse
        buf4024 = buf3958; del buf3958  # reuse
        buf4040 = buf3953; del buf3953  # reuse
        # Source Nodes: [add_10, add_12, add_5, mul_4], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_231.run(buf4022, buf4024, buf4040, buf4038, unsqueeze_11, embedding, buf99, buf105, buf3944, unsqueeze_36, buf3948, unsqueeze_33, buf3988, unsqueeze_25, buf4010, unsqueeze_23, unsqueeze_35, unsqueeze_32, unsqueeze_24, unsqueeze_22, unsqueeze_37, unsqueeze_34, rsqrt_7, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf105
        del rsqrt_7
        del unsqueeze_22
        del unsqueeze_23
        del unsqueeze_24
        del unsqueeze_25
        del unsqueeze_32
        del unsqueeze_33
        del unsqueeze_34
        del unsqueeze_35
        del unsqueeze_36
        del unsqueeze_37
        buf4030 = empty_strided((4, 1, 1, 3, 48), (144, 576, 576, 1, 3), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_232.run(buf4026, buf4027, buf4028, buf4029, buf4030, 576, 128, grid=grid(576), stream=stream0)
        del buf4026
        buf4031 = empty_strided((4, 1, 1, 3), (3, 12, 12, 1), device='cuda', dtype=torch.float16)
        buf4032 = reinterpret_tensor(buf4031, (4, 3), (3, 1)); del buf4031  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_per_fused_add_select_backward_slice_backward_sum_233.run(buf4032, buf4030, 12, 48, grid=grid(12), stream=stream0)
        del buf4030
        buf4034 = empty_strided((12, 12), (12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4033, (12, 6144), (1, 12), 0), view_67, out=buf4034)
        del buf4033
        del view_67
        buf4037 = empty_strided((12, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4036, (12, 6144), (1, 12), 0), view_65, out=buf4037)
        del buf4036
        del view_65
        buf4041 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4040, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf104, (6144, 5632), (5632, 1), 0), out=buf4041)
        buf4042 = reinterpret_tensor(buf104, (6144, 5632), (5632, 1)); del buf104  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4040, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_30, (2048, 5632), (5632, 1), 0), out=buf4042)
        del permute_30
        buf4043 = buf3982; del buf3982  # reuse
        buf4046 = reinterpret_tensor(buf103, (3, 2048, 5632), (11534336, 5632, 1)); del buf103  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf4046, buf4042, buf102, buf4043, 34603008, grid=grid(34603008), stream=stream0)
        del buf102
        del buf4042
        buf4044 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4043, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf101, (6144, 2048), (2048, 1), 0), out=buf4044)
        buf4045 = buf4038; del buf4038  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4043, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_29, (5632, 2048), (2048, 1), 0), out=buf4045)
        del permute_29
        buf4047 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4046, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf101, (6144, 2048), (2048, 1), 0), out=buf4047)
        buf4048 = reinterpret_tensor(buf101, (6144, 2048), (2048, 1)); del buf101  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4046, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_28, (5632, 2048), (2048, 1), 0), out=buf4048)
        del permute_28
        buf4053 = buf4040; del buf4040  # reuse
        # Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_4, rsqrt_3], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_234.run(buf4053, buf4045, buf4048, primals_18, unsqueeze_11, embedding, buf99, buf100, 6144, 2048, grid=grid(6144), stream=stream0)
        del primals_18
        buf4055 = reinterpret_tensor(buf4010, (6144, 2048), (2048, 1)); del buf4010  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4053, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_27, (2048, 2048), (2048, 1), 0), out=buf4055)
        del permute_27
        buf4056 = reinterpret_tensor(buf3988, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf3988  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf4055, buf4056, 12582912, grid=grid(12582912), stream=stream0)
        buf4057 = reinterpret_tensor(buf4055, (48, 2048, 128), (262144, 128, 1)); del buf4055  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf92, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf4056, (48, 2048, 128), (262144, 128, 1), 0), out=buf4057)
        buf4065 = reinterpret_tensor(buf3948, (6144, 2048), (2048, 1)); del buf3948  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf4057, buf4065, 12582912, grid=grid(12582912), stream=stream0)
        buf4067 = reinterpret_tensor(buf4057, (6144, 2048), (2048, 1)); del buf4057  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf4065, reinterpret_tensor(permute_19, (2048, 2048), (2048, 1), 0), out=buf4067)
        del permute_19
        buf4058 = reinterpret_tensor(buf3995, (48, 2048, 2048), (4194304, 2048, 1)); del buf3995  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf4056, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf96, (48, 128, 2048), (262144, 1, 128), 0), out=buf4058)
        buf4060 = buf59; del buf59  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward23')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf4058, buf92, slice_3, buf4060, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf4058
        buf4061 = reinterpret_tensor(buf96, (48, 128, 2048), (262144, 2048, 1)); del buf96  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf87, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf4060, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf4061)
        buf4062 = reinterpret_tensor(buf87, (48, 2048, 128), (262144, 128, 1)); del buf87  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf4060, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf88, (48, 2048, 128), (262144, 1, 2048), 0), out=buf4062)
        buf4063 = reinterpret_tensor(buf88, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf88  # reuse
        buf4064 = reinterpret_tensor(buf4056, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf4056  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf4061, select_3, select_1, buf4062, buf4063, buf4064, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        buf4069 = reinterpret_tensor(buf4062, (6144, 2048), (2048, 1)); del buf4062  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4063, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_18, (2048, 2048), (2048, 1), 0), out=buf4069)
        del permute_18
        buf4071 = reinterpret_tensor(buf4061, (6144, 2048), (2048, 1)); del buf4061  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4064, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_17, (2048, 2048), (2048, 1), 0), out=buf4071)
        del permute_17
        buf4075 = buf47; del buf47  # reuse
        buf4086 = buf4024; del buf4024  # reuse
        buf4079 = buf40; del buf40  # reuse
        buf4084 = buf4029; del buf4029  # reuse
        buf4085 = buf4028; del buf4028  # reuse
        buf4083 = buf60; del buf60  # reuse
        buf4087 = buf4027; del buf4027  # reuse
        buf4088 = buf4025; del buf4025  # reuse
        # Source Nodes: [add, add_2, add_3, add_4, add_6, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_6, rsqrt, rsqrt_1, rsqrt_2], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_235.run(buf4086, buf4067, primals_13, unsqueeze_10, embedding, buf4069, primals_12, unsqueeze_9, buf93, buf4014, unsqueeze_20, buf4018, unsqueeze_18, buf4053, unsqueeze_11, buf75, buf4071, primals_11, unsqueeze_8, buf81, buf4075, buf4079, buf4084, buf4085, buf4083, buf4087, buf4088, 6144, 2048, grid=grid(6144), stream=stream0)
        del primals_11
        del primals_12
        del primals_13
        del unsqueeze_18
        del unsqueeze_20
        buf4091 = empty_strided((3, 2048, 4, 2), (16384, 8, 2, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_236.run(buf4084, buf4085, buf4087, buf4088, buf4091, 49152, grid=grid(49152), stream=stream0)
        buf4093 = empty_strided((6144, 8), (8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4091, (6144, 8), (8, 1), 0), permute_1543, out=buf4093)
        del permute_1543
        buf4094 = reinterpret_tensor(buf4093, (3, 2048, 8), (16384, 8, 1)); del buf4093  # reuse
        # Source Nodes: [l__mod___dynamic_dense_0_act], Original ATen: [aten.gelu, aten.gelu_backward]
        triton_poi_fused_gelu_gelu_backward_237.run(buf4094, mm_7, 49152, grid=grid(49152), stream=stream0)
        del mm_7
        buf4096 = reinterpret_tensor(buf3944, (6144, 2048), (2048, 1)); del buf3944  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4094, (6144, 8), (8, 1), 0), permute_1547, out=buf4096)
        del permute_1547
        buf4098 = buf4014; del buf4014  # reuse
        # Source Nodes: [add_3, add_5], Original ATen: [aten.add, aten.div, aten.mul, aten.pow, aten.sum]
        triton_red_fused_add_div_mul_pow_sum_238.run(buf4098, buf4096, embedding, buf33, buf39, buf4022, unsqueeze_21, buf4018, unsqueeze_19, rsqrt_2, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf39
        del buf4018
        del rsqrt_2
        del unsqueeze_19
        del unsqueeze_21
        buf4100 = reinterpret_tensor(buf4046, (6144, 5632), (5632, 1)); del buf4046  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4098, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_13, (2048, 5632), (5632, 1), 0), out=buf4100)
        del permute_13
        buf4101 = buf4043; del buf4043  # reuse
        buf4104 = reinterpret_tensor(buf37, (3, 2048, 5632), (11534336, 5632, 1)); del buf37  # reuse
        # Source Nodes: [silu], Original ATen: [aten.add, aten.fill, aten.mul, aten.sigmoid, aten.silu, aten.sub]
        triton_poi_fused_add_fill_mul_sigmoid_silu_sub_60.run(buf4104, buf4100, buf36, buf4101, 34603008, grid=grid(34603008), stream=stream0)
        del buf36
        del buf4100
        buf4103 = buf4096; del buf4096  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4101, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_12, (5632, 2048), (2048, 1), 0), out=buf4103)
        del permute_12
        buf4106 = reinterpret_tensor(buf4022, (6144, 2048), (2048, 1)); del buf4022  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4104, (6144, 5632), (5632, 1), 0), reinterpret_tensor(permute_11, (5632, 2048), (2048, 1), 0), out=buf4106)
        del permute_11
        buf4049 = buf4015; del buf4015  # reuse
        buf4072 = empty_strided((1, 1, 2048, 48), (98304, 98304, 1, 2048), device='cuda', dtype=torch.float32)
        buf4076 = empty_strided((1, 1, 2048, 48), (98304, 98304, 1, 2048), device='cuda', dtype=torch.float32)
        buf4080 = empty_strided((1, 1, 2048, 48), (98304, 98304, 1, 2048), device='cuda', dtype=torch.float32)
        buf4107 = empty_strided((1, 1, 2048, 48), (98304, 98304, 1, 2048), device='cuda', dtype=torch.float32)
        # Source Nodes: [add, add_10, add_11, add_2, add_3, add_4, add_5, add_6, float_1, float_2, float_3, float_4, float_6, mean, mean_1, mean_2, mean_3, mul, mul_1, mul_12, mul_13, mul_18, mul_19, mul_2, mul_3, mul_4, mul_6, mul_7, rsqrt, rsqrt_1, rsqrt_2, rsqrt_3, type_as, type_as_1, type_as_2, type_as_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_sum_239.run(buf4045, buf4048, unsqueeze_11, embedding, buf99, buf100, buf4067, unsqueeze_10, buf93, buf4069, unsqueeze_9, buf75, buf4071, unsqueeze_8, buf81, buf4103, buf4106, buf33, buf34, buf4049, buf4072, buf4076, buf4080, buf4107, 98304, 128, grid=grid(98304), stream=stream0)
        del buf100
        del buf4045
        del buf4048
        del buf4067
        del buf4069
        del buf4071
        del buf75
        del buf81
        del buf93
        del buf99
        del unsqueeze_10
        del unsqueeze_11
        buf4050 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_19, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4049, buf4050, 2048, 48, grid=grid(2048), stream=stream0)
        del buf4049
        buf4054 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4053, (2048, 6144), (1, 2048), 0), buf98, out=buf4054)
        del buf4053
        del buf98
        buf4066 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4065, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf94, (6144, 2048), (2048, 1), 0), out=buf4066)
        del buf4065
        del buf94
        buf4068 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4063, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf76, (6144, 2048), (2048, 1), 0), out=buf4068)
        del buf4063
        del buf76
        buf4070 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4064, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf82, (6144, 2048), (2048, 1), 0), out=buf4070)
        del buf4064
        del buf82
        buf4073 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_4, add_6, float_3, mean_2, mul_3, mul_6, mul_7, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4072, buf4073, 2048, 48, grid=grid(2048), stream=stream0)
        del buf4072
        buf4077 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_3, add_4, float_2, mean_1, mul_2, mul_3, mul_4, rsqrt_1, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4076, buf4077, 2048, 48, grid=grid(2048), stream=stream0)
        del buf4076
        buf4081 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_2, float_1, mean, mul, mul_1, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4080, buf4081, 2048, 48, grid=grid(2048), stream=stream0)
        del buf4080
        buf4089 = empty_strided((4, 1, 1, 2), (2, 8, 8, 1), device='cuda', dtype=torch.float16)
        buf4090 = reinterpret_tensor(buf4089, (4, 2), (2, 1)); del buf4089  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.select_backward, aten.slice_backward, aten.sum]
        triton_red_fused_add_select_backward_slice_backward_sum_240.run(buf4090, buf4084, buf4085, buf4087, buf4088, 8, 6144, grid=grid(8), stream=stream0)
        del buf4084
        del buf4085
        del buf4087
        del buf4088
        buf4092 = empty_strided((8, 8), (8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4091, (8, 6144), (1, 8), 0), view_32, out=buf4092)
        del buf4091
        del view_32
        buf4095 = empty_strided((8, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4094, (8, 6144), (1, 8), 0), view_30, out=buf4095)
        del buf4094
        del view_30
        buf4099 = empty_strided((2048, 5632), (5632, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4098, (2048, 6144), (1, 2048), 0), reinterpret_tensor(buf38, (6144, 5632), (5632, 1), 0), out=buf4099)
        del buf38
        buf4102 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4101, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf35, (6144, 2048), (2048, 1), 0), out=buf4102)
        del buf4101
        buf4105 = empty_strided((5632, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4104, (5632, 6144), (1, 5632), 0), reinterpret_tensor(buf35, (6144, 2048), (2048, 1), 0), out=buf4105)
        del buf4104
        buf4108 = empty_strided((1, 1, 2048), (2048, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_3, add_4, float_4, mean_1, mul_12, mul_13, rsqrt_1, type_as_3], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_per_fused__to_copy_mul_sum_51.run(buf4107, buf4108, 2048, 48, grid=grid(2048), stream=stream0)
        del buf4107
        buf4110 = buf4075; del buf4075  # reuse
        buf4111 = buf35; del buf35  # reuse
        # Source Nodes: [add_3, add_4, float_4, mean_1, mul_12, rsqrt_1], Original ATen: [aten._to_copy, aten.add, aten.div, aten.mean, aten.mul, aten.rsqrt, aten.sum]
        triton_red_fused__to_copy_add_div_mean_mul_rsqrt_sum_241.run(buf4103, buf4106, primals_6, embedding, buf33, buf34, buf4098, buf4110, buf4111, 6144, 2048, grid=grid(6144), stream=stream0)
        del buf33
        del buf34
        del buf4103
        del buf4106
        del primals_6
        buf4112 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4111, (2048, 6144), (1, 2048), 0), buf32, out=buf4112)
        buf4113 = buf32; del buf32  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4111, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_10, (2048, 2048), (2048, 1), 0), out=buf4113)
        del permute_10
        buf4114 = reinterpret_tensor(buf4111, (3, 16, 2048, 128), (4194304, 262144, 128, 1)); del buf4111  # reuse
        # Source Nodes: [], Original ATen: [aten.clone]
        triton_poi_fused_clone_12.run(buf4113, buf4114, 12582912, grid=grid(12582912), stream=stream0)
        buf4115 = reinterpret_tensor(buf4113, (48, 2048, 128), (262144, 128, 1)); del buf4113  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf28, (48, 2048, 2048), (4194304, 1, 2048), 0), reinterpret_tensor(buf4114, (48, 2048, 128), (262144, 128, 1), 0), out=buf4115)
        buf4116 = reinterpret_tensor(buf4060, (48, 2048, 2048), (4194304, 2048, 1)); del buf4060  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf4114, (48, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf30, (48, 128, 2048), (262144, 1, 128), 0), out=buf4116)
        buf4118 = buf92; del buf92  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten._softmax_backward_data, aten.mul, aten.nll_loss_forward, aten.where]
        print_mem(s='softmax_backward24')
        triton_red_fused__softmax_backward_data_mul_nll_loss_forward_where_63.run(buf4116, buf28, slice_3, buf4118, 98304, 2048, grid=grid(98304), stream=stream0)
        del buf28
        del buf4116
        del slice_3
        buf4119 = reinterpret_tensor(buf4114, (48, 128, 2048), (262144, 2048, 1)); del buf4114  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf23, (48, 128, 2048), (262144, 1, 128), 0), reinterpret_tensor(buf4118, (48, 2048, 2048), (4194304, 2048, 1), 0), out=buf4119)
        buf4120 = reinterpret_tensor(buf23, (48, 2048, 128), (262144, 128, 1)); del buf23  # reuse
        # Source Nodes: [], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf4118, (48, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf24, (48, 2048, 128), (262144, 1, 2048), 0), out=buf4120)
        del buf4118
        buf4121 = reinterpret_tensor(buf24, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf24  # reuse
        buf4122 = reinterpret_tensor(buf30, (3, 2048, 16, 128), (4194304, 2048, 128, 1)); del buf30  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy]
        triton_poi_fused__to_copy_64.run(buf4119, select_3, select_1, buf4120, buf4121, buf4122, 6144, 2048, grid=grid(6144, 2048), stream=stream0)
        del buf4119
        del select_1
        del select_3
        buf4123 = reinterpret_tensor(buf4120, (6144, 2048), (2048, 1)); del buf4120  # reuse
        # Source Nodes: [], Original ATen: [aten.view]
        triton_poi_fused_view_13.run(buf4115, buf4123, 12582912, grid=grid(12582912), stream=stream0)
        buf4124 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4123, (2048, 6144), (1, 2048), 0), reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), out=buf4124)
        buf4125 = reinterpret_tensor(buf4115, (6144, 2048), (2048, 1)); del buf4115  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(buf4123, reinterpret_tensor(permute_2, (2048, 2048), (2048, 1), 0), out=buf4125)
        del permute_2
        buf4126 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4121, (2048, 6144), (1, 2048), 0), reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), out=buf4126)
        buf4127 = buf4123; del buf4123  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4121, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute_1, (2048, 2048), (2048, 1), 0), out=buf4127)
        del permute_1
        buf4130 = reinterpret_tensor(buf4121, (6144, 2048), (2048, 1)); del buf4121  # reuse
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4122, (6144, 2048), (2048, 1), 0), reinterpret_tensor(permute, (2048, 2048), (2048, 1), 0), out=buf4130)
        del permute
        buf4131 = empty_strided((50257, 2048), (2048, 1), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.add, aten.embedding_dense_backward]
        triton_poi_fused_add_embedding_dense_backward_242.run(buf4131, 102926336, grid=grid(102926336), stream=stream0)
        buf4128 = buf4086; del buf4086  # reuse
        # Source Nodes: [], Original ATen: [aten._to_copy, aten.add, aten.embedding_dense_backward, aten.mul]
        triton_poi_fused__to_copy_add_embedding_dense_backward_mul_243.run(buf4128, buf4079, unsqueeze_9, buf4083, unsqueeze_8, buf4098, buf4110, buf4125, buf4127, primals_340, buf4130, buf4131, 12582912, grid=grid(12582912), stream=stream0)
        del buf4079
        del buf4083
        del buf4098
        del buf4110
        del buf4125
        del buf4127
        del buf4128
        del buf4130
        del primals_340
        del unsqueeze_8
        del unsqueeze_9
        buf4129 = empty_strided((2048, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf4122, (2048, 6144), (1, 2048), 0), reinterpret_tensor(embedding, (6144, 2048), (2048, 1), 0), out=buf4129)
        del buf4122
        del embedding
        buf4133 = empty_strided((50257, 2048), (2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: [aten.embedding_dense_backward]
        triton_poi_fused_embedding_dense_backward_244.run(buf4131, buf4133, 102926336, grid=grid(102926336), stream=stream0)
        return (None, reinterpret_tensor(buf4129, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4126, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4124, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4112, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4108, (2048, ), (1, ), 0), reinterpret_tensor(buf4105, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf4102, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf4099, (2048, 5632), (5632, 1), 0), buf4090, reinterpret_tensor(buf4081, (2048, ), (1, ), 0), reinterpret_tensor(buf4077, (2048, ), (1, ), 0), reinterpret_tensor(buf4073, (2048, ), (1, ), 0), reinterpret_tensor(buf4070, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4068, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4066, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4054, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4050, (2048, ), (1, ), 0), reinterpret_tensor(buf4047, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf4044, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf4041, (2048, 5632), (5632, 1), 0), buf4032, reinterpret_tensor(buf4016, (2048, ), (1, ), 0), reinterpret_tensor(buf4012, (2048, ), (1, ), 0), reinterpret_tensor(buf4008, (2048, ), (1, ), 0), reinterpret_tensor(buf4005, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4003, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf4001, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3989, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3986, (2048, ), (1, ), 0), reinterpret_tensor(buf3983, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3980, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3977, (2048, 5632), (5632, 1), 0), buf3968, reinterpret_tensor(buf3946, (2048, ), (1, ), 0), reinterpret_tensor(buf3942, (2048, ), (1, ), 0), reinterpret_tensor(buf3938, (2048, ), (1, ), 0), reinterpret_tensor(buf3935, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3933, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3931, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3919, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3915, (2048, ), (1, ), 0), reinterpret_tensor(buf3912, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3909, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3906, (2048, 5632), (5632, 1), 0), buf3897, reinterpret_tensor(buf3869, (2048, ), (1, ), 0), reinterpret_tensor(buf3865, (2048, ), (1, ), 0), reinterpret_tensor(buf3861, (2048, ), (1, ), 0), reinterpret_tensor(buf3858, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3856, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3854, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3842, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3839, (2048, ), (1, ), 0), reinterpret_tensor(buf3836, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3833, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3830, (2048, 5632), (5632, 1), 0), buf3821, reinterpret_tensor(buf3787, (2048, ), (1, ), 0), reinterpret_tensor(buf3783, (2048, ), (1, ), 0), reinterpret_tensor(buf3779, (2048, ), (1, ), 0), reinterpret_tensor(buf3776, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3774, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3772, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3760, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3757, (2048, ), (1, ), 0), reinterpret_tensor(buf3754, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3751, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3748, (2048, 5632), (5632, 1), 0), buf3739, reinterpret_tensor(buf3699, (2048, ), (1, ), 0), reinterpret_tensor(buf3695, (2048, ), (1, ), 0), reinterpret_tensor(buf3691, (2048, ), (1, ), 0), reinterpret_tensor(buf3688, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3686, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3684, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3672, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3668, (2048, ), (1, ), 0), reinterpret_tensor(buf3665, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3662, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3659, (2048, 5632), (5632, 1), 0), buf3650, reinterpret_tensor(buf3597, (2048, ), (1, ), 0), reinterpret_tensor(buf3593, (2048, ), (1, ), 0), reinterpret_tensor(buf3589, (2048, ), (1, ), 0), reinterpret_tensor(buf3586, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3584, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3582, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3570, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3567, (2048, ), (1, ), 0), reinterpret_tensor(buf3564, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3561, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3558, (2048, 5632), (5632, 1), 0), buf3549, reinterpret_tensor(buf3497, (2048, ), (1, ), 0), reinterpret_tensor(buf3493, (2048, ), (1, ), 0), reinterpret_tensor(buf3489, (2048, ), (1, ), 0), reinterpret_tensor(buf3486, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3484, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3482, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3470, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3467, (2048, ), (1, ), 0), reinterpret_tensor(buf3464, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3461, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3458, (2048, 5632), (5632, 1), 0), buf3449, reinterpret_tensor(buf3391, (2048, ), (1, ), 0), reinterpret_tensor(buf3387, (2048, ), (1, ), 0), reinterpret_tensor(buf3383, (2048, ), (1, ), 0), reinterpret_tensor(buf3380, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3378, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3376, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3364, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3360, (2048, ), (1, ), 0), reinterpret_tensor(buf3357, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3354, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3351, (2048, 5632), (5632, 1), 0), buf3342, reinterpret_tensor(buf3278, (2048, ), (1, ), 0), reinterpret_tensor(buf3274, (2048, ), (1, ), 0), reinterpret_tensor(buf3270, (2048, ), (1, ), 0), reinterpret_tensor(buf3267, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3265, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3263, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3251, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3248, (2048, ), (1, ), 0), reinterpret_tensor(buf3245, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3242, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3239, (2048, 5632), (5632, 1), 0), buf3230, reinterpret_tensor(buf3160, (2048, ), (1, ), 0), reinterpret_tensor(buf3156, (2048, ), (1, ), 0), reinterpret_tensor(buf3152, (2048, ), (1, ), 0), reinterpret_tensor(buf3149, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3147, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3145, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3133, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3130, (2048, ), (1, ), 0), reinterpret_tensor(buf3127, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3124, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf3121, (2048, 5632), (5632, 1), 0), buf3112, reinterpret_tensor(buf3036, (2048, ), (1, ), 0), reinterpret_tensor(buf3032, (2048, ), (1, ), 0), reinterpret_tensor(buf3028, (2048, ), (1, ), 0), reinterpret_tensor(buf3025, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3023, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3021, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3009, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf3005, (2048, ), (1, ), 0), reinterpret_tensor(buf3002, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2999, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2996, (2048, 5632), (5632, 1), 0), buf2987, reinterpret_tensor(buf2892, (2048, ), (1, ), 0), reinterpret_tensor(buf2888, (2048, ), (1, ), 0), reinterpret_tensor(buf2884, (2048, ), (1, ), 0), reinterpret_tensor(buf2881, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2879, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2877, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2865, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2862, (2048, ), (1, ), 0), reinterpret_tensor(buf2859, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2856, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2853, (2048, 5632), (5632, 1), 0), buf2844, reinterpret_tensor(buf2756, (2048, ), (1, ), 0), reinterpret_tensor(buf2752, (2048, ), (1, ), 0), reinterpret_tensor(buf2748, (2048, ), (1, ), 0), reinterpret_tensor(buf2745, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2743, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2741, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2729, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2726, (2048, ), (1, ), 0), reinterpret_tensor(buf2723, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2720, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2717, (2048, 5632), (5632, 1), 0), buf2708, reinterpret_tensor(buf2614, (2048, ), (1, ), 0), reinterpret_tensor(buf2610, (2048, ), (1, ), 0), reinterpret_tensor(buf2606, (2048, ), (1, ), 0), reinterpret_tensor(buf2603, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2601, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2599, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2587, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2583, (2048, ), (1, ), 0), reinterpret_tensor(buf2580, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2577, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2574, (2048, 5632), (5632, 1), 0), buf2565, reinterpret_tensor(buf2465, (2048, ), (1, ), 0), reinterpret_tensor(buf2461, (2048, ), (1, ), 0), reinterpret_tensor(buf2457, (2048, ), (1, ), 0), reinterpret_tensor(buf2454, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2452, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2450, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2438, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2435, (2048, ), (1, ), 0), reinterpret_tensor(buf2432, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2429, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2426, (2048, 5632), (5632, 1), 0), buf2417, reinterpret_tensor(buf2311, (2048, ), (1, ), 0), reinterpret_tensor(buf2307, (2048, ), (1, ), 0), reinterpret_tensor(buf2303, (2048, ), (1, ), 0), reinterpret_tensor(buf2300, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2298, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2296, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2284, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2281, (2048, ), (1, ), 0), reinterpret_tensor(buf2278, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2275, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2272, (2048, 5632), (5632, 1), 0), buf2263, reinterpret_tensor(buf2151, (2048, ), (1, ), 0), reinterpret_tensor(buf2147, (2048, ), (1, ), 0), reinterpret_tensor(buf2143, (2048, ), (1, ), 0), reinterpret_tensor(buf2140, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2138, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2136, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2124, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf2120, (2048, ), (1, ), 0), reinterpret_tensor(buf2117, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2114, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf2111, (2048, 5632), (5632, 1), 0), buf2102, reinterpret_tensor(buf1965, (2048, ), (1, ), 0), reinterpret_tensor(buf1961, (2048, ), (1, ), 0), reinterpret_tensor(buf1957, (2048, ), (1, ), 0), reinterpret_tensor(buf1954, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1952, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1950, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1938, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1935, (2048, ), (1, ), 0), reinterpret_tensor(buf1932, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1929, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1926, (2048, 5632), (5632, 1), 0), buf1917, reinterpret_tensor(buf1793, (2048, ), (1, ), 0), reinterpret_tensor(buf1789, (2048, ), (1, ), 0), reinterpret_tensor(buf1785, (2048, ), (1, ), 0), reinterpret_tensor(buf1782, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1780, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1778, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1766, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1763, (2048, ), (1, ), 0), reinterpret_tensor(buf1760, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1757, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1754, (2048, 5632), (5632, 1), 0), buf1745, reinterpret_tensor(buf1615, (2048, ), (1, ), 0), reinterpret_tensor(buf1611, (2048, ), (1, ), 0), reinterpret_tensor(buf1607, (2048, ), (1, ), 0), reinterpret_tensor(buf1604, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1602, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1600, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1588, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1584, (2048, ), (1, ), 0), reinterpret_tensor(buf1581, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1578, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1575, (2048, 5632), (5632, 1), 0), buf1566, reinterpret_tensor(buf1430, (2048, ), (1, ), 0), reinterpret_tensor(buf1426, (2048, ), (1, ), 0), reinterpret_tensor(buf1422, (2048, ), (1, ), 0), reinterpret_tensor(buf1419, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1417, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1415, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1403, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1400, (2048, ), (1, ), 0), reinterpret_tensor(buf1397, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1394, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1391, (2048, 5632), (5632, 1), 0), buf1382, reinterpret_tensor(buf1240, (2048, ), (1, ), 0), reinterpret_tensor(buf1236, (2048, ), (1, ), 0), reinterpret_tensor(buf1232, (2048, ), (1, ), 0), reinterpret_tensor(buf1229, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1227, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1225, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1213, (2048, 2048), (2048, 1), 0), reinterpret_tensor(buf1210, (2048, ), (1, ), 0), reinterpret_tensor(buf1207, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1204, (5632, 2048), (2048, 1), 0), reinterpret_tensor(buf1201, (2048, 5632), (5632, 1), 0), buf1129, reinterpret_tensor(buf1095, (2048, ), (1, ), 0), buf4133, reinterpret_tensor(buf4095, (8, 2048), (2048, 1), 0), reinterpret_tensor(buf4092, (8, 8), (8, 1), 0), reinterpret_tensor(buf4037, (12, 2048), (2048, 1), 0), reinterpret_tensor(buf4034, (12, 12), (12, 1), 0), reinterpret_tensor(buf3973, (16, 2048), (2048, 1), 0), reinterpret_tensor(buf3970, (16, 16), (16, 1), 0), reinterpret_tensor(buf3902, (20, 2048), (2048, 1), 0), reinterpret_tensor(buf3899, (20, 20), (20, 1), 0), reinterpret_tensor(buf3826, (24, 2048), (2048, 1), 0), reinterpret_tensor(buf3823, (24, 24), (24, 1), 0), reinterpret_tensor(buf3744, (28, 2048), (2048, 1), 0), reinterpret_tensor(buf3741, (28, 28), (28, 1), 0), reinterpret_tensor(buf3655, (32, 2048), (2048, 1), 0), reinterpret_tensor(buf3652, (32, 32), (32, 1), 0), reinterpret_tensor(buf3554, (36, 2048), (2048, 1), 0), reinterpret_tensor(buf3551, (36, 36), (36, 1), 0), reinterpret_tensor(buf3454, (40, 2048), (2048, 1), 0), reinterpret_tensor(buf3451, (40, 40), (40, 1), 0), reinterpret_tensor(buf3347, (44, 2048), (2048, 1), 0), reinterpret_tensor(buf3344, (44, 44), (44, 1), 0), reinterpret_tensor(buf3235, (48, 2048), (2048, 1), 0), reinterpret_tensor(buf3232, (48, 48), (48, 1), 0), reinterpret_tensor(buf3117, (52, 2048), (2048, 1), 0), reinterpret_tensor(buf3114, (52, 52), (52, 1), 0), reinterpret_tensor(buf2992, (56, 2048), (2048, 1), 0), reinterpret_tensor(buf2989, (56, 56), (56, 1), 0), reinterpret_tensor(buf2849, (60, 2048), (2048, 1), 0), reinterpret_tensor(buf2846, (60, 60), (60, 1), 0), reinterpret_tensor(buf2713, (64, 2048), (2048, 1), 0), reinterpret_tensor(buf2710, (64, 64), (64, 1), 0), reinterpret_tensor(buf2570, (68, 2048), (2048, 1), 0), reinterpret_tensor(buf2567, (68, 68), (68, 1), 0), reinterpret_tensor(buf2422, (72, 2048), (2048, 1), 0), reinterpret_tensor(buf2419, (72, 72), (72, 1), 0), reinterpret_tensor(buf2268, (76, 2048), (2048, 1), 0), reinterpret_tensor(buf2265, (76, 76), (76, 1), 0), reinterpret_tensor(buf2107, (80, 2048), (2048, 1), 0), reinterpret_tensor(buf2104, (80, 80), (80, 1), 0), reinterpret_tensor(buf1922, (84, 2048), (2048, 1), 0), reinterpret_tensor(buf1919, (84, 84), (84, 1), 0), reinterpret_tensor(buf1750, (88, 2048), (2048, 1), 0), reinterpret_tensor(buf1747, (88, 88), (88, 1), 0), reinterpret_tensor(buf1571, (92, 2048), (2048, 1), 0), reinterpret_tensor(buf1568, (92, 92), (92, 1), 0), reinterpret_tensor(buf1387, (96, 2048), (2048, 1), 0), reinterpret_tensor(buf1384, (96, 96), (96, 1), 0), reinterpret_tensor(buf1134, (100, 2048), (2048, 1), 0), reinterpret_tensor(buf1131, (100, 100), (100, 1), 0), reinterpret_tensor(buf7, (50257, 2048), (2048, 1), 0), None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    times=1
    repeat=1
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    print_mem(s='before rand tensor')
    primals_6 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_11 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_12 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_13 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_18 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_23 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_24 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_25 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_30 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_35 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_36 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_37 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_42 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_47 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_48 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_49 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_54 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_59 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_60 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_61 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_66 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_71 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_72 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_73 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_78 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_83 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_84 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_85 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_90 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_95 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_96 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_97 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_102 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_107 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_108 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_109 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_114 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_119 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_120 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_121 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_126 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_131 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_132 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_133 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_138 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_143 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_144 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_145 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_150 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_155 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_156 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_157 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_162 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_167 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_168 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_169 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_174 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_179 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_180 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_181 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_186 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_191 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_192 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_193 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_198 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_203 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_204 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_205 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_210 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_215 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_216 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_217 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_222 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_227 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_228 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_229 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_234 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_239 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_240 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_241 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_246 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_251 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_252 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_253 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_258 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_263 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_264 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_265 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_270 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_275 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_276 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_277 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_282 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_287 = rand_strided((2048, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_340 = rand_strided((3, 2048), (2049, 1), device='cuda:0', dtype=torch.int64)
    primals_341 = rand_strided((3, 2048), (2049, 1), device='cuda:0', dtype=torch.int64)
    embedding = rand_strided((3, 2048, 2048), (4194304, 2048, 1), device='cuda:0', dtype=torch.float16)
    permute = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_1 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_2 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    select_1 = rand_strided((1, 2048, 1, 64), (0, 128, 0, 2), device='cuda:0', dtype=torch.float16)
    select_3 = rand_strided((1, 2048, 1, 64), (0, 128, 0, 2), device='cuda:0', dtype=torch.float16)
    slice_3 = rand_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda:0', dtype=torch.bool)
    scalar_tensor = rand_strided((), (), device='cuda:0', dtype=torch.float16)
    permute_10 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_11 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_12 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_13 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_2 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_30 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_7 = rand_strided((6144, 8), (8, 1), device='cuda:0', dtype=torch.float16)
    view_32 = rand_strided((6144, 8), (8, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_8 = rand_strided((3, 2048, 1), (4096, 2, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_9 = rand_strided((3, 2048, 1), (4096, 2, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_10 = rand_strided((3, 2048, 1), (4096, 2, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_11 = rand_strided((3, 2048, 1), (4096, 2, 0), device='cuda:0', dtype=torch.float16)
    permute_17 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_18 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_19 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_27 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_28 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_29 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_30 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_7 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_65 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_16 = rand_strided((6144, 12), (12, 1), device='cuda:0', dtype=torch.float16)
    view_67 = rand_strided((6144, 12), (12, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_18 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_19 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_20 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_21 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_22 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_23 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_24 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_25 = rand_strided((3, 2048, 1), (6144, 3, 0), device='cuda:0', dtype=torch.float16)
    permute_34 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_35 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_36 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_44 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_45 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_46 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_47 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_12 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_100 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_25 = rand_strided((6144, 16), (16, 1), device='cuda:0', dtype=torch.float16)
    view_102 = rand_strided((6144, 16), (16, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_32 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_33 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_34 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_35 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_36 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_37 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_38 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_39 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_40 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_41 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_42 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_43 = rand_strided((3, 2048, 1), (8192, 4, 0), device='cuda:0', dtype=torch.float16)
    permute_51 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_52 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_53 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_61 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_62 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_63 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_64 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_17 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_135 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_34 = rand_strided((6144, 20), (20, 1), device='cuda:0', dtype=torch.float16)
    view_137 = rand_strided((6144, 20), (20, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_50 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_51 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_52 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_53 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_54 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_55 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_56 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_57 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_58 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_59 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_60 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_61 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_62 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_63 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_64 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_65 = rand_strided((3, 2048, 1), (10240, 5, 0), device='cuda:0', dtype=torch.float16)
    permute_68 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_69 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_70 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_78 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_79 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_80 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_81 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_22 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_170 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_43 = rand_strided((6144, 24), (24, 1), device='cuda:0', dtype=torch.float16)
    view_172 = rand_strided((6144, 24), (24, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_72 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_73 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_74 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_75 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_76 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_77 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_78 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_79 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_80 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_81 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_82 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_83 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_84 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_85 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_86 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_87 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_88 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_89 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_90 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_91 = rand_strided((3, 2048, 1), (12288, 6, 0), device='cuda:0', dtype=torch.float16)
    permute_85 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_86 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_87 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_95 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_96 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_97 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_98 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_27 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_205 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_52 = rand_strided((6144, 28), (28, 1), device='cuda:0', dtype=torch.float16)
    view_207 = rand_strided((6144, 28), (28, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_98 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_99 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_100 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_101 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_102 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_103 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_104 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_105 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_106 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_107 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_108 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_109 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_110 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_111 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_112 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_113 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_114 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_115 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_116 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_117 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_118 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_119 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_120 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_121 = rand_strided((3, 2048, 1), (14336, 7, 0), device='cuda:0', dtype=torch.float16)
    permute_102 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_103 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_104 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_112 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_113 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_114 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_115 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_32 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_240 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_61 = rand_strided((6144, 32), (32, 1), device='cuda:0', dtype=torch.float16)
    view_242 = rand_strided((6144, 32), (32, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_128 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_129 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_130 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_131 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_132 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_133 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_134 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_135 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_136 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_137 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_138 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_139 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_140 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_141 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_142 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_143 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_144 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_145 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_146 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_147 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_148 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_149 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_150 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_151 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_152 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_153 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_154 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_155 = rand_strided((3, 2048, 1), (16384, 8, 0), device='cuda:0', dtype=torch.float16)
    permute_119 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_120 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_121 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_129 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_130 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_131 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_132 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_37 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_275 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_70 = rand_strided((6144, 36), (36, 1), device='cuda:0', dtype=torch.float16)
    view_277 = rand_strided((6144, 36), (36, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_162 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_163 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_164 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_165 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_166 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_167 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_168 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_169 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_170 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_171 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_172 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_173 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_174 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_175 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_176 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_177 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_178 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_179 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_180 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_181 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_182 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_183 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_184 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_185 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_186 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_187 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_188 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_189 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_190 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_191 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_192 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_193 = rand_strided((3, 2048, 1), (18432, 9, 0), device='cuda:0', dtype=torch.float16)
    permute_136 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_137 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_138 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_146 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_147 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_148 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_149 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_42 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_310 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_79 = rand_strided((6144, 40), (40, 1), device='cuda:0', dtype=torch.float16)
    view_312 = rand_strided((6144, 40), (40, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_200 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_201 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_202 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_203 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_204 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_205 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_206 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_207 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_208 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_209 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_210 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_211 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_212 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_213 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_214 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_215 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_216 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_217 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_218 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_219 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_220 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_221 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_222 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_223 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_224 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_225 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_226 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_227 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_228 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_229 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_230 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_231 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_232 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_233 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_234 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_235 = rand_strided((3, 2048, 1), (20480, 10, 0), device='cuda:0', dtype=torch.float16)
    permute_153 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_154 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_155 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_163 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_164 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_165 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_166 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_47 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_345 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_88 = rand_strided((6144, 44), (44, 1), device='cuda:0', dtype=torch.float16)
    view_347 = rand_strided((6144, 44), (44, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_242 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_243 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_244 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_245 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_246 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_247 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_248 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_249 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_250 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_251 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_252 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_253 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_254 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_255 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_256 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_257 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_258 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_259 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_260 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_261 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_262 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_263 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_264 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_265 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_266 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_267 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_268 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_269 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_270 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_271 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_272 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_273 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_274 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_275 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_276 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_277 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_278 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_279 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_280 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_281 = rand_strided((3, 2048, 1), (22528, 11, 0), device='cuda:0', dtype=torch.float16)
    permute_170 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_171 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_172 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_180 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_181 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_182 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_183 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_52 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_380 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_97 = rand_strided((6144, 48), (48, 1), device='cuda:0', dtype=torch.float16)
    view_382 = rand_strided((6144, 48), (48, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_288 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_289 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_290 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_291 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_292 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_293 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_294 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_295 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_296 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_297 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_298 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_299 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_300 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_301 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_302 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_303 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_304 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_305 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_306 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_307 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_308 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_309 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_310 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_311 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_312 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_313 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_314 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_315 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_316 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_317 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_318 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_319 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_320 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_321 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_322 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_323 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_324 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_325 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_326 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_327 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_328 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_329 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_330 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_331 = rand_strided((3, 2048, 1), (24576, 12, 0), device='cuda:0', dtype=torch.float16)
    permute_187 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_188 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_189 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_197 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_198 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_199 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_200 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_57 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_415 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_106 = rand_strided((6144, 52), (52, 1), device='cuda:0', dtype=torch.float16)
    view_417 = rand_strided((6144, 52), (52, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_338 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_339 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_340 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_341 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_342 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_343 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_344 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_345 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_346 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_347 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_348 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_349 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_350 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_351 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_352 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_353 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_354 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_355 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_356 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_357 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_358 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_359 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_360 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_361 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_362 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_363 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_364 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_365 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_366 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_367 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_368 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_369 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_370 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_371 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_372 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_373 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_374 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_375 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_376 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_377 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_378 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_379 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_380 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_381 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_382 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_383 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_384 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_385 = rand_strided((3, 2048, 1), (26624, 13, 0), device='cuda:0', dtype=torch.float16)
    permute_204 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_205 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_206 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_214 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_215 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_216 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_217 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_62 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_450 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_115 = rand_strided((6144, 56), (56, 1), device='cuda:0', dtype=torch.float16)
    view_452 = rand_strided((6144, 56), (56, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_392 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_393 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_394 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_395 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_396 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_397 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_398 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_399 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_400 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_401 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_402 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_403 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_404 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_405 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_406 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_407 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_408 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_409 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_410 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_411 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_412 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_413 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_414 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_415 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_416 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_417 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_418 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_419 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_420 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_421 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_422 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_423 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_424 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_425 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_426 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_427 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_428 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_429 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_430 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_431 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_432 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_433 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_434 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_435 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_436 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_437 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_438 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_439 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_440 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_441 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_442 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_443 = rand_strided((3, 2048, 1), (28672, 14, 0), device='cuda:0', dtype=torch.float16)
    permute_221 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_222 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_223 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_231 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_232 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_233 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_234 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_67 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_485 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_124 = rand_strided((6144, 60), (60, 1), device='cuda:0', dtype=torch.float16)
    view_487 = rand_strided((6144, 60), (60, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_450 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_451 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_452 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_453 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_454 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_455 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_456 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_457 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_458 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_459 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_460 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_461 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_462 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_463 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_464 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_465 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_466 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_467 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_468 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_469 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_470 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_471 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_472 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_473 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_474 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_475 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_476 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_477 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_478 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_479 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_480 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_481 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_482 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_483 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_484 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_485 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_486 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_487 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_488 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_489 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_490 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_491 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_492 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_493 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_494 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_495 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_496 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_497 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_498 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_499 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_500 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_501 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_502 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_503 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_504 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_505 = rand_strided((3, 2048, 1), (30720, 15, 0), device='cuda:0', dtype=torch.float16)
    permute_238 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_239 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_240 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_248 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_249 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_250 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_251 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_72 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_520 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_133 = rand_strided((6144, 64), (64, 1), device='cuda:0', dtype=torch.float16)
    view_522 = rand_strided((6144, 64), (64, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_512 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_513 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_514 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_515 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_516 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_517 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_518 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_519 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_520 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_521 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_522 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_523 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_524 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_525 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_526 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_527 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_528 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_529 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_530 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_531 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_532 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_533 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_534 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_535 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_536 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_537 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_538 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_539 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_540 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_541 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_542 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_543 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_544 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_545 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_546 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_547 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_548 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_549 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_550 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_551 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_552 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_553 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_554 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_555 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_556 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_557 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_558 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_559 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_560 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_561 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_562 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_563 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_564 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_565 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_566 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_567 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_568 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_569 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_570 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_571 = rand_strided((3, 2048, 1), (32768, 16, 0), device='cuda:0', dtype=torch.float16)
    permute_255 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_256 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_257 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_265 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_266 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_267 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_268 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_77 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_555 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_142 = rand_strided((6144, 68), (68, 1), device='cuda:0', dtype=torch.float16)
    view_557 = rand_strided((6144, 68), (68, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_578 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_579 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_580 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_581 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_582 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_583 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_584 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_585 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_586 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_587 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_588 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_589 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_590 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_591 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_592 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_593 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_594 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_595 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_596 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_597 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_598 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_599 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_600 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_601 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_602 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_603 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_604 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_605 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_606 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_607 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_608 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_609 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_610 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_611 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_612 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_613 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_614 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_615 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_616 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_617 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_618 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_619 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_620 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_621 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_622 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_623 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_624 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_625 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_626 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_627 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_628 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_629 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_630 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_631 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_632 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_633 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_634 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_635 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_636 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_637 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_638 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_639 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_640 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_641 = rand_strided((3, 2048, 1), (34816, 17, 0), device='cuda:0', dtype=torch.float16)
    permute_272 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_273 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_274 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_282 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_283 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_284 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_285 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_82 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_590 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_151 = rand_strided((6144, 72), (72, 1), device='cuda:0', dtype=torch.float16)
    view_592 = rand_strided((6144, 72), (72, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_648 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_649 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_650 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_651 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_652 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_653 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_654 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_655 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_656 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_657 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_658 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_659 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_660 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_661 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_662 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_663 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_664 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_665 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_666 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_667 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_668 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_669 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_670 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_671 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_672 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_673 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_674 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_675 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_676 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_677 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_678 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_679 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_680 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_681 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_682 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_683 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_684 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_685 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_686 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_687 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_688 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_689 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_690 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_691 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_692 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_693 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_694 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_695 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_696 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_697 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_698 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_699 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_700 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_701 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_702 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_703 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_704 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_705 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_706 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_707 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_708 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_709 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_710 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_711 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_712 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_713 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_714 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_715 = rand_strided((3, 2048, 1), (36864, 18, 0), device='cuda:0', dtype=torch.float16)
    permute_289 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_290 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_291 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_299 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_300 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_301 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_302 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_87 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_625 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_160 = rand_strided((6144, 76), (76, 1), device='cuda:0', dtype=torch.float16)
    view_627 = rand_strided((6144, 76), (76, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_722 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_723 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_724 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_725 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_726 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_727 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_728 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_729 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_730 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_731 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_732 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_733 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_734 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_735 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_736 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_737 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_738 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_739 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_740 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_741 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_742 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_743 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_744 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_745 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_746 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_747 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_748 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_749 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_750 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_751 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_752 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_753 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_754 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_755 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_756 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_757 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_758 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_759 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_760 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_761 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_762 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_763 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_764 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_765 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_766 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_767 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_768 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_769 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_770 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_771 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_772 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_773 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_774 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_775 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_776 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_777 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_778 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_779 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_780 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_781 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_782 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_783 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_784 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_785 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_786 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_787 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_788 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_789 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_790 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_791 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_792 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_793 = rand_strided((3, 2048, 1), (38912, 19, 0), device='cuda:0', dtype=torch.float16)
    permute_306 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_307 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_308 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_316 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_317 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_318 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_319 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_92 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_660 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_169 = rand_strided((6144, 80), (80, 1), device='cuda:0', dtype=torch.float16)
    view_662 = rand_strided((6144, 80), (80, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_800 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_801 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_802 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_803 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_804 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_805 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_806 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_807 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_808 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_809 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_810 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_811 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_812 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_813 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_814 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_815 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_816 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_817 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_818 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_819 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_820 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_821 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_822 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_823 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_824 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_825 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_826 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_827 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_828 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_829 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_830 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_831 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_832 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_833 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_834 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_835 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_836 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_837 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_838 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_839 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_840 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_841 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_842 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_843 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_844 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_845 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_846 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_847 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_848 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_849 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_850 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_851 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_852 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_853 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_854 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_855 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_856 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_857 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_858 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_859 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_860 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_861 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_862 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_863 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_864 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_865 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_866 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_867 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_868 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_869 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_870 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_871 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_872 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_873 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_874 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_875 = rand_strided((3, 2048, 1), (40960, 20, 0), device='cuda:0', dtype=torch.float16)
    permute_323 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_324 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_325 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_333 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_334 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_335 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_336 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_97 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_695 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_178 = rand_strided((6144, 84), (84, 1), device='cuda:0', dtype=torch.float16)
    view_697 = rand_strided((6144, 84), (84, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_882 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_883 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_884 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_885 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_886 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_887 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_888 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_889 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_890 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_891 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_892 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_893 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_894 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_895 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_896 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_897 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_898 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_899 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_900 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_901 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_902 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_903 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_904 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_905 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_906 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_907 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_908 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_909 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_910 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_911 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_912 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_913 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_914 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_915 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_916 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_917 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_918 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_919 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_920 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_921 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_922 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_923 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_924 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_925 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_926 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_927 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_928 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_929 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_930 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_931 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_932 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_933 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_934 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_935 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_936 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_937 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_938 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_939 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_940 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_941 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_942 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_943 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_944 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_945 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_946 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_947 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_948 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_949 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_950 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_951 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_952 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_953 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_954 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_955 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_956 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_957 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_958 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_959 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_960 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_961 = rand_strided((3, 2048, 1), (43008, 21, 0), device='cuda:0', dtype=torch.float16)
    permute_340 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_341 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_342 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_350 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_351 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_352 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_353 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_102 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_730 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_187 = rand_strided((6144, 88), (88, 1), device='cuda:0', dtype=torch.float16)
    view_732 = rand_strided((6144, 88), (88, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_968 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_969 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_970 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_971 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_972 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_973 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_974 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_975 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_976 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_977 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_978 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_979 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_980 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_981 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_982 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_983 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_984 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_985 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_986 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_987 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_988 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_989 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_990 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_991 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_992 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_993 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_994 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_995 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_996 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_997 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_998 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_999 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1000 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1001 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1002 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1003 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1004 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1005 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1006 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1007 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1008 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1009 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1010 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1011 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1012 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1013 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1014 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1015 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1016 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1017 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1018 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1019 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1020 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1021 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1022 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1023 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1024 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1025 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1026 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1027 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1028 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1029 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1030 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1031 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1032 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1033 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1034 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1035 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1036 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1037 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1038 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1039 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1040 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1041 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1042 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1043 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1044 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1045 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1046 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1047 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1048 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1049 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1050 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1051 = rand_strided((3, 2048, 1), (45056, 22, 0), device='cuda:0', dtype=torch.float16)
    permute_357 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_358 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_359 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_367 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_368 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_369 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_370 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_107 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_765 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_default_3 = rand_strided((6144, 96), (96, 1), device='cuda:0', dtype=torch.float16)
    view_767 = rand_strided((6144, 92), (92, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_1058 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1059 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1060 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1061 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1062 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1063 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1064 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1065 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1066 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1067 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1068 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1069 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1070 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1071 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1072 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1073 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1074 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1075 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1076 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1077 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1078 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1079 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1080 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1081 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1082 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1083 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1084 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1085 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1086 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1087 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1088 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1089 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1090 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1091 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1092 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1093 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1094 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1095 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1096 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1097 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1098 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1099 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1100 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1101 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1102 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1103 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1104 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1105 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1106 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1107 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1108 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1109 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1110 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1111 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1112 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1113 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1114 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1115 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1116 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1117 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1118 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1119 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1120 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1121 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1122 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1123 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1124 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1125 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1126 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1127 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1128 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1129 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1130 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1131 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1132 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1133 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1134 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1135 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1136 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1137 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1138 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1139 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1140 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1141 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1142 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1143 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1144 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1145 = rand_strided((3, 2048, 1), (47104, 23, 0), device='cuda:0', dtype=torch.float16)
    permute_374 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_375 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_376 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_384 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_385 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_386 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_387 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_112 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_800 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_205 = rand_strided((6144, 96), (96, 1), device='cuda:0', dtype=torch.float16)
    view_802 = rand_strided((6144, 96), (96, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_1152 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1153 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1154 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1155 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1156 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1157 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1158 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1159 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1160 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1161 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1162 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1163 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1164 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1165 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1166 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1167 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1168 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1169 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1170 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1171 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1172 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1173 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1174 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1175 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1176 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1177 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1178 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1179 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1180 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1181 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1182 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1183 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1184 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1185 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1186 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1187 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1188 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1189 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1190 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1191 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1192 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1193 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1194 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1195 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1196 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1197 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1198 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1199 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1200 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1201 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1202 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1203 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1204 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1205 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1206 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1207 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1208 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1209 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1210 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1211 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1212 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1213 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1214 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1215 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1216 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1217 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1218 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1219 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1220 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1221 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1222 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1223 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1224 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1225 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1226 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1227 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1228 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1229 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1230 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1231 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1232 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1233 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1234 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1235 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1236 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1237 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1238 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1239 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1240 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1241 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1242 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1243 = rand_strided((3, 2048, 1), (49152, 24, 0), device='cuda:0', dtype=torch.float16)
    permute_391 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_392 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_393 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_401 = rand_strided((2048, 2048), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_402 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_403 = rand_strided((2048, 5632), (1, 2048), device='cuda:0', dtype=torch.float16)
    permute_404 = rand_strided((5632, 2048), (1, 5632), device='cuda:0', dtype=torch.float16)
    rsqrt_117 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float16)
    view_835 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    mm_214 = rand_strided((6144, 100), (100, 1), device='cuda:0', dtype=torch.float16)
    view_837 = rand_strided((6144, 100), (100, 1), device='cuda:0', dtype=torch.float16)
    unsqueeze_1274 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1275 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1276 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1277 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1278 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1279 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1280 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1281 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1282 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1283 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1284 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1285 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1286 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1287 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1288 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1289 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1290 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1291 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1292 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1293 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1294 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1295 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1296 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    unsqueeze_1297 = rand_strided((3, 2048, 1), (51200, 25, 0), device='cuda:0', dtype=torch.float16)
    rsqrt_118 = rand_strided((3, 2048, 1), (2048, 1, 1), device='cuda:0', dtype=torch.float32)
    view_840 = rand_strided((6144, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    convert_element_type_431 = rand_strided((6144, 50257), (50257, 1), device='cuda:0', dtype=torch.float16)
    convert_element_type_432 = rand_strided((), (), device='cuda:0', dtype=torch.float16)
    permute_411 = rand_strided((50257, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_416 = rand_strided((100, 100), (100, 1), device='cuda:0', dtype=torch.float16)
    permute_420 = rand_strided((100, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_465 = rand_strided((96, 96), (96, 1), device='cuda:0', dtype=torch.float16)
    permute_469 = rand_strided((96, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_514 = rand_strided((92, 92), (92, 1), device='cuda:0', dtype=torch.float16)
    permute_518 = rand_strided((92, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_563 = rand_strided((88, 88), (88, 1), device='cuda:0', dtype=torch.float16)
    permute_567 = rand_strided((88, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_612 = rand_strided((84, 84), (84, 1), device='cuda:0', dtype=torch.float16)
    permute_616 = rand_strided((84, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_661 = rand_strided((80, 80), (80, 1), device='cuda:0', dtype=torch.float16)
    permute_665 = rand_strided((80, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_710 = rand_strided((76, 76), (76, 1), device='cuda:0', dtype=torch.float16)
    permute_714 = rand_strided((76, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_759 = rand_strided((72, 72), (72, 1), device='cuda:0', dtype=torch.float16)
    permute_763 = rand_strided((72, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_808 = rand_strided((68, 68), (68, 1), device='cuda:0', dtype=torch.float16)
    permute_812 = rand_strided((68, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_857 = rand_strided((64, 64), (64, 1), device='cuda:0', dtype=torch.float16)
    permute_861 = rand_strided((64, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_906 = rand_strided((60, 60), (60, 1), device='cuda:0', dtype=torch.float16)
    permute_910 = rand_strided((60, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_955 = rand_strided((56, 56), (56, 1), device='cuda:0', dtype=torch.float16)
    permute_959 = rand_strided((56, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1004 = rand_strided((52, 52), (52, 1), device='cuda:0', dtype=torch.float16)
    permute_1008 = rand_strided((52, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1053 = rand_strided((48, 48), (48, 1), device='cuda:0', dtype=torch.float16)
    permute_1057 = rand_strided((48, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1102 = rand_strided((44, 44), (44, 1), device='cuda:0', dtype=torch.float16)
    permute_1106 = rand_strided((44, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1151 = rand_strided((40, 40), (40, 1), device='cuda:0', dtype=torch.float16)
    permute_1155 = rand_strided((40, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1200 = rand_strided((36, 36), (36, 1), device='cuda:0', dtype=torch.float16)
    permute_1204 = rand_strided((36, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1249 = rand_strided((32, 32), (32, 1), device='cuda:0', dtype=torch.float16)
    permute_1253 = rand_strided((32, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1298 = rand_strided((28, 28), (28, 1), device='cuda:0', dtype=torch.float16)
    permute_1302 = rand_strided((28, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1347 = rand_strided((24, 24), (24, 1), device='cuda:0', dtype=torch.float16)
    permute_1351 = rand_strided((24, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1396 = rand_strided((20, 20), (20, 1), device='cuda:0', dtype=torch.float16)
    permute_1400 = rand_strided((20, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1445 = rand_strided((16, 16), (16, 1), device='cuda:0', dtype=torch.float16)
    permute_1449 = rand_strided((16, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1494 = rand_strided((12, 12), (12, 1), device='cuda:0', dtype=torch.float16)
    permute_1498 = rand_strided((12, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    permute_1543 = rand_strided((8, 8), (8, 1), device='cuda:0', dtype=torch.float16)
    permute_1547 = rand_strided((8, 2048), (2048, 1), device='cuda:0', dtype=torch.float16)
    tangents_1 = rand_strided((), (), device='cuda:0', dtype=torch.float16)
    print_mem(s='after rand tensor')
    return print_performance(lambda: call([primals_6, primals_11, primals_12, primals_13, primals_18, primals_23, primals_24, primals_25, primals_30, primals_35, primals_36, primals_37, primals_42, primals_47, primals_48, primals_49, primals_54, primals_59, primals_60, primals_61, primals_66, primals_71, primals_72, primals_73, primals_78, primals_83, primals_84, primals_85, primals_90, primals_95, primals_96, primals_97, primals_102, primals_107, primals_108, primals_109, primals_114, primals_119, primals_120, primals_121, primals_126, primals_131, primals_132, primals_133, primals_138, primals_143, primals_144, primals_145, primals_150, primals_155, primals_156, primals_157, primals_162, primals_167, primals_168, primals_169, primals_174, primals_179, primals_180, primals_181, primals_186, primals_191, primals_192, primals_193, primals_198, primals_203, primals_204, primals_205, primals_210, primals_215, primals_216, primals_217, primals_222, primals_227, primals_228, primals_229, primals_234, primals_239, primals_240, primals_241, primals_246, primals_251, primals_252, primals_253, primals_258, primals_263, primals_264, primals_265, primals_270, primals_275, primals_276, primals_277, primals_282, primals_287, primals_340, primals_341, embedding, permute, permute_1, permute_2, select_1, select_3, slice_3, scalar_tensor, permute_10, permute_11, permute_12, permute_13, rsqrt_2, view_30, mm_7, view_32, unsqueeze_8, unsqueeze_9, unsqueeze_10, unsqueeze_11, permute_17, permute_18, permute_19, permute_27, permute_28, permute_29, permute_30, rsqrt_7, view_65, mm_16, view_67, unsqueeze_18, unsqueeze_19, unsqueeze_20, unsqueeze_21, unsqueeze_22, unsqueeze_23, unsqueeze_24, unsqueeze_25, permute_34, permute_35, permute_36, permute_44, permute_45, permute_46, permute_47, rsqrt_12, view_100, mm_25, view_102, unsqueeze_32, unsqueeze_33, unsqueeze_34, unsqueeze_35, unsqueeze_36, unsqueeze_37, unsqueeze_38, unsqueeze_39, unsqueeze_40, unsqueeze_41, unsqueeze_42, unsqueeze_43, permute_51, permute_52, permute_53, permute_61, permute_62, permute_63, permute_64, rsqrt_17, view_135, mm_34, view_137, unsqueeze_50, unsqueeze_51, unsqueeze_52, unsqueeze_53, unsqueeze_54, unsqueeze_55, unsqueeze_56, unsqueeze_57, unsqueeze_58, unsqueeze_59, unsqueeze_60, unsqueeze_61, unsqueeze_62, unsqueeze_63, unsqueeze_64, unsqueeze_65, permute_68, permute_69, permute_70, permute_78, permute_79, permute_80, permute_81, rsqrt_22, view_170, mm_43, view_172, unsqueeze_72, unsqueeze_73, unsqueeze_74, unsqueeze_75, unsqueeze_76, unsqueeze_77, unsqueeze_78, unsqueeze_79, unsqueeze_80, unsqueeze_81, unsqueeze_82, unsqueeze_83, unsqueeze_84, unsqueeze_85, unsqueeze_86, unsqueeze_87, unsqueeze_88, unsqueeze_89, unsqueeze_90, unsqueeze_91, permute_85, permute_86, permute_87, permute_95, permute_96, permute_97, permute_98, rsqrt_27, view_205, mm_52, view_207, unsqueeze_98, unsqueeze_99, unsqueeze_100, unsqueeze_101, unsqueeze_102, unsqueeze_103, unsqueeze_104, unsqueeze_105, unsqueeze_106, unsqueeze_107, unsqueeze_108, unsqueeze_109, unsqueeze_110, unsqueeze_111, unsqueeze_112, unsqueeze_113, unsqueeze_114, unsqueeze_115, unsqueeze_116, unsqueeze_117, unsqueeze_118, unsqueeze_119, unsqueeze_120, unsqueeze_121, permute_102, permute_103, permute_104, permute_112, permute_113, permute_114, permute_115, rsqrt_32, view_240, mm_61, view_242, unsqueeze_128, unsqueeze_129, unsqueeze_130, unsqueeze_131, unsqueeze_132, unsqueeze_133, unsqueeze_134, unsqueeze_135, unsqueeze_136, unsqueeze_137, unsqueeze_138, unsqueeze_139, unsqueeze_140, unsqueeze_141, unsqueeze_142, unsqueeze_143, unsqueeze_144, unsqueeze_145, unsqueeze_146, unsqueeze_147, unsqueeze_148, unsqueeze_149, unsqueeze_150, unsqueeze_151, unsqueeze_152, unsqueeze_153, unsqueeze_154, unsqueeze_155, permute_119, permute_120, permute_121, permute_129, permute_130, permute_131, permute_132, rsqrt_37, view_275, mm_70, view_277, unsqueeze_162, unsqueeze_163, unsqueeze_164, unsqueeze_165, unsqueeze_166, unsqueeze_167, unsqueeze_168, unsqueeze_169, unsqueeze_170, unsqueeze_171, unsqueeze_172, unsqueeze_173, unsqueeze_174, unsqueeze_175, unsqueeze_176, unsqueeze_177, unsqueeze_178, unsqueeze_179, unsqueeze_180, unsqueeze_181, unsqueeze_182, unsqueeze_183, unsqueeze_184, unsqueeze_185, unsqueeze_186, unsqueeze_187, unsqueeze_188, unsqueeze_189, unsqueeze_190, unsqueeze_191, unsqueeze_192, unsqueeze_193, permute_136, permute_137, permute_138, permute_146, permute_147, permute_148, permute_149, rsqrt_42, view_310, mm_79, view_312, unsqueeze_200, unsqueeze_201, unsqueeze_202, unsqueeze_203, unsqueeze_204, unsqueeze_205, unsqueeze_206, unsqueeze_207, unsqueeze_208, unsqueeze_209, unsqueeze_210, unsqueeze_211, unsqueeze_212, unsqueeze_213, unsqueeze_214, unsqueeze_215, unsqueeze_216, unsqueeze_217, unsqueeze_218, unsqueeze_219, unsqueeze_220, unsqueeze_221, unsqueeze_222, unsqueeze_223, unsqueeze_224, unsqueeze_225, unsqueeze_226, unsqueeze_227, unsqueeze_228, unsqueeze_229, unsqueeze_230, unsqueeze_231, unsqueeze_232, unsqueeze_233, unsqueeze_234, unsqueeze_235, permute_153, permute_154, permute_155, permute_163, permute_164, permute_165, permute_166, rsqrt_47, view_345, mm_88, view_347, unsqueeze_242, unsqueeze_243, unsqueeze_244, unsqueeze_245, unsqueeze_246, unsqueeze_247, unsqueeze_248, unsqueeze_249, unsqueeze_250, unsqueeze_251, unsqueeze_252, unsqueeze_253, unsqueeze_254, unsqueeze_255, unsqueeze_256, unsqueeze_257, unsqueeze_258, unsqueeze_259, unsqueeze_260, unsqueeze_261, unsqueeze_262, unsqueeze_263, unsqueeze_264, unsqueeze_265, unsqueeze_266, unsqueeze_267, unsqueeze_268, unsqueeze_269, unsqueeze_270, unsqueeze_271, unsqueeze_272, unsqueeze_273, unsqueeze_274, unsqueeze_275, unsqueeze_276, unsqueeze_277, unsqueeze_278, unsqueeze_279, unsqueeze_280, unsqueeze_281, permute_170, permute_171, permute_172, permute_180, permute_181, permute_182, permute_183, rsqrt_52, view_380, mm_97, view_382, unsqueeze_288, unsqueeze_289, unsqueeze_290, unsqueeze_291, unsqueeze_292, unsqueeze_293, unsqueeze_294, unsqueeze_295, unsqueeze_296, unsqueeze_297, unsqueeze_298, unsqueeze_299, unsqueeze_300, unsqueeze_301, unsqueeze_302, unsqueeze_303, unsqueeze_304, unsqueeze_305, unsqueeze_306, unsqueeze_307, unsqueeze_308, unsqueeze_309, unsqueeze_310, unsqueeze_311, unsqueeze_312, unsqueeze_313, unsqueeze_314, unsqueeze_315, unsqueeze_316, unsqueeze_317, unsqueeze_318, unsqueeze_319, unsqueeze_320, unsqueeze_321, unsqueeze_322, unsqueeze_323, unsqueeze_324, unsqueeze_325, unsqueeze_326, unsqueeze_327, unsqueeze_328, unsqueeze_329, unsqueeze_330, unsqueeze_331, permute_187, permute_188, permute_189, permute_197, permute_198, permute_199, permute_200, rsqrt_57, view_415, mm_106, view_417, unsqueeze_338, unsqueeze_339, unsqueeze_340, unsqueeze_341, unsqueeze_342, unsqueeze_343, unsqueeze_344, unsqueeze_345, unsqueeze_346, unsqueeze_347, unsqueeze_348, unsqueeze_349, unsqueeze_350, unsqueeze_351, unsqueeze_352, unsqueeze_353, unsqueeze_354, unsqueeze_355, unsqueeze_356, unsqueeze_357, unsqueeze_358, unsqueeze_359, unsqueeze_360, unsqueeze_361, unsqueeze_362, unsqueeze_363, unsqueeze_364, unsqueeze_365, unsqueeze_366, unsqueeze_367, unsqueeze_368, unsqueeze_369, unsqueeze_370, unsqueeze_371, unsqueeze_372, unsqueeze_373, unsqueeze_374, unsqueeze_375, unsqueeze_376, unsqueeze_377, unsqueeze_378, unsqueeze_379, unsqueeze_380, unsqueeze_381, unsqueeze_382, unsqueeze_383, unsqueeze_384, unsqueeze_385, permute_204, permute_205, permute_206, permute_214, permute_215, permute_216, permute_217, rsqrt_62, view_450, mm_115, view_452, unsqueeze_392, unsqueeze_393, unsqueeze_394, unsqueeze_395, unsqueeze_396, unsqueeze_397, unsqueeze_398, unsqueeze_399, unsqueeze_400, unsqueeze_401, unsqueeze_402, unsqueeze_403, unsqueeze_404, unsqueeze_405, unsqueeze_406, unsqueeze_407, unsqueeze_408, unsqueeze_409, unsqueeze_410, unsqueeze_411, unsqueeze_412, unsqueeze_413, unsqueeze_414, unsqueeze_415, unsqueeze_416, unsqueeze_417, unsqueeze_418, unsqueeze_419, unsqueeze_420, unsqueeze_421, unsqueeze_422, unsqueeze_423, unsqueeze_424, unsqueeze_425, unsqueeze_426, unsqueeze_427, unsqueeze_428, unsqueeze_429, unsqueeze_430, unsqueeze_431, unsqueeze_432, unsqueeze_433, unsqueeze_434, unsqueeze_435, unsqueeze_436, unsqueeze_437, unsqueeze_438, unsqueeze_439, unsqueeze_440, unsqueeze_441, unsqueeze_442, unsqueeze_443, permute_221, permute_222, permute_223, permute_231, permute_232, permute_233, permute_234, rsqrt_67, view_485, mm_124, view_487, unsqueeze_450, unsqueeze_451, unsqueeze_452, unsqueeze_453, unsqueeze_454, unsqueeze_455, unsqueeze_456, unsqueeze_457, unsqueeze_458, unsqueeze_459, unsqueeze_460, unsqueeze_461, unsqueeze_462, unsqueeze_463, unsqueeze_464, unsqueeze_465, unsqueeze_466, unsqueeze_467, unsqueeze_468, unsqueeze_469, unsqueeze_470, unsqueeze_471, unsqueeze_472, unsqueeze_473, unsqueeze_474, unsqueeze_475, unsqueeze_476, unsqueeze_477, unsqueeze_478, unsqueeze_479, unsqueeze_480, unsqueeze_481, unsqueeze_482, unsqueeze_483, unsqueeze_484, unsqueeze_485, unsqueeze_486, unsqueeze_487, unsqueeze_488, unsqueeze_489, unsqueeze_490, unsqueeze_491, unsqueeze_492, unsqueeze_493, unsqueeze_494, unsqueeze_495, unsqueeze_496, unsqueeze_497, unsqueeze_498, unsqueeze_499, unsqueeze_500, unsqueeze_501, unsqueeze_502, unsqueeze_503, unsqueeze_504, unsqueeze_505, permute_238, permute_239, permute_240, permute_248, permute_249, permute_250, permute_251, rsqrt_72, view_520, mm_133, view_522, unsqueeze_512, unsqueeze_513, unsqueeze_514, unsqueeze_515, unsqueeze_516, unsqueeze_517, unsqueeze_518, unsqueeze_519, unsqueeze_520, unsqueeze_521, unsqueeze_522, unsqueeze_523, unsqueeze_524, unsqueeze_525, unsqueeze_526, unsqueeze_527, unsqueeze_528, unsqueeze_529, unsqueeze_530, unsqueeze_531, unsqueeze_532, unsqueeze_533, unsqueeze_534, unsqueeze_535, unsqueeze_536, unsqueeze_537, unsqueeze_538, unsqueeze_539, unsqueeze_540, unsqueeze_541, unsqueeze_542, unsqueeze_543, unsqueeze_544, unsqueeze_545, unsqueeze_546, unsqueeze_547, unsqueeze_548, unsqueeze_549, unsqueeze_550, unsqueeze_551, unsqueeze_552, unsqueeze_553, unsqueeze_554, unsqueeze_555, unsqueeze_556, unsqueeze_557, unsqueeze_558, unsqueeze_559, unsqueeze_560, unsqueeze_561, unsqueeze_562, unsqueeze_563, unsqueeze_564, unsqueeze_565, unsqueeze_566, unsqueeze_567, unsqueeze_568, unsqueeze_569, unsqueeze_570, unsqueeze_571, permute_255, permute_256, permute_257, permute_265, permute_266, permute_267, permute_268, rsqrt_77, view_555, mm_142, view_557, unsqueeze_578, unsqueeze_579, unsqueeze_580, unsqueeze_581, unsqueeze_582, unsqueeze_583, unsqueeze_584, unsqueeze_585, unsqueeze_586, unsqueeze_587, unsqueeze_588, unsqueeze_589, unsqueeze_590, unsqueeze_591, unsqueeze_592, unsqueeze_593, unsqueeze_594, unsqueeze_595, unsqueeze_596, unsqueeze_597, unsqueeze_598, unsqueeze_599, unsqueeze_600, unsqueeze_601, unsqueeze_602, unsqueeze_603, unsqueeze_604, unsqueeze_605, unsqueeze_606, unsqueeze_607, unsqueeze_608, unsqueeze_609, unsqueeze_610, unsqueeze_611, unsqueeze_612, unsqueeze_613, unsqueeze_614, unsqueeze_615, unsqueeze_616, unsqueeze_617, unsqueeze_618, unsqueeze_619, unsqueeze_620, unsqueeze_621, unsqueeze_622, unsqueeze_623, unsqueeze_624, unsqueeze_625, unsqueeze_626, unsqueeze_627, unsqueeze_628, unsqueeze_629, unsqueeze_630, unsqueeze_631, unsqueeze_632, unsqueeze_633, unsqueeze_634, unsqueeze_635, unsqueeze_636, unsqueeze_637, unsqueeze_638, unsqueeze_639, unsqueeze_640, unsqueeze_641, permute_272, permute_273, permute_274, permute_282, permute_283, permute_284, permute_285, rsqrt_82, view_590, mm_151, view_592, unsqueeze_648, unsqueeze_649, unsqueeze_650, unsqueeze_651, unsqueeze_652, unsqueeze_653, unsqueeze_654, unsqueeze_655, unsqueeze_656, unsqueeze_657, unsqueeze_658, unsqueeze_659, unsqueeze_660, unsqueeze_661, unsqueeze_662, unsqueeze_663, unsqueeze_664, unsqueeze_665, unsqueeze_666, unsqueeze_667, unsqueeze_668, unsqueeze_669, unsqueeze_670, unsqueeze_671, unsqueeze_672, unsqueeze_673, unsqueeze_674, unsqueeze_675, unsqueeze_676, unsqueeze_677, unsqueeze_678, unsqueeze_679, unsqueeze_680, unsqueeze_681, unsqueeze_682, unsqueeze_683, unsqueeze_684, unsqueeze_685, unsqueeze_686, unsqueeze_687, unsqueeze_688, unsqueeze_689, unsqueeze_690, unsqueeze_691, unsqueeze_692, unsqueeze_693, unsqueeze_694, unsqueeze_695, unsqueeze_696, unsqueeze_697, unsqueeze_698, unsqueeze_699, unsqueeze_700, unsqueeze_701, unsqueeze_702, unsqueeze_703, unsqueeze_704, unsqueeze_705, unsqueeze_706, unsqueeze_707, unsqueeze_708, unsqueeze_709, unsqueeze_710, unsqueeze_711, unsqueeze_712, unsqueeze_713, unsqueeze_714, unsqueeze_715, permute_289, permute_290, permute_291, permute_299, permute_300, permute_301, permute_302, rsqrt_87, view_625, mm_160, view_627, unsqueeze_722, unsqueeze_723, unsqueeze_724, unsqueeze_725, unsqueeze_726, unsqueeze_727, unsqueeze_728, unsqueeze_729, unsqueeze_730, unsqueeze_731, unsqueeze_732, unsqueeze_733, unsqueeze_734, unsqueeze_735, unsqueeze_736, unsqueeze_737, unsqueeze_738, unsqueeze_739, unsqueeze_740, unsqueeze_741, unsqueeze_742, unsqueeze_743, unsqueeze_744, unsqueeze_745, unsqueeze_746, unsqueeze_747, unsqueeze_748, unsqueeze_749, unsqueeze_750, unsqueeze_751, unsqueeze_752, unsqueeze_753, unsqueeze_754, unsqueeze_755, unsqueeze_756, unsqueeze_757, unsqueeze_758, unsqueeze_759, unsqueeze_760, unsqueeze_761, unsqueeze_762, unsqueeze_763, unsqueeze_764, unsqueeze_765, unsqueeze_766, unsqueeze_767, unsqueeze_768, unsqueeze_769, unsqueeze_770, unsqueeze_771, unsqueeze_772, unsqueeze_773, unsqueeze_774, unsqueeze_775, unsqueeze_776, unsqueeze_777, unsqueeze_778, unsqueeze_779, unsqueeze_780, unsqueeze_781, unsqueeze_782, unsqueeze_783, unsqueeze_784, unsqueeze_785, unsqueeze_786, unsqueeze_787, unsqueeze_788, unsqueeze_789, unsqueeze_790, unsqueeze_791, unsqueeze_792, unsqueeze_793, permute_306, permute_307, permute_308, permute_316, permute_317, permute_318, permute_319, rsqrt_92, view_660, mm_169, view_662, unsqueeze_800, unsqueeze_801, unsqueeze_802, unsqueeze_803, unsqueeze_804, unsqueeze_805, unsqueeze_806, unsqueeze_807, unsqueeze_808, unsqueeze_809, unsqueeze_810, unsqueeze_811, unsqueeze_812, unsqueeze_813, unsqueeze_814, unsqueeze_815, unsqueeze_816, unsqueeze_817, unsqueeze_818, unsqueeze_819, unsqueeze_820, unsqueeze_821, unsqueeze_822, unsqueeze_823, unsqueeze_824, unsqueeze_825, unsqueeze_826, unsqueeze_827, unsqueeze_828, unsqueeze_829, unsqueeze_830, unsqueeze_831, unsqueeze_832, unsqueeze_833, unsqueeze_834, unsqueeze_835, unsqueeze_836, unsqueeze_837, unsqueeze_838, unsqueeze_839, unsqueeze_840, unsqueeze_841, unsqueeze_842, unsqueeze_843, unsqueeze_844, unsqueeze_845, unsqueeze_846, unsqueeze_847, unsqueeze_848, unsqueeze_849, unsqueeze_850, unsqueeze_851, unsqueeze_852, unsqueeze_853, unsqueeze_854, unsqueeze_855, unsqueeze_856, unsqueeze_857, unsqueeze_858, unsqueeze_859, unsqueeze_860, unsqueeze_861, unsqueeze_862, unsqueeze_863, unsqueeze_864, unsqueeze_865, unsqueeze_866, unsqueeze_867, unsqueeze_868, unsqueeze_869, unsqueeze_870, unsqueeze_871, unsqueeze_872, unsqueeze_873, unsqueeze_874, unsqueeze_875, permute_323, permute_324, permute_325, permute_333, permute_334, permute_335, permute_336, rsqrt_97, view_695, mm_178, view_697, unsqueeze_882, unsqueeze_883, unsqueeze_884, unsqueeze_885, unsqueeze_886, unsqueeze_887, unsqueeze_888, unsqueeze_889, unsqueeze_890, unsqueeze_891, unsqueeze_892, unsqueeze_893, unsqueeze_894, unsqueeze_895, unsqueeze_896, unsqueeze_897, unsqueeze_898, unsqueeze_899, unsqueeze_900, unsqueeze_901, unsqueeze_902, unsqueeze_903, unsqueeze_904, unsqueeze_905, unsqueeze_906, unsqueeze_907, unsqueeze_908, unsqueeze_909, unsqueeze_910, unsqueeze_911, unsqueeze_912, unsqueeze_913, unsqueeze_914, unsqueeze_915, unsqueeze_916, unsqueeze_917, unsqueeze_918, unsqueeze_919, unsqueeze_920, unsqueeze_921, unsqueeze_922, unsqueeze_923, unsqueeze_924, unsqueeze_925, unsqueeze_926, unsqueeze_927, unsqueeze_928, unsqueeze_929, unsqueeze_930, unsqueeze_931, unsqueeze_932, unsqueeze_933, unsqueeze_934, unsqueeze_935, unsqueeze_936, unsqueeze_937, unsqueeze_938, unsqueeze_939, unsqueeze_940, unsqueeze_941, unsqueeze_942, unsqueeze_943, unsqueeze_944, unsqueeze_945, unsqueeze_946, unsqueeze_947, unsqueeze_948, unsqueeze_949, unsqueeze_950, unsqueeze_951, unsqueeze_952, unsqueeze_953, unsqueeze_954, unsqueeze_955, unsqueeze_956, unsqueeze_957, unsqueeze_958, unsqueeze_959, unsqueeze_960, unsqueeze_961, permute_340, permute_341, permute_342, permute_350, permute_351, permute_352, permute_353, rsqrt_102, view_730, mm_187, view_732, unsqueeze_968, unsqueeze_969, unsqueeze_970, unsqueeze_971, unsqueeze_972, unsqueeze_973, unsqueeze_974, unsqueeze_975, unsqueeze_976, unsqueeze_977, unsqueeze_978, unsqueeze_979, unsqueeze_980, unsqueeze_981, unsqueeze_982, unsqueeze_983, unsqueeze_984, unsqueeze_985, unsqueeze_986, unsqueeze_987, unsqueeze_988, unsqueeze_989, unsqueeze_990, unsqueeze_991, unsqueeze_992, unsqueeze_993, unsqueeze_994, unsqueeze_995, unsqueeze_996, unsqueeze_997, unsqueeze_998, unsqueeze_999, unsqueeze_1000, unsqueeze_1001, unsqueeze_1002, unsqueeze_1003, unsqueeze_1004, unsqueeze_1005, unsqueeze_1006, unsqueeze_1007, unsqueeze_1008, unsqueeze_1009, unsqueeze_1010, unsqueeze_1011, unsqueeze_1012, unsqueeze_1013, unsqueeze_1014, unsqueeze_1015, unsqueeze_1016, unsqueeze_1017, unsqueeze_1018, unsqueeze_1019, unsqueeze_1020, unsqueeze_1021, unsqueeze_1022, unsqueeze_1023, unsqueeze_1024, unsqueeze_1025, unsqueeze_1026, unsqueeze_1027, unsqueeze_1028, unsqueeze_1029, unsqueeze_1030, unsqueeze_1031, unsqueeze_1032, unsqueeze_1033, unsqueeze_1034, unsqueeze_1035, unsqueeze_1036, unsqueeze_1037, unsqueeze_1038, unsqueeze_1039, unsqueeze_1040, unsqueeze_1041, unsqueeze_1042, unsqueeze_1043, unsqueeze_1044, unsqueeze_1045, unsqueeze_1046, unsqueeze_1047, unsqueeze_1048, unsqueeze_1049, unsqueeze_1050, unsqueeze_1051, permute_357, permute_358, permute_359, permute_367, permute_368, permute_369, permute_370, rsqrt_107, view_765, mm_default_3, view_767, unsqueeze_1058, unsqueeze_1059, unsqueeze_1060, unsqueeze_1061, unsqueeze_1062, unsqueeze_1063, unsqueeze_1064, unsqueeze_1065, unsqueeze_1066, unsqueeze_1067, unsqueeze_1068, unsqueeze_1069, unsqueeze_1070, unsqueeze_1071, unsqueeze_1072, unsqueeze_1073, unsqueeze_1074, unsqueeze_1075, unsqueeze_1076, unsqueeze_1077, unsqueeze_1078, unsqueeze_1079, unsqueeze_1080, unsqueeze_1081, unsqueeze_1082, unsqueeze_1083, unsqueeze_1084, unsqueeze_1085, unsqueeze_1086, unsqueeze_1087, unsqueeze_1088, unsqueeze_1089, unsqueeze_1090, unsqueeze_1091, unsqueeze_1092, unsqueeze_1093, unsqueeze_1094, unsqueeze_1095, unsqueeze_1096, unsqueeze_1097, unsqueeze_1098, unsqueeze_1099, unsqueeze_1100, unsqueeze_1101, unsqueeze_1102, unsqueeze_1103, unsqueeze_1104, unsqueeze_1105, unsqueeze_1106, unsqueeze_1107, unsqueeze_1108, unsqueeze_1109, unsqueeze_1110, unsqueeze_1111, unsqueeze_1112, unsqueeze_1113, unsqueeze_1114, unsqueeze_1115, unsqueeze_1116, unsqueeze_1117, unsqueeze_1118, unsqueeze_1119, unsqueeze_1120, unsqueeze_1121, unsqueeze_1122, unsqueeze_1123, unsqueeze_1124, unsqueeze_1125, unsqueeze_1126, unsqueeze_1127, unsqueeze_1128, unsqueeze_1129, unsqueeze_1130, unsqueeze_1131, unsqueeze_1132, unsqueeze_1133, unsqueeze_1134, unsqueeze_1135, unsqueeze_1136, unsqueeze_1137, unsqueeze_1138, unsqueeze_1139, unsqueeze_1140, unsqueeze_1141, unsqueeze_1142, unsqueeze_1143, unsqueeze_1144, unsqueeze_1145, permute_374, permute_375, permute_376, permute_384, permute_385, permute_386, permute_387, rsqrt_112, view_800, mm_205, view_802, unsqueeze_1152, unsqueeze_1153, unsqueeze_1154, unsqueeze_1155, unsqueeze_1156, unsqueeze_1157, unsqueeze_1158, unsqueeze_1159, unsqueeze_1160, unsqueeze_1161, unsqueeze_1162, unsqueeze_1163, unsqueeze_1164, unsqueeze_1165, unsqueeze_1166, unsqueeze_1167, unsqueeze_1168, unsqueeze_1169, unsqueeze_1170, unsqueeze_1171, unsqueeze_1172, unsqueeze_1173, unsqueeze_1174, unsqueeze_1175, unsqueeze_1176, unsqueeze_1177, unsqueeze_1178, unsqueeze_1179, unsqueeze_1180, unsqueeze_1181, unsqueeze_1182, unsqueeze_1183, unsqueeze_1184, unsqueeze_1185, unsqueeze_1186, unsqueeze_1187, unsqueeze_1188, unsqueeze_1189, unsqueeze_1190, unsqueeze_1191, unsqueeze_1192, unsqueeze_1193, unsqueeze_1194, unsqueeze_1195, unsqueeze_1196, unsqueeze_1197, unsqueeze_1198, unsqueeze_1199, unsqueeze_1200, unsqueeze_1201, unsqueeze_1202, unsqueeze_1203, unsqueeze_1204, unsqueeze_1205, unsqueeze_1206, unsqueeze_1207, unsqueeze_1208, unsqueeze_1209, unsqueeze_1210, unsqueeze_1211, unsqueeze_1212, unsqueeze_1213, unsqueeze_1214, unsqueeze_1215, unsqueeze_1216, unsqueeze_1217, unsqueeze_1218, unsqueeze_1219, unsqueeze_1220, unsqueeze_1221, unsqueeze_1222, unsqueeze_1223, unsqueeze_1224, unsqueeze_1225, unsqueeze_1226, unsqueeze_1227, unsqueeze_1228, unsqueeze_1229, unsqueeze_1230, unsqueeze_1231, unsqueeze_1232, unsqueeze_1233, unsqueeze_1234, unsqueeze_1235, unsqueeze_1236, unsqueeze_1237, unsqueeze_1238, unsqueeze_1239, unsqueeze_1240, unsqueeze_1241, unsqueeze_1242, unsqueeze_1243, permute_391, permute_392, permute_393, permute_401, permute_402, permute_403, permute_404, rsqrt_117, view_835, mm_214, view_837, unsqueeze_1274, unsqueeze_1275, unsqueeze_1276, unsqueeze_1277, unsqueeze_1278, unsqueeze_1279, unsqueeze_1280, unsqueeze_1281, unsqueeze_1282, unsqueeze_1283, unsqueeze_1284, unsqueeze_1285, unsqueeze_1286, unsqueeze_1287, unsqueeze_1288, unsqueeze_1289, unsqueeze_1290, unsqueeze_1291, unsqueeze_1292, unsqueeze_1293, unsqueeze_1294, unsqueeze_1295, unsqueeze_1296, unsqueeze_1297, rsqrt_118, view_840, convert_element_type_431, convert_element_type_432, permute_411, permute_416, permute_420, permute_465, permute_469, permute_514, permute_518, permute_563, permute_567, permute_612, permute_616, permute_661, permute_665, permute_710, permute_714, permute_759, permute_763, permute_808, permute_812, permute_857, permute_861, permute_906, permute_910, permute_955, permute_959, permute_1004, permute_1008, permute_1053, permute_1057, permute_1102, permute_1106, permute_1151, permute_1155, permute_1200, permute_1204, permute_1249, permute_1253, permute_1298, permute_1302, permute_1347, permute_1351, permute_1396, permute_1400, permute_1445, permute_1449, permute_1494, permute_1498, permute_1543, permute_1547, tangents_1]), times=times, repeat=repeat)

def print_mem(s=''):
    print(f"Memory used at {s}: {torch.cuda.max_memory_reserved() / 1e9:.02f} GB, {torch.cuda.memory_allocated() / 1e9:.02f}, {torch.cuda.memory_allocated() / 1e9:.02f}")


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
    print(f"Memory used: {torch.cuda.max_memory_reserved() / 1e9:.02f} GB")

