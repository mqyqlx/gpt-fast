
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile

from torch import empty_strided, device
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


# kernel path: /tmp/torchinductor_mengqy/fa/cfagdwlnyhjq4dtl3ovrayawdjzoml7k5bngcxkfgzdwkhqnzqct.py
# Source Nodes: [l__mod___tok_embeddings], Original ATen: [aten.embedding]
# l__mod___tok_embeddings => embedding
triton_poi_fused_embedding_0 = async_compile.triton('triton_poi_fused_embedding_0', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*i64', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_embedding_0', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_embedding_0(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x1 = (xindex // 4096) % 2048
    x2 = (xindex // 8388608)
    x0 = xindex % 4096
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x1 + (2049*x2)), None, eviction_policy='evict_last')
    tmp1 = tl.where(tmp0 < 0, tmp0 + 50257, tmp0)
    tl.device_assert((0 <= tmp1) & (tmp1 < 50257), "index out of bounds: 0 <= tmp1 < 50257")
    tmp2 = tl.load(in_ptr1 + (x0 + (4096*tmp1)), None).to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp2, None)
''')

import triton
import triton.language as tl
from torch._inductor.triton_heuristics import grid, start_graph, end_graph
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


# kernel path: /tmp/torchinductor_mengqy/pp/cpp4tn7qnz6aqvu36fbcb5lyb6vwbhcdlsebagmlke3yl4xx5x4i.py
# Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
# stack => cat
# stack_1 => cat_1
triton_poi_fused_stack_1 = async_compile.triton('triton_poi_fused_stack_1', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16777216], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_stack_1', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 5, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]})
@triton.jit
def triton_poi_fused_stack_1(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, out_ptr2, out_ptr3, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16777216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 64
    x4 = (xindex // 64)
    x2 = (xindex // 2048) % 2048
    x5 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x4)), None).to(tl.float32)
    tmp2 = tl.load(in_ptr1 + ((2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp5 = tl.load(in_ptr0 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp7 = tl.load(in_ptr1 + (1 + (2*x0) + (128*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr2 + (x0 + (128*x4)), None).to(tl.float32)
    tmp17 = tl.load(in_ptr2 + (64 + x0 + (128*x4)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp3 = tmp2.to(tl.float32)
    tmp4 = tmp1 * tmp3
    tmp6 = tmp5.to(tl.float32)
    tmp8 = tmp7.to(tl.float32)
    tmp9 = tmp6 * tmp8
    tmp10 = tmp4 - tmp9
    tmp11 = tmp6 * tmp3
    tmp12 = tmp1 * tmp8
    tmp13 = tmp11 + tmp12
    tmp15 = tmp14.to(tl.float32)
    tmp16 = tmp15 * tmp3
    tmp18 = tmp17.to(tl.float32)
    tmp19 = tmp18 * tmp8
    tmp20 = tmp16 - tmp19
    tmp21 = tmp18 * tmp3
    tmp22 = tmp15 * tmp8
    tmp23 = tmp21 + tmp22
    tl.store(out_ptr0 + (2*x5), tmp10, None)
    tl.store(out_ptr1 + (2*x5), tmp13, None)
    tl.store(out_ptr2 + (2*x5), tmp20, None)
    tl.store(out_ptr3 + (2*x5), tmp23, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3w/c3w45fwangida7ybcckdclp5sbjqkbqowfjhkhpskne5aq4kkabn.py
# Source Nodes: [getitem, getitem_18], Original ATen: [aten.index, aten.slice]
# getitem => index
# getitem_18 => slice_1, slice_2, slice_3
triton_poi_fused_index_slice_2 = async_compile.triton('triton_poi_fused_index_slice_2', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[4194304], filename=__file__, meta={'signature': {0: '*i1', 1: '*i1', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_index_slice_2', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_index_slice_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 4194304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None)
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/vx/cvx3nx5gjrg3xsopm6z773m4o5zmc333nzcvnodeokjtmzxqskpt.py
# Source Nodes: [matmul], Original ATen: [aten.clone]
# matmul => clone
triton_poi_fused_clone_3 = async_compile.triton('triton_poi_fused_clone_3', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_3', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_clone_3(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 128
    x1 = (xindex // 128) % 2048
    x2 = (xindex // 262144) % 32
    x3 = (xindex // 8388608)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x2) + (4096*x1) + (8388608*x3)), None)
    tmp1 = tmp0.to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp1, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zc/czcpewpfkwrdlc3vcfl3qtyyjxc4pejb6lgtowvbp2kg3renk2kh.py
# Source Nodes: [matmul], Original ATen: [aten.clone]
# matmul => clone_1
triton_poi_fused_clone_4 = async_compile.triton('triton_poi_fused_clone_4', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16384, 2048], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp32', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_4', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]})
@triton.jit
def triton_poi_fused_clone_4(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 16384
    xnumel = 2048
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x2 = xindex
    y0 = yindex % 4096
    y1 = (yindex // 4096)
    y3 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (4096*x2) + (8388608*y1)), None, eviction_policy='evict_last')
    tmp1 = tmp0.to(tl.float32)
    tl.store(out_ptr0 + (x2 + (2048*y3)), tmp1, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yp/cypzyephpx4vyoo4y2vy7rjk725qyprlabgldpynphvoehlmyrak.py
# Source Nodes: [where], Original ATen: [aten.scalar_tensor]
# where => scalar_tensor
triton_poi_fused_scalar_tensor_5 = async_compile.triton('triton_poi_fused_scalar_tensor_5', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_scalar_tensor_5', 'configs': [instance_descriptor(divisible_by_16=(0,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=())]})
@triton.jit
def triton_poi_fused_scalar_tensor_5(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    tmp0 = -65504.0
    tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lc/clcadftvjtrn5qtm7rj7li6y2fpjgg27alscjoyzr72sz6kleidc.py
# Source Nodes: [mul_11, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
# mul_11 => mul_11
# softmax => amax, convert_element_type_6, convert_element_type_7, div, exp, sub_2, sum_1
# where => where
triton_red_fused__softmax_mul_where_6 = async_compile.triton('triton_red_fused__softmax_mul_where_6', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[262144, 2048],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*i1', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__softmax_mul_where_6', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__softmax_mul_where_6(in_ptr0, in_ptr1, in_ptr2, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 262144
    rnumel = 2048
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 2048
    x3 = xindex
    tmp4 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    _tmp9 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = 0.08838834764831843
        tmp3 = tmp1 * tmp2
        tmp6 = tl.where(tmp0, tmp3, tmp5)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.maximum(_tmp9, tmp8)
        _tmp9 = tl.where(rmask, tmp10, _tmp9)
    tmp9 = triton_helpers.max2(_tmp9, 1)[:, None]
    tmp15 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
    _tmp22 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp11 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp13 = 0.08838834764831843
        tmp14 = tmp12 * tmp13
        tmp17 = tl.where(tmp11, tmp14, tmp16)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tmp18 - tmp9
        tmp20 = tl.exp(tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = _tmp22 + tmp21
        _tmp22 = tl.where(rmask, tmp23, _tmp22)
    tmp22 = tl.sum(_tmp22, 1)[:, None]
    tmp28 = tl.load(in_ptr2 + (0)).to(tl.float32)
    tmp29 = tl.broadcast_to(tmp28, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp24 = tl.load(in_ptr0 + (r2 + (2048*x0)), rmask, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr1 + (r2 + (2048*x3)), rmask, other=0).to(tl.float32)
        tmp26 = 0.08838834764831843
        tmp27 = tmp25 * tmp26
        tmp30 = tl.where(tmp24, tmp27, tmp29)
        tmp31 = tmp30.to(tl.float32)
        tmp32 = tmp31 - tmp9
        tmp33 = tl.exp(tmp32)
        tmp34 = tmp33 / tmp22
        tmp35 = tmp34.to(tl.float32)
        tl.store(out_ptr2 + (r2 + (2048*x3)), tmp35, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/2i/c2i3honf5bdfxuelnf2u74dynz5mfumqz6gyz3yovtugevps3qvl.py
# Source Nodes: [matmul_1], Original ATen: [aten.clone]
# matmul_1 => clone_2
triton_poi_fused_clone_7 = async_compile.triton('triton_poi_fused_clone_7', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_7', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_clone_7(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 128
    x1 = (xindex // 128) % 2048
    x2 = (xindex // 262144) % 32
    x3 = (xindex // 8388608)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x2) + (4096*x1) + (8388608*x3)), None).to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/sw/cswak6ygn4ijy54mizq76b6qagzqcxfmzurhcntnbvvkarvbzjv5.py
# Source Nodes: [contiguous], Original ATen: [aten.clone]
# contiguous => clone_3
triton_poi_fused_clone_8 = async_compile.triton('triton_poi_fused_clone_8', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[33554432], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_8', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_clone_8(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 33554432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 128
    x1 = (xindex // 128) % 32
    x2 = (xindex // 4096) % 2048
    x3 = (xindex // 8388608)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x2) + (262144*x1) + (8388608*x3)), None).to(tl.float32)
    tl.store(out_ptr0 + (x4), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/k4/ck4lsfx6vuk7el743f5zbfgzfyrk4yybmz6kbqezq57ff2f2hdml.py
# Source Nodes: [add_3, add_4, float_4, mean_1, mul_12, mul_13, mul_14, rsqrt_1, type_as_3], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_3 => add_3
# add_4 => add_4
# float_4 => convert_element_type_8
# mean_1 => mean_1
# mul_12 => mul_12
# mul_13 => mul_13
# mul_14 => mul_14
# rsqrt_1 => rsqrt_1
# type_as_3 => convert_element_type_9
triton_red_fused__to_copy_add_mean_mul_rsqrt_9 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_9', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_9', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_9(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp8 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp9 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = 4096.0
        tmp13 = tmp6 / tmp12
        tmp14 = 1e-05
        tmp15 = tmp13 + tmp14
        tmp16 = tl.math.rsqrt(tmp15)
        tmp17 = tmp11 * tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp20 = tmp18 * tmp19
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp20, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/f7/cf7zs4rmvebvvxb7jbhxusvxupy6omskh5oeeskrurnedwpxqxxq.py
# Source Nodes: [mul_15, silu], Original ATen: [aten.mul, aten.silu]
# mul_15 => mul_16
# silu => convert_element_type_10, convert_element_type_11, mul_15, sigmoid
triton_poi_fused_mul_silu_10 = async_compile.triton('triton_poi_fused_mul_silu_10', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[134217728], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_mul_silu_10', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_mul_silu_10(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 90177536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
    tmp5 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = tl.sigmoid(tmp1)
    tmp3 = tmp1 * tmp2
    tmp4 = tmp3.to(tl.float32)
    tmp6 = tmp4 * tmp5
    tl.store(in_out_ptr0 + (x0), tmp6, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hb/chb3pgw75pizuukv5uwxli7ghylbsry7sxzo7sz5gymrsndhk2aa.py
# Source Nodes: [add, add_3, add_5, l__mod___dynamic_dense_0_w1, mean, mul, pow_1, rsqrt], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
# add => add_6
# add_3 => add_3
# add_5 => add_5
# l__mod___dynamic_dense_0_w1 => view_30
# mean => mean_2
# mul => mul_17
# pow_1 => pow_1
# rsqrt => rsqrt_2
triton_red_fused_add_mean_mul_pow_rsqrt_view_11 = async_compile.triton('triton_red_fused_add_mean_mul_pow_rsqrt_view_11', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mean_mul_pow_rsqrt_view_11', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]}
)
@triton.jit
def triton_red_fused_add_mean_mul_pow_rsqrt_view_11(in_ptr0, in_ptr1, in_ptr2, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tmp5.to(tl.float32)
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = _tmp8 + tmp7
        _tmp8 = tl.where(rmask, tmp9, _tmp8)
    tmp8 = tl.sum(_tmp8, 1)[:, None]
    tmp10 = 4096.0
    tmp11 = tmp8 / tmp10
    tmp12 = tmp11.to(tl.float32)
    tmp13 = 1e-05
    tmp14 = tmp12 + tmp13
    tmp15 = tl.math.rsqrt(tmp14)
    tl.store(out_ptr1 + (x0), tmp15, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp16 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp17 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp19 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tmp16 + tmp17
        tmp20 = tmp18 + tmp19
        tmp21 = tmp20 * tmp15
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp21, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/mv/cmvfj5gztrw7v4jlpgtwf5dz5cqbhavoj7tirqvtymr4geaay55w.py
# Source Nodes: [l__mod___dynamic_dense_0_act, l__mod___dynamic_dense_0_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_0_act => add_7, convert_element_type_12, convert_element_type_13, erf, mul_18, mul_19, mul_20
# l__mod___dynamic_dense_0_w2 => view_32
triton_poi_fused_gelu_view_12 = async_compile.triton('triton_poi_fused_gelu_view_12', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_12', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_12(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 65536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/c7/cc7iwnpkl6thoi2gigc5nuyv7cjmuerkzssspgy3oayn7kfsosuw.py
# Source Nodes: [add, add_2, add_3, add_4, add_6, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_13
# add_2 => add_9
# add_3 => add_10
# add_4 => add_11, add_14
# add_6 => add_15
# float_1 => convert_element_type_14
# float_2 => convert_element_type_16
# float_3 => convert_element_type_18
# mean => mean_3
# mean_1 => mean_4
# mean_2 => mean_5
# mul => mul_25
# mul_1 => mul_21, mul_26
# mul_2 => mul_22, mul_27
# mul_3 => mul_23, mul_28
# mul_4 => mul_29
# mul_5 => mul_30
# mul_6 => mul_31
# mul_7 => mul_32
# mul_8 => mul_33
# rsqrt => rsqrt_3
# rsqrt_1 => rsqrt_4
# rsqrt_2 => rsqrt_5
# type_as => convert_element_type_15
# type_as_1 => convert_element_type_17
# type_as_2 => convert_element_type_19
triton_red_fused__to_copy_add_mean_mul_rsqrt_13 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_13', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: 'i32', 10: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_13', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9, 10))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_13(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr3, out_ptr4, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (8*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp13 = tl.load(in_ptr0 + (2 + (8*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp14 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
    _tmp22 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp24 = tl.load(in_ptr0 + (4 + (8*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp25 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp26 = tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])
    _tmp33 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp8 = tmp7.to(tl.float32)
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = _tmp11 + tmp10
        _tmp11 = tl.where(rmask, tmp12, _tmp11)
        tmp16 = tmp13 + tmp15
        tmp17 = tmp16 * tmp4
        tmp18 = tmp17 + tmp6
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp19 * tmp19
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = _tmp22 + tmp21
        _tmp22 = tl.where(rmask, tmp23, _tmp22)
        tmp27 = tmp24 + tmp26
        tmp28 = tmp27 * tmp4
        tmp29 = tmp28 + tmp6
        tmp30 = tmp29.to(tl.float32)
        tmp31 = tmp30 * tmp30
        tmp32 = tl.broadcast_to(tmp31, [XBLOCK, RBLOCK])
        tmp34 = _tmp33 + tmp32
        _tmp33 = tl.where(rmask, tmp34, _tmp33)
    tmp11 = tl.sum(_tmp11, 1)[:, None]
    tmp22 = tl.sum(_tmp22, 1)[:, None]
    tmp33 = tl.sum(_tmp33, 1)[:, None]
    tmp35 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
    tmp52 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp53 = tl.broadcast_to(tmp52, [XBLOCK, RBLOCK])
    tmp65 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp66 = tl.broadcast_to(tmp65, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp38 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp63 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp76 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp37 = tmp0 + tmp36
        tmp39 = tmp37 * tmp38
        tmp40 = 0.0
        tmp41 = tmp39 + tmp40
        tmp42 = tmp41.to(tl.float32)
        tmp43 = 4096.0
        tmp44 = tmp11 / tmp43
        tmp45 = 1e-05
        tmp46 = tmp44 + tmp45
        tmp47 = tl.math.rsqrt(tmp46)
        tmp48 = tmp42 * tmp47
        tmp49 = tmp48.to(tl.float32)
        tmp51 = tmp49 * tmp50
        tmp54 = tmp13 + tmp53
        tmp55 = tmp54 * tmp38
        tmp56 = tmp55 + tmp40
        tmp57 = tmp56.to(tl.float32)
        tmp58 = tmp22 / tmp43
        tmp59 = tmp58 + tmp45
        tmp60 = tl.math.rsqrt(tmp59)
        tmp61 = tmp57 * tmp60
        tmp62 = tmp61.to(tl.float32)
        tmp64 = tmp62 * tmp63
        tmp67 = tmp24 + tmp66
        tmp68 = tmp67 * tmp38
        tmp69 = tmp68 + tmp40
        tmp70 = tmp69.to(tl.float32)
        tmp71 = tmp33 / tmp43
        tmp72 = tmp71 + tmp45
        tmp73 = tl.math.rsqrt(tmp72)
        tmp74 = tmp70 * tmp73
        tmp75 = tmp74.to(tl.float32)
        tmp77 = tmp75 * tmp76
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp51, rmask)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp64, rmask)
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp77, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wp/cwpkmhqamlihzhxoqlhis75fxggdebvaksc2bgbvhckafc552hqd.py
# Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_19, mul_20, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_10 => add_18
# add_11 => add_19
# add_5 => add_12
# float_6 => convert_element_type_26
# mean_3 => mean_6
# mul_18 => mul_43
# mul_19 => mul_44
# mul_20 => mul_45
# mul_4 => mul_24
# rsqrt_3 => rsqrt_6
# type_as_5 => convert_element_type_27
triton_red_fused__to_copy_add_mean_mul_rsqrt_14 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_14', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_14', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_14(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (6 + (8*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp8 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp9.to(tl.float32)
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask, tmp14, _tmp13)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp18 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp32 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp17 = tmp0 + tmp16
        tmp19 = tmp17 * tmp18
        tmp20 = 0.0
        tmp21 = tmp19 + tmp20
        tmp23 = tmp21 + tmp22
        tmp24 = tmp23.to(tl.float32)
        tmp25 = 4096.0
        tmp26 = tmp13 / tmp25
        tmp27 = 1e-05
        tmp28 = tmp26 + tmp27
        tmp29 = tl.math.rsqrt(tmp28)
        tmp30 = tmp24 * tmp29
        tmp31 = tmp30.to(tl.float32)
        tmp33 = tmp31 * tmp32
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp33, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/2x/c2x3vv5v4zscga7ndxsr6u3gogaou6kl4agm6rgs67hnd3ybtykq.py
# Source Nodes: [add_10, add_12, add_5, add_6, l__mod___dynamic_dense_1_w1, mean_1, mul_4, mul_5, pow_2, rsqrt_1], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
# add_10 => add_18
# add_12 => add_20
# add_5 => add_12
# add_6 => add_21
# l__mod___dynamic_dense_1_w1 => view_65
# mean_1 => mean_7
# mul_4 => mul_24
# mul_5 => mul_48
# pow_2 => pow_2
# rsqrt_1 => rsqrt_7
triton_red_fused_add_mean_mul_pow_rsqrt_view_15 = async_compile.triton('triton_red_fused_add_mean_mul_pow_rsqrt_view_15', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mean_mul_pow_rsqrt_view_15', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]}
)
@triton.jit
def triton_red_fused_add_mean_mul_pow_rsqrt_view_15(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (6 + (8*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp8 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp9 = tmp7 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    tmp17 = 4096.0
    tmp18 = tmp15 / tmp17
    tmp19 = tmp18.to(tl.float32)
    tmp20 = 1e-05
    tmp21 = tmp19 + tmp20
    tmp22 = tl.math.rsqrt(tmp21)
    tl.store(out_ptr1 + (x0), tmp22, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp23 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp24 = tmp23 * tmp22
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp24, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wu/cwurw76lugn7zp6ewyb54tmfkhsfmilm63dzztd3x67etf5bjxra.py
# Source Nodes: [l__mod___dynamic_dense_1_act, l__mod___dynamic_dense_1_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_1_act => add_22, convert_element_type_30, convert_element_type_31, erf_1, mul_49, mul_50, mul_51
# l__mod___dynamic_dense_1_w2 => view_67
triton_poi_fused_gelu_view_16 = async_compile.triton('triton_poi_fused_gelu_view_16', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_16', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_16(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pm/cpm35yanpow5ytletmrtx4l335bbn6gz55dh57txgprbzzap2evl.py
# Source Nodes: [add, add_10, add_11, add_12, add_13, add_14, add_3, add_5, add_8, add_9, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_10, mul_11, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_9, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_32
# add_10 => add_26
# add_11 => add_27
# add_12 => add_28, add_33
# add_13 => add_29
# add_14 => add_34
# add_3 => add_3
# add_5 => add_5
# add_8 => add_24
# add_9 => add_25
# float_1 => convert_element_type_32
# float_2 => convert_element_type_34
# float_3 => convert_element_type_36
# mean => mean_8
# mean_1 => mean_9
# mean_2 => mean_10
# mul => mul_60
# mul_1 => mul_61
# mul_10 => mul_56
# mul_11 => mul_57
# mul_2 => mul_62
# mul_3 => mul_63
# mul_4 => mul_64
# mul_5 => mul_65
# mul_6 => mul_52, mul_66
# mul_7 => mul_53, mul_67
# mul_8 => mul_54, mul_68
# mul_9 => mul_55
# rsqrt => rsqrt_8
# rsqrt_1 => rsqrt_9
# rsqrt_2 => rsqrt_10
# type_as => convert_element_type_33
# type_as_1 => convert_element_type_35
# type_as_2 => convert_element_type_37
triton_red_fused__to_copy_add_mean_mul_rsqrt_17 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_17', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: 'i32', 15: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_17', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(14, 15))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_17(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (12*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp19 = tl.load(in_ptr0 + (3 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp20 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (4 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp32 = tl.load(in_ptr0 + (6 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp33 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
    tmp38 = tl.load(in_ptr0 + (7 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp39 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
    _tmp47 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp18 = tmp17.to(tl.float32)
        tmp22 = tmp19 + tmp21
        tmp23 = tmp22 * tmp4
        tmp24 = tmp23 + tmp6
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp15
        tmp30 = tmp24 + tmp29
        tmp31 = tmp30.to(tl.float32)
        tmp35 = tmp32 + tmp34
        tmp36 = tmp35 * tmp4
        tmp37 = tmp36 + tmp6
        tmp41 = tmp38 + tmp40
        tmp42 = tmp41 * tmp15
        tmp43 = tmp37 + tmp42
        tmp44 = tmp43.to(tl.float32)
        tmp45 = tmp18 * tmp18
        tmp46 = tl.broadcast_to(tmp45, [XBLOCK, RBLOCK])
        tmp48 = _tmp47 + tmp46
        _tmp47 = tl.where(rmask, tmp48, _tmp47)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp18, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp31, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp44, rmask)
    tmp47 = tl.sum(_tmp47, 1)[:, None]
    _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp49 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp57 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp59 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp50 = 4096.0
        tmp51 = tmp47 / tmp50
        tmp52 = 1e-05
        tmp53 = tmp51 + tmp52
        tmp54 = tl.math.rsqrt(tmp53)
        tmp55 = tmp49 * tmp54
        tmp56 = tmp55.to(tl.float32)
        tmp58 = tmp56 * tmp57
        tmp60 = tmp59 * tmp59
        tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
        tmp63 = _tmp62 + tmp61
        _tmp62 = tl.where(rmask, tmp63, _tmp62)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp58, rmask)
    tmp62 = tl.sum(_tmp62, 1)[:, None]
    _tmp77 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp64 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp72 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp74 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp65 = 4096.0
        tmp66 = tmp62 / tmp65
        tmp67 = 1e-05
        tmp68 = tmp66 + tmp67
        tmp69 = tl.math.rsqrt(tmp68)
        tmp70 = tmp64 * tmp69
        tmp71 = tmp70.to(tl.float32)
        tmp73 = tmp71 * tmp72
        tmp75 = tmp74 * tmp74
        tmp76 = tl.broadcast_to(tmp75, [XBLOCK, RBLOCK])
        tmp78 = _tmp77 + tmp76
        _tmp77 = tl.where(rmask, tmp78, _tmp77)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp73, rmask)
    tmp77 = tl.sum(_tmp77, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp79 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp87 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp80 = 4096.0
        tmp81 = tmp77 / tmp80
        tmp82 = 1e-05
        tmp83 = tmp81 + tmp82
        tmp84 = tl.math.rsqrt(tmp83)
        tmp85 = tmp79 * tmp84
        tmp86 = tmp85.to(tl.float32)
        tmp88 = tmp86 * tmp87
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp88, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/qo/cqordxs2gm5sc4scwxpubvlfwcxwxvkl3up4aztao2s5nfy3bsod.py
# Source Nodes: [add_14, add_15, add_18, add_19, add_3, add_5, float_6, mean_3, mul_12, mul_13, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_14 => add_30
# add_15 => add_31
# add_18 => add_37
# add_19 => add_38
# add_3 => add_3
# add_5 => add_5
# float_6 => convert_element_type_44
# mean_3 => mean_11
# mul_12 => mul_58
# mul_13 => mul_59
# mul_18 => mul_78
# mul_19 => mul_79
# mul_20 => mul_80
# rsqrt_3 => rsqrt_11
# type_as_5 => convert_element_type_45
triton_red_fused__to_copy_add_mean_mul_rsqrt_18 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_18', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_18', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_18(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (9 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (10 + (12*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    _tmp23 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp18 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp19 = tmp17 + tmp18
        tmp20 = tmp19.to(tl.float32)
        tmp21 = tmp20 * tmp20
        tmp22 = tl.broadcast_to(tmp21, [XBLOCK, RBLOCK])
        tmp24 = _tmp23 + tmp22
        _tmp23 = tl.where(rmask, tmp24, _tmp23)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp19, rmask)
    tmp23 = tl.sum(_tmp23, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp25 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp34 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp26 = tmp25.to(tl.float32)
        tmp27 = 4096.0
        tmp28 = tmp23 / tmp27
        tmp29 = 1e-05
        tmp30 = tmp28 + tmp29
        tmp31 = tl.math.rsqrt(tmp30)
        tmp32 = tmp26 * tmp31
        tmp33 = tmp32.to(tl.float32)
        tmp35 = tmp33 * tmp34
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp35, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/va/cva2ymu65f7gegmkr44i4vnzmnehjfpp72cgzji6xgqfpzxtgozn.py
# Source Nodes: [add_16, add_20, l__mod___dynamic_dense_2_w1, mean_2, mul_14, pow_3, rsqrt_2], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
# add_16 => add_40
# add_20 => add_39
# l__mod___dynamic_dense_2_w1 => view_100
# mean_2 => mean_12
# mul_14 => mul_83
# pow_3 => pow_3
# rsqrt_2 => rsqrt_12
triton_red_fused_add_mean_mul_pow_rsqrt_view_19 = async_compile.triton('triton_red_fused_add_mean_mul_pow_rsqrt_view_19', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_add_mean_mul_pow_rsqrt_view_19', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]}
)
@triton.jit
def triton_red_fused_add_mean_mul_pow_rsqrt_view_19(in_ptr0, in_ptr1, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask, tmp7, _tmp6)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tmp8 = 4096.0
    tmp9 = tmp6 / tmp8
    tmp10 = tmp9.to(tl.float32)
    tmp11 = 1e-05
    tmp12 = tmp10 + tmp11
    tmp13 = tl.math.rsqrt(tmp12)
    tl.store(out_ptr1 + (x0), tmp13, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp14 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp16 = tmp14 + tmp15
        tmp17 = tmp16 * tmp13
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp17, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/jg/cjgknq6z2lcybo5qwgvo6iiunlerfrcqahwiqth5ssewyt54vrcn.py
# Source Nodes: [l__mod___dynamic_dense_2_act, l__mod___dynamic_dense_2_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_2_act => add_41, convert_element_type_48, convert_element_type_49, erf_2, mul_84, mul_85, mul_86
# l__mod___dynamic_dense_2_w2 => view_102
triton_poi_fused_gelu_view_20 = async_compile.triton('triton_poi_fused_gelu_view_20', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_20', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_20(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/gl/cgl2qfwf2rmfosrx5wwqodwok7ylzsv3h4zdjrzry72tb3xralms.py
# Source Nodes: [add, add_18, add_19, add_20, add_21, add_22, add_23, add_24, add_25, add_26, add_27, add_28, add_29, add_3, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_15, mul_16, mul_17, mul_18, mul_19, mul_2, mul_20, mul_21, mul_22, mul_23, mul_24, mul_25, mul_26, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_55
# add_18 => add_43
# add_19 => add_44
# add_20 => add_45
# add_21 => add_46
# add_22 => add_47
# add_23 => add_48
# add_24 => add_49, add_56
# add_25 => add_50
# add_26 => add_51
# add_27 => add_52, add_57
# add_28 => add_53
# add_29 => add_54
# add_3 => add_3
# add_5 => add_5
# float_1 => convert_element_type_50
# float_2 => convert_element_type_52
# float_3 => convert_element_type_54
# mean => mean_13
# mean_1 => mean_14
# mean_2 => mean_15
# mul => mul_99
# mul_1 => mul_100
# mul_15 => mul_87
# mul_16 => mul_88
# mul_17 => mul_89
# mul_18 => mul_90
# mul_19 => mul_91
# mul_2 => mul_101
# mul_20 => mul_92
# mul_21 => mul_93
# mul_22 => mul_94
# mul_23 => mul_95
# mul_24 => mul_96
# mul_25 => mul_97
# mul_26 => mul_98
# mul_3 => mul_102
# mul_4 => mul_103
# mul_5 => mul_104
# mul_6 => mul_105
# mul_7 => mul_106
# mul_8 => mul_107
# rsqrt => rsqrt_13
# rsqrt_1 => rsqrt_14
# rsqrt_2 => rsqrt_15
# type_as => convert_element_type_51
# type_as_1 => convert_element_type_53
# type_as_2 => convert_element_type_55
triton_red_fused__to_copy_add_mean_mul_rsqrt_21 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_21', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: 'i32', 17: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_21', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(16, 17))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_21(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr5, out_ptr7, out_ptr9, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (16*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (4 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (5 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (6 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (8 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (9 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (10 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (12 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (13 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (14 + (16*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    _tmp82 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp79 = tmp24.to(tl.float32)
        tmp80 = tmp79 * tmp79
        tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
        tmp83 = _tmp82 + tmp81
        _tmp82 = tl.where(rmask, tmp83, _tmp82)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp24, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp42, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp60, rmask)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp78, rmask)
    tmp82 = tl.sum(_tmp82, 1)[:, None]
    _tmp99 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp84 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr6 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp95 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp85 = tmp84.to(tl.float32)
        tmp86 = 4096.0
        tmp87 = tmp82 / tmp86
        tmp88 = 1e-05
        tmp89 = tmp87 + tmp88
        tmp90 = tl.math.rsqrt(tmp89)
        tmp91 = tmp85 * tmp90
        tmp92 = tmp91.to(tl.float32)
        tmp94 = tmp92 * tmp93
        tmp96 = tmp95.to(tl.float32)
        tmp97 = tmp96 * tmp96
        tmp98 = tl.broadcast_to(tmp97, [XBLOCK, RBLOCK])
        tmp100 = _tmp99 + tmp98
        _tmp99 = tl.where(rmask, tmp100, _tmp99)
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp94, rmask)
    tmp99 = tl.sum(_tmp99, 1)[:, None]
    _tmp116 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp101 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr7 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp112 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp102 = tmp101.to(tl.float32)
        tmp103 = 4096.0
        tmp104 = tmp99 / tmp103
        tmp105 = 1e-05
        tmp106 = tmp104 + tmp105
        tmp107 = tl.math.rsqrt(tmp106)
        tmp108 = tmp102 * tmp107
        tmp109 = tmp108.to(tl.float32)
        tmp111 = tmp109 * tmp110
        tmp113 = tmp112.to(tl.float32)
        tmp114 = tmp113 * tmp113
        tmp115 = tl.broadcast_to(tmp114, [XBLOCK, RBLOCK])
        tmp117 = _tmp116 + tmp115
        _tmp116 = tl.where(rmask, tmp117, _tmp116)
        tl.store(out_ptr7 + (r1 + (4096*x0)), tmp111, rmask)
    tmp116 = tl.sum(_tmp116, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp118 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp127 = tl.load(in_ptr8 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp119 = tmp118.to(tl.float32)
        tmp120 = 4096.0
        tmp121 = tmp116 / tmp120
        tmp122 = 1e-05
        tmp123 = tmp121 + tmp122
        tmp124 = tl.math.rsqrt(tmp123)
        tmp125 = tmp119 * tmp124
        tmp126 = tmp125.to(tl.float32)
        tmp128 = tmp126 * tmp127
        tl.store(out_ptr9 + (r1 + (4096*x0)), tmp128, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/jk/cjk63n2gnj6v3wopgskljclgjrlt34z7mvp5qouqys6wmwcwvlud.py
# Source Nodes: [l__mod___dynamic_dense_3_act, l__mod___dynamic_dense_3_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_3_act => add_64, convert_element_type_66, convert_element_type_67, erf_3, mul_123, mul_124, mul_125
# l__mod___dynamic_dense_3_w2 => view_137
triton_poi_fused_gelu_view_22 = async_compile.triton('triton_poi_fused_gelu_view_22', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_22', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_22(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 163840
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/3m/c3mdzqznjy4i6svicdqskhglic445c4q6c3dq7s2ifveh7n6bczn.py
# Source Nodes: [add, add_20, add_3, add_32, add_33, add_34, add_35, add_36, add_37, add_38, add_39, add_40, add_41, add_42, add_43, add_44, add_45, add_46, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_28, mul_29, mul_3, mul_30, mul_31, mul_32, mul_33, mul_34, mul_35, mul_36, mul_37, mul_38, mul_39, mul_4, mul_40, mul_41, mul_42, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_82
# add_20 => add_39
# add_3 => add_3
# add_32 => add_66
# add_33 => add_67
# add_34 => add_68
# add_35 => add_69
# add_36 => add_70
# add_37 => add_71
# add_38 => add_72
# add_39 => add_73
# add_40 => add_74, add_83
# add_41 => add_75
# add_42 => add_76
# add_43 => add_77
# add_44 => add_78, add_84
# add_45 => add_79
# add_46 => add_80
# add_5 => add_5
# float_1 => convert_element_type_68
# float_2 => convert_element_type_70
# float_3 => convert_element_type_72
# mean => mean_18
# mean_1 => mean_19
# mean_2 => mean_20
# mul => mul_142
# mul_1 => mul_143
# mul_2 => mul_144
# mul_28 => mul_126
# mul_29 => mul_127
# mul_3 => mul_145
# mul_30 => mul_128
# mul_31 => mul_129
# mul_32 => mul_130
# mul_33 => mul_131
# mul_34 => mul_132
# mul_35 => mul_133
# mul_36 => mul_134
# mul_37 => mul_135
# mul_38 => mul_136
# mul_39 => mul_137
# mul_4 => mul_146
# mul_40 => mul_138
# mul_41 => mul_139
# mul_42 => mul_140
# mul_5 => mul_147
# mul_6 => mul_148
# mul_7 => mul_149
# mul_8 => mul_150
# rsqrt => rsqrt_18
# rsqrt_1 => rsqrt_19
# rsqrt_2 => rsqrt_20
# type_as => convert_element_type_69
# type_as_1 => convert_element_type_71
# type_as_2 => convert_element_type_73
triton_red_fused__to_copy_add_mean_mul_rsqrt_23 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_23', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: 'i32', 19: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_23', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(18, 19))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_23(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr8, out_ptr10, out_ptr12, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (20*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (5 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (6 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (7 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (10 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (11 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (12 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (15 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (16 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (17 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp89 = tl.load(in_ptr0 + (8 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp90 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
    tmp96 = tl.load(in_ptr0 + (13 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp97 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp98 = tl.broadcast_to(tmp97, [XBLOCK, RBLOCK])
    _tmp105 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp88 = tmp87.to(tl.float32)
        tmp92 = tmp89 + tmp91
        tmp93 = tmp92 * tmp85
        tmp94 = tmp42 + tmp93
        tmp95 = tmp94.to(tl.float32)
        tmp99 = tmp96 + tmp98
        tmp100 = tmp99 * tmp85
        tmp101 = tmp60 + tmp100
        tmp102 = tmp101.to(tl.float32)
        tmp103 = tmp88 * tmp88
        tmp104 = tl.broadcast_to(tmp103, [XBLOCK, RBLOCK])
        tmp106 = _tmp105 + tmp104
        _tmp105 = tl.where(rmask, tmp106, _tmp105)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp78, rmask)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp88, rmask)
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp95, rmask)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp102, rmask)
    tmp105 = tl.sum(_tmp105, 1)[:, None]
    _tmp120 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp107 = tl.load(out_ptr4 + (r1 + (4096*x0)), rmask, other=0)
        tmp115 = tl.load(in_ptr8 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp117 = tl.load(out_ptr5 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp108 = 4096.0
        tmp109 = tmp105 / tmp108
        tmp110 = 1e-05
        tmp111 = tmp109 + tmp110
        tmp112 = tl.math.rsqrt(tmp111)
        tmp113 = tmp107 * tmp112
        tmp114 = tmp113.to(tl.float32)
        tmp116 = tmp114 * tmp115
        tmp118 = tmp117 * tmp117
        tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
        tmp121 = _tmp120 + tmp119
        _tmp120 = tl.where(rmask, tmp121, _tmp120)
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp116, rmask)
    tmp120 = tl.sum(_tmp120, 1)[:, None]
    _tmp135 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp122 = tl.load(out_ptr5 + (r1 + (4096*x0)), rmask, other=0)
        tmp130 = tl.load(in_ptr9 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp132 = tl.load(out_ptr6 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp123 = 4096.0
        tmp124 = tmp120 / tmp123
        tmp125 = 1e-05
        tmp126 = tmp124 + tmp125
        tmp127 = tl.math.rsqrt(tmp126)
        tmp128 = tmp122 * tmp127
        tmp129 = tmp128.to(tl.float32)
        tmp131 = tmp129 * tmp130
        tmp133 = tmp132 * tmp132
        tmp134 = tl.broadcast_to(tmp133, [XBLOCK, RBLOCK])
        tmp136 = _tmp135 + tmp134
        _tmp135 = tl.where(rmask, tmp136, _tmp135)
        tl.store(out_ptr10 + (r1 + (4096*x0)), tmp131, rmask)
    tmp135 = tl.sum(_tmp135, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp137 = tl.load(out_ptr6 + (r1 + (4096*x0)), rmask, other=0)
        tmp145 = tl.load(in_ptr10 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp138 = 4096.0
        tmp139 = tmp135 / tmp138
        tmp140 = 1e-05
        tmp141 = tmp139 + tmp140
        tmp142 = tl.math.rsqrt(tmp141)
        tmp143 = tmp137 * tmp142
        tmp144 = tmp143.to(tl.float32)
        tmp146 = tmp144 * tmp145
        tl.store(out_ptr12 + (r1 + (4096*x0)), tmp146, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/55/c55mcalnnuigumum4zzyejp7ov2yrvwqaw5x6uqfpxrtjtvkxw67.py
# Source Nodes: [add_20, add_47, add_48, add_49, float_6, mean_3, mul_18, mul_19, mul_20, mul_43, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_20 => add_39
# add_47 => add_81
# add_48 => add_87
# add_49 => add_88
# float_6 => convert_element_type_80
# mean_3 => mean_21
# mul_18 => mul_160
# mul_19 => mul_161
# mul_20 => mul_162
# mul_43 => mul_141
# rsqrt_3 => rsqrt_21
# type_as_5 => convert_element_type_81
triton_red_fused__to_copy_add_mean_mul_rsqrt_24 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_24', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_24', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_24(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (18 + (20*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/hb/chbx3r4zor2benw4ni74e6lmdfjin3mot2u2szm6tmvtrlcivwdj.py
# Source Nodes: [l__mod___dynamic_dense_4_act, l__mod___dynamic_dense_4_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_4_act => add_91, convert_element_type_84, convert_element_type_85, erf_4, mul_166, mul_167, mul_168
# l__mod___dynamic_dense_4_w2 => view_172
triton_poi_fused_gelu_view_25 = async_compile.triton('triton_poi_fused_gelu_view_25', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_25', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_25(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 196608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ms/cmsm36y3v6mfkcjckci34rt646o65sne4svhbjlakoztzhmml3kg.py
# Source Nodes: [add, add_20, add_3, add_31, add_33, add_5, add_50, add_51, add_52, add_53, add_54, add_55, add_56, add_57, add_58, add_59, add_60, add_61, add_62, add_63, add_64, add_65, add_66, add_67, add_68, add_69, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_45, mul_46, mul_47, mul_48, mul_49, mul_5, mul_50, mul_51, mul_52, mul_53, mul_54, mul_55, mul_56, mul_57, mul_58, mul_59, mul_6, mul_60, mul_61, mul_62, mul_63, mul_64, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_113
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_93
# add_51 => add_94
# add_52 => add_95
# add_53 => add_96
# add_54 => add_97
# add_55 => add_98
# add_56 => add_99
# add_57 => add_100
# add_58 => add_101
# add_59 => add_102
# add_60 => add_103, add_114
# add_61 => add_104
# add_62 => add_105
# add_63 => add_106
# add_64 => add_107
# add_65 => add_108, add_115
# add_66 => add_109
# add_67 => add_110
# add_68 => add_111
# add_69 => add_112
# float_1 => convert_element_type_86
# float_2 => convert_element_type_88
# float_3 => convert_element_type_90
# mean => mean_23
# mean_1 => mean_24
# mean_2 => mean_25
# mul => mul_189
# mul_1 => mul_190
# mul_2 => mul_191
# mul_3 => mul_192
# mul_4 => mul_193
# mul_45 => mul_169
# mul_46 => mul_170
# mul_47 => mul_171
# mul_48 => mul_172
# mul_49 => mul_173
# mul_5 => mul_194
# mul_50 => mul_174
# mul_51 => mul_175
# mul_52 => mul_176
# mul_53 => mul_177
# mul_54 => mul_178
# mul_55 => mul_179
# mul_56 => mul_180
# mul_57 => mul_181
# mul_58 => mul_182
# mul_59 => mul_183
# mul_6 => mul_195
# mul_60 => mul_184
# mul_61 => mul_185
# mul_62 => mul_186
# mul_63 => mul_187
# mul_64 => mul_188
# mul_7 => mul_196
# mul_8 => mul_197
# rsqrt => rsqrt_23
# rsqrt_1 => rsqrt_24
# rsqrt_2 => rsqrt_25
# type_as => convert_element_type_87
# type_as_1 => convert_element_type_89
# type_as_2 => convert_element_type_91
triton_red_fused__to_copy_add_mean_mul_rsqrt_26 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_26', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: 'i32', 22: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_26', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(21, 22))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_26(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (24*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (6 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (7 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (8 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (12 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (13 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (14 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (18 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (19 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (20 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (9 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (10 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (15 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (16 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (21 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (22 + (24*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    _tmp138 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp135 = tmp122.to(tl.float32)
        tmp136 = tmp135 * tmp135
        tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
        tmp139 = _tmp138 + tmp137
        _tmp138 = tl.where(rmask, tmp139, _tmp138)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp98, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp110, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp122, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp134, rmask)
    tmp138 = tl.sum(_tmp138, 1)[:, None]
    _tmp155 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp140 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr11 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp151 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp141 = tmp140.to(tl.float32)
        tmp142 = 4096.0
        tmp143 = tmp138 / tmp142
        tmp144 = 1e-05
        tmp145 = tmp143 + tmp144
        tmp146 = tl.math.rsqrt(tmp145)
        tmp147 = tmp141 * tmp146
        tmp148 = tmp147.to(tl.float32)
        tmp150 = tmp148 * tmp149
        tmp152 = tmp151.to(tl.float32)
        tmp153 = tmp152 * tmp152
        tmp154 = tl.broadcast_to(tmp153, [XBLOCK, RBLOCK])
        tmp156 = _tmp155 + tmp154
        _tmp155 = tl.where(rmask, tmp156, _tmp155)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp150, rmask)
    tmp155 = tl.sum(_tmp155, 1)[:, None]
    _tmp172 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp157 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp166 = tl.load(in_ptr12 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp168 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp158 = tmp157.to(tl.float32)
        tmp159 = 4096.0
        tmp160 = tmp155 / tmp159
        tmp161 = 1e-05
        tmp162 = tmp160 + tmp161
        tmp163 = tl.math.rsqrt(tmp162)
        tmp164 = tmp158 * tmp163
        tmp165 = tmp164.to(tl.float32)
        tmp167 = tmp165 * tmp166
        tmp169 = tmp168.to(tl.float32)
        tmp170 = tmp169 * tmp169
        tmp171 = tl.broadcast_to(tmp170, [XBLOCK, RBLOCK])
        tmp173 = _tmp172 + tmp171
        _tmp172 = tl.where(rmask, tmp173, _tmp172)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp167, rmask)
    tmp172 = tl.sum(_tmp172, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp174 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp183 = tl.load(in_ptr13 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp175 = tmp174.to(tl.float32)
        tmp176 = 4096.0
        tmp177 = tmp172 / tmp176
        tmp178 = 1e-05
        tmp179 = tmp177 + tmp178
        tmp180 = tl.math.rsqrt(tmp179)
        tmp181 = tmp175 * tmp180
        tmp182 = tmp181.to(tl.float32)
        tmp184 = tmp182 * tmp183
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp184, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/4u/c4uy67bbm3fh6dqocpzabblspqrjmjymis3lpiv656ykamwbokyf.py
# Source Nodes: [l__mod___dynamic_dense_5_act, l__mod___dynamic_dense_5_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_5_act => add_122, convert_element_type_102, convert_element_type_103, erf_5, mul_213, mul_214, mul_215
# l__mod___dynamic_dense_5_w2 => view_207
triton_poi_fused_gelu_view_27 = async_compile.triton('triton_poi_fused_gelu_view_27', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_27', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_27(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 229376
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2w/c2wdt2p565jw67ex536qohzvd3sa4ro3jl6nqov7j7tomdpyv2ug.py
# Source Nodes: [add, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_73, add_74, add_75, add_76, add_77, add_78, add_79, add_80, add_81, add_82, add_83, add_84, add_85, add_86, add_87, add_88, add_89, add_90, add_91, add_92, add_93, add_94, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_66, mul_67, mul_68, mul_69, mul_7, mul_70, mul_71, mul_72, mul_73, mul_74, mul_75, mul_76, mul_77, mul_78, mul_79, mul_8, mul_80, mul_81, mul_82, mul_83, mul_84, mul_85, mul_86, mul_87, mul_88, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_148
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_72 => add_124
# add_73 => add_125
# add_74 => add_126
# add_75 => add_127
# add_76 => add_128
# add_77 => add_129
# add_78 => add_130
# add_79 => add_131
# add_80 => add_132
# add_81 => add_133
# add_82 => add_134
# add_83 => add_135
# add_84 => add_136, add_149
# add_85 => add_137
# add_86 => add_138
# add_87 => add_139
# add_88 => add_140
# add_89 => add_141
# add_90 => add_142, add_150
# add_91 => add_143
# add_92 => add_144
# add_93 => add_145
# add_94 => add_146
# float_1 => convert_element_type_104
# float_2 => convert_element_type_106
# float_3 => convert_element_type_108
# mean => mean_28
# mean_1 => mean_29
# mean_2 => mean_30
# mul => mul_240
# mul_1 => mul_241
# mul_2 => mul_242
# mul_3 => mul_243
# mul_4 => mul_244
# mul_5 => mul_245
# mul_6 => mul_246
# mul_66 => mul_216
# mul_67 => mul_217
# mul_68 => mul_218
# mul_69 => mul_219
# mul_7 => mul_247
# mul_70 => mul_220
# mul_71 => mul_221
# mul_72 => mul_222
# mul_73 => mul_223
# mul_74 => mul_224
# mul_75 => mul_225
# mul_76 => mul_226
# mul_77 => mul_227
# mul_78 => mul_228
# mul_79 => mul_229
# mul_8 => mul_248
# mul_80 => mul_230
# mul_81 => mul_231
# mul_82 => mul_232
# mul_83 => mul_233
# mul_84 => mul_234
# mul_85 => mul_235
# mul_86 => mul_236
# mul_87 => mul_237
# mul_88 => mul_238
# rsqrt => rsqrt_28
# rsqrt_1 => rsqrt_29
# rsqrt_2 => rsqrt_30
# type_as => convert_element_type_105
# type_as_1 => convert_element_type_107
# type_as_2 => convert_element_type_109
triton_red_fused__to_copy_add_mean_mul_rsqrt_28 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_28', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: 'i32', 24: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_28', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(23, 24))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_28(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (28*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (7 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (8 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (9 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (14 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (15 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (16 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (21 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (22 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (23 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (10 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (11 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (17 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (18 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (24 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (25 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp145 = tl.load(in_ptr0 + (12 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
    tmp152 = tl.load(in_ptr0 + (19 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp153 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp154 = tl.broadcast_to(tmp153, [XBLOCK, RBLOCK])
    _tmp161 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp144 = tmp143.to(tl.float32)
        tmp148 = tmp145 + tmp147
        tmp149 = tmp148 * tmp141
        tmp150 = tmp110 + tmp149
        tmp151 = tmp150.to(tl.float32)
        tmp155 = tmp152 + tmp154
        tmp156 = tmp155 * tmp141
        tmp157 = tmp122 + tmp156
        tmp158 = tmp157.to(tl.float32)
        tmp159 = tmp144 * tmp144
        tmp160 = tl.broadcast_to(tmp159, [XBLOCK, RBLOCK])
        tmp162 = _tmp161 + tmp160
        _tmp161 = tl.where(rmask, tmp162, _tmp161)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp134, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp144, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp151, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp158, rmask)
    tmp161 = tl.sum(_tmp161, 1)[:, None]
    _tmp176 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp163 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp171 = tl.load(in_ptr13 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp173 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp164 = 4096.0
        tmp165 = tmp161 / tmp164
        tmp166 = 1e-05
        tmp167 = tmp165 + tmp166
        tmp168 = tl.math.rsqrt(tmp167)
        tmp169 = tmp163 * tmp168
        tmp170 = tmp169.to(tl.float32)
        tmp172 = tmp170 * tmp171
        tmp174 = tmp173 * tmp173
        tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
        tmp177 = _tmp176 + tmp175
        _tmp176 = tl.where(rmask, tmp177, _tmp176)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp172, rmask)
    tmp176 = tl.sum(_tmp176, 1)[:, None]
    _tmp191 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp178 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp186 = tl.load(in_ptr14 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp188 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp179 = 4096.0
        tmp180 = tmp176 / tmp179
        tmp181 = 1e-05
        tmp182 = tmp180 + tmp181
        tmp183 = tl.math.rsqrt(tmp182)
        tmp184 = tmp178 * tmp183
        tmp185 = tmp184.to(tl.float32)
        tmp187 = tmp185 * tmp186
        tmp189 = tmp188 * tmp188
        tmp190 = tl.broadcast_to(tmp189, [XBLOCK, RBLOCK])
        tmp192 = _tmp191 + tmp190
        _tmp191 = tl.where(rmask, tmp192, _tmp191)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp187, rmask)
    tmp191 = tl.sum(_tmp191, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp193 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp201 = tl.load(in_ptr15 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp194 = 4096.0
        tmp195 = tmp191 / tmp194
        tmp196 = 1e-05
        tmp197 = tmp195 + tmp196
        tmp198 = tl.math.rsqrt(tmp197)
        tmp199 = tmp193 * tmp198
        tmp200 = tmp199.to(tl.float32)
        tmp202 = tmp200 * tmp201
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp202, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/zg/czg33ricloj5rntv6i7cmb67rsu5z34yb5m2j4yneeekmcf2mtq7.py
# Source Nodes: [add_50, add_95, add_96, add_97, float_6, mean_3, mul_18, mul_19, mul_20, mul_89, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_50 => add_89
# add_95 => add_147
# add_96 => add_153
# add_97 => add_154
# float_6 => convert_element_type_116
# mean_3 => mean_31
# mul_18 => mul_258
# mul_19 => mul_259
# mul_20 => mul_260
# mul_89 => mul_239
# rsqrt_3 => rsqrt_31
# type_as_5 => convert_element_type_117
triton_red_fused__to_copy_add_mean_mul_rsqrt_29 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_29', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_29', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_29(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (26 + (28*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ni/cni3ie3s6dtwjuhay4lrximiixnp2uj2qitqricpcbdgmfccm2hc.py
# Source Nodes: [l__mod___dynamic_dense_6_act, l__mod___dynamic_dense_6_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_6_act => add_157, convert_element_type_120, convert_element_type_121, erf_6, mul_264, mul_265, mul_266
# l__mod___dynamic_dense_6_w2 => view_242
triton_poi_fused_gelu_view_30 = async_compile.triton('triton_poi_fused_gelu_view_30', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_30', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_30(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 262144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/of/cof6aw6ohgzynmddnktibvcslpjzvqihhkefrja6hqz76rdrs4f2.py
# Source Nodes: [add, add_100, add_101, add_102, add_103, add_104, add_105, add_106, add_107, add_108, add_109, add_110, add_111, add_112, add_113, add_114, add_115, add_116, add_117, add_118, add_119, add_120, add_121, add_122, add_123, add_124, add_125, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, add_99, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_100, mul_101, mul_102, mul_103, mul_104, mul_105, mul_106, mul_107, mul_108, mul_109, mul_110, mul_111, mul_112, mul_113, mul_114, mul_115, mul_116, mul_117, mul_118, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_91, mul_92, mul_93, mul_94, mul_95, mul_96, mul_97, mul_98, mul_99, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_187
# add_100 => add_161
# add_101 => add_162
# add_102 => add_163
# add_103 => add_164
# add_104 => add_165
# add_105 => add_166
# add_106 => add_167
# add_107 => add_168
# add_108 => add_169
# add_109 => add_170
# add_110 => add_171
# add_111 => add_172
# add_112 => add_173, add_188
# add_113 => add_174
# add_114 => add_175
# add_115 => add_176
# add_116 => add_177
# add_117 => add_178
# add_118 => add_179
# add_119 => add_180, add_189
# add_120 => add_181
# add_121 => add_182
# add_122 => add_183
# add_123 => add_184
# add_124 => add_185
# add_125 => add_186
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_159
# add_99 => add_160
# float_1 => convert_element_type_122
# float_2 => convert_element_type_124
# float_3 => convert_element_type_126
# mean => mean_33
# mean_1 => mean_34
# mean_2 => mean_35
# mul => mul_295
# mul_1 => mul_296
# mul_100 => mul_276
# mul_101 => mul_277
# mul_102 => mul_278
# mul_103 => mul_279
# mul_104 => mul_280
# mul_105 => mul_281
# mul_106 => mul_282
# mul_107 => mul_283
# mul_108 => mul_284
# mul_109 => mul_285
# mul_110 => mul_286
# mul_111 => mul_287
# mul_112 => mul_288
# mul_113 => mul_289
# mul_114 => mul_290
# mul_115 => mul_291
# mul_116 => mul_292
# mul_117 => mul_293
# mul_118 => mul_294
# mul_2 => mul_297
# mul_3 => mul_298
# mul_4 => mul_299
# mul_5 => mul_300
# mul_6 => mul_301
# mul_7 => mul_302
# mul_8 => mul_303
# mul_91 => mul_267
# mul_92 => mul_268
# mul_93 => mul_269
# mul_94 => mul_270
# mul_95 => mul_271
# mul_96 => mul_272
# mul_97 => mul_273
# mul_98 => mul_274
# mul_99 => mul_275
# rsqrt => rsqrt_33
# rsqrt_1 => rsqrt_34
# rsqrt_2 => rsqrt_35
# type_as => convert_element_type_123
# type_as_1 => convert_element_type_125
# type_as_2 => convert_element_type_127
triton_red_fused__to_copy_add_mean_mul_rsqrt_31 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_31', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: 'i32', 27: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_31', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(26, 27))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_31(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (32*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (8 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (9 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (10 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (16 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (17 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (18 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (24 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (25 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (26 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (11 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (12 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (19 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (20 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (27 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (28 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (13 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (14 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (21 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (22 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (29 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (30 + (32*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    _tmp194 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp191 = tmp178.to(tl.float32)
        tmp192 = tmp191 * tmp191
        tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
        tmp195 = _tmp194 + tmp193
        _tmp194 = tl.where(rmask, tmp195, _tmp194)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp154, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp166, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp178, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp190, rmask)
    tmp194 = tl.sum(_tmp194, 1)[:, None]
    _tmp211 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp196 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr16 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp207 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp197 = tmp196.to(tl.float32)
        tmp198 = 4096.0
        tmp199 = tmp194 / tmp198
        tmp200 = 1e-05
        tmp201 = tmp199 + tmp200
        tmp202 = tl.math.rsqrt(tmp201)
        tmp203 = tmp197 * tmp202
        tmp204 = tmp203.to(tl.float32)
        tmp206 = tmp204 * tmp205
        tmp208 = tmp207.to(tl.float32)
        tmp209 = tmp208 * tmp208
        tmp210 = tl.broadcast_to(tmp209, [XBLOCK, RBLOCK])
        tmp212 = _tmp211 + tmp210
        _tmp211 = tl.where(rmask, tmp212, _tmp211)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp206, rmask)
    tmp211 = tl.sum(_tmp211, 1)[:, None]
    _tmp228 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp213 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp222 = tl.load(in_ptr17 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp224 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp214 = tmp213.to(tl.float32)
        tmp215 = 4096.0
        tmp216 = tmp211 / tmp215
        tmp217 = 1e-05
        tmp218 = tmp216 + tmp217
        tmp219 = tl.math.rsqrt(tmp218)
        tmp220 = tmp214 * tmp219
        tmp221 = tmp220.to(tl.float32)
        tmp223 = tmp221 * tmp222
        tmp225 = tmp224.to(tl.float32)
        tmp226 = tmp225 * tmp225
        tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
        tmp229 = _tmp228 + tmp227
        _tmp228 = tl.where(rmask, tmp229, _tmp228)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp223, rmask)
    tmp228 = tl.sum(_tmp228, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp230 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr18 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp231 = tmp230.to(tl.float32)
        tmp232 = 4096.0
        tmp233 = tmp228 / tmp232
        tmp234 = 1e-05
        tmp235 = tmp233 + tmp234
        tmp236 = tl.math.rsqrt(tmp235)
        tmp237 = tmp231 * tmp236
        tmp238 = tmp237.to(tl.float32)
        tmp240 = tmp238 * tmp239
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp240, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/y3/cy3ux35g6se5kedwyivtk3uksnf2vyobv4rqbpwbripqcntvflez.py
# Source Nodes: [l__mod___dynamic_dense_7_act, l__mod___dynamic_dense_7_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_7_act => add_196, convert_element_type_138, convert_element_type_139, erf_7, mul_319, mul_320, mul_321
# l__mod___dynamic_dense_7_w2 => view_277
triton_poi_fused_gelu_view_32 = async_compile.triton('triton_poi_fused_gelu_view_32', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_32', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_32(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 294912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/q7/cq7icysrw7pxmypkp7pp6azmgvbislt3hal3caqxuserqxhuimk5.py
# Source Nodes: [add, add_128, add_129, add_130, add_131, add_132, add_133, add_134, add_135, add_136, add_137, add_138, add_139, add_140, add_141, add_142, add_143, add_144, add_145, add_146, add_147, add_148, add_149, add_150, add_151, add_152, add_153, add_154, add_155, add_156, add_157, add_158, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_120, mul_121, mul_122, mul_123, mul_124, mul_125, mul_126, mul_127, mul_128, mul_129, mul_130, mul_131, mul_132, mul_133, mul_134, mul_135, mul_136, mul_137, mul_138, mul_139, mul_140, mul_141, mul_142, mul_143, mul_144, mul_145, mul_146, mul_147, mul_148, mul_149, mul_150, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_230
# add_128 => add_198
# add_129 => add_199
# add_130 => add_200
# add_131 => add_201
# add_132 => add_202
# add_133 => add_203
# add_134 => add_204
# add_135 => add_205
# add_136 => add_206
# add_137 => add_207
# add_138 => add_208
# add_139 => add_209
# add_140 => add_210
# add_141 => add_211
# add_142 => add_212
# add_143 => add_213
# add_144 => add_214, add_231
# add_145 => add_215
# add_146 => add_216
# add_147 => add_217
# add_148 => add_218
# add_149 => add_219
# add_150 => add_220
# add_151 => add_221
# add_152 => add_222, add_232
# add_153 => add_223
# add_154 => add_224
# add_155 => add_225
# add_156 => add_226
# add_157 => add_227
# add_158 => add_228
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_140
# float_2 => convert_element_type_142
# float_3 => convert_element_type_144
# mean => mean_38
# mean_1 => mean_39
# mean_2 => mean_40
# mul => mul_354
# mul_1 => mul_355
# mul_120 => mul_322
# mul_121 => mul_323
# mul_122 => mul_324
# mul_123 => mul_325
# mul_124 => mul_326
# mul_125 => mul_327
# mul_126 => mul_328
# mul_127 => mul_329
# mul_128 => mul_330
# mul_129 => mul_331
# mul_130 => mul_332
# mul_131 => mul_333
# mul_132 => mul_334
# mul_133 => mul_335
# mul_134 => mul_336
# mul_135 => mul_337
# mul_136 => mul_338
# mul_137 => mul_339
# mul_138 => mul_340
# mul_139 => mul_341
# mul_140 => mul_342
# mul_141 => mul_343
# mul_142 => mul_344
# mul_143 => mul_345
# mul_144 => mul_346
# mul_145 => mul_347
# mul_146 => mul_348
# mul_147 => mul_349
# mul_148 => mul_350
# mul_149 => mul_351
# mul_150 => mul_352
# mul_2 => mul_356
# mul_3 => mul_357
# mul_4 => mul_358
# mul_5 => mul_359
# mul_6 => mul_360
# mul_7 => mul_361
# mul_8 => mul_362
# rsqrt => rsqrt_38
# rsqrt_1 => rsqrt_39
# rsqrt_2 => rsqrt_40
# type_as => convert_element_type_141
# type_as_1 => convert_element_type_143
# type_as_2 => convert_element_type_145
triton_red_fused__to_copy_add_mean_mul_rsqrt_33 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_33', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: 'i32', 29: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_33', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(28, 29))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_33(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (36*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (9 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (10 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (11 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (18 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (19 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (20 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (27 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (28 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (29 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (12 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (13 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (21 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (22 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (30 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (31 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (14 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (15 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (23 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (24 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (32 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (33 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp201 = tl.load(in_ptr0 + (16 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp202 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp203 = tl.broadcast_to(tmp202, [XBLOCK, RBLOCK])
    tmp208 = tl.load(in_ptr0 + (25 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp209 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp210 = tl.broadcast_to(tmp209, [XBLOCK, RBLOCK])
    _tmp217 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp200 = tmp199.to(tl.float32)
        tmp204 = tmp201 + tmp203
        tmp205 = tmp204 * tmp197
        tmp206 = tmp166 + tmp205
        tmp207 = tmp206.to(tl.float32)
        tmp211 = tmp208 + tmp210
        tmp212 = tmp211 * tmp197
        tmp213 = tmp178 + tmp212
        tmp214 = tmp213.to(tl.float32)
        tmp215 = tmp200 * tmp200
        tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
        tmp218 = _tmp217 + tmp216
        _tmp217 = tl.where(rmask, tmp218, _tmp217)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp190, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp200, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp207, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp214, rmask)
    tmp217 = tl.sum(_tmp217, 1)[:, None]
    _tmp232 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp219 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp227 = tl.load(in_ptr18 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp229 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp220 = 4096.0
        tmp221 = tmp217 / tmp220
        tmp222 = 1e-05
        tmp223 = tmp221 + tmp222
        tmp224 = tl.math.rsqrt(tmp223)
        tmp225 = tmp219 * tmp224
        tmp226 = tmp225.to(tl.float32)
        tmp228 = tmp226 * tmp227
        tmp230 = tmp229 * tmp229
        tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
        tmp233 = _tmp232 + tmp231
        _tmp232 = tl.where(rmask, tmp233, _tmp232)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp228, rmask)
    tmp232 = tl.sum(_tmp232, 1)[:, None]
    _tmp247 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp234 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp242 = tl.load(in_ptr19 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp244 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp235 = 4096.0
        tmp236 = tmp232 / tmp235
        tmp237 = 1e-05
        tmp238 = tmp236 + tmp237
        tmp239 = tl.math.rsqrt(tmp238)
        tmp240 = tmp234 * tmp239
        tmp241 = tmp240.to(tl.float32)
        tmp243 = tmp241 * tmp242
        tmp245 = tmp244 * tmp244
        tmp246 = tl.broadcast_to(tmp245, [XBLOCK, RBLOCK])
        tmp248 = _tmp247 + tmp246
        _tmp247 = tl.where(rmask, tmp248, _tmp247)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp243, rmask)
    tmp247 = tl.sum(_tmp247, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp249 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp257 = tl.load(in_ptr20 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp250 = 4096.0
        tmp251 = tmp247 / tmp250
        tmp252 = 1e-05
        tmp253 = tmp251 + tmp252
        tmp254 = tl.math.rsqrt(tmp253)
        tmp255 = tmp249 * tmp254
        tmp256 = tmp255.to(tl.float32)
        tmp258 = tmp256 * tmp257
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp258, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/xj/cxjeb2i7h2nwy3o22ktplruyw6l6frok5r3uzng2rfrdhybyiocg.py
# Source Nodes: [add_159, add_160, add_161, add_98, float_6, mean_3, mul_151, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_159 => add_229
# add_160 => add_235
# add_161 => add_236
# add_98 => add_155
# float_6 => convert_element_type_152
# mean_3 => mean_41
# mul_151 => mul_353
# mul_18 => mul_372
# mul_19 => mul_373
# mul_20 => mul_374
# rsqrt_3 => rsqrt_41
# type_as_5 => convert_element_type_153
triton_red_fused__to_copy_add_mean_mul_rsqrt_34 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_34', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_34', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_34(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (34 + (36*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/xs/cxs3qra4krrklpfhvc76vdvhv3s3s4n5ycicjquflkz2z2qqhu5h.py
# Source Nodes: [l__mod___dynamic_dense_8_act, l__mod___dynamic_dense_8_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_8_act => add_239, convert_element_type_156, convert_element_type_157, erf_8, mul_378, mul_379, mul_380
# l__mod___dynamic_dense_8_w2 => view_312
triton_poi_fused_gelu_view_35 = async_compile.triton('triton_poi_fused_gelu_view_35', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_35', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_35(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/or/corcdd4fjv5mojlsnoorzv26szxcab3jihthe7zv2sn2r7b7nb4r.py
# Source Nodes: [add, add_126, add_128, add_162, add_163, add_164, add_165, add_166, add_167, add_168, add_169, add_170, add_171, add_172, add_173, add_174, add_175, add_176, add_177, add_178, add_179, add_180, add_181, add_182, add_183, add_184, add_185, add_186, add_187, add_188, add_189, add_190, add_191, add_192, add_193, add_194, add_195, add_196, add_197, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_153, mul_154, mul_155, mul_156, mul_157, mul_158, mul_159, mul_160, mul_161, mul_162, mul_163, mul_164, mul_165, mul_166, mul_167, mul_168, mul_169, mul_170, mul_171, mul_172, mul_173, mul_174, mul_175, mul_176, mul_177, mul_178, mul_179, mul_180, mul_181, mul_182, mul_183, mul_184, mul_185, mul_186, mul_187, mul_188, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_277
# add_126 => add_192
# add_128 => add_194
# add_162 => add_241
# add_163 => add_242
# add_164 => add_243
# add_165 => add_244
# add_166 => add_245
# add_167 => add_246
# add_168 => add_247
# add_169 => add_248
# add_170 => add_249
# add_171 => add_250
# add_172 => add_251
# add_173 => add_252
# add_174 => add_253
# add_175 => add_254
# add_176 => add_255
# add_177 => add_256
# add_178 => add_257
# add_179 => add_258
# add_180 => add_259, add_278
# add_181 => add_260
# add_182 => add_261
# add_183 => add_262
# add_184 => add_263
# add_185 => add_264
# add_186 => add_265
# add_187 => add_266
# add_188 => add_267
# add_189 => add_268, add_279
# add_190 => add_269
# add_191 => add_270
# add_192 => add_271
# add_193 => add_272
# add_194 => add_273
# add_195 => add_274
# add_196 => add_275
# add_197 => add_276
# add_20 => add_39
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_158
# float_2 => convert_element_type_160
# float_3 => convert_element_type_162
# mean => mean_43
# mean_1 => mean_44
# mean_2 => mean_45
# mul => mul_417
# mul_1 => mul_418
# mul_153 => mul_381
# mul_154 => mul_382
# mul_155 => mul_383
# mul_156 => mul_384
# mul_157 => mul_385
# mul_158 => mul_386
# mul_159 => mul_387
# mul_160 => mul_388
# mul_161 => mul_389
# mul_162 => mul_390
# mul_163 => mul_391
# mul_164 => mul_392
# mul_165 => mul_393
# mul_166 => mul_394
# mul_167 => mul_395
# mul_168 => mul_396
# mul_169 => mul_397
# mul_170 => mul_398
# mul_171 => mul_399
# mul_172 => mul_400
# mul_173 => mul_401
# mul_174 => mul_402
# mul_175 => mul_403
# mul_176 => mul_404
# mul_177 => mul_405
# mul_178 => mul_406
# mul_179 => mul_407
# mul_180 => mul_408
# mul_181 => mul_409
# mul_182 => mul_410
# mul_183 => mul_411
# mul_184 => mul_412
# mul_185 => mul_413
# mul_186 => mul_414
# mul_187 => mul_415
# mul_188 => mul_416
# mul_2 => mul_419
# mul_3 => mul_420
# mul_4 => mul_421
# mul_5 => mul_422
# mul_6 => mul_423
# mul_7 => mul_424
# mul_8 => mul_425
# rsqrt => rsqrt_43
# rsqrt_1 => rsqrt_44
# rsqrt_2 => rsqrt_45
# type_as => convert_element_type_159
# type_as_1 => convert_element_type_161
# type_as_2 => convert_element_type_163
triton_red_fused__to_copy_add_mean_mul_rsqrt_36 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_36', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: 'i32', 32: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_36', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(31, 32))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_36(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (40*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (10 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (11 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (12 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (20 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (21 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (22 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (30 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (31 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (32 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (13 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (14 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (23 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (24 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (33 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (34 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (15 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (16 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (25 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (26 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (35 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (36 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (17 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (18 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (27 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (28 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (37 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (38 + (40*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    _tmp250 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp247 = tmp234.to(tl.float32)
        tmp248 = tmp247 * tmp247
        tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
        tmp251 = _tmp250 + tmp249
        _tmp250 = tl.where(rmask, tmp251, _tmp250)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp210, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp222, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp234, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp246, rmask)
    tmp250 = tl.sum(_tmp250, 1)[:, None]
    _tmp267 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp252 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr21 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp263 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp253 = tmp252.to(tl.float32)
        tmp254 = 4096.0
        tmp255 = tmp250 / tmp254
        tmp256 = 1e-05
        tmp257 = tmp255 + tmp256
        tmp258 = tl.math.rsqrt(tmp257)
        tmp259 = tmp253 * tmp258
        tmp260 = tmp259.to(tl.float32)
        tmp262 = tmp260 * tmp261
        tmp264 = tmp263.to(tl.float32)
        tmp265 = tmp264 * tmp264
        tmp266 = tl.broadcast_to(tmp265, [XBLOCK, RBLOCK])
        tmp268 = _tmp267 + tmp266
        _tmp267 = tl.where(rmask, tmp268, _tmp267)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp262, rmask)
    tmp267 = tl.sum(_tmp267, 1)[:, None]
    _tmp284 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp269 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp278 = tl.load(in_ptr22 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp280 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp270 = tmp269.to(tl.float32)
        tmp271 = 4096.0
        tmp272 = tmp267 / tmp271
        tmp273 = 1e-05
        tmp274 = tmp272 + tmp273
        tmp275 = tl.math.rsqrt(tmp274)
        tmp276 = tmp270 * tmp275
        tmp277 = tmp276.to(tl.float32)
        tmp279 = tmp277 * tmp278
        tmp281 = tmp280.to(tl.float32)
        tmp282 = tmp281 * tmp281
        tmp283 = tl.broadcast_to(tmp282, [XBLOCK, RBLOCK])
        tmp285 = _tmp284 + tmp283
        _tmp284 = tl.where(rmask, tmp285, _tmp284)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp279, rmask)
    tmp284 = tl.sum(_tmp284, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp286 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp295 = tl.load(in_ptr23 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp287 = tmp286.to(tl.float32)
        tmp288 = 4096.0
        tmp289 = tmp284 / tmp288
        tmp290 = 1e-05
        tmp291 = tmp289 + tmp290
        tmp292 = tl.math.rsqrt(tmp291)
        tmp293 = tmp287 * tmp292
        tmp294 = tmp293.to(tl.float32)
        tmp296 = tmp294 * tmp295
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp296, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/tt/cttnj5qt3m7hbnrrnd2vb73kxbff7tzjkjtve3ih4wagrhxxyjst.py
# Source Nodes: [l__mod___dynamic_dense_9_act, l__mod___dynamic_dense_9_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_9_act => add_286, convert_element_type_174, convert_element_type_175, erf_9, mul_441, mul_442, mul_443
# l__mod___dynamic_dense_9_w2 => view_347
triton_poi_fused_gelu_view_37 = async_compile.triton('triton_poi_fused_gelu_view_37', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_37', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_37(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 360448
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xd/cxdhybmgg7knj5jj7vjaurd2ltkjfuiklubgd2ltzcqi22ovvkdv.py
# Source Nodes: [add, add_126, add_128, add_162, add_20, add_200, add_201, add_202, add_203, add_204, add_205, add_206, add_207, add_208, add_209, add_210, add_211, add_212, add_213, add_214, add_215, add_216, add_217, add_218, add_219, add_220, add_221, add_222, add_223, add_224, add_225, add_226, add_227, add_228, add_229, add_230, add_231, add_232, add_233, add_234, add_235, add_236, add_237, add_238, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_190, mul_191, mul_192, mul_193, mul_194, mul_195, mul_196, mul_197, mul_198, mul_199, mul_2, mul_200, mul_201, mul_202, mul_203, mul_204, mul_205, mul_206, mul_207, mul_208, mul_209, mul_210, mul_211, mul_212, mul_213, mul_214, mul_215, mul_216, mul_217, mul_218, mul_219, mul_220, mul_221, mul_222, mul_223, mul_224, mul_225, mul_226, mul_227, mul_228, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_328
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_20 => add_39
# add_200 => add_288
# add_201 => add_289
# add_202 => add_290
# add_203 => add_291
# add_204 => add_292
# add_205 => add_293
# add_206 => add_294
# add_207 => add_295
# add_208 => add_296
# add_209 => add_297
# add_210 => add_298
# add_211 => add_299
# add_212 => add_300
# add_213 => add_301
# add_214 => add_302
# add_215 => add_303
# add_216 => add_304
# add_217 => add_305
# add_218 => add_306
# add_219 => add_307
# add_220 => add_308, add_329
# add_221 => add_309
# add_222 => add_310
# add_223 => add_311
# add_224 => add_312
# add_225 => add_313
# add_226 => add_314
# add_227 => add_315
# add_228 => add_316
# add_229 => add_317
# add_230 => add_318, add_330
# add_231 => add_319
# add_232 => add_320
# add_233 => add_321
# add_234 => add_322
# add_235 => add_323
# add_236 => add_324
# add_237 => add_325
# add_238 => add_326
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_176
# float_2 => convert_element_type_178
# float_3 => convert_element_type_180
# mean => mean_48
# mean_1 => mean_49
# mean_2 => mean_50
# mul => mul_484
# mul_1 => mul_485
# mul_190 => mul_444
# mul_191 => mul_445
# mul_192 => mul_446
# mul_193 => mul_447
# mul_194 => mul_448
# mul_195 => mul_449
# mul_196 => mul_450
# mul_197 => mul_451
# mul_198 => mul_452
# mul_199 => mul_453
# mul_2 => mul_486
# mul_200 => mul_454
# mul_201 => mul_455
# mul_202 => mul_456
# mul_203 => mul_457
# mul_204 => mul_458
# mul_205 => mul_459
# mul_206 => mul_460
# mul_207 => mul_461
# mul_208 => mul_462
# mul_209 => mul_463
# mul_210 => mul_464
# mul_211 => mul_465
# mul_212 => mul_466
# mul_213 => mul_467
# mul_214 => mul_468
# mul_215 => mul_469
# mul_216 => mul_470
# mul_217 => mul_471
# mul_218 => mul_472
# mul_219 => mul_473
# mul_220 => mul_474
# mul_221 => mul_475
# mul_222 => mul_476
# mul_223 => mul_477
# mul_224 => mul_478
# mul_225 => mul_479
# mul_226 => mul_480
# mul_227 => mul_481
# mul_228 => mul_482
# mul_3 => mul_487
# mul_4 => mul_488
# mul_5 => mul_489
# mul_6 => mul_490
# mul_7 => mul_491
# mul_8 => mul_492
# rsqrt => rsqrt_48
# rsqrt_1 => rsqrt_49
# rsqrt_2 => rsqrt_50
# type_as => convert_element_type_177
# type_as_1 => convert_element_type_179
# type_as_2 => convert_element_type_181
triton_red_fused__to_copy_add_mean_mul_rsqrt_38 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_38', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: 'i32', 34: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_38', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(33, 34))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_38(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (44*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (11 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (12 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (13 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (22 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (23 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (24 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (33 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (34 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (35 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (14 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (15 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (25 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (26 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (36 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (37 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (16 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (17 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (27 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (28 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (38 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (39 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (18 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (19 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (29 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (30 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (40 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (41 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp257 = tl.load(in_ptr0 + (20 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp258 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp259 = tl.broadcast_to(tmp258, [XBLOCK, RBLOCK])
    tmp264 = tl.load(in_ptr0 + (31 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp265 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp266 = tl.broadcast_to(tmp265, [XBLOCK, RBLOCK])
    _tmp273 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp256 = tmp255.to(tl.float32)
        tmp260 = tmp257 + tmp259
        tmp261 = tmp260 * tmp253
        tmp262 = tmp222 + tmp261
        tmp263 = tmp262.to(tl.float32)
        tmp267 = tmp264 + tmp266
        tmp268 = tmp267 * tmp253
        tmp269 = tmp234 + tmp268
        tmp270 = tmp269.to(tl.float32)
        tmp271 = tmp256 * tmp256
        tmp272 = tl.broadcast_to(tmp271, [XBLOCK, RBLOCK])
        tmp274 = _tmp273 + tmp272
        _tmp273 = tl.where(rmask, tmp274, _tmp273)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp246, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp256, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp263, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp270, rmask)
    tmp273 = tl.sum(_tmp273, 1)[:, None]
    _tmp288 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp275 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp283 = tl.load(in_ptr23 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp285 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp276 = 4096.0
        tmp277 = tmp273 / tmp276
        tmp278 = 1e-05
        tmp279 = tmp277 + tmp278
        tmp280 = tl.math.rsqrt(tmp279)
        tmp281 = tmp275 * tmp280
        tmp282 = tmp281.to(tl.float32)
        tmp284 = tmp282 * tmp283
        tmp286 = tmp285 * tmp285
        tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
        tmp289 = _tmp288 + tmp287
        _tmp288 = tl.where(rmask, tmp289, _tmp288)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp284, rmask)
    tmp288 = tl.sum(_tmp288, 1)[:, None]
    _tmp303 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp290 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp298 = tl.load(in_ptr24 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp300 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp291 = 4096.0
        tmp292 = tmp288 / tmp291
        tmp293 = 1e-05
        tmp294 = tmp292 + tmp293
        tmp295 = tl.math.rsqrt(tmp294)
        tmp296 = tmp290 * tmp295
        tmp297 = tmp296.to(tl.float32)
        tmp299 = tmp297 * tmp298
        tmp301 = tmp300 * tmp300
        tmp302 = tl.broadcast_to(tmp301, [XBLOCK, RBLOCK])
        tmp304 = _tmp303 + tmp302
        _tmp303 = tl.where(rmask, tmp304, _tmp303)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp299, rmask)
    tmp303 = tl.sum(_tmp303, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp305 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp313 = tl.load(in_ptr25 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp306 = 4096.0
        tmp307 = tmp303 / tmp306
        tmp308 = 1e-05
        tmp309 = tmp307 + tmp308
        tmp310 = tl.math.rsqrt(tmp309)
        tmp311 = tmp305 * tmp310
        tmp312 = tmp311.to(tl.float32)
        tmp314 = tmp312 * tmp313
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp314, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/t4/ct4f2yfoadpjiim774j4mkwrmb6424lvjmozrvbu76bixv2bkuri.py
# Source Nodes: [add_162, add_239, add_240, add_241, float_6, mean_3, mul_18, mul_19, mul_20, mul_229, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_162 => add_237
# add_239 => add_327
# add_240 => add_333
# add_241 => add_334
# float_6 => convert_element_type_188
# mean_3 => mean_51
# mul_18 => mul_502
# mul_19 => mul_503
# mul_20 => mul_504
# mul_229 => mul_483
# rsqrt_3 => rsqrt_51
# type_as_5 => convert_element_type_189
triton_red_fused__to_copy_add_mean_mul_rsqrt_39 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_39', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_39', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_39(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (42 + (44*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/la/claklbeknj2q5c5hj4jfmfnl5lko4jy5a6xetsrqovj7ls2hi22c.py
# Source Nodes: [l__mod___dynamic_dense_10_act, l__mod___dynamic_dense_10_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_10_act => add_337, convert_element_type_192, convert_element_type_193, erf_10, mul_508, mul_509, mul_510
# l__mod___dynamic_dense_10_w2 => view_382
triton_poi_fused_gelu_view_40 = async_compile.triton('triton_poi_fused_gelu_view_40', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_40', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_40(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qf/cqfgqezd4hrnnzwq7xsd7ggpbxondpdhg4vo4fikmd4wycdfuu7b.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_243, add_244, add_245, add_246, add_247, add_248, add_249, add_250, add_251, add_252, add_253, add_254, add_255, add_256, add_257, add_258, add_259, add_260, add_261, add_262, add_263, add_264, add_265, add_266, add_267, add_268, add_269, add_270, add_271, add_272, add_273, add_274, add_275, add_276, add_277, add_278, add_279, add_280, add_281, add_282, add_283, add_284, add_285, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_231, mul_232, mul_233, mul_234, mul_235, mul_236, mul_237, mul_238, mul_239, mul_240, mul_241, mul_242, mul_243, mul_244, mul_245, mul_246, mul_247, mul_248, mul_249, mul_250, mul_251, mul_252, mul_253, mul_254, mul_255, mul_256, mul_257, mul_258, mul_259, mul_260, mul_261, mul_262, mul_263, mul_264, mul_265, mul_266, mul_267, mul_268, mul_269, mul_270, mul_271, mul_272, mul_273, mul_274, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_383
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_339
# add_243 => add_340
# add_244 => add_341
# add_245 => add_342
# add_246 => add_343
# add_247 => add_344
# add_248 => add_345
# add_249 => add_346
# add_250 => add_347
# add_251 => add_348
# add_252 => add_349
# add_253 => add_350
# add_254 => add_351
# add_255 => add_352
# add_256 => add_353
# add_257 => add_354
# add_258 => add_355
# add_259 => add_356
# add_260 => add_357
# add_261 => add_358
# add_262 => add_359
# add_263 => add_360
# add_264 => add_361, add_384
# add_265 => add_362
# add_266 => add_363
# add_267 => add_364
# add_268 => add_365
# add_269 => add_366
# add_270 => add_367
# add_271 => add_368
# add_272 => add_369
# add_273 => add_370
# add_274 => add_371
# add_275 => add_372, add_385
# add_276 => add_373
# add_277 => add_374
# add_278 => add_375
# add_279 => add_376
# add_280 => add_377
# add_281 => add_378
# add_282 => add_379
# add_283 => add_380
# add_284 => add_381
# add_285 => add_382
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_194
# float_2 => convert_element_type_196
# float_3 => convert_element_type_198
# mean => mean_53
# mean_1 => mean_54
# mean_2 => mean_55
# mul => mul_555
# mul_1 => mul_556
# mul_2 => mul_557
# mul_231 => mul_511
# mul_232 => mul_512
# mul_233 => mul_513
# mul_234 => mul_514
# mul_235 => mul_515
# mul_236 => mul_516
# mul_237 => mul_517
# mul_238 => mul_518
# mul_239 => mul_519
# mul_240 => mul_520
# mul_241 => mul_521
# mul_242 => mul_522
# mul_243 => mul_523
# mul_244 => mul_524
# mul_245 => mul_525
# mul_246 => mul_526
# mul_247 => mul_527
# mul_248 => mul_528
# mul_249 => mul_529
# mul_250 => mul_530
# mul_251 => mul_531
# mul_252 => mul_532
# mul_253 => mul_533
# mul_254 => mul_534
# mul_255 => mul_535
# mul_256 => mul_536
# mul_257 => mul_537
# mul_258 => mul_538
# mul_259 => mul_539
# mul_260 => mul_540
# mul_261 => mul_541
# mul_262 => mul_542
# mul_263 => mul_543
# mul_264 => mul_544
# mul_265 => mul_545
# mul_266 => mul_546
# mul_267 => mul_547
# mul_268 => mul_548
# mul_269 => mul_549
# mul_270 => mul_550
# mul_271 => mul_551
# mul_272 => mul_552
# mul_273 => mul_553
# mul_274 => mul_554
# mul_3 => mul_558
# mul_4 => mul_559
# mul_5 => mul_560
# mul_6 => mul_561
# mul_7 => mul_562
# mul_8 => mul_563
# rsqrt => rsqrt_53
# rsqrt_1 => rsqrt_54
# rsqrt_2 => rsqrt_55
# type_as => convert_element_type_195
# type_as_1 => convert_element_type_197
# type_as_2 => convert_element_type_199
triton_red_fused__to_copy_add_mean_mul_rsqrt_41 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_41', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: 'i32', 37: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_41', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(36, 37))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_41(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (48*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (12 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (13 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (14 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (24 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (25 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (26 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (36 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (37 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (38 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (15 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (16 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (27 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (28 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (39 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (40 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (17 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (18 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (29 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (30 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (41 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (42 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (19 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (20 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (31 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (32 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (43 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (44 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (21 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (22 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (33 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (34 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (45 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (46 + (48*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    _tmp306 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp303 = tmp290.to(tl.float32)
        tmp304 = tmp303 * tmp303
        tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
        tmp307 = _tmp306 + tmp305
        _tmp306 = tl.where(rmask, tmp307, _tmp306)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp266, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp278, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp290, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp302, rmask)
    tmp306 = tl.sum(_tmp306, 1)[:, None]
    _tmp323 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp308 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr26 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp319 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp309 = tmp308.to(tl.float32)
        tmp310 = 4096.0
        tmp311 = tmp306 / tmp310
        tmp312 = 1e-05
        tmp313 = tmp311 + tmp312
        tmp314 = tl.math.rsqrt(tmp313)
        tmp315 = tmp309 * tmp314
        tmp316 = tmp315.to(tl.float32)
        tmp318 = tmp316 * tmp317
        tmp320 = tmp319.to(tl.float32)
        tmp321 = tmp320 * tmp320
        tmp322 = tl.broadcast_to(tmp321, [XBLOCK, RBLOCK])
        tmp324 = _tmp323 + tmp322
        _tmp323 = tl.where(rmask, tmp324, _tmp323)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp318, rmask)
    tmp323 = tl.sum(_tmp323, 1)[:, None]
    _tmp340 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp325 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp334 = tl.load(in_ptr27 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp336 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp326 = tmp325.to(tl.float32)
        tmp327 = 4096.0
        tmp328 = tmp323 / tmp327
        tmp329 = 1e-05
        tmp330 = tmp328 + tmp329
        tmp331 = tl.math.rsqrt(tmp330)
        tmp332 = tmp326 * tmp331
        tmp333 = tmp332.to(tl.float32)
        tmp335 = tmp333 * tmp334
        tmp337 = tmp336.to(tl.float32)
        tmp338 = tmp337 * tmp337
        tmp339 = tl.broadcast_to(tmp338, [XBLOCK, RBLOCK])
        tmp341 = _tmp340 + tmp339
        _tmp340 = tl.where(rmask, tmp341, _tmp340)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp335, rmask)
    tmp340 = tl.sum(_tmp340, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp342 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp351 = tl.load(in_ptr28 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp343 = tmp342.to(tl.float32)
        tmp344 = 4096.0
        tmp345 = tmp340 / tmp344
        tmp346 = 1e-05
        tmp347 = tmp345 + tmp346
        tmp348 = tl.math.rsqrt(tmp347)
        tmp349 = tmp343 * tmp348
        tmp350 = tmp349.to(tl.float32)
        tmp352 = tmp350 * tmp351
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp352, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/jg/cjg42xqz4dwflji4aogkmk2n3rmzuyrrs32akhhp2mvx6vf7ll5t.py
# Source Nodes: [l__mod___dynamic_dense_11_act, l__mod___dynamic_dense_11_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_11_act => add_392, convert_element_type_210, convert_element_type_211, erf_11, mul_579, mul_580, mul_581
# l__mod___dynamic_dense_11_w2 => view_417
triton_poi_fused_gelu_view_42 = async_compile.triton('triton_poi_fused_gelu_view_42', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_42', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_42(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 425984
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fc/cfcjxx66gjspckvsnlvqbflc5vearf6xyyksgjjwkjrxcanktfuk.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_289, add_290, add_291, add_292, add_293, add_294, add_295, add_296, add_297, add_298, add_299, add_3, add_300, add_301, add_302, add_303, add_304, add_305, add_306, add_307, add_308, add_309, add_31, add_310, add_311, add_312, add_313, add_314, add_315, add_316, add_317, add_318, add_319, add_320, add_321, add_322, add_323, add_324, add_325, add_326, add_327, add_328, add_329, add_33, add_330, add_331, add_332, add_333, add_334, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_276, mul_277, mul_278, mul_279, mul_280, mul_281, mul_282, mul_283, mul_284, mul_285, mul_286, mul_287, mul_288, mul_289, mul_290, mul_291, mul_292, mul_293, mul_294, mul_295, mul_296, mul_297, mul_298, mul_299, mul_3, mul_300, mul_301, mul_302, mul_303, mul_304, mul_305, mul_306, mul_307, mul_308, mul_309, mul_310, mul_311, mul_312, mul_313, mul_314, mul_315, mul_316, mul_317, mul_318, mul_319, mul_320, mul_321, mul_322, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_442
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_288 => add_394
# add_289 => add_395
# add_290 => add_396
# add_291 => add_397
# add_292 => add_398
# add_293 => add_399
# add_294 => add_400
# add_295 => add_401
# add_296 => add_402
# add_297 => add_403
# add_298 => add_404
# add_299 => add_405
# add_3 => add_3
# add_300 => add_406
# add_301 => add_407
# add_302 => add_408
# add_303 => add_409
# add_304 => add_410
# add_305 => add_411
# add_306 => add_412
# add_307 => add_413
# add_308 => add_414
# add_309 => add_415
# add_31 => add_60
# add_310 => add_416
# add_311 => add_417
# add_312 => add_418, add_443
# add_313 => add_419
# add_314 => add_420
# add_315 => add_421
# add_316 => add_422
# add_317 => add_423
# add_318 => add_424
# add_319 => add_425
# add_320 => add_426
# add_321 => add_427
# add_322 => add_428
# add_323 => add_429
# add_324 => add_430, add_444
# add_325 => add_431
# add_326 => add_432
# add_327 => add_433
# add_328 => add_434
# add_329 => add_435
# add_33 => add_62
# add_330 => add_436
# add_331 => add_437
# add_332 => add_438
# add_333 => add_439
# add_334 => add_440
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_212
# float_2 => convert_element_type_214
# float_3 => convert_element_type_216
# mean => mean_58
# mean_1 => mean_59
# mean_2 => mean_60
# mul => mul_630
# mul_1 => mul_631
# mul_2 => mul_632
# mul_276 => mul_582
# mul_277 => mul_583
# mul_278 => mul_584
# mul_279 => mul_585
# mul_280 => mul_586
# mul_281 => mul_587
# mul_282 => mul_588
# mul_283 => mul_589
# mul_284 => mul_590
# mul_285 => mul_591
# mul_286 => mul_592
# mul_287 => mul_593
# mul_288 => mul_594
# mul_289 => mul_595
# mul_290 => mul_596
# mul_291 => mul_597
# mul_292 => mul_598
# mul_293 => mul_599
# mul_294 => mul_600
# mul_295 => mul_601
# mul_296 => mul_602
# mul_297 => mul_603
# mul_298 => mul_604
# mul_299 => mul_605
# mul_3 => mul_633
# mul_300 => mul_606
# mul_301 => mul_607
# mul_302 => mul_608
# mul_303 => mul_609
# mul_304 => mul_610
# mul_305 => mul_611
# mul_306 => mul_612
# mul_307 => mul_613
# mul_308 => mul_614
# mul_309 => mul_615
# mul_310 => mul_616
# mul_311 => mul_617
# mul_312 => mul_618
# mul_313 => mul_619
# mul_314 => mul_620
# mul_315 => mul_621
# mul_316 => mul_622
# mul_317 => mul_623
# mul_318 => mul_624
# mul_319 => mul_625
# mul_320 => mul_626
# mul_321 => mul_627
# mul_322 => mul_628
# mul_4 => mul_634
# mul_5 => mul_635
# mul_6 => mul_636
# mul_7 => mul_637
# mul_8 => mul_638
# rsqrt => rsqrt_58
# rsqrt_1 => rsqrt_59
# rsqrt_2 => rsqrt_60
# type_as => convert_element_type_213
# type_as_1 => convert_element_type_215
# type_as_2 => convert_element_type_217
triton_red_fused__to_copy_add_mean_mul_rsqrt_43 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_43', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: 'i32', 39: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_43', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(38, 39))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_43(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (52*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (13 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (14 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (15 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (26 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (27 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (28 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (39 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (40 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (41 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (16 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (17 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (29 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (30 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (42 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (43 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (18 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (19 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (31 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (32 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (44 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (45 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (20 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (21 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (33 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (34 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (46 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (47 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (22 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (23 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (35 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (36 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (48 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (49 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp313 = tl.load(in_ptr0 + (24 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp314 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp315 = tl.broadcast_to(tmp314, [XBLOCK, RBLOCK])
    tmp320 = tl.load(in_ptr0 + (37 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp321 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp322 = tl.broadcast_to(tmp321, [XBLOCK, RBLOCK])
    _tmp329 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp312 = tmp311.to(tl.float32)
        tmp316 = tmp313 + tmp315
        tmp317 = tmp316 * tmp309
        tmp318 = tmp278 + tmp317
        tmp319 = tmp318.to(tl.float32)
        tmp323 = tmp320 + tmp322
        tmp324 = tmp323 * tmp309
        tmp325 = tmp290 + tmp324
        tmp326 = tmp325.to(tl.float32)
        tmp327 = tmp312 * tmp312
        tmp328 = tl.broadcast_to(tmp327, [XBLOCK, RBLOCK])
        tmp330 = _tmp329 + tmp328
        _tmp329 = tl.where(rmask, tmp330, _tmp329)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp302, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp312, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp319, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp326, rmask)
    tmp329 = tl.sum(_tmp329, 1)[:, None]
    _tmp344 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp331 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp339 = tl.load(in_ptr28 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp341 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp332 = 4096.0
        tmp333 = tmp329 / tmp332
        tmp334 = 1e-05
        tmp335 = tmp333 + tmp334
        tmp336 = tl.math.rsqrt(tmp335)
        tmp337 = tmp331 * tmp336
        tmp338 = tmp337.to(tl.float32)
        tmp340 = tmp338 * tmp339
        tmp342 = tmp341 * tmp341
        tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
        tmp345 = _tmp344 + tmp343
        _tmp344 = tl.where(rmask, tmp345, _tmp344)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp340, rmask)
    tmp344 = tl.sum(_tmp344, 1)[:, None]
    _tmp359 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp346 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp354 = tl.load(in_ptr29 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp356 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp347 = 4096.0
        tmp348 = tmp344 / tmp347
        tmp349 = 1e-05
        tmp350 = tmp348 + tmp349
        tmp351 = tl.math.rsqrt(tmp350)
        tmp352 = tmp346 * tmp351
        tmp353 = tmp352.to(tl.float32)
        tmp355 = tmp353 * tmp354
        tmp357 = tmp356 * tmp356
        tmp358 = tl.broadcast_to(tmp357, [XBLOCK, RBLOCK])
        tmp360 = _tmp359 + tmp358
        _tmp359 = tl.where(rmask, tmp360, _tmp359)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp355, rmask)
    tmp359 = tl.sum(_tmp359, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp361 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp369 = tl.load(in_ptr30 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp362 = 4096.0
        tmp363 = tmp359 / tmp362
        tmp364 = 1e-05
        tmp365 = tmp363 + tmp364
        tmp366 = tl.math.rsqrt(tmp365)
        tmp367 = tmp361 * tmp366
        tmp368 = tmp367.to(tl.float32)
        tmp370 = tmp368 * tmp369
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp370, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/7c/c7c2ex3e2gpu6dsnmxty32btnv5vsytp4uwy5o2j4smr4kc2j5mh.py
# Source Nodes: [add_242, add_335, add_336, add_337, float_6, mean_3, mul_18, mul_19, mul_20, mul_323, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_242 => add_335
# add_335 => add_441
# add_336 => add_447
# add_337 => add_448
# float_6 => convert_element_type_224
# mean_3 => mean_61
# mul_18 => mul_648
# mul_19 => mul_649
# mul_20 => mul_650
# mul_323 => mul_629
# rsqrt_3 => rsqrt_61
# type_as_5 => convert_element_type_225
triton_red_fused__to_copy_add_mean_mul_rsqrt_44 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_44', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_44', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_44(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (50 + (52*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ul/cul4e22nm4akirdueriiqvgpyf4xd5hhwddsciuerzoqtl6ughjy.py
# Source Nodes: [l__mod___dynamic_dense_12_act, l__mod___dynamic_dense_12_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_12_act => add_451, convert_element_type_228, convert_element_type_229, erf_12, mul_654, mul_655, mul_656
# l__mod___dynamic_dense_12_w2 => view_452
triton_poi_fused_gelu_view_45 = async_compile.triton('triton_poi_fused_gelu_view_45', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_45', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_45(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 458752
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xa/cxaoo4tuf2tca6257qytyljxd3sfarm5elmuexxuy4hkbvjsp7n7.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_339, add_340, add_341, add_342, add_343, add_344, add_345, add_346, add_347, add_348, add_349, add_350, add_351, add_352, add_353, add_354, add_355, add_356, add_357, add_358, add_359, add_360, add_361, add_362, add_363, add_364, add_365, add_366, add_367, add_368, add_369, add_370, add_371, add_372, add_373, add_374, add_375, add_376, add_377, add_378, add_379, add_380, add_381, add_382, add_383, add_384, add_385, add_386, add_387, add_388, add_389, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_325, mul_326, mul_327, mul_328, mul_329, mul_330, mul_331, mul_332, mul_333, mul_334, mul_335, mul_336, mul_337, mul_338, mul_339, mul_340, mul_341, mul_342, mul_343, mul_344, mul_345, mul_346, mul_347, mul_348, mul_349, mul_350, mul_351, mul_352, mul_353, mul_354, mul_355, mul_356, mul_357, mul_358, mul_359, mul_360, mul_361, mul_362, mul_363, mul_364, mul_365, mul_366, mul_367, mul_368, mul_369, mul_370, mul_371, mul_372, mul_373, mul_374, mul_375, mul_376, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_505
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_453
# add_339 => add_454
# add_340 => add_455
# add_341 => add_456
# add_342 => add_457
# add_343 => add_458
# add_344 => add_459
# add_345 => add_460
# add_346 => add_461
# add_347 => add_462
# add_348 => add_463
# add_349 => add_464
# add_350 => add_465
# add_351 => add_466
# add_352 => add_467
# add_353 => add_468
# add_354 => add_469
# add_355 => add_470
# add_356 => add_471
# add_357 => add_472
# add_358 => add_473
# add_359 => add_474
# add_360 => add_475
# add_361 => add_476
# add_362 => add_477
# add_363 => add_478
# add_364 => add_479, add_506
# add_365 => add_480
# add_366 => add_481
# add_367 => add_482
# add_368 => add_483
# add_369 => add_484
# add_370 => add_485
# add_371 => add_486
# add_372 => add_487
# add_373 => add_488
# add_374 => add_489
# add_375 => add_490
# add_376 => add_491
# add_377 => add_492, add_507
# add_378 => add_493
# add_379 => add_494
# add_380 => add_495
# add_381 => add_496
# add_382 => add_497
# add_383 => add_498
# add_384 => add_499
# add_385 => add_500
# add_386 => add_501
# add_387 => add_502
# add_388 => add_503
# add_389 => add_504
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_230
# float_2 => convert_element_type_232
# float_3 => convert_element_type_234
# mean => mean_63
# mean_1 => mean_64
# mean_2 => mean_65
# mul => mul_709
# mul_1 => mul_710
# mul_2 => mul_711
# mul_3 => mul_712
# mul_325 => mul_657
# mul_326 => mul_658
# mul_327 => mul_659
# mul_328 => mul_660
# mul_329 => mul_661
# mul_330 => mul_662
# mul_331 => mul_663
# mul_332 => mul_664
# mul_333 => mul_665
# mul_334 => mul_666
# mul_335 => mul_667
# mul_336 => mul_668
# mul_337 => mul_669
# mul_338 => mul_670
# mul_339 => mul_671
# mul_340 => mul_672
# mul_341 => mul_673
# mul_342 => mul_674
# mul_343 => mul_675
# mul_344 => mul_676
# mul_345 => mul_677
# mul_346 => mul_678
# mul_347 => mul_679
# mul_348 => mul_680
# mul_349 => mul_681
# mul_350 => mul_682
# mul_351 => mul_683
# mul_352 => mul_684
# mul_353 => mul_685
# mul_354 => mul_686
# mul_355 => mul_687
# mul_356 => mul_688
# mul_357 => mul_689
# mul_358 => mul_690
# mul_359 => mul_691
# mul_360 => mul_692
# mul_361 => mul_693
# mul_362 => mul_694
# mul_363 => mul_695
# mul_364 => mul_696
# mul_365 => mul_697
# mul_366 => mul_698
# mul_367 => mul_699
# mul_368 => mul_700
# mul_369 => mul_701
# mul_370 => mul_702
# mul_371 => mul_703
# mul_372 => mul_704
# mul_373 => mul_705
# mul_374 => mul_706
# mul_375 => mul_707
# mul_376 => mul_708
# mul_4 => mul_713
# mul_5 => mul_714
# mul_6 => mul_715
# mul_7 => mul_716
# mul_8 => mul_717
# rsqrt => rsqrt_63
# rsqrt_1 => rsqrt_64
# rsqrt_2 => rsqrt_65
# type_as => convert_element_type_231
# type_as_1 => convert_element_type_233
# type_as_2 => convert_element_type_235
triton_red_fused__to_copy_add_mean_mul_rsqrt_46 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_46', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: 'i32', 42: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_46', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(41, 42))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_46(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (56*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (14 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (15 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (16 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (28 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (29 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (30 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (42 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (43 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (44 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (17 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (18 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (31 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (32 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (45 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (46 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (19 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (20 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (33 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (34 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (47 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (48 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (21 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (22 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (35 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (36 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (49 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (50 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (23 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (24 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (37 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (38 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (51 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (52 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (25 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (26 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (39 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (40 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (53 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (54 + (56*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    _tmp362 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp359 = tmp346.to(tl.float32)
        tmp360 = tmp359 * tmp359
        tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
        tmp363 = _tmp362 + tmp361
        _tmp362 = tl.where(rmask, tmp363, _tmp362)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp322, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp334, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp346, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp358, rmask)
    tmp362 = tl.sum(_tmp362, 1)[:, None]
    _tmp379 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp364 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr31 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp375 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp365 = tmp364.to(tl.float32)
        tmp366 = 4096.0
        tmp367 = tmp362 / tmp366
        tmp368 = 1e-05
        tmp369 = tmp367 + tmp368
        tmp370 = tl.math.rsqrt(tmp369)
        tmp371 = tmp365 * tmp370
        tmp372 = tmp371.to(tl.float32)
        tmp374 = tmp372 * tmp373
        tmp376 = tmp375.to(tl.float32)
        tmp377 = tmp376 * tmp376
        tmp378 = tl.broadcast_to(tmp377, [XBLOCK, RBLOCK])
        tmp380 = _tmp379 + tmp378
        _tmp379 = tl.where(rmask, tmp380, _tmp379)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp374, rmask)
    tmp379 = tl.sum(_tmp379, 1)[:, None]
    _tmp396 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp381 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp390 = tl.load(in_ptr32 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp392 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp382 = tmp381.to(tl.float32)
        tmp383 = 4096.0
        tmp384 = tmp379 / tmp383
        tmp385 = 1e-05
        tmp386 = tmp384 + tmp385
        tmp387 = tl.math.rsqrt(tmp386)
        tmp388 = tmp382 * tmp387
        tmp389 = tmp388.to(tl.float32)
        tmp391 = tmp389 * tmp390
        tmp393 = tmp392.to(tl.float32)
        tmp394 = tmp393 * tmp393
        tmp395 = tl.broadcast_to(tmp394, [XBLOCK, RBLOCK])
        tmp397 = _tmp396 + tmp395
        _tmp396 = tl.where(rmask, tmp397, _tmp396)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp391, rmask)
    tmp396 = tl.sum(_tmp396, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp398 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp407 = tl.load(in_ptr33 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp399 = tmp398.to(tl.float32)
        tmp400 = 4096.0
        tmp401 = tmp396 / tmp400
        tmp402 = 1e-05
        tmp403 = tmp401 + tmp402
        tmp404 = tl.math.rsqrt(tmp403)
        tmp405 = tmp399 * tmp404
        tmp406 = tmp405.to(tl.float32)
        tmp408 = tmp406 * tmp407
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp408, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/55/c55d7mkc7enkaj5ci5bw5fcjmqupjmqglaoaizo7h62kwqv4xikg.py
# Source Nodes: [l__mod___dynamic_dense_13_act, l__mod___dynamic_dense_13_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_13_act => add_514, convert_element_type_246, convert_element_type_247, erf_13, mul_733, mul_734, mul_735
# l__mod___dynamic_dense_13_w2 => view_487
triton_poi_fused_gelu_view_47 = async_compile.triton('triton_poi_fused_gelu_view_47', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_47', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_47(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hw/chwsuxzpli6y2yoppw4cwstgu7d65bq5ov5a6kowvwt2mq4lhbns.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_392, add_393, add_394, add_395, add_396, add_397, add_398, add_399, add_400, add_401, add_402, add_403, add_404, add_405, add_406, add_407, add_408, add_409, add_410, add_411, add_412, add_413, add_414, add_415, add_416, add_417, add_418, add_419, add_420, add_421, add_422, add_423, add_424, add_425, add_426, add_427, add_428, add_429, add_430, add_431, add_432, add_433, add_434, add_435, add_436, add_437, add_438, add_439, add_440, add_441, add_442, add_443, add_444, add_445, add_446, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_378, mul_379, mul_380, mul_381, mul_382, mul_383, mul_384, mul_385, mul_386, mul_387, mul_388, mul_389, mul_390, mul_391, mul_392, mul_393, mul_394, mul_395, mul_396, mul_397, mul_398, mul_399, mul_4, mul_400, mul_401, mul_402, mul_403, mul_404, mul_405, mul_406, mul_407, mul_408, mul_409, mul_410, mul_411, mul_412, mul_413, mul_414, mul_415, mul_416, mul_417, mul_418, mul_419, mul_420, mul_421, mul_422, mul_423, mul_424, mul_425, mul_426, mul_427, mul_428, mul_429, mul_430, mul_431, mul_432, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_572
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_392 => add_516
# add_393 => add_517
# add_394 => add_518
# add_395 => add_519
# add_396 => add_520
# add_397 => add_521
# add_398 => add_522
# add_399 => add_523
# add_400 => add_524
# add_401 => add_525
# add_402 => add_526
# add_403 => add_527
# add_404 => add_528
# add_405 => add_529
# add_406 => add_530
# add_407 => add_531
# add_408 => add_532
# add_409 => add_533
# add_410 => add_534
# add_411 => add_535
# add_412 => add_536
# add_413 => add_537
# add_414 => add_538
# add_415 => add_539
# add_416 => add_540
# add_417 => add_541
# add_418 => add_542
# add_419 => add_543
# add_420 => add_544, add_573
# add_421 => add_545
# add_422 => add_546
# add_423 => add_547
# add_424 => add_548
# add_425 => add_549
# add_426 => add_550
# add_427 => add_551
# add_428 => add_552
# add_429 => add_553
# add_430 => add_554
# add_431 => add_555
# add_432 => add_556
# add_433 => add_557
# add_434 => add_558, add_574
# add_435 => add_559
# add_436 => add_560
# add_437 => add_561
# add_438 => add_562
# add_439 => add_563
# add_440 => add_564
# add_441 => add_565
# add_442 => add_566
# add_443 => add_567
# add_444 => add_568
# add_445 => add_569
# add_446 => add_570
# add_5 => add_5
# add_50 => add_89
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_248
# float_2 => convert_element_type_250
# float_3 => convert_element_type_252
# mean => mean_68
# mean_1 => mean_69
# mean_2 => mean_70
# mul => mul_792
# mul_1 => mul_793
# mul_2 => mul_794
# mul_3 => mul_795
# mul_378 => mul_736
# mul_379 => mul_737
# mul_380 => mul_738
# mul_381 => mul_739
# mul_382 => mul_740
# mul_383 => mul_741
# mul_384 => mul_742
# mul_385 => mul_743
# mul_386 => mul_744
# mul_387 => mul_745
# mul_388 => mul_746
# mul_389 => mul_747
# mul_390 => mul_748
# mul_391 => mul_749
# mul_392 => mul_750
# mul_393 => mul_751
# mul_394 => mul_752
# mul_395 => mul_753
# mul_396 => mul_754
# mul_397 => mul_755
# mul_398 => mul_756
# mul_399 => mul_757
# mul_4 => mul_796
# mul_400 => mul_758
# mul_401 => mul_759
# mul_402 => mul_760
# mul_403 => mul_761
# mul_404 => mul_762
# mul_405 => mul_763
# mul_406 => mul_764
# mul_407 => mul_765
# mul_408 => mul_766
# mul_409 => mul_767
# mul_410 => mul_768
# mul_411 => mul_769
# mul_412 => mul_770
# mul_413 => mul_771
# mul_414 => mul_772
# mul_415 => mul_773
# mul_416 => mul_774
# mul_417 => mul_775
# mul_418 => mul_776
# mul_419 => mul_777
# mul_420 => mul_778
# mul_421 => mul_779
# mul_422 => mul_780
# mul_423 => mul_781
# mul_424 => mul_782
# mul_425 => mul_783
# mul_426 => mul_784
# mul_427 => mul_785
# mul_428 => mul_786
# mul_429 => mul_787
# mul_430 => mul_788
# mul_431 => mul_789
# mul_432 => mul_790
# mul_5 => mul_797
# mul_6 => mul_798
# mul_7 => mul_799
# mul_8 => mul_800
# rsqrt => rsqrt_68
# rsqrt_1 => rsqrt_69
# rsqrt_2 => rsqrt_70
# type_as => convert_element_type_249
# type_as_1 => convert_element_type_251
# type_as_2 => convert_element_type_253
triton_red_fused__to_copy_add_mean_mul_rsqrt_48 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_48', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: 'i32', 44: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_48', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(43, 44))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_48(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (60*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (15 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (16 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (17 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (30 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (31 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (32 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (45 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (46 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (47 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (18 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (19 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (33 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (34 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (48 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (49 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (20 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (21 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (35 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (36 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (50 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (51 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (22 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (23 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (37 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (38 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (52 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (53 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (24 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (25 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (39 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (40 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (54 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (55 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (26 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (27 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (41 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (42 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (56 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (57 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp369 = tl.load(in_ptr0 + (28 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp370 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp371 = tl.broadcast_to(tmp370, [XBLOCK, RBLOCK])
    tmp376 = tl.load(in_ptr0 + (43 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp377 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp378 = tl.broadcast_to(tmp377, [XBLOCK, RBLOCK])
    _tmp385 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp368 = tmp367.to(tl.float32)
        tmp372 = tmp369 + tmp371
        tmp373 = tmp372 * tmp365
        tmp374 = tmp334 + tmp373
        tmp375 = tmp374.to(tl.float32)
        tmp379 = tmp376 + tmp378
        tmp380 = tmp379 * tmp365
        tmp381 = tmp346 + tmp380
        tmp382 = tmp381.to(tl.float32)
        tmp383 = tmp368 * tmp368
        tmp384 = tl.broadcast_to(tmp383, [XBLOCK, RBLOCK])
        tmp386 = _tmp385 + tmp384
        _tmp385 = tl.where(rmask, tmp386, _tmp385)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp358, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp368, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp375, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp382, rmask)
    tmp385 = tl.sum(_tmp385, 1)[:, None]
    _tmp400 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp387 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp395 = tl.load(in_ptr33 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp397 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp388 = 4096.0
        tmp389 = tmp385 / tmp388
        tmp390 = 1e-05
        tmp391 = tmp389 + tmp390
        tmp392 = tl.math.rsqrt(tmp391)
        tmp393 = tmp387 * tmp392
        tmp394 = tmp393.to(tl.float32)
        tmp396 = tmp394 * tmp395
        tmp398 = tmp397 * tmp397
        tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
        tmp401 = _tmp400 + tmp399
        _tmp400 = tl.where(rmask, tmp401, _tmp400)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp396, rmask)
    tmp400 = tl.sum(_tmp400, 1)[:, None]
    _tmp415 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp402 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp410 = tl.load(in_ptr34 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp412 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp403 = 4096.0
        tmp404 = tmp400 / tmp403
        tmp405 = 1e-05
        tmp406 = tmp404 + tmp405
        tmp407 = tl.math.rsqrt(tmp406)
        tmp408 = tmp402 * tmp407
        tmp409 = tmp408.to(tl.float32)
        tmp411 = tmp409 * tmp410
        tmp413 = tmp412 * tmp412
        tmp414 = tl.broadcast_to(tmp413, [XBLOCK, RBLOCK])
        tmp416 = _tmp415 + tmp414
        _tmp415 = tl.where(rmask, tmp416, _tmp415)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp411, rmask)
    tmp415 = tl.sum(_tmp415, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp417 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp425 = tl.load(in_ptr35 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp418 = 4096.0
        tmp419 = tmp415 / tmp418
        tmp420 = 1e-05
        tmp421 = tmp419 + tmp420
        tmp422 = tl.math.rsqrt(tmp421)
        tmp423 = tmp417 * tmp422
        tmp424 = tmp423.to(tl.float32)
        tmp426 = tmp424 * tmp425
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp426, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/yx/cyxubfbhibes64fpoqhbjmoqypq4vfdj5i7uvkvcn54m2dctybbn.py
# Source Nodes: [add_338, add_447, add_448, add_449, float_6, mean_3, mul_18, mul_19, mul_20, mul_433, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_338 => add_449
# add_447 => add_571
# add_448 => add_577
# add_449 => add_578
# float_6 => convert_element_type_260
# mean_3 => mean_71
# mul_18 => mul_810
# mul_19 => mul_811
# mul_20 => mul_812
# mul_433 => mul_791
# rsqrt_3 => rsqrt_71
# type_as_5 => convert_element_type_261
triton_red_fused__to_copy_add_mean_mul_rsqrt_49 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_49', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_49', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_49(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (58 + (60*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/5m/c5m3aki4na5a4jkcgkvadfxhap3ganewffzwa3ldybo7676rt4rq.py
# Source Nodes: [l__mod___dynamic_dense_14_act, l__mod___dynamic_dense_14_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_14_act => add_581, convert_element_type_264, convert_element_type_265, erf_14, mul_816, mul_817, mul_818
# l__mod___dynamic_dense_14_w2 => view_522
triton_poi_fused_gelu_view_50 = async_compile.triton('triton_poi_fused_gelu_view_50', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_50', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_50(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/pr/cpr4cluso4dt25r7jakppo5x23e5bic7pas3co3zxl23oyu5loeq.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_451, add_452, add_453, add_454, add_455, add_456, add_457, add_458, add_459, add_460, add_461, add_462, add_463, add_464, add_465, add_466, add_467, add_468, add_469, add_470, add_471, add_472, add_473, add_474, add_475, add_476, add_477, add_478, add_479, add_480, add_481, add_482, add_483, add_484, add_485, add_486, add_487, add_488, add_489, add_490, add_491, add_492, add_493, add_494, add_495, add_496, add_497, add_498, add_499, add_5, add_50, add_500, add_501, add_502, add_503, add_504, add_505, add_506, add_507, add_508, add_509, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_435, mul_436, mul_437, mul_438, mul_439, mul_440, mul_441, mul_442, mul_443, mul_444, mul_445, mul_446, mul_447, mul_448, mul_449, mul_450, mul_451, mul_452, mul_453, mul_454, mul_455, mul_456, mul_457, mul_458, mul_459, mul_460, mul_461, mul_462, mul_463, mul_464, mul_465, mul_466, mul_467, mul_468, mul_469, mul_470, mul_471, mul_472, mul_473, mul_474, mul_475, mul_476, mul_477, mul_478, mul_479, mul_480, mul_481, mul_482, mul_483, mul_484, mul_485, mul_486, mul_487, mul_488, mul_489, mul_490, mul_491, mul_492, mul_493, mul_494, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_643
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_583
# add_451 => add_584
# add_452 => add_585
# add_453 => add_586
# add_454 => add_587
# add_455 => add_588
# add_456 => add_589
# add_457 => add_590
# add_458 => add_591
# add_459 => add_592
# add_460 => add_593
# add_461 => add_594
# add_462 => add_595
# add_463 => add_596
# add_464 => add_597
# add_465 => add_598
# add_466 => add_599
# add_467 => add_600
# add_468 => add_601
# add_469 => add_602
# add_470 => add_603
# add_471 => add_604
# add_472 => add_605
# add_473 => add_606
# add_474 => add_607
# add_475 => add_608
# add_476 => add_609
# add_477 => add_610
# add_478 => add_611
# add_479 => add_612
# add_480 => add_613, add_644
# add_481 => add_614
# add_482 => add_615
# add_483 => add_616
# add_484 => add_617
# add_485 => add_618
# add_486 => add_619
# add_487 => add_620
# add_488 => add_621
# add_489 => add_622
# add_490 => add_623
# add_491 => add_624
# add_492 => add_625
# add_493 => add_626
# add_494 => add_627
# add_495 => add_628, add_645
# add_496 => add_629
# add_497 => add_630
# add_498 => add_631
# add_499 => add_632
# add_5 => add_5
# add_50 => add_89
# add_500 => add_633
# add_501 => add_634
# add_502 => add_635
# add_503 => add_636
# add_504 => add_637
# add_505 => add_638
# add_506 => add_639
# add_507 => add_640
# add_508 => add_641
# add_509 => add_642
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_266
# float_2 => convert_element_type_268
# float_3 => convert_element_type_270
# mean => mean_73
# mean_1 => mean_74
# mean_2 => mean_75
# mul => mul_879
# mul_1 => mul_880
# mul_2 => mul_881
# mul_3 => mul_882
# mul_4 => mul_883
# mul_435 => mul_819
# mul_436 => mul_820
# mul_437 => mul_821
# mul_438 => mul_822
# mul_439 => mul_823
# mul_440 => mul_824
# mul_441 => mul_825
# mul_442 => mul_826
# mul_443 => mul_827
# mul_444 => mul_828
# mul_445 => mul_829
# mul_446 => mul_830
# mul_447 => mul_831
# mul_448 => mul_832
# mul_449 => mul_833
# mul_450 => mul_834
# mul_451 => mul_835
# mul_452 => mul_836
# mul_453 => mul_837
# mul_454 => mul_838
# mul_455 => mul_839
# mul_456 => mul_840
# mul_457 => mul_841
# mul_458 => mul_842
# mul_459 => mul_843
# mul_460 => mul_844
# mul_461 => mul_845
# mul_462 => mul_846
# mul_463 => mul_847
# mul_464 => mul_848
# mul_465 => mul_849
# mul_466 => mul_850
# mul_467 => mul_851
# mul_468 => mul_852
# mul_469 => mul_853
# mul_470 => mul_854
# mul_471 => mul_855
# mul_472 => mul_856
# mul_473 => mul_857
# mul_474 => mul_858
# mul_475 => mul_859
# mul_476 => mul_860
# mul_477 => mul_861
# mul_478 => mul_862
# mul_479 => mul_863
# mul_480 => mul_864
# mul_481 => mul_865
# mul_482 => mul_866
# mul_483 => mul_867
# mul_484 => mul_868
# mul_485 => mul_869
# mul_486 => mul_870
# mul_487 => mul_871
# mul_488 => mul_872
# mul_489 => mul_873
# mul_490 => mul_874
# mul_491 => mul_875
# mul_492 => mul_876
# mul_493 => mul_877
# mul_494 => mul_878
# mul_5 => mul_884
# mul_6 => mul_885
# mul_7 => mul_886
# mul_8 => mul_887
# rsqrt => rsqrt_73
# rsqrt_1 => rsqrt_74
# rsqrt_2 => rsqrt_75
# type_as => convert_element_type_267
# type_as_1 => convert_element_type_269
# type_as_2 => convert_element_type_271
triton_red_fused__to_copy_add_mean_mul_rsqrt_51 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_51', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: 'i32', 47: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_51', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(46, 47))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_51(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (64*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (16 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (17 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (18 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (32 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (33 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (34 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (48 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (49 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (50 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (19 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (20 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (35 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (36 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (51 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (52 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (21 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (22 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (37 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (38 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (53 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (54 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (23 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (24 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (39 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (40 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (55 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (56 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (25 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (26 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (41 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (42 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (57 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (58 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (27 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (28 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (43 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (44 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (59 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (60 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (29 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (30 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (45 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (46 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (61 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (62 + (64*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    _tmp418 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp415 = tmp402.to(tl.float32)
        tmp416 = tmp415 * tmp415
        tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
        tmp419 = _tmp418 + tmp417
        _tmp418 = tl.where(rmask, tmp419, _tmp418)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp378, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp390, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp402, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp414, rmask)
    tmp418 = tl.sum(_tmp418, 1)[:, None]
    _tmp435 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp420 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr36 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp431 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp421 = tmp420.to(tl.float32)
        tmp422 = 4096.0
        tmp423 = tmp418 / tmp422
        tmp424 = 1e-05
        tmp425 = tmp423 + tmp424
        tmp426 = tl.math.rsqrt(tmp425)
        tmp427 = tmp421 * tmp426
        tmp428 = tmp427.to(tl.float32)
        tmp430 = tmp428 * tmp429
        tmp432 = tmp431.to(tl.float32)
        tmp433 = tmp432 * tmp432
        tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
        tmp436 = _tmp435 + tmp434
        _tmp435 = tl.where(rmask, tmp436, _tmp435)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp430, rmask)
    tmp435 = tl.sum(_tmp435, 1)[:, None]
    _tmp452 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp437 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp446 = tl.load(in_ptr37 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp448 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp438 = tmp437.to(tl.float32)
        tmp439 = 4096.0
        tmp440 = tmp435 / tmp439
        tmp441 = 1e-05
        tmp442 = tmp440 + tmp441
        tmp443 = tl.math.rsqrt(tmp442)
        tmp444 = tmp438 * tmp443
        tmp445 = tmp444.to(tl.float32)
        tmp447 = tmp445 * tmp446
        tmp449 = tmp448.to(tl.float32)
        tmp450 = tmp449 * tmp449
        tmp451 = tl.broadcast_to(tmp450, [XBLOCK, RBLOCK])
        tmp453 = _tmp452 + tmp451
        _tmp452 = tl.where(rmask, tmp453, _tmp452)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp447, rmask)
    tmp452 = tl.sum(_tmp452, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp454 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp463 = tl.load(in_ptr38 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp455 = tmp454.to(tl.float32)
        tmp456 = 4096.0
        tmp457 = tmp452 / tmp456
        tmp458 = 1e-05
        tmp459 = tmp457 + tmp458
        tmp460 = tl.math.rsqrt(tmp459)
        tmp461 = tmp455 * tmp460
        tmp462 = tmp461.to(tl.float32)
        tmp464 = tmp462 * tmp463
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp464, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/je/cjevqt64upkswdb5da3yan5wzbweqnj53o6pjmdihkqgjah7zx4r.py
# Source Nodes: [l__mod___dynamic_dense_15_act, l__mod___dynamic_dense_15_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_15_act => add_652, convert_element_type_282, convert_element_type_283, erf_15, mul_903, mul_904, mul_905
# l__mod___dynamic_dense_15_w2 => view_557
triton_poi_fused_gelu_view_52 = async_compile.triton('triton_poi_fused_gelu_view_52', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_52', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_52(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 557056
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5e/c5ekya2kjxmaohj5sukirosy4ojugmd3opb6qjuawsoyxfu5wa3n.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_512, add_513, add_514, add_515, add_516, add_517, add_518, add_519, add_520, add_521, add_522, add_523, add_524, add_525, add_526, add_527, add_528, add_529, add_530, add_531, add_532, add_533, add_534, add_535, add_536, add_537, add_538, add_539, add_540, add_541, add_542, add_543, add_544, add_545, add_546, add_547, add_548, add_549, add_550, add_551, add_552, add_553, add_554, add_555, add_556, add_557, add_558, add_559, add_560, add_561, add_562, add_563, add_564, add_565, add_566, add_567, add_568, add_569, add_570, add_571, add_572, add_573, add_574, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_496, mul_497, mul_498, mul_499, mul_5, mul_500, mul_501, mul_502, mul_503, mul_504, mul_505, mul_506, mul_507, mul_508, mul_509, mul_510, mul_511, mul_512, mul_513, mul_514, mul_515, mul_516, mul_517, mul_518, mul_519, mul_520, mul_521, mul_522, mul_523, mul_524, mul_525, mul_526, mul_527, mul_528, mul_529, mul_530, mul_531, mul_532, mul_533, mul_534, mul_535, mul_536, mul_537, mul_538, mul_539, mul_540, mul_541, mul_542, mul_543, mul_544, mul_545, mul_546, mul_547, mul_548, mul_549, mul_550, mul_551, mul_552, mul_553, mul_554, mul_555, mul_556, mul_557, mul_558, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_718
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_512 => add_654
# add_513 => add_655
# add_514 => add_656
# add_515 => add_657
# add_516 => add_658
# add_517 => add_659
# add_518 => add_660
# add_519 => add_661
# add_520 => add_662
# add_521 => add_663
# add_522 => add_664
# add_523 => add_665
# add_524 => add_666
# add_525 => add_667
# add_526 => add_668
# add_527 => add_669
# add_528 => add_670
# add_529 => add_671
# add_530 => add_672
# add_531 => add_673
# add_532 => add_674
# add_533 => add_675
# add_534 => add_676
# add_535 => add_677
# add_536 => add_678
# add_537 => add_679
# add_538 => add_680
# add_539 => add_681
# add_540 => add_682
# add_541 => add_683
# add_542 => add_684
# add_543 => add_685
# add_544 => add_686, add_719
# add_545 => add_687
# add_546 => add_688
# add_547 => add_689
# add_548 => add_690
# add_549 => add_691
# add_550 => add_692
# add_551 => add_693
# add_552 => add_694
# add_553 => add_695
# add_554 => add_696
# add_555 => add_697
# add_556 => add_698
# add_557 => add_699
# add_558 => add_700
# add_559 => add_701
# add_560 => add_702, add_720
# add_561 => add_703
# add_562 => add_704
# add_563 => add_705
# add_564 => add_706
# add_565 => add_707
# add_566 => add_708
# add_567 => add_709
# add_568 => add_710
# add_569 => add_711
# add_570 => add_712
# add_571 => add_713
# add_572 => add_714
# add_573 => add_715
# add_574 => add_716
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_284
# float_2 => convert_element_type_286
# float_3 => convert_element_type_288
# mean => mean_78
# mean_1 => mean_79
# mean_2 => mean_80
# mul => mul_970
# mul_1 => mul_971
# mul_2 => mul_972
# mul_3 => mul_973
# mul_4 => mul_974
# mul_496 => mul_906
# mul_497 => mul_907
# mul_498 => mul_908
# mul_499 => mul_909
# mul_5 => mul_975
# mul_500 => mul_910
# mul_501 => mul_911
# mul_502 => mul_912
# mul_503 => mul_913
# mul_504 => mul_914
# mul_505 => mul_915
# mul_506 => mul_916
# mul_507 => mul_917
# mul_508 => mul_918
# mul_509 => mul_919
# mul_510 => mul_920
# mul_511 => mul_921
# mul_512 => mul_922
# mul_513 => mul_923
# mul_514 => mul_924
# mul_515 => mul_925
# mul_516 => mul_926
# mul_517 => mul_927
# mul_518 => mul_928
# mul_519 => mul_929
# mul_520 => mul_930
# mul_521 => mul_931
# mul_522 => mul_932
# mul_523 => mul_933
# mul_524 => mul_934
# mul_525 => mul_935
# mul_526 => mul_936
# mul_527 => mul_937
# mul_528 => mul_938
# mul_529 => mul_939
# mul_530 => mul_940
# mul_531 => mul_941
# mul_532 => mul_942
# mul_533 => mul_943
# mul_534 => mul_944
# mul_535 => mul_945
# mul_536 => mul_946
# mul_537 => mul_947
# mul_538 => mul_948
# mul_539 => mul_949
# mul_540 => mul_950
# mul_541 => mul_951
# mul_542 => mul_952
# mul_543 => mul_953
# mul_544 => mul_954
# mul_545 => mul_955
# mul_546 => mul_956
# mul_547 => mul_957
# mul_548 => mul_958
# mul_549 => mul_959
# mul_550 => mul_960
# mul_551 => mul_961
# mul_552 => mul_962
# mul_553 => mul_963
# mul_554 => mul_964
# mul_555 => mul_965
# mul_556 => mul_966
# mul_557 => mul_967
# mul_558 => mul_968
# mul_6 => mul_976
# mul_7 => mul_977
# mul_8 => mul_978
# rsqrt => rsqrt_78
# rsqrt_1 => rsqrt_79
# rsqrt_2 => rsqrt_80
# type_as => convert_element_type_285
# type_as_1 => convert_element_type_287
# type_as_2 => convert_element_type_289
triton_red_fused__to_copy_add_mean_mul_rsqrt_53 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_53', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: 'i32', 49: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_53', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(48, 49))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_53(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (68*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (17 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (18 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (19 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (34 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (35 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (36 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (51 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (52 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (53 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (20 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (21 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (37 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (38 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (54 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (55 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (22 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (23 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (39 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (40 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (56 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (57 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (24 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (25 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (41 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (42 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (58 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (59 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (26 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (27 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (43 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (44 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (60 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (61 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (28 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (29 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (45 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (46 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (62 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (63 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (30 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (31 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (47 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (48 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (64 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (65 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp425 = tl.load(in_ptr0 + (32 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp426 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp427 = tl.broadcast_to(tmp426, [XBLOCK, RBLOCK])
    tmp432 = tl.load(in_ptr0 + (49 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp433 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp434 = tl.broadcast_to(tmp433, [XBLOCK, RBLOCK])
    _tmp441 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp424 = tmp423.to(tl.float32)
        tmp428 = tmp425 + tmp427
        tmp429 = tmp428 * tmp421
        tmp430 = tmp390 + tmp429
        tmp431 = tmp430.to(tl.float32)
        tmp435 = tmp432 + tmp434
        tmp436 = tmp435 * tmp421
        tmp437 = tmp402 + tmp436
        tmp438 = tmp437.to(tl.float32)
        tmp439 = tmp424 * tmp424
        tmp440 = tl.broadcast_to(tmp439, [XBLOCK, RBLOCK])
        tmp442 = _tmp441 + tmp440
        _tmp441 = tl.where(rmask, tmp442, _tmp441)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp414, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp424, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp431, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp438, rmask)
    tmp441 = tl.sum(_tmp441, 1)[:, None]
    _tmp456 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp443 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp451 = tl.load(in_ptr38 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp453 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp444 = 4096.0
        tmp445 = tmp441 / tmp444
        tmp446 = 1e-05
        tmp447 = tmp445 + tmp446
        tmp448 = tl.math.rsqrt(tmp447)
        tmp449 = tmp443 * tmp448
        tmp450 = tmp449.to(tl.float32)
        tmp452 = tmp450 * tmp451
        tmp454 = tmp453 * tmp453
        tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
        tmp457 = _tmp456 + tmp455
        _tmp456 = tl.where(rmask, tmp457, _tmp456)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp452, rmask)
    tmp456 = tl.sum(_tmp456, 1)[:, None]
    _tmp471 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp458 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp466 = tl.load(in_ptr39 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp468 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp459 = 4096.0
        tmp460 = tmp456 / tmp459
        tmp461 = 1e-05
        tmp462 = tmp460 + tmp461
        tmp463 = tl.math.rsqrt(tmp462)
        tmp464 = tmp458 * tmp463
        tmp465 = tmp464.to(tl.float32)
        tmp467 = tmp465 * tmp466
        tmp469 = tmp468 * tmp468
        tmp470 = tl.broadcast_to(tmp469, [XBLOCK, RBLOCK])
        tmp472 = _tmp471 + tmp470
        _tmp471 = tl.where(rmask, tmp472, _tmp471)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp467, rmask)
    tmp471 = tl.sum(_tmp471, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp473 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp481 = tl.load(in_ptr40 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp474 = 4096.0
        tmp475 = tmp471 / tmp474
        tmp476 = 1e-05
        tmp477 = tmp475 + tmp476
        tmp478 = tl.math.rsqrt(tmp477)
        tmp479 = tmp473 * tmp478
        tmp480 = tmp479.to(tl.float32)
        tmp482 = tmp480 * tmp481
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp482, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ze/czemzkydnsb5yqhjyvib7oamgthqohffodcqffbbwgjem7mmno65.py
# Source Nodes: [add_450, add_575, add_576, add_577, float_6, mean_3, mul_18, mul_19, mul_20, mul_559, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_450 => add_579
# add_575 => add_717
# add_576 => add_723
# add_577 => add_724
# float_6 => convert_element_type_296
# mean_3 => mean_81
# mul_18 => mul_988
# mul_19 => mul_989
# mul_20 => mul_990
# mul_559 => mul_969
# rsqrt_3 => rsqrt_81
# type_as_5 => convert_element_type_297
triton_red_fused__to_copy_add_mean_mul_rsqrt_54 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_54', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_54', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_54(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (66 + (68*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/6z/c6zb47kuuh6h37dijhphm7iafgubkbxdmyb5ia667ap4anpkexgp.py
# Source Nodes: [l__mod___dynamic_dense_16_act, l__mod___dynamic_dense_16_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_16_act => add_727, convert_element_type_300, convert_element_type_301, erf_16, mul_994, mul_995, mul_996
# l__mod___dynamic_dense_16_w2 => view_592
triton_poi_fused_gelu_view_55 = async_compile.triton('triton_poi_fused_gelu_view_55', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_55', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_55(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 589824
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/bb/cbbrawkiiyg45qvy23srzhnxqqrltsyqp44ofctjbe7pzvts5vwm.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_579, add_580, add_581, add_582, add_583, add_584, add_585, add_586, add_587, add_588, add_589, add_590, add_591, add_592, add_593, add_594, add_595, add_596, add_597, add_598, add_599, add_600, add_601, add_602, add_603, add_604, add_605, add_606, add_607, add_608, add_609, add_610, add_611, add_612, add_613, add_614, add_615, add_616, add_617, add_618, add_619, add_620, add_621, add_622, add_623, add_624, add_625, add_626, add_627, add_628, add_629, add_630, add_631, add_632, add_633, add_634, add_635, add_636, add_637, add_638, add_639, add_640, add_641, add_642, add_643, add_644, add_645, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_561, mul_562, mul_563, mul_564, mul_565, mul_566, mul_567, mul_568, mul_569, mul_570, mul_571, mul_572, mul_573, mul_574, mul_575, mul_576, mul_577, mul_578, mul_579, mul_580, mul_581, mul_582, mul_583, mul_584, mul_585, mul_586, mul_587, mul_588, mul_589, mul_590, mul_591, mul_592, mul_593, mul_594, mul_595, mul_596, mul_597, mul_598, mul_599, mul_6, mul_600, mul_601, mul_602, mul_603, mul_604, mul_605, mul_606, mul_607, mul_608, mul_609, mul_610, mul_611, mul_612, mul_613, mul_614, mul_615, mul_616, mul_617, mul_618, mul_619, mul_620, mul_621, mul_622, mul_623, mul_624, mul_625, mul_626, mul_627, mul_628, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_797
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_729
# add_579 => add_730
# add_580 => add_731
# add_581 => add_732
# add_582 => add_733
# add_583 => add_734
# add_584 => add_735
# add_585 => add_736
# add_586 => add_737
# add_587 => add_738
# add_588 => add_739
# add_589 => add_740
# add_590 => add_741
# add_591 => add_742
# add_592 => add_743
# add_593 => add_744
# add_594 => add_745
# add_595 => add_746
# add_596 => add_747
# add_597 => add_748
# add_598 => add_749
# add_599 => add_750
# add_600 => add_751
# add_601 => add_752
# add_602 => add_753
# add_603 => add_754
# add_604 => add_755
# add_605 => add_756
# add_606 => add_757
# add_607 => add_758
# add_608 => add_759
# add_609 => add_760
# add_610 => add_761
# add_611 => add_762
# add_612 => add_763, add_798
# add_613 => add_764
# add_614 => add_765
# add_615 => add_766
# add_616 => add_767
# add_617 => add_768
# add_618 => add_769
# add_619 => add_770
# add_620 => add_771
# add_621 => add_772
# add_622 => add_773
# add_623 => add_774
# add_624 => add_775
# add_625 => add_776
# add_626 => add_777
# add_627 => add_778
# add_628 => add_779
# add_629 => add_780, add_799
# add_630 => add_781
# add_631 => add_782
# add_632 => add_783
# add_633 => add_784
# add_634 => add_785
# add_635 => add_786
# add_636 => add_787
# add_637 => add_788
# add_638 => add_789
# add_639 => add_790
# add_640 => add_791
# add_641 => add_792
# add_642 => add_793
# add_643 => add_794
# add_644 => add_795
# add_645 => add_796
# add_70 => add_118
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_302
# float_2 => convert_element_type_304
# float_3 => convert_element_type_306
# mean => mean_83
# mean_1 => mean_84
# mean_2 => mean_85
# mul => mul_1065
# mul_1 => mul_1066
# mul_2 => mul_1067
# mul_3 => mul_1068
# mul_4 => mul_1069
# mul_5 => mul_1070
# mul_561 => mul_997
# mul_562 => mul_998
# mul_563 => mul_999
# mul_564 => mul_1000
# mul_565 => mul_1001
# mul_566 => mul_1002
# mul_567 => mul_1003
# mul_568 => mul_1004
# mul_569 => mul_1005
# mul_570 => mul_1006
# mul_571 => mul_1007
# mul_572 => mul_1008
# mul_573 => mul_1009
# mul_574 => mul_1010
# mul_575 => mul_1011
# mul_576 => mul_1012
# mul_577 => mul_1013
# mul_578 => mul_1014
# mul_579 => mul_1015
# mul_580 => mul_1016
# mul_581 => mul_1017
# mul_582 => mul_1018
# mul_583 => mul_1019
# mul_584 => mul_1020
# mul_585 => mul_1021
# mul_586 => mul_1022
# mul_587 => mul_1023
# mul_588 => mul_1024
# mul_589 => mul_1025
# mul_590 => mul_1026
# mul_591 => mul_1027
# mul_592 => mul_1028
# mul_593 => mul_1029
# mul_594 => mul_1030
# mul_595 => mul_1031
# mul_596 => mul_1032
# mul_597 => mul_1033
# mul_598 => mul_1034
# mul_599 => mul_1035
# mul_6 => mul_1071
# mul_600 => mul_1036
# mul_601 => mul_1037
# mul_602 => mul_1038
# mul_603 => mul_1039
# mul_604 => mul_1040
# mul_605 => mul_1041
# mul_606 => mul_1042
# mul_607 => mul_1043
# mul_608 => mul_1044
# mul_609 => mul_1045
# mul_610 => mul_1046
# mul_611 => mul_1047
# mul_612 => mul_1048
# mul_613 => mul_1049
# mul_614 => mul_1050
# mul_615 => mul_1051
# mul_616 => mul_1052
# mul_617 => mul_1053
# mul_618 => mul_1054
# mul_619 => mul_1055
# mul_620 => mul_1056
# mul_621 => mul_1057
# mul_622 => mul_1058
# mul_623 => mul_1059
# mul_624 => mul_1060
# mul_625 => mul_1061
# mul_626 => mul_1062
# mul_627 => mul_1063
# mul_628 => mul_1064
# mul_7 => mul_1072
# mul_8 => mul_1073
# rsqrt => rsqrt_83
# rsqrt_1 => rsqrt_84
# rsqrt_2 => rsqrt_85
# type_as => convert_element_type_303
# type_as_1 => convert_element_type_305
# type_as_2 => convert_element_type_307
triton_red_fused__to_copy_add_mean_mul_rsqrt_56 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_56', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: 'i32', 52: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_56', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(51, 52))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_56(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (72*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (18 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (19 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (20 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (36 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (37 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (38 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (54 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (55 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (56 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (21 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (22 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (39 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (40 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (57 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (58 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (23 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (24 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (41 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (42 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (59 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (60 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (25 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (26 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (43 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (44 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (61 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (62 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (27 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (28 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (45 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (46 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (63 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (64 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (29 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (30 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (47 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (48 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (65 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (66 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (31 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (32 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (49 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (50 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (67 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (68 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (33 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (34 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (51 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (52 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (69 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (70 + (72*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    _tmp474 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp471 = tmp458.to(tl.float32)
        tmp472 = tmp471 * tmp471
        tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
        tmp475 = _tmp474 + tmp473
        _tmp474 = tl.where(rmask, tmp475, _tmp474)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp434, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp446, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp458, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp470, rmask)
    tmp474 = tl.sum(_tmp474, 1)[:, None]
    _tmp491 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp476 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr41 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp487 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp477 = tmp476.to(tl.float32)
        tmp478 = 4096.0
        tmp479 = tmp474 / tmp478
        tmp480 = 1e-05
        tmp481 = tmp479 + tmp480
        tmp482 = tl.math.rsqrt(tmp481)
        tmp483 = tmp477 * tmp482
        tmp484 = tmp483.to(tl.float32)
        tmp486 = tmp484 * tmp485
        tmp488 = tmp487.to(tl.float32)
        tmp489 = tmp488 * tmp488
        tmp490 = tl.broadcast_to(tmp489, [XBLOCK, RBLOCK])
        tmp492 = _tmp491 + tmp490
        _tmp491 = tl.where(rmask, tmp492, _tmp491)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp486, rmask)
    tmp491 = tl.sum(_tmp491, 1)[:, None]
    _tmp508 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp493 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp502 = tl.load(in_ptr42 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp504 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp494 = tmp493.to(tl.float32)
        tmp495 = 4096.0
        tmp496 = tmp491 / tmp495
        tmp497 = 1e-05
        tmp498 = tmp496 + tmp497
        tmp499 = tl.math.rsqrt(tmp498)
        tmp500 = tmp494 * tmp499
        tmp501 = tmp500.to(tl.float32)
        tmp503 = tmp501 * tmp502
        tmp505 = tmp504.to(tl.float32)
        tmp506 = tmp505 * tmp505
        tmp507 = tl.broadcast_to(tmp506, [XBLOCK, RBLOCK])
        tmp509 = _tmp508 + tmp507
        _tmp508 = tl.where(rmask, tmp509, _tmp508)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp503, rmask)
    tmp508 = tl.sum(_tmp508, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp510 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp519 = tl.load(in_ptr43 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp511 = tmp510.to(tl.float32)
        tmp512 = 4096.0
        tmp513 = tmp508 / tmp512
        tmp514 = 1e-05
        tmp515 = tmp513 + tmp514
        tmp516 = tl.math.rsqrt(tmp515)
        tmp517 = tmp511 * tmp516
        tmp518 = tmp517.to(tl.float32)
        tmp520 = tmp518 * tmp519
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp520, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ms/cmscmnmxbn55a63rwl2wyjf3b3337uipjiwafm2bf72rqj6q7n2o.py
# Source Nodes: [l__mod___dynamic_dense_17_act, l__mod___dynamic_dense_17_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_17_act => add_806, convert_element_type_318, convert_element_type_319, erf_17, mul_1089, mul_1090, mul_1091
# l__mod___dynamic_dense_17_w2 => view_627
triton_poi_fused_gelu_view_57 = async_compile.triton('triton_poi_fused_gelu_view_57', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_57', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_57(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 622592
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/7c/c7c3j5pfuahzg6ijn35qcqwtoidv4fyn2mr2athdoamcv3hoqize.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_649, add_650, add_651, add_652, add_653, add_654, add_655, add_656, add_657, add_658, add_659, add_660, add_661, add_662, add_663, add_664, add_665, add_666, add_667, add_668, add_669, add_670, add_671, add_672, add_673, add_674, add_675, add_676, add_677, add_678, add_679, add_680, add_681, add_682, add_683, add_684, add_685, add_686, add_687, add_688, add_689, add_690, add_691, add_692, add_693, add_694, add_695, add_696, add_697, add_698, add_699, add_70, add_700, add_701, add_702, add_703, add_704, add_705, add_706, add_707, add_708, add_709, add_710, add_711, add_712, add_713, add_714, add_715, add_716, add_717, add_718, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_630, mul_631, mul_632, mul_633, mul_634, mul_635, mul_636, mul_637, mul_638, mul_639, mul_640, mul_641, mul_642, mul_643, mul_644, mul_645, mul_646, mul_647, mul_648, mul_649, mul_650, mul_651, mul_652, mul_653, mul_654, mul_655, mul_656, mul_657, mul_658, mul_659, mul_660, mul_661, mul_662, mul_663, mul_664, mul_665, mul_666, mul_667, mul_668, mul_669, mul_670, mul_671, mul_672, mul_673, mul_674, mul_675, mul_676, mul_677, mul_678, mul_679, mul_680, mul_681, mul_682, mul_683, mul_684, mul_685, mul_686, mul_687, mul_688, mul_689, mul_690, mul_691, mul_692, mul_693, mul_694, mul_695, mul_696, mul_697, mul_698, mul_699, mul_7, mul_700, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_880
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_648 => add_808
# add_649 => add_809
# add_650 => add_810
# add_651 => add_811
# add_652 => add_812
# add_653 => add_813
# add_654 => add_814
# add_655 => add_815
# add_656 => add_816
# add_657 => add_817
# add_658 => add_818
# add_659 => add_819
# add_660 => add_820
# add_661 => add_821
# add_662 => add_822
# add_663 => add_823
# add_664 => add_824
# add_665 => add_825
# add_666 => add_826
# add_667 => add_827
# add_668 => add_828
# add_669 => add_829
# add_670 => add_830
# add_671 => add_831
# add_672 => add_832
# add_673 => add_833
# add_674 => add_834
# add_675 => add_835
# add_676 => add_836
# add_677 => add_837
# add_678 => add_838
# add_679 => add_839
# add_680 => add_840
# add_681 => add_841
# add_682 => add_842
# add_683 => add_843
# add_684 => add_844, add_881
# add_685 => add_845
# add_686 => add_846
# add_687 => add_847
# add_688 => add_848
# add_689 => add_849
# add_690 => add_850
# add_691 => add_851
# add_692 => add_852
# add_693 => add_853
# add_694 => add_854
# add_695 => add_855
# add_696 => add_856
# add_697 => add_857
# add_698 => add_858
# add_699 => add_859
# add_70 => add_118
# add_700 => add_860
# add_701 => add_861
# add_702 => add_862, add_882
# add_703 => add_863
# add_704 => add_864
# add_705 => add_865
# add_706 => add_866
# add_707 => add_867
# add_708 => add_868
# add_709 => add_869
# add_710 => add_870
# add_711 => add_871
# add_712 => add_872
# add_713 => add_873
# add_714 => add_874
# add_715 => add_875
# add_716 => add_876
# add_717 => add_877
# add_718 => add_878
# add_72 => add_120
# add_98 => add_155
# float_1 => convert_element_type_320
# float_2 => convert_element_type_322
# float_3 => convert_element_type_324
# mean => mean_88
# mean_1 => mean_89
# mean_2 => mean_90
# mul => mul_1164
# mul_1 => mul_1165
# mul_2 => mul_1166
# mul_3 => mul_1167
# mul_4 => mul_1168
# mul_5 => mul_1169
# mul_6 => mul_1170
# mul_630 => mul_1092
# mul_631 => mul_1093
# mul_632 => mul_1094
# mul_633 => mul_1095
# mul_634 => mul_1096
# mul_635 => mul_1097
# mul_636 => mul_1098
# mul_637 => mul_1099
# mul_638 => mul_1100
# mul_639 => mul_1101
# mul_640 => mul_1102
# mul_641 => mul_1103
# mul_642 => mul_1104
# mul_643 => mul_1105
# mul_644 => mul_1106
# mul_645 => mul_1107
# mul_646 => mul_1108
# mul_647 => mul_1109
# mul_648 => mul_1110
# mul_649 => mul_1111
# mul_650 => mul_1112
# mul_651 => mul_1113
# mul_652 => mul_1114
# mul_653 => mul_1115
# mul_654 => mul_1116
# mul_655 => mul_1117
# mul_656 => mul_1118
# mul_657 => mul_1119
# mul_658 => mul_1120
# mul_659 => mul_1121
# mul_660 => mul_1122
# mul_661 => mul_1123
# mul_662 => mul_1124
# mul_663 => mul_1125
# mul_664 => mul_1126
# mul_665 => mul_1127
# mul_666 => mul_1128
# mul_667 => mul_1129
# mul_668 => mul_1130
# mul_669 => mul_1131
# mul_670 => mul_1132
# mul_671 => mul_1133
# mul_672 => mul_1134
# mul_673 => mul_1135
# mul_674 => mul_1136
# mul_675 => mul_1137
# mul_676 => mul_1138
# mul_677 => mul_1139
# mul_678 => mul_1140
# mul_679 => mul_1141
# mul_680 => mul_1142
# mul_681 => mul_1143
# mul_682 => mul_1144
# mul_683 => mul_1145
# mul_684 => mul_1146
# mul_685 => mul_1147
# mul_686 => mul_1148
# mul_687 => mul_1149
# mul_688 => mul_1150
# mul_689 => mul_1151
# mul_690 => mul_1152
# mul_691 => mul_1153
# mul_692 => mul_1154
# mul_693 => mul_1155
# mul_694 => mul_1156
# mul_695 => mul_1157
# mul_696 => mul_1158
# mul_697 => mul_1159
# mul_698 => mul_1160
# mul_699 => mul_1161
# mul_7 => mul_1171
# mul_700 => mul_1162
# mul_8 => mul_1172
# rsqrt => rsqrt_88
# rsqrt_1 => rsqrt_89
# rsqrt_2 => rsqrt_90
# type_as => convert_element_type_321
# type_as_1 => convert_element_type_323
# type_as_2 => convert_element_type_325
triton_red_fused__to_copy_add_mean_mul_rsqrt_58 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_58', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: 'i32', 54: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_58', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(53, 54))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_58(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (76*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (19 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (20 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (21 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (38 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (39 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (40 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (57 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (58 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (59 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (22 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (23 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (41 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (42 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (60 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (61 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (24 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (25 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (43 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (44 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (62 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (63 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (26 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (27 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (45 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (46 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (64 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (65 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (28 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (29 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (47 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (48 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (66 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (67 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (30 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (31 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (49 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (50 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (68 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (69 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (32 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (33 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (51 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (52 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (70 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (71 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (34 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (35 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (53 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (54 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (72 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (73 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp481 = tl.load(in_ptr0 + (36 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp482 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp483 = tl.broadcast_to(tmp482, [XBLOCK, RBLOCK])
    tmp488 = tl.load(in_ptr0 + (55 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp489 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp490 = tl.broadcast_to(tmp489, [XBLOCK, RBLOCK])
    _tmp497 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp480 = tmp479.to(tl.float32)
        tmp484 = tmp481 + tmp483
        tmp485 = tmp484 * tmp477
        tmp486 = tmp446 + tmp485
        tmp487 = tmp486.to(tl.float32)
        tmp491 = tmp488 + tmp490
        tmp492 = tmp491 * tmp477
        tmp493 = tmp458 + tmp492
        tmp494 = tmp493.to(tl.float32)
        tmp495 = tmp480 * tmp480
        tmp496 = tl.broadcast_to(tmp495, [XBLOCK, RBLOCK])
        tmp498 = _tmp497 + tmp496
        _tmp497 = tl.where(rmask, tmp498, _tmp497)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp470, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp480, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp487, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp494, rmask)
    tmp497 = tl.sum(_tmp497, 1)[:, None]
    _tmp512 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp499 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp507 = tl.load(in_ptr43 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp509 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp500 = 4096.0
        tmp501 = tmp497 / tmp500
        tmp502 = 1e-05
        tmp503 = tmp501 + tmp502
        tmp504 = tl.math.rsqrt(tmp503)
        tmp505 = tmp499 * tmp504
        tmp506 = tmp505.to(tl.float32)
        tmp508 = tmp506 * tmp507
        tmp510 = tmp509 * tmp509
        tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
        tmp513 = _tmp512 + tmp511
        _tmp512 = tl.where(rmask, tmp513, _tmp512)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp508, rmask)
    tmp512 = tl.sum(_tmp512, 1)[:, None]
    _tmp527 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp514 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp522 = tl.load(in_ptr44 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp524 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp515 = 4096.0
        tmp516 = tmp512 / tmp515
        tmp517 = 1e-05
        tmp518 = tmp516 + tmp517
        tmp519 = tl.math.rsqrt(tmp518)
        tmp520 = tmp514 * tmp519
        tmp521 = tmp520.to(tl.float32)
        tmp523 = tmp521 * tmp522
        tmp525 = tmp524 * tmp524
        tmp526 = tl.broadcast_to(tmp525, [XBLOCK, RBLOCK])
        tmp528 = _tmp527 + tmp526
        _tmp527 = tl.where(rmask, tmp528, _tmp527)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp523, rmask)
    tmp527 = tl.sum(_tmp527, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp529 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp537 = tl.load(in_ptr45 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp530 = 4096.0
        tmp531 = tmp527 / tmp530
        tmp532 = 1e-05
        tmp533 = tmp531 + tmp532
        tmp534 = tl.math.rsqrt(tmp533)
        tmp535 = tmp529 * tmp534
        tmp536 = tmp535.to(tl.float32)
        tmp538 = tmp536 * tmp537
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp538, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ih/cihkwgkasad7lh2wv6j22svpdafzr4mdtmxfnnjvpudu67m3de3z.py
# Source Nodes: [add_578, add_719, add_720, add_721, float_6, mean_3, mul_18, mul_19, mul_20, mul_701, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_578 => add_725
# add_719 => add_879
# add_720 => add_885
# add_721 => add_886
# float_6 => convert_element_type_332
# mean_3 => mean_91
# mul_18 => mul_1182
# mul_19 => mul_1183
# mul_20 => mul_1184
# mul_701 => mul_1163
# rsqrt_3 => rsqrt_91
# type_as_5 => convert_element_type_333
triton_red_fused__to_copy_add_mean_mul_rsqrt_59 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_59', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_59', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_59(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr1 + (74 + (76*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr2 + (74)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/vo/cvomgwzha4pcgmqdnum7zq2vgxvc6bhzmpsvk7j26jx7s65ll7sm.py
# Source Nodes: [l__mod___dynamic_dense_18_act, l__mod___dynamic_dense_18_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_18_act => add_889, convert_element_type_336, convert_element_type_337, erf_18, mul_1188, mul_1189, mul_1190
# l__mod___dynamic_dense_18_w2 => view_662
triton_poi_fused_gelu_view_60 = async_compile.triton('triton_poi_fused_gelu_view_60', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_60', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_60(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/au/caufoosvdwygrzl4txsdxoc7m6tp5duyrb7fl24gk65tlghcz4ji.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_723, add_724, add_725, add_726, add_727, add_728, add_729, add_730, add_731, add_732, add_733, add_734, add_735, add_736, add_737, add_738, add_739, add_740, add_741, add_742, add_743, add_744, add_745, add_746, add_747, add_748, add_749, add_750, add_751, add_752, add_753, add_754, add_755, add_756, add_757, add_758, add_759, add_760, add_761, add_762, add_763, add_764, add_765, add_766, add_767, add_768, add_769, add_770, add_771, add_772, add_773, add_774, add_775, add_776, add_777, add_778, add_779, add_780, add_781, add_782, add_783, add_784, add_785, add_786, add_787, add_788, add_789, add_790, add_791, add_792, add_793, add_794, add_795, add_796, add_797, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_703, mul_704, mul_705, mul_706, mul_707, mul_708, mul_709, mul_710, mul_711, mul_712, mul_713, mul_714, mul_715, mul_716, mul_717, mul_718, mul_719, mul_720, mul_721, mul_722, mul_723, mul_724, mul_725, mul_726, mul_727, mul_728, mul_729, mul_730, mul_731, mul_732, mul_733, mul_734, mul_735, mul_736, mul_737, mul_738, mul_739, mul_740, mul_741, mul_742, mul_743, mul_744, mul_745, mul_746, mul_747, mul_748, mul_749, mul_750, mul_751, mul_752, mul_753, mul_754, mul_755, mul_756, mul_757, mul_758, mul_759, mul_760, mul_761, mul_762, mul_763, mul_764, mul_765, mul_766, mul_767, mul_768, mul_769, mul_770, mul_771, mul_772, mul_773, mul_774, mul_775, mul_776, mul_777, mul_778, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_967
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_891
# add_723 => add_892
# add_724 => add_893
# add_725 => add_894
# add_726 => add_895
# add_727 => add_896
# add_728 => add_897
# add_729 => add_898
# add_730 => add_899
# add_731 => add_900
# add_732 => add_901
# add_733 => add_902
# add_734 => add_903
# add_735 => add_904
# add_736 => add_905
# add_737 => add_906
# add_738 => add_907
# add_739 => add_908
# add_740 => add_909
# add_741 => add_910
# add_742 => add_911
# add_743 => add_912
# add_744 => add_913
# add_745 => add_914
# add_746 => add_915
# add_747 => add_916
# add_748 => add_917
# add_749 => add_918
# add_750 => add_919
# add_751 => add_920
# add_752 => add_921
# add_753 => add_922
# add_754 => add_923
# add_755 => add_924
# add_756 => add_925
# add_757 => add_926
# add_758 => add_927
# add_759 => add_928
# add_760 => add_929, add_968
# add_761 => add_930
# add_762 => add_931
# add_763 => add_932
# add_764 => add_933
# add_765 => add_934
# add_766 => add_935
# add_767 => add_936
# add_768 => add_937
# add_769 => add_938
# add_770 => add_939
# add_771 => add_940
# add_772 => add_941
# add_773 => add_942
# add_774 => add_943
# add_775 => add_944
# add_776 => add_945
# add_777 => add_946
# add_778 => add_947
# add_779 => add_948, add_969
# add_780 => add_949
# add_781 => add_950
# add_782 => add_951
# add_783 => add_952
# add_784 => add_953
# add_785 => add_954
# add_786 => add_955
# add_787 => add_956
# add_788 => add_957
# add_789 => add_958
# add_790 => add_959
# add_791 => add_960
# add_792 => add_961
# add_793 => add_962
# add_794 => add_963
# add_795 => add_964
# add_796 => add_965
# add_797 => add_966
# add_98 => add_155
# float_1 => convert_element_type_338
# float_2 => convert_element_type_340
# float_3 => convert_element_type_342
# mean => mean_93
# mean_1 => mean_94
# mean_2 => mean_95
# mul => mul_1267
# mul_1 => mul_1268
# mul_2 => mul_1269
# mul_3 => mul_1270
# mul_4 => mul_1271
# mul_5 => mul_1272
# mul_6 => mul_1273
# mul_7 => mul_1274
# mul_703 => mul_1191
# mul_704 => mul_1192
# mul_705 => mul_1193
# mul_706 => mul_1194
# mul_707 => mul_1195
# mul_708 => mul_1196
# mul_709 => mul_1197
# mul_710 => mul_1198
# mul_711 => mul_1199
# mul_712 => mul_1200
# mul_713 => mul_1201
# mul_714 => mul_1202
# mul_715 => mul_1203
# mul_716 => mul_1204
# mul_717 => mul_1205
# mul_718 => mul_1206
# mul_719 => mul_1207
# mul_720 => mul_1208
# mul_721 => mul_1209
# mul_722 => mul_1210
# mul_723 => mul_1211
# mul_724 => mul_1212
# mul_725 => mul_1213
# mul_726 => mul_1214
# mul_727 => mul_1215
# mul_728 => mul_1216
# mul_729 => mul_1217
# mul_730 => mul_1218
# mul_731 => mul_1219
# mul_732 => mul_1220
# mul_733 => mul_1221
# mul_734 => mul_1222
# mul_735 => mul_1223
# mul_736 => mul_1224
# mul_737 => mul_1225
# mul_738 => mul_1226
# mul_739 => mul_1227
# mul_740 => mul_1228
# mul_741 => mul_1229
# mul_742 => mul_1230
# mul_743 => mul_1231
# mul_744 => mul_1232
# mul_745 => mul_1233
# mul_746 => mul_1234
# mul_747 => mul_1235
# mul_748 => mul_1236
# mul_749 => mul_1237
# mul_750 => mul_1238
# mul_751 => mul_1239
# mul_752 => mul_1240
# mul_753 => mul_1241
# mul_754 => mul_1242
# mul_755 => mul_1243
# mul_756 => mul_1244
# mul_757 => mul_1245
# mul_758 => mul_1246
# mul_759 => mul_1247
# mul_760 => mul_1248
# mul_761 => mul_1249
# mul_762 => mul_1250
# mul_763 => mul_1251
# mul_764 => mul_1252
# mul_765 => mul_1253
# mul_766 => mul_1254
# mul_767 => mul_1255
# mul_768 => mul_1256
# mul_769 => mul_1257
# mul_770 => mul_1258
# mul_771 => mul_1259
# mul_772 => mul_1260
# mul_773 => mul_1261
# mul_774 => mul_1262
# mul_775 => mul_1263
# mul_776 => mul_1264
# mul_777 => mul_1265
# mul_778 => mul_1266
# mul_8 => mul_1275
# rsqrt => rsqrt_93
# rsqrt_1 => rsqrt_94
# rsqrt_2 => rsqrt_95
# type_as => convert_element_type_339
# type_as_1 => convert_element_type_341
# type_as_2 => convert_element_type_343
triton_red_fused__to_copy_add_mean_mul_rsqrt_61 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_61', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: 'i32', 57: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_61', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(56, 57))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_61(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (80*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (20 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (21 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (22 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (40 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (41 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (42 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (60 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (61 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (62 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (23 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (24 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (43 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (44 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (63 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (64 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (25 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (26 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (45 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (46 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (65 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (66 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (27 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (28 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (47 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (48 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (67 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (68 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (29 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (30 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (49 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (50 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (69 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (70 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (31 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (32 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (51 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (52 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (71 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (72 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (33 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (34 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (53 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (54 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (73 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (74 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (35 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (36 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (55 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (56 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (75 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (76 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (37 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (38 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (57 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (58 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (77 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (78 + (80*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    _tmp530 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp527 = tmp514.to(tl.float32)
        tmp528 = tmp527 * tmp527
        tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
        tmp531 = _tmp530 + tmp529
        _tmp530 = tl.where(rmask, tmp531, _tmp530)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp490, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp502, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp514, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp526, rmask)
    tmp530 = tl.sum(_tmp530, 1)[:, None]
    _tmp547 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp532 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr46 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp543 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp533 = tmp532.to(tl.float32)
        tmp534 = 4096.0
        tmp535 = tmp530 / tmp534
        tmp536 = 1e-05
        tmp537 = tmp535 + tmp536
        tmp538 = tl.math.rsqrt(tmp537)
        tmp539 = tmp533 * tmp538
        tmp540 = tmp539.to(tl.float32)
        tmp542 = tmp540 * tmp541
        tmp544 = tmp543.to(tl.float32)
        tmp545 = tmp544 * tmp544
        tmp546 = tl.broadcast_to(tmp545, [XBLOCK, RBLOCK])
        tmp548 = _tmp547 + tmp546
        _tmp547 = tl.where(rmask, tmp548, _tmp547)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp542, rmask)
    tmp547 = tl.sum(_tmp547, 1)[:, None]
    _tmp564 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp549 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp558 = tl.load(in_ptr47 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp560 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp550 = tmp549.to(tl.float32)
        tmp551 = 4096.0
        tmp552 = tmp547 / tmp551
        tmp553 = 1e-05
        tmp554 = tmp552 + tmp553
        tmp555 = tl.math.rsqrt(tmp554)
        tmp556 = tmp550 * tmp555
        tmp557 = tmp556.to(tl.float32)
        tmp559 = tmp557 * tmp558
        tmp561 = tmp560.to(tl.float32)
        tmp562 = tmp561 * tmp561
        tmp563 = tl.broadcast_to(tmp562, [XBLOCK, RBLOCK])
        tmp565 = _tmp564 + tmp563
        _tmp564 = tl.where(rmask, tmp565, _tmp564)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp559, rmask)
    tmp564 = tl.sum(_tmp564, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp566 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp575 = tl.load(in_ptr48 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp567 = tmp566.to(tl.float32)
        tmp568 = 4096.0
        tmp569 = tmp564 / tmp568
        tmp570 = 1e-05
        tmp571 = tmp569 + tmp570
        tmp572 = tl.math.rsqrt(tmp571)
        tmp573 = tmp567 * tmp572
        tmp574 = tmp573.to(tl.float32)
        tmp576 = tmp574 * tmp575
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp576, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/tt/ctts6jdxaw6pnpxw7dykiygzrmq2lkzovspobr3dmwoc2f4s5cwm.py
# Source Nodes: [l__mod___dynamic_dense_19_act, l__mod___dynamic_dense_19_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_19_act => add_976, convert_element_type_354, convert_element_type_355, erf_19, mul_1291, mul_1292, mul_1293
# l__mod___dynamic_dense_19_w2 => view_697
triton_poi_fused_gelu_view_62 = async_compile.triton('triton_poi_fused_gelu_view_62', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_62', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_62(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 688128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/cr/ccreamxgdcsplxdauegxneqneeh6mtovdmznsinndqcjerb65bta.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_800, add_801, add_802, add_803, add_804, add_805, add_806, add_807, add_808, add_809, add_810, add_811, add_812, add_813, add_814, add_815, add_816, add_817, add_818, add_819, add_820, add_821, add_822, add_823, add_824, add_825, add_826, add_827, add_828, add_829, add_830, add_831, add_832, add_833, add_834, add_835, add_836, add_837, add_838, add_839, add_840, add_841, add_842, add_843, add_844, add_845, add_846, add_847, add_848, add_849, add_850, add_851, add_852, add_853, add_854, add_855, add_856, add_857, add_858, add_859, add_860, add_861, add_862, add_863, add_864, add_865, add_866, add_867, add_868, add_869, add_870, add_871, add_872, add_873, add_874, add_875, add_876, add_877, add_878, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_780, mul_781, mul_782, mul_783, mul_784, mul_785, mul_786, mul_787, mul_788, mul_789, mul_790, mul_791, mul_792, mul_793, mul_794, mul_795, mul_796, mul_797, mul_798, mul_799, mul_8, mul_800, mul_801, mul_802, mul_803, mul_804, mul_805, mul_806, mul_807, mul_808, mul_809, mul_810, mul_811, mul_812, mul_813, mul_814, mul_815, mul_816, mul_817, mul_818, mul_819, mul_820, mul_821, mul_822, mul_823, mul_824, mul_825, mul_826, mul_827, mul_828, mul_829, mul_830, mul_831, mul_832, mul_833, mul_834, mul_835, mul_836, mul_837, mul_838, mul_839, mul_840, mul_841, mul_842, mul_843, mul_844, mul_845, mul_846, mul_847, mul_848, mul_849, mul_850, mul_851, mul_852, mul_853, mul_854, mul_855, mul_856, mul_857, mul_858, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1058
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_800 => add_978
# add_801 => add_979
# add_802 => add_980
# add_803 => add_981
# add_804 => add_982
# add_805 => add_983
# add_806 => add_984
# add_807 => add_985
# add_808 => add_986
# add_809 => add_987
# add_810 => add_988
# add_811 => add_989
# add_812 => add_990
# add_813 => add_991
# add_814 => add_992
# add_815 => add_993
# add_816 => add_994
# add_817 => add_995
# add_818 => add_996
# add_819 => add_997
# add_820 => add_998
# add_821 => add_999
# add_822 => add_1000
# add_823 => add_1001
# add_824 => add_1002
# add_825 => add_1003
# add_826 => add_1004
# add_827 => add_1005
# add_828 => add_1006
# add_829 => add_1007
# add_830 => add_1008
# add_831 => add_1009
# add_832 => add_1010
# add_833 => add_1011
# add_834 => add_1012
# add_835 => add_1013
# add_836 => add_1014
# add_837 => add_1015
# add_838 => add_1016
# add_839 => add_1017
# add_840 => add_1018, add_1059
# add_841 => add_1019
# add_842 => add_1020
# add_843 => add_1021
# add_844 => add_1022
# add_845 => add_1023
# add_846 => add_1024
# add_847 => add_1025
# add_848 => add_1026
# add_849 => add_1027
# add_850 => add_1028
# add_851 => add_1029
# add_852 => add_1030
# add_853 => add_1031
# add_854 => add_1032
# add_855 => add_1033
# add_856 => add_1034
# add_857 => add_1035
# add_858 => add_1036
# add_859 => add_1037
# add_860 => add_1038, add_1060
# add_861 => add_1039
# add_862 => add_1040
# add_863 => add_1041
# add_864 => add_1042
# add_865 => add_1043
# add_866 => add_1044
# add_867 => add_1045
# add_868 => add_1046
# add_869 => add_1047
# add_870 => add_1048
# add_871 => add_1049
# add_872 => add_1050
# add_873 => add_1051
# add_874 => add_1052
# add_875 => add_1053
# add_876 => add_1054
# add_877 => add_1055
# add_878 => add_1056
# add_98 => add_155
# float_1 => convert_element_type_356
# float_2 => convert_element_type_358
# float_3 => convert_element_type_360
# mean => mean_98
# mean_1 => mean_99
# mean_2 => mean_100
# mul => mul_1374
# mul_1 => mul_1375
# mul_2 => mul_1376
# mul_3 => mul_1377
# mul_4 => mul_1378
# mul_5 => mul_1379
# mul_6 => mul_1380
# mul_7 => mul_1381
# mul_780 => mul_1294
# mul_781 => mul_1295
# mul_782 => mul_1296
# mul_783 => mul_1297
# mul_784 => mul_1298
# mul_785 => mul_1299
# mul_786 => mul_1300
# mul_787 => mul_1301
# mul_788 => mul_1302
# mul_789 => mul_1303
# mul_790 => mul_1304
# mul_791 => mul_1305
# mul_792 => mul_1306
# mul_793 => mul_1307
# mul_794 => mul_1308
# mul_795 => mul_1309
# mul_796 => mul_1310
# mul_797 => mul_1311
# mul_798 => mul_1312
# mul_799 => mul_1313
# mul_8 => mul_1382
# mul_800 => mul_1314
# mul_801 => mul_1315
# mul_802 => mul_1316
# mul_803 => mul_1317
# mul_804 => mul_1318
# mul_805 => mul_1319
# mul_806 => mul_1320
# mul_807 => mul_1321
# mul_808 => mul_1322
# mul_809 => mul_1323
# mul_810 => mul_1324
# mul_811 => mul_1325
# mul_812 => mul_1326
# mul_813 => mul_1327
# mul_814 => mul_1328
# mul_815 => mul_1329
# mul_816 => mul_1330
# mul_817 => mul_1331
# mul_818 => mul_1332
# mul_819 => mul_1333
# mul_820 => mul_1334
# mul_821 => mul_1335
# mul_822 => mul_1336
# mul_823 => mul_1337
# mul_824 => mul_1338
# mul_825 => mul_1339
# mul_826 => mul_1340
# mul_827 => mul_1341
# mul_828 => mul_1342
# mul_829 => mul_1343
# mul_830 => mul_1344
# mul_831 => mul_1345
# mul_832 => mul_1346
# mul_833 => mul_1347
# mul_834 => mul_1348
# mul_835 => mul_1349
# mul_836 => mul_1350
# mul_837 => mul_1351
# mul_838 => mul_1352
# mul_839 => mul_1353
# mul_840 => mul_1354
# mul_841 => mul_1355
# mul_842 => mul_1356
# mul_843 => mul_1357
# mul_844 => mul_1358
# mul_845 => mul_1359
# mul_846 => mul_1360
# mul_847 => mul_1361
# mul_848 => mul_1362
# mul_849 => mul_1363
# mul_850 => mul_1364
# mul_851 => mul_1365
# mul_852 => mul_1366
# mul_853 => mul_1367
# mul_854 => mul_1368
# mul_855 => mul_1369
# mul_856 => mul_1370
# mul_857 => mul_1371
# mul_858 => mul_1372
# rsqrt => rsqrt_98
# rsqrt_1 => rsqrt_99
# rsqrt_2 => rsqrt_100
# type_as => convert_element_type_357
# type_as_1 => convert_element_type_359
# type_as_2 => convert_element_type_361
triton_red_fused__to_copy_add_mean_mul_rsqrt_63 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_63', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: 'i32', 59: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_63', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(58, 59))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_63(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (84*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (21 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (22 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (23 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (42 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (43 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (44 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (63 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (64 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (65 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (24 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (25 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (45 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (46 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (66 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (67 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (26 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (27 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (47 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (48 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (68 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (69 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (28 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (29 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (49 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (50 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (70 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (71 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (30 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (31 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (51 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (52 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (72 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (73 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (32 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (33 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (53 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (54 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (74 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (75 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (34 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (35 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (55 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (56 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (76 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (77 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (36 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (37 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (57 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (58 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (78 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (79 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (38 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (39 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (59 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (60 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (80 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (81 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp537 = tl.load(in_ptr0 + (40 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp538 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp539 = tl.broadcast_to(tmp538, [XBLOCK, RBLOCK])
    tmp544 = tl.load(in_ptr0 + (61 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp545 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp546 = tl.broadcast_to(tmp545, [XBLOCK, RBLOCK])
    _tmp553 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp536 = tmp535.to(tl.float32)
        tmp540 = tmp537 + tmp539
        tmp541 = tmp540 * tmp533
        tmp542 = tmp502 + tmp541
        tmp543 = tmp542.to(tl.float32)
        tmp547 = tmp544 + tmp546
        tmp548 = tmp547 * tmp533
        tmp549 = tmp514 + tmp548
        tmp550 = tmp549.to(tl.float32)
        tmp551 = tmp536 * tmp536
        tmp552 = tl.broadcast_to(tmp551, [XBLOCK, RBLOCK])
        tmp554 = _tmp553 + tmp552
        _tmp553 = tl.where(rmask, tmp554, _tmp553)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp526, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp536, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp543, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp550, rmask)
    tmp553 = tl.sum(_tmp553, 1)[:, None]
    _tmp568 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp555 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp563 = tl.load(in_ptr48 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp565 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp556 = 4096.0
        tmp557 = tmp553 / tmp556
        tmp558 = 1e-05
        tmp559 = tmp557 + tmp558
        tmp560 = tl.math.rsqrt(tmp559)
        tmp561 = tmp555 * tmp560
        tmp562 = tmp561.to(tl.float32)
        tmp564 = tmp562 * tmp563
        tmp566 = tmp565 * tmp565
        tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
        tmp569 = _tmp568 + tmp567
        _tmp568 = tl.where(rmask, tmp569, _tmp568)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp564, rmask)
    tmp568 = tl.sum(_tmp568, 1)[:, None]
    _tmp583 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp570 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp578 = tl.load(in_ptr49 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp580 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp571 = 4096.0
        tmp572 = tmp568 / tmp571
        tmp573 = 1e-05
        tmp574 = tmp572 + tmp573
        tmp575 = tl.math.rsqrt(tmp574)
        tmp576 = tmp570 * tmp575
        tmp577 = tmp576.to(tl.float32)
        tmp579 = tmp577 * tmp578
        tmp581 = tmp580 * tmp580
        tmp582 = tl.broadcast_to(tmp581, [XBLOCK, RBLOCK])
        tmp584 = _tmp583 + tmp582
        _tmp583 = tl.where(rmask, tmp584, _tmp583)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp579, rmask)
    tmp583 = tl.sum(_tmp583, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp585 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp593 = tl.load(in_ptr50 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp586 = 4096.0
        tmp587 = tmp583 / tmp586
        tmp588 = 1e-05
        tmp589 = tmp587 + tmp588
        tmp590 = tl.math.rsqrt(tmp589)
        tmp591 = tmp585 * tmp590
        tmp592 = tmp591.to(tl.float32)
        tmp594 = tmp592 * tmp593
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp594, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/5g/c5gblfxq3iibnqorlffvrpscckldd5vtkqrqqja3xxsikxw3q4by.py
# Source Nodes: [add_722, add_879, add_880, add_881, float_6, mean_3, mul_18, mul_19, mul_20, mul_859, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_722 => add_887
# add_879 => add_1057
# add_880 => add_1063
# add_881 => add_1064
# float_6 => convert_element_type_368
# mean_3 => mean_101
# mul_18 => mul_1392
# mul_19 => mul_1393
# mul_20 => mul_1394
# mul_859 => mul_1373
# rsqrt_3 => rsqrt_101
# type_as_5 => convert_element_type_369
triton_red_fused__to_copy_add_mean_mul_rsqrt_64 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_64', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_64', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_64(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (82 + (84*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/td/ctdu6v5cpppzy2ibgeogfx5gbdznlewa2ycwqptcw7nqufbopqyt.py
# Source Nodes: [l__mod___dynamic_dense_20_act, l__mod___dynamic_dense_20_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_20_act => add_1067, convert_element_type_372, convert_element_type_373, erf_20, mul_1398, mul_1399, mul_1400
# l__mod___dynamic_dense_20_w2 => view_732
triton_poi_fused_gelu_view_65 = async_compile.triton('triton_poi_fused_gelu_view_65', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_65', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_65(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 720896
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/t6/ct6gongm3waz6uvn6u7d3kbo2j76ogfqjp4iaicnfw7nqlljgji6.py
# Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_883, add_884, add_885, add_886, add_887, add_888, add_889, add_890, add_891, add_892, add_893, add_894, add_895, add_896, add_897, add_898, add_899, add_900, add_901, add_902, add_903, add_904, add_905, add_906, add_907, add_908, add_909, add_910, add_911, add_912, add_913, add_914, add_915, add_916, add_917, add_918, add_919, add_920, add_921, add_922, add_923, add_924, add_925, add_926, add_927, add_928, add_929, add_930, add_931, add_932, add_933, add_934, add_935, add_936, add_937, add_938, add_939, add_940, add_941, add_942, add_943, add_944, add_945, add_946, add_947, add_948, add_949, add_950, add_951, add_952, add_953, add_954, add_955, add_956, add_957, add_958, add_959, add_960, add_961, add_962, add_963, add_964, add_965, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_861, mul_862, mul_863, mul_864, mul_865, mul_866, mul_867, mul_868, mul_869, mul_870, mul_871, mul_872, mul_873, mul_874, mul_875, mul_876, mul_877, mul_878, mul_879, mul_880, mul_881, mul_882, mul_883, mul_884, mul_885, mul_886, mul_887, mul_888, mul_889, mul_890, mul_891, mul_892, mul_893, mul_894, mul_895, mul_896, mul_897, mul_898, mul_899, mul_900, mul_901, mul_902, mul_903, mul_904, mul_905, mul_906, mul_907, mul_908, mul_909, mul_910, mul_911, mul_912, mul_913, mul_914, mul_915, mul_916, mul_917, mul_918, mul_919, mul_920, mul_921, mul_922, mul_923, mul_924, mul_925, mul_926, mul_927, mul_928, mul_929, mul_930, mul_931, mul_932, mul_933, mul_934, mul_935, mul_936, mul_937, mul_938, mul_939, mul_940, mul_941, mul_942, mul_943, mul_944, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1153
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1069
# add_883 => add_1070
# add_884 => add_1071
# add_885 => add_1072
# add_886 => add_1073
# add_887 => add_1074
# add_888 => add_1075
# add_889 => add_1076
# add_890 => add_1077
# add_891 => add_1078
# add_892 => add_1079
# add_893 => add_1080
# add_894 => add_1081
# add_895 => add_1082
# add_896 => add_1083
# add_897 => add_1084
# add_898 => add_1085
# add_899 => add_1086
# add_900 => add_1087
# add_901 => add_1088
# add_902 => add_1089
# add_903 => add_1090
# add_904 => add_1091
# add_905 => add_1092
# add_906 => add_1093
# add_907 => add_1094
# add_908 => add_1095
# add_909 => add_1096
# add_910 => add_1097
# add_911 => add_1098
# add_912 => add_1099
# add_913 => add_1100
# add_914 => add_1101
# add_915 => add_1102
# add_916 => add_1103
# add_917 => add_1104
# add_918 => add_1105
# add_919 => add_1106
# add_920 => add_1107
# add_921 => add_1108
# add_922 => add_1109
# add_923 => add_1110
# add_924 => add_1111, add_1154
# add_925 => add_1112
# add_926 => add_1113
# add_927 => add_1114
# add_928 => add_1115
# add_929 => add_1116
# add_930 => add_1117
# add_931 => add_1118
# add_932 => add_1119
# add_933 => add_1120
# add_934 => add_1121
# add_935 => add_1122
# add_936 => add_1123
# add_937 => add_1124
# add_938 => add_1125
# add_939 => add_1126
# add_940 => add_1127
# add_941 => add_1128
# add_942 => add_1129
# add_943 => add_1130
# add_944 => add_1131
# add_945 => add_1132, add_1155
# add_946 => add_1133
# add_947 => add_1134
# add_948 => add_1135
# add_949 => add_1136
# add_950 => add_1137
# add_951 => add_1138
# add_952 => add_1139
# add_953 => add_1140
# add_954 => add_1141
# add_955 => add_1142
# add_956 => add_1143
# add_957 => add_1144
# add_958 => add_1145
# add_959 => add_1146
# add_960 => add_1147
# add_961 => add_1148
# add_962 => add_1149
# add_963 => add_1150
# add_964 => add_1151
# add_965 => add_1152
# add_98 => add_155
# float_1 => convert_element_type_374
# float_2 => convert_element_type_376
# float_3 => convert_element_type_378
# mean => mean_103
# mean_1 => mean_104
# mean_2 => mean_105
# mul => mul_1485
# mul_1 => mul_1486
# mul_2 => mul_1487
# mul_3 => mul_1488
# mul_4 => mul_1489
# mul_5 => mul_1490
# mul_6 => mul_1491
# mul_7 => mul_1492
# mul_8 => mul_1493
# mul_861 => mul_1401
# mul_862 => mul_1402
# mul_863 => mul_1403
# mul_864 => mul_1404
# mul_865 => mul_1405
# mul_866 => mul_1406
# mul_867 => mul_1407
# mul_868 => mul_1408
# mul_869 => mul_1409
# mul_870 => mul_1410
# mul_871 => mul_1411
# mul_872 => mul_1412
# mul_873 => mul_1413
# mul_874 => mul_1414
# mul_875 => mul_1415
# mul_876 => mul_1416
# mul_877 => mul_1417
# mul_878 => mul_1418
# mul_879 => mul_1419
# mul_880 => mul_1420
# mul_881 => mul_1421
# mul_882 => mul_1422
# mul_883 => mul_1423
# mul_884 => mul_1424
# mul_885 => mul_1425
# mul_886 => mul_1426
# mul_887 => mul_1427
# mul_888 => mul_1428
# mul_889 => mul_1429
# mul_890 => mul_1430
# mul_891 => mul_1431
# mul_892 => mul_1432
# mul_893 => mul_1433
# mul_894 => mul_1434
# mul_895 => mul_1435
# mul_896 => mul_1436
# mul_897 => mul_1437
# mul_898 => mul_1438
# mul_899 => mul_1439
# mul_900 => mul_1440
# mul_901 => mul_1441
# mul_902 => mul_1442
# mul_903 => mul_1443
# mul_904 => mul_1444
# mul_905 => mul_1445
# mul_906 => mul_1446
# mul_907 => mul_1447
# mul_908 => mul_1448
# mul_909 => mul_1449
# mul_910 => mul_1450
# mul_911 => mul_1451
# mul_912 => mul_1452
# mul_913 => mul_1453
# mul_914 => mul_1454
# mul_915 => mul_1455
# mul_916 => mul_1456
# mul_917 => mul_1457
# mul_918 => mul_1458
# mul_919 => mul_1459
# mul_920 => mul_1460
# mul_921 => mul_1461
# mul_922 => mul_1462
# mul_923 => mul_1463
# mul_924 => mul_1464
# mul_925 => mul_1465
# mul_926 => mul_1466
# mul_927 => mul_1467
# mul_928 => mul_1468
# mul_929 => mul_1469
# mul_930 => mul_1470
# mul_931 => mul_1471
# mul_932 => mul_1472
# mul_933 => mul_1473
# mul_934 => mul_1474
# mul_935 => mul_1475
# mul_936 => mul_1476
# mul_937 => mul_1477
# mul_938 => mul_1478
# mul_939 => mul_1479
# mul_940 => mul_1480
# mul_941 => mul_1481
# mul_942 => mul_1482
# mul_943 => mul_1483
# mul_944 => mul_1484
# rsqrt => rsqrt_103
# rsqrt_1 => rsqrt_104
# rsqrt_2 => rsqrt_105
# type_as => convert_element_type_375
# type_as_1 => convert_element_type_377
# type_as_2 => convert_element_type_379
triton_red_fused__to_copy_add_mean_mul_rsqrt_66 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_66', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: 'i32', 62: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_66', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(61, 62))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_66(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (88*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (22 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (23 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (24 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (44 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (45 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (46 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (66 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (67 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (68 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (25 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (26 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (47 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (48 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (69 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (70 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (27 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (28 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (49 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (50 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (71 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (72 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (29 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (30 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (51 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (52 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (73 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (74 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (31 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (32 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (53 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (54 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (75 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (76 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (33 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (34 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (55 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (56 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (77 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (78 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (35 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (36 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (57 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (58 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (79 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (80 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (37 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (38 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (59 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (60 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (81 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (82 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (39 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (40 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (61 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (62 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (83 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (84 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (41 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (42 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (63 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (64 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (85 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (86 + (88*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    _tmp586 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp583 = tmp570.to(tl.float32)
        tmp584 = tmp583 * tmp583
        tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
        tmp587 = _tmp586 + tmp585
        _tmp586 = tl.where(rmask, tmp587, _tmp586)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp546, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp558, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp570, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp582, rmask)
    tmp586 = tl.sum(_tmp586, 1)[:, None]
    _tmp603 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp588 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr51 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp599 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp589 = tmp588.to(tl.float32)
        tmp590 = 4096.0
        tmp591 = tmp586 / tmp590
        tmp592 = 1e-05
        tmp593 = tmp591 + tmp592
        tmp594 = tl.math.rsqrt(tmp593)
        tmp595 = tmp589 * tmp594
        tmp596 = tmp595.to(tl.float32)
        tmp598 = tmp596 * tmp597
        tmp600 = tmp599.to(tl.float32)
        tmp601 = tmp600 * tmp600
        tmp602 = tl.broadcast_to(tmp601, [XBLOCK, RBLOCK])
        tmp604 = _tmp603 + tmp602
        _tmp603 = tl.where(rmask, tmp604, _tmp603)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp598, rmask)
    tmp603 = tl.sum(_tmp603, 1)[:, None]
    _tmp620 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp605 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp614 = tl.load(in_ptr52 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp616 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp606 = tmp605.to(tl.float32)
        tmp607 = 4096.0
        tmp608 = tmp603 / tmp607
        tmp609 = 1e-05
        tmp610 = tmp608 + tmp609
        tmp611 = tl.math.rsqrt(tmp610)
        tmp612 = tmp606 * tmp611
        tmp613 = tmp612.to(tl.float32)
        tmp615 = tmp613 * tmp614
        tmp617 = tmp616.to(tl.float32)
        tmp618 = tmp617 * tmp617
        tmp619 = tl.broadcast_to(tmp618, [XBLOCK, RBLOCK])
        tmp621 = _tmp620 + tmp619
        _tmp620 = tl.where(rmask, tmp621, _tmp620)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp615, rmask)
    tmp620 = tl.sum(_tmp620, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp622 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp631 = tl.load(in_ptr53 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp623 = tmp622.to(tl.float32)
        tmp624 = 4096.0
        tmp625 = tmp620 / tmp624
        tmp626 = 1e-05
        tmp627 = tmp625 + tmp626
        tmp628 = tl.math.rsqrt(tmp627)
        tmp629 = tmp623 * tmp628
        tmp630 = tmp629.to(tl.float32)
        tmp632 = tmp630 * tmp631
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp632, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/6b/c6budulyrul3pphqcia5jdsstgr4wxyrrfiaajgtw4rushezq5gn.py
# Source Nodes: [l__mod___dynamic_dense_21_act, l__mod___dynamic_dense_21_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_21_act => add_1162, convert_element_type_390, convert_element_type_391, erf_21, mul_1509, mul_1510, mul_1511
# l__mod___dynamic_dense_21_w2 => view_767
triton_poi_fused_gelu_view_67 = async_compile.triton('triton_poi_fused_gelu_view_67', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_67', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_67(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 753664
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/u3/cu3dy4vreue4ahiy47aweuiygwum2kpq2gjz6bokhswarlis6hhr.py
# Source Nodes: [add, add_1000, add_1001, add_1002, add_1003, add_1004, add_1005, add_1006, add_1007, add_1008, add_1009, add_1010, add_1011, add_1012, add_1013, add_1014, add_1015, add_1016, add_1017, add_1018, add_1019, add_1020, add_1021, add_1022, add_1023, add_1024, add_1025, add_1026, add_1027, add_1028, add_1029, add_1030, add_1031, add_1032, add_1033, add_1034, add_1035, add_1036, add_1037, add_1038, add_1039, add_1040, add_1041, add_1042, add_1043, add_1044, add_1045, add_1046, add_1047, add_1048, add_1049, add_1050, add_1051, add_1052, add_1053, add_1054, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_968, add_969, add_970, add_971, add_972, add_973, add_974, add_975, add_976, add_977, add_978, add_979, add_98, add_980, add_981, add_982, add_983, add_984, add_985, add_986, add_987, add_988, add_989, add_990, add_991, add_992, add_993, add_994, add_995, add_996, add_997, add_998, add_999, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1000, mul_1001, mul_1002, mul_1003, mul_1004, mul_1005, mul_1006, mul_1007, mul_1008, mul_1009, mul_1010, mul_1011, mul_1012, mul_1013, mul_1014, mul_1015, mul_1016, mul_1017, mul_1018, mul_1019, mul_1020, mul_1021, mul_1022, mul_1023, mul_1024, mul_1025, mul_1026, mul_1027, mul_1028, mul_1029, mul_1030, mul_1031, mul_1032, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_946, mul_947, mul_948, mul_949, mul_950, mul_951, mul_952, mul_953, mul_954, mul_955, mul_956, mul_957, mul_958, mul_959, mul_960, mul_961, mul_962, mul_963, mul_964, mul_965, mul_966, mul_967, mul_968, mul_969, mul_970, mul_971, mul_972, mul_973, mul_974, mul_975, mul_976, mul_977, mul_978, mul_979, mul_980, mul_981, mul_982, mul_983, mul_984, mul_985, mul_986, mul_987, mul_988, mul_989, mul_990, mul_991, mul_992, mul_993, mul_994, mul_995, mul_996, mul_997, mul_998, mul_999, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1252
# add_1000 => add_1196
# add_1001 => add_1197
# add_1002 => add_1198
# add_1003 => add_1199
# add_1004 => add_1200
# add_1005 => add_1201
# add_1006 => add_1202
# add_1007 => add_1203
# add_1008 => add_1204
# add_1009 => add_1205
# add_1010 => add_1206
# add_1011 => add_1207
# add_1012 => add_1208, add_1253
# add_1013 => add_1209
# add_1014 => add_1210
# add_1015 => add_1211
# add_1016 => add_1212
# add_1017 => add_1213
# add_1018 => add_1214
# add_1019 => add_1215
# add_1020 => add_1216
# add_1021 => add_1217
# add_1022 => add_1218
# add_1023 => add_1219
# add_1024 => add_1220
# add_1025 => add_1221
# add_1026 => add_1222
# add_1027 => add_1223
# add_1028 => add_1224
# add_1029 => add_1225
# add_1030 => add_1226
# add_1031 => add_1227
# add_1032 => add_1228
# add_1033 => add_1229
# add_1034 => add_1230, add_1254
# add_1035 => add_1231
# add_1036 => add_1232
# add_1037 => add_1233
# add_1038 => add_1234
# add_1039 => add_1235
# add_1040 => add_1236
# add_1041 => add_1237
# add_1042 => add_1238
# add_1043 => add_1239
# add_1044 => add_1240
# add_1045 => add_1241
# add_1046 => add_1242
# add_1047 => add_1243
# add_1048 => add_1244
# add_1049 => add_1245
# add_1050 => add_1246
# add_1051 => add_1247
# add_1052 => add_1248
# add_1053 => add_1249
# add_1054 => add_1250
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_968 => add_1164
# add_969 => add_1165
# add_970 => add_1166
# add_971 => add_1167
# add_972 => add_1168
# add_973 => add_1169
# add_974 => add_1170
# add_975 => add_1171
# add_976 => add_1172
# add_977 => add_1173
# add_978 => add_1174
# add_979 => add_1175
# add_98 => add_155
# add_980 => add_1176
# add_981 => add_1177
# add_982 => add_1178
# add_983 => add_1179
# add_984 => add_1180
# add_985 => add_1181
# add_986 => add_1182
# add_987 => add_1183
# add_988 => add_1184
# add_989 => add_1185
# add_990 => add_1186
# add_991 => add_1187
# add_992 => add_1188
# add_993 => add_1189
# add_994 => add_1190
# add_995 => add_1191
# add_996 => add_1192
# add_997 => add_1193
# add_998 => add_1194
# add_999 => add_1195
# float_1 => convert_element_type_392
# float_2 => convert_element_type_394
# float_3 => convert_element_type_396
# mean => mean_108
# mean_1 => mean_109
# mean_2 => mean_110
# mul => mul_1600
# mul_1 => mul_1601
# mul_1000 => mul_1566
# mul_1001 => mul_1567
# mul_1002 => mul_1568
# mul_1003 => mul_1569
# mul_1004 => mul_1570
# mul_1005 => mul_1571
# mul_1006 => mul_1572
# mul_1007 => mul_1573
# mul_1008 => mul_1574
# mul_1009 => mul_1575
# mul_1010 => mul_1576
# mul_1011 => mul_1577
# mul_1012 => mul_1578
# mul_1013 => mul_1579
# mul_1014 => mul_1580
# mul_1015 => mul_1581
# mul_1016 => mul_1582
# mul_1017 => mul_1583
# mul_1018 => mul_1584
# mul_1019 => mul_1585
# mul_1020 => mul_1586
# mul_1021 => mul_1587
# mul_1022 => mul_1588
# mul_1023 => mul_1589
# mul_1024 => mul_1590
# mul_1025 => mul_1591
# mul_1026 => mul_1592
# mul_1027 => mul_1593
# mul_1028 => mul_1594
# mul_1029 => mul_1595
# mul_1030 => mul_1596
# mul_1031 => mul_1597
# mul_1032 => mul_1598
# mul_2 => mul_1602
# mul_3 => mul_1603
# mul_4 => mul_1604
# mul_5 => mul_1605
# mul_6 => mul_1606
# mul_7 => mul_1607
# mul_8 => mul_1608
# mul_946 => mul_1512
# mul_947 => mul_1513
# mul_948 => mul_1514
# mul_949 => mul_1515
# mul_950 => mul_1516
# mul_951 => mul_1517
# mul_952 => mul_1518
# mul_953 => mul_1519
# mul_954 => mul_1520
# mul_955 => mul_1521
# mul_956 => mul_1522
# mul_957 => mul_1523
# mul_958 => mul_1524
# mul_959 => mul_1525
# mul_960 => mul_1526
# mul_961 => mul_1527
# mul_962 => mul_1528
# mul_963 => mul_1529
# mul_964 => mul_1530
# mul_965 => mul_1531
# mul_966 => mul_1532
# mul_967 => mul_1533
# mul_968 => mul_1534
# mul_969 => mul_1535
# mul_970 => mul_1536
# mul_971 => mul_1537
# mul_972 => mul_1538
# mul_973 => mul_1539
# mul_974 => mul_1540
# mul_975 => mul_1541
# mul_976 => mul_1542
# mul_977 => mul_1543
# mul_978 => mul_1544
# mul_979 => mul_1545
# mul_980 => mul_1546
# mul_981 => mul_1547
# mul_982 => mul_1548
# mul_983 => mul_1549
# mul_984 => mul_1550
# mul_985 => mul_1551
# mul_986 => mul_1552
# mul_987 => mul_1553
# mul_988 => mul_1554
# mul_989 => mul_1555
# mul_990 => mul_1556
# mul_991 => mul_1557
# mul_992 => mul_1558
# mul_993 => mul_1559
# mul_994 => mul_1560
# mul_995 => mul_1561
# mul_996 => mul_1562
# mul_997 => mul_1563
# mul_998 => mul_1564
# mul_999 => mul_1565
# rsqrt => rsqrt_108
# rsqrt_1 => rsqrt_109
# rsqrt_2 => rsqrt_110
# type_as => convert_element_type_393
# type_as_1 => convert_element_type_395
# type_as_2 => convert_element_type_397
triton_red_fused__to_copy_add_mean_mul_rsqrt_68 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_68', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: 'i32', 64: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_68', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(63, 64))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_68(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (92*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (23 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (24 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (25 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (46 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (47 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (48 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (69 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (70 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (71 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (26 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (27 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (49 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (50 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (72 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (73 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (28 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (29 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (51 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (52 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (74 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (75 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (30 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (31 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (53 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (54 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (76 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (77 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (32 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (33 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (55 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (56 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (78 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (79 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (34 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (35 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (57 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (58 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (80 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (81 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (36 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (37 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (59 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (60 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (82 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (83 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (38 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (39 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (61 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (62 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (84 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (85 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (40 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (41 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (63 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (64 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (86 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (87 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (42 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (43 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (65 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (66 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (88 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (89 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp593 = tl.load(in_ptr0 + (44 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp594 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp595 = tl.broadcast_to(tmp594, [XBLOCK, RBLOCK])
    tmp600 = tl.load(in_ptr0 + (67 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp601 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp602 = tl.broadcast_to(tmp601, [XBLOCK, RBLOCK])
    _tmp609 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp592 = tmp591.to(tl.float32)
        tmp596 = tmp593 + tmp595
        tmp597 = tmp596 * tmp589
        tmp598 = tmp558 + tmp597
        tmp599 = tmp598.to(tl.float32)
        tmp603 = tmp600 + tmp602
        tmp604 = tmp603 * tmp589
        tmp605 = tmp570 + tmp604
        tmp606 = tmp605.to(tl.float32)
        tmp607 = tmp592 * tmp592
        tmp608 = tl.broadcast_to(tmp607, [XBLOCK, RBLOCK])
        tmp610 = _tmp609 + tmp608
        _tmp609 = tl.where(rmask, tmp610, _tmp609)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp582, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp592, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp599, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp606, rmask)
    tmp609 = tl.sum(_tmp609, 1)[:, None]
    _tmp624 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp611 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp619 = tl.load(in_ptr53 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp621 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp612 = 4096.0
        tmp613 = tmp609 / tmp612
        tmp614 = 1e-05
        tmp615 = tmp613 + tmp614
        tmp616 = tl.math.rsqrt(tmp615)
        tmp617 = tmp611 * tmp616
        tmp618 = tmp617.to(tl.float32)
        tmp620 = tmp618 * tmp619
        tmp622 = tmp621 * tmp621
        tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
        tmp625 = _tmp624 + tmp623
        _tmp624 = tl.where(rmask, tmp625, _tmp624)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp620, rmask)
    tmp624 = tl.sum(_tmp624, 1)[:, None]
    _tmp639 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp626 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp634 = tl.load(in_ptr54 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp636 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp627 = 4096.0
        tmp628 = tmp624 / tmp627
        tmp629 = 1e-05
        tmp630 = tmp628 + tmp629
        tmp631 = tl.math.rsqrt(tmp630)
        tmp632 = tmp626 * tmp631
        tmp633 = tmp632.to(tl.float32)
        tmp635 = tmp633 * tmp634
        tmp637 = tmp636 * tmp636
        tmp638 = tl.broadcast_to(tmp637, [XBLOCK, RBLOCK])
        tmp640 = _tmp639 + tmp638
        _tmp639 = tl.where(rmask, tmp640, _tmp639)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp635, rmask)
    tmp639 = tl.sum(_tmp639, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp641 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp649 = tl.load(in_ptr55 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp642 = 4096.0
        tmp643 = tmp639 / tmp642
        tmp644 = 1e-05
        tmp645 = tmp643 + tmp644
        tmp646 = tl.math.rsqrt(tmp645)
        tmp647 = tmp641 * tmp646
        tmp648 = tmp647.to(tl.float32)
        tmp650 = tmp648 * tmp649
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp650, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/3y/c3ya2k6ft3zpmoqql3foy4oxdododikosy4hozwng5ign3pxmvzh.py
# Source Nodes: [add_1055, add_1056, add_1057, add_882, float_6, mean_3, mul_1033, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1055 => add_1251
# add_1056 => add_1257
# add_1057 => add_1258
# add_882 => add_1065
# float_6 => convert_element_type_404
# mean_3 => mean_111
# mul_1033 => mul_1599
# mul_18 => mul_1618
# mul_19 => mul_1619
# mul_20 => mul_1620
# rsqrt_3 => rsqrt_111
# type_as_5 => convert_element_type_405
triton_red_fused__to_copy_add_mean_mul_rsqrt_69 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_69', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_69', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_69(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (90 + (92*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/a4/ca4j2dhtxowddypfanjef3tjoadljsrpra6do2mynoyu37fmzd7a.py
# Source Nodes: [l__mod___dynamic_dense_22_act, l__mod___dynamic_dense_22_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_22_act => add_1261, convert_element_type_408, convert_element_type_409, erf_22, mul_1624, mul_1625, mul_1626
# l__mod___dynamic_dense_22_w2 => view_802
triton_poi_fused_gelu_view_70 = async_compile.triton('triton_poi_fused_gelu_view_70', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_70', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_70(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 786432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yf/cyf6lftak2c7olhycxs2hmlwxrwu5mumeeuoorrxoamu6ylanpkr.py
# Source Nodes: [add, add_1058, add_1059, add_1060, add_1061, add_1062, add_1063, add_1064, add_1065, add_1066, add_1067, add_1068, add_1069, add_1070, add_1071, add_1072, add_1073, add_1074, add_1075, add_1076, add_1077, add_1078, add_1079, add_1080, add_1081, add_1082, add_1083, add_1084, add_1085, add_1086, add_1087, add_1088, add_1089, add_1090, add_1091, add_1092, add_1093, add_1094, add_1095, add_1096, add_1097, add_1098, add_1099, add_1100, add_1101, add_1102, add_1103, add_1104, add_1105, add_1106, add_1107, add_1108, add_1109, add_1110, add_1111, add_1112, add_1113, add_1114, add_1115, add_1116, add_1117, add_1118, add_1119, add_1120, add_1121, add_1122, add_1123, add_1124, add_1125, add_1126, add_1127, add_1128, add_1129, add_1130, add_1131, add_1132, add_1133, add_1134, add_1135, add_1136, add_1137, add_1138, add_1139, add_1140, add_1141, add_1142, add_1143, add_1144, add_1145, add_1146, add_1147, add_1148, add_1149, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1035, mul_1036, mul_1037, mul_1038, mul_1039, mul_1040, mul_1041, mul_1042, mul_1043, mul_1044, mul_1045, mul_1046, mul_1047, mul_1048, mul_1049, mul_1050, mul_1051, mul_1052, mul_1053, mul_1054, mul_1055, mul_1056, mul_1057, mul_1058, mul_1059, mul_1060, mul_1061, mul_1062, mul_1063, mul_1064, mul_1065, mul_1066, mul_1067, mul_1068, mul_1069, mul_1070, mul_1071, mul_1072, mul_1073, mul_1074, mul_1075, mul_1076, mul_1077, mul_1078, mul_1079, mul_1080, mul_1081, mul_1082, mul_1083, mul_1084, mul_1085, mul_1086, mul_1087, mul_1088, mul_1089, mul_1090, mul_1091, mul_1092, mul_1093, mul_1094, mul_1095, mul_1096, mul_1097, mul_1098, mul_1099, mul_1100, mul_1101, mul_1102, mul_1103, mul_1104, mul_1105, mul_1106, mul_1107, mul_1108, mul_1109, mul_1110, mul_1111, mul_1112, mul_1113, mul_1114, mul_1115, mul_1116, mul_1117, mul_1118, mul_1119, mul_1120, mul_1121, mul_1122, mul_1123, mul_1124, mul_1125, mul_1126, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1355
# add_1058 => add_1263
# add_1059 => add_1264
# add_1060 => add_1265
# add_1061 => add_1266
# add_1062 => add_1267
# add_1063 => add_1268
# add_1064 => add_1269
# add_1065 => add_1270
# add_1066 => add_1271
# add_1067 => add_1272
# add_1068 => add_1273
# add_1069 => add_1274
# add_1070 => add_1275
# add_1071 => add_1276
# add_1072 => add_1277
# add_1073 => add_1278
# add_1074 => add_1279
# add_1075 => add_1280
# add_1076 => add_1281
# add_1077 => add_1282
# add_1078 => add_1283
# add_1079 => add_1284
# add_1080 => add_1285
# add_1081 => add_1286
# add_1082 => add_1287
# add_1083 => add_1288
# add_1084 => add_1289
# add_1085 => add_1290
# add_1086 => add_1291
# add_1087 => add_1292
# add_1088 => add_1293
# add_1089 => add_1294
# add_1090 => add_1295
# add_1091 => add_1296
# add_1092 => add_1297
# add_1093 => add_1298
# add_1094 => add_1299
# add_1095 => add_1300
# add_1096 => add_1301
# add_1097 => add_1302
# add_1098 => add_1303
# add_1099 => add_1304
# add_1100 => add_1305
# add_1101 => add_1306
# add_1102 => add_1307
# add_1103 => add_1308
# add_1104 => add_1309, add_1356
# add_1105 => add_1310
# add_1106 => add_1311
# add_1107 => add_1312
# add_1108 => add_1313
# add_1109 => add_1314
# add_1110 => add_1315
# add_1111 => add_1316
# add_1112 => add_1317
# add_1113 => add_1318
# add_1114 => add_1319
# add_1115 => add_1320
# add_1116 => add_1321
# add_1117 => add_1322
# add_1118 => add_1323
# add_1119 => add_1324
# add_1120 => add_1325
# add_1121 => add_1326
# add_1122 => add_1327
# add_1123 => add_1328
# add_1124 => add_1329
# add_1125 => add_1330
# add_1126 => add_1331
# add_1127 => add_1332, add_1357
# add_1128 => add_1333
# add_1129 => add_1334
# add_1130 => add_1335
# add_1131 => add_1336
# add_1132 => add_1337
# add_1133 => add_1338
# add_1134 => add_1339
# add_1135 => add_1340
# add_1136 => add_1341
# add_1137 => add_1342
# add_1138 => add_1343
# add_1139 => add_1344
# add_1140 => add_1345
# add_1141 => add_1346
# add_1142 => add_1347
# add_1143 => add_1348
# add_1144 => add_1349
# add_1145 => add_1350
# add_1146 => add_1351
# add_1147 => add_1352
# add_1148 => add_1353
# add_1149 => add_1354
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_410
# float_2 => convert_element_type_412
# float_3 => convert_element_type_414
# mean => mean_113
# mean_1 => mean_114
# mean_2 => mean_115
# mul => mul_1719
# mul_1 => mul_1720
# mul_1035 => mul_1627
# mul_1036 => mul_1628
# mul_1037 => mul_1629
# mul_1038 => mul_1630
# mul_1039 => mul_1631
# mul_1040 => mul_1632
# mul_1041 => mul_1633
# mul_1042 => mul_1634
# mul_1043 => mul_1635
# mul_1044 => mul_1636
# mul_1045 => mul_1637
# mul_1046 => mul_1638
# mul_1047 => mul_1639
# mul_1048 => mul_1640
# mul_1049 => mul_1641
# mul_1050 => mul_1642
# mul_1051 => mul_1643
# mul_1052 => mul_1644
# mul_1053 => mul_1645
# mul_1054 => mul_1646
# mul_1055 => mul_1647
# mul_1056 => mul_1648
# mul_1057 => mul_1649
# mul_1058 => mul_1650
# mul_1059 => mul_1651
# mul_1060 => mul_1652
# mul_1061 => mul_1653
# mul_1062 => mul_1654
# mul_1063 => mul_1655
# mul_1064 => mul_1656
# mul_1065 => mul_1657
# mul_1066 => mul_1658
# mul_1067 => mul_1659
# mul_1068 => mul_1660
# mul_1069 => mul_1661
# mul_1070 => mul_1662
# mul_1071 => mul_1663
# mul_1072 => mul_1664
# mul_1073 => mul_1665
# mul_1074 => mul_1666
# mul_1075 => mul_1667
# mul_1076 => mul_1668
# mul_1077 => mul_1669
# mul_1078 => mul_1670
# mul_1079 => mul_1671
# mul_1080 => mul_1672
# mul_1081 => mul_1673
# mul_1082 => mul_1674
# mul_1083 => mul_1675
# mul_1084 => mul_1676
# mul_1085 => mul_1677
# mul_1086 => mul_1678
# mul_1087 => mul_1679
# mul_1088 => mul_1680
# mul_1089 => mul_1681
# mul_1090 => mul_1682
# mul_1091 => mul_1683
# mul_1092 => mul_1684
# mul_1093 => mul_1685
# mul_1094 => mul_1686
# mul_1095 => mul_1687
# mul_1096 => mul_1688
# mul_1097 => mul_1689
# mul_1098 => mul_1690
# mul_1099 => mul_1691
# mul_1100 => mul_1692
# mul_1101 => mul_1693
# mul_1102 => mul_1694
# mul_1103 => mul_1695
# mul_1104 => mul_1696
# mul_1105 => mul_1697
# mul_1106 => mul_1698
# mul_1107 => mul_1699
# mul_1108 => mul_1700
# mul_1109 => mul_1701
# mul_1110 => mul_1702
# mul_1111 => mul_1703
# mul_1112 => mul_1704
# mul_1113 => mul_1705
# mul_1114 => mul_1706
# mul_1115 => mul_1707
# mul_1116 => mul_1708
# mul_1117 => mul_1709
# mul_1118 => mul_1710
# mul_1119 => mul_1711
# mul_1120 => mul_1712
# mul_1121 => mul_1713
# mul_1122 => mul_1714
# mul_1123 => mul_1715
# mul_1124 => mul_1716
# mul_1125 => mul_1717
# mul_1126 => mul_1718
# mul_2 => mul_1721
# mul_3 => mul_1722
# mul_4 => mul_1723
# mul_5 => mul_1724
# mul_6 => mul_1725
# mul_7 => mul_1726
# mul_8 => mul_1727
# rsqrt => rsqrt_113
# rsqrt_1 => rsqrt_114
# rsqrt_2 => rsqrt_115
# type_as => convert_element_type_411
# type_as_1 => convert_element_type_413
# type_as_2 => convert_element_type_415
triton_red_fused__to_copy_add_mean_mul_rsqrt_71 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_71', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: 'i32', 67: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_71', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(66, 67))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_71(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (96*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (24 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (25 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (26 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (48 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (49 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (50 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (72 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (73 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (74 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (27 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (28 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (51 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (52 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (75 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (76 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (29 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (30 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (53 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (54 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (77 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (78 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (31 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (32 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (55 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (56 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (79 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (80 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (33 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (34 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (57 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (58 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (81 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (82 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (35 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (36 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (59 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (60 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (83 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (84 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (37 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (38 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (61 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (62 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (85 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (86 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (39 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (40 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (63 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (64 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (87 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (88 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (41 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (42 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (65 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (66 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (89 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (90 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (43 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (44 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (67 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (68 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (91 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (92 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (45 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (46 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (69 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (70 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (93 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (94 + (96*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    _tmp642 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp639 = tmp626.to(tl.float32)
        tmp640 = tmp639 * tmp639
        tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
        tmp643 = _tmp642 + tmp641
        _tmp642 = tl.where(rmask, tmp643, _tmp642)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp602, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp614, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp626, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp638, rmask)
    tmp642 = tl.sum(_tmp642, 1)[:, None]
    _tmp659 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp644 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr56 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp655 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp645 = tmp644.to(tl.float32)
        tmp646 = 4096.0
        tmp647 = tmp642 / tmp646
        tmp648 = 1e-05
        tmp649 = tmp647 + tmp648
        tmp650 = tl.math.rsqrt(tmp649)
        tmp651 = tmp645 * tmp650
        tmp652 = tmp651.to(tl.float32)
        tmp654 = tmp652 * tmp653
        tmp656 = tmp655.to(tl.float32)
        tmp657 = tmp656 * tmp656
        tmp658 = tl.broadcast_to(tmp657, [XBLOCK, RBLOCK])
        tmp660 = _tmp659 + tmp658
        _tmp659 = tl.where(rmask, tmp660, _tmp659)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp654, rmask)
    tmp659 = tl.sum(_tmp659, 1)[:, None]
    _tmp676 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp661 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp670 = tl.load(in_ptr57 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp672 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp662 = tmp661.to(tl.float32)
        tmp663 = 4096.0
        tmp664 = tmp659 / tmp663
        tmp665 = 1e-05
        tmp666 = tmp664 + tmp665
        tmp667 = tl.math.rsqrt(tmp666)
        tmp668 = tmp662 * tmp667
        tmp669 = tmp668.to(tl.float32)
        tmp671 = tmp669 * tmp670
        tmp673 = tmp672.to(tl.float32)
        tmp674 = tmp673 * tmp673
        tmp675 = tl.broadcast_to(tmp674, [XBLOCK, RBLOCK])
        tmp677 = _tmp676 + tmp675
        _tmp676 = tl.where(rmask, tmp677, _tmp676)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp671, rmask)
    tmp676 = tl.sum(_tmp676, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp678 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp687 = tl.load(in_ptr58 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp679 = tmp678.to(tl.float32)
        tmp680 = 4096.0
        tmp681 = tmp676 / tmp680
        tmp682 = 1e-05
        tmp683 = tmp681 + tmp682
        tmp684 = tl.math.rsqrt(tmp683)
        tmp685 = tmp679 * tmp684
        tmp686 = tmp685.to(tl.float32)
        tmp688 = tmp686 * tmp687
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp688, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/in/cinn7qpm5kiqt56g6ieh4mxt5evtp6ooirkslrgj6hkc6xrqrw6d.py
# Source Nodes: [l__mod___dynamic_dense_23_act, l__mod___dynamic_dense_23_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_23_act => add_1364, convert_element_type_426, convert_element_type_427, erf_23, mul_1743, mul_1744, mul_1745
# l__mod___dynamic_dense_23_w2 => view_837
triton_poi_fused_gelu_view_72 = async_compile.triton('triton_poi_fused_gelu_view_72', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_72', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_72(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 819200
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/nk/cnkgl5j7cqstfnl6qj545tse23wuh2xtso7whmfrracgyxhhvsw4.py
# Source Nodes: [add, add_1058, add_1152, add_1153, add_1154, add_1155, add_1156, add_1157, add_1158, add_1159, add_1160, add_1161, add_1162, add_1163, add_1164, add_1165, add_1166, add_1167, add_1168, add_1169, add_1170, add_1171, add_1172, add_1173, add_1174, add_1175, add_1176, add_1177, add_1178, add_1179, add_1180, add_1181, add_1182, add_1183, add_1184, add_1185, add_1186, add_1187, add_1188, add_1189, add_1190, add_1191, add_1192, add_1193, add_1194, add_1195, add_1196, add_1197, add_1198, add_1199, add_1200, add_1201, add_1202, add_1203, add_1204, add_1205, add_1206, add_1207, add_1208, add_1209, add_1210, add_1211, add_1212, add_1213, add_1214, add_1215, add_1216, add_1217, add_1218, add_1219, add_1220, add_1221, add_1222, add_1223, add_1224, add_1225, add_1226, add_1227, add_1228, add_1229, add_1230, add_1231, add_1232, add_1233, add_1234, add_1235, add_1236, add_1237, add_1238, add_1239, add_1240, add_1241, add_1242, add_1243, add_1244, add_1245, add_1246, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1128, mul_1129, mul_1130, mul_1131, mul_1132, mul_1133, mul_1134, mul_1135, mul_1136, mul_1137, mul_1138, mul_1139, mul_1140, mul_1141, mul_1142, mul_1143, mul_1144, mul_1145, mul_1146, mul_1147, mul_1148, mul_1149, mul_1150, mul_1151, mul_1152, mul_1153, mul_1154, mul_1155, mul_1156, mul_1157, mul_1158, mul_1159, mul_1160, mul_1161, mul_1162, mul_1163, mul_1164, mul_1165, mul_1166, mul_1167, mul_1168, mul_1169, mul_1170, mul_1171, mul_1172, mul_1173, mul_1174, mul_1175, mul_1176, mul_1177, mul_1178, mul_1179, mul_1180, mul_1181, mul_1182, mul_1183, mul_1184, mul_1185, mul_1186, mul_1187, mul_1188, mul_1189, mul_1190, mul_1191, mul_1192, mul_1193, mul_1194, mul_1195, mul_1196, mul_1197, mul_1198, mul_1199, mul_1200, mul_1201, mul_1202, mul_1203, mul_1204, mul_1205, mul_1206, mul_1207, mul_1208, mul_1209, mul_1210, mul_1211, mul_1212, mul_1213, mul_1214, mul_1215, mul_1216, mul_1217, mul_1218, mul_1219, mul_1220, mul_1221, mul_1222, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1462
# add_1058 => add_1259
# add_1152 => add_1366
# add_1153 => add_1367
# add_1154 => add_1368
# add_1155 => add_1369
# add_1156 => add_1370
# add_1157 => add_1371
# add_1158 => add_1372
# add_1159 => add_1373
# add_1160 => add_1374
# add_1161 => add_1375
# add_1162 => add_1376
# add_1163 => add_1377
# add_1164 => add_1378
# add_1165 => add_1379
# add_1166 => add_1380
# add_1167 => add_1381
# add_1168 => add_1382
# add_1169 => add_1383
# add_1170 => add_1384
# add_1171 => add_1385
# add_1172 => add_1386
# add_1173 => add_1387
# add_1174 => add_1388
# add_1175 => add_1389
# add_1176 => add_1390
# add_1177 => add_1391
# add_1178 => add_1392
# add_1179 => add_1393
# add_1180 => add_1394
# add_1181 => add_1395
# add_1182 => add_1396
# add_1183 => add_1397
# add_1184 => add_1398
# add_1185 => add_1399
# add_1186 => add_1400
# add_1187 => add_1401
# add_1188 => add_1402
# add_1189 => add_1403
# add_1190 => add_1404
# add_1191 => add_1405
# add_1192 => add_1406
# add_1193 => add_1407
# add_1194 => add_1408
# add_1195 => add_1409
# add_1196 => add_1410
# add_1197 => add_1411
# add_1198 => add_1412
# add_1199 => add_1413
# add_1200 => add_1414, add_1463
# add_1201 => add_1415
# add_1202 => add_1416
# add_1203 => add_1417
# add_1204 => add_1418
# add_1205 => add_1419
# add_1206 => add_1420
# add_1207 => add_1421
# add_1208 => add_1422
# add_1209 => add_1423
# add_1210 => add_1424
# add_1211 => add_1425
# add_1212 => add_1426
# add_1213 => add_1427
# add_1214 => add_1428
# add_1215 => add_1429
# add_1216 => add_1430
# add_1217 => add_1431
# add_1218 => add_1432
# add_1219 => add_1433
# add_1220 => add_1434
# add_1221 => add_1435
# add_1222 => add_1436
# add_1223 => add_1437
# add_1224 => add_1438, add_1464
# add_1225 => add_1439
# add_1226 => add_1440
# add_1227 => add_1441
# add_1228 => add_1442
# add_1229 => add_1443
# add_1230 => add_1444
# add_1231 => add_1445
# add_1232 => add_1446
# add_1233 => add_1447
# add_1234 => add_1448
# add_1235 => add_1449
# add_1236 => add_1450
# add_1237 => add_1451
# add_1238 => add_1452
# add_1239 => add_1453
# add_1240 => add_1454
# add_1241 => add_1455
# add_1242 => add_1456
# add_1243 => add_1457
# add_1244 => add_1458
# add_1245 => add_1459
# add_1246 => add_1460
# add_126 => add_192
# add_128 => add_194
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_428
# float_2 => convert_element_type_430
# float_3 => convert_element_type_432
# mean => mean_118
# mean_1 => mean_119
# mean_2 => mean_120
# mul => mul_1842
# mul_1 => mul_1843
# mul_1128 => mul_1746
# mul_1129 => mul_1747
# mul_1130 => mul_1748
# mul_1131 => mul_1749
# mul_1132 => mul_1750
# mul_1133 => mul_1751
# mul_1134 => mul_1752
# mul_1135 => mul_1753
# mul_1136 => mul_1754
# mul_1137 => mul_1755
# mul_1138 => mul_1756
# mul_1139 => mul_1757
# mul_1140 => mul_1758
# mul_1141 => mul_1759
# mul_1142 => mul_1760
# mul_1143 => mul_1761
# mul_1144 => mul_1762
# mul_1145 => mul_1763
# mul_1146 => mul_1764
# mul_1147 => mul_1765
# mul_1148 => mul_1766
# mul_1149 => mul_1767
# mul_1150 => mul_1768
# mul_1151 => mul_1769
# mul_1152 => mul_1770
# mul_1153 => mul_1771
# mul_1154 => mul_1772
# mul_1155 => mul_1773
# mul_1156 => mul_1774
# mul_1157 => mul_1775
# mul_1158 => mul_1776
# mul_1159 => mul_1777
# mul_1160 => mul_1778
# mul_1161 => mul_1779
# mul_1162 => mul_1780
# mul_1163 => mul_1781
# mul_1164 => mul_1782
# mul_1165 => mul_1783
# mul_1166 => mul_1784
# mul_1167 => mul_1785
# mul_1168 => mul_1786
# mul_1169 => mul_1787
# mul_1170 => mul_1788
# mul_1171 => mul_1789
# mul_1172 => mul_1790
# mul_1173 => mul_1791
# mul_1174 => mul_1792
# mul_1175 => mul_1793
# mul_1176 => mul_1794
# mul_1177 => mul_1795
# mul_1178 => mul_1796
# mul_1179 => mul_1797
# mul_1180 => mul_1798
# mul_1181 => mul_1799
# mul_1182 => mul_1800
# mul_1183 => mul_1801
# mul_1184 => mul_1802
# mul_1185 => mul_1803
# mul_1186 => mul_1804
# mul_1187 => mul_1805
# mul_1188 => mul_1806
# mul_1189 => mul_1807
# mul_1190 => mul_1808
# mul_1191 => mul_1809
# mul_1192 => mul_1810
# mul_1193 => mul_1811
# mul_1194 => mul_1812
# mul_1195 => mul_1813
# mul_1196 => mul_1814
# mul_1197 => mul_1815
# mul_1198 => mul_1816
# mul_1199 => mul_1817
# mul_1200 => mul_1818
# mul_1201 => mul_1819
# mul_1202 => mul_1820
# mul_1203 => mul_1821
# mul_1204 => mul_1822
# mul_1205 => mul_1823
# mul_1206 => mul_1824
# mul_1207 => mul_1825
# mul_1208 => mul_1826
# mul_1209 => mul_1827
# mul_1210 => mul_1828
# mul_1211 => mul_1829
# mul_1212 => mul_1830
# mul_1213 => mul_1831
# mul_1214 => mul_1832
# mul_1215 => mul_1833
# mul_1216 => mul_1834
# mul_1217 => mul_1835
# mul_1218 => mul_1836
# mul_1219 => mul_1837
# mul_1220 => mul_1838
# mul_1221 => mul_1839
# mul_1222 => mul_1840
# mul_2 => mul_1844
# mul_3 => mul_1845
# mul_4 => mul_1846
# mul_5 => mul_1847
# mul_6 => mul_1848
# mul_7 => mul_1849
# mul_8 => mul_1850
# rsqrt => rsqrt_118
# rsqrt_1 => rsqrt_119
# rsqrt_2 => rsqrt_120
# type_as => convert_element_type_429
# type_as_1 => convert_element_type_431
# type_as_2 => convert_element_type_433
triton_red_fused__to_copy_add_mean_mul_rsqrt_73 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_73', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: 'i32', 69: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_73', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(68, 69))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_73(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (100*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (25 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (26 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (27 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (50 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (51 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (52 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (75 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (76 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (77 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (28 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (29 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (53 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (54 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (78 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (79 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (30 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (31 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (55 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (56 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (80 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (81 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (32 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (33 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (57 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (58 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (82 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (83 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (34 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (35 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (59 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (60 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (84 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (85 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (36 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (37 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (61 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (62 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (86 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (87 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (38 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (39 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (63 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (64 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (88 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (89 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (40 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (41 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (65 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (66 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (90 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (91 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (42 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (43 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (67 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (68 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (92 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (93 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (44 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (45 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (69 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (70 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (94 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (95 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (46 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (47 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (71 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (72 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (96 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (97 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp649 = tl.load(in_ptr0 + (48 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp650 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp651 = tl.broadcast_to(tmp650, [XBLOCK, RBLOCK])
    tmp656 = tl.load(in_ptr0 + (73 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp657 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp658 = tl.broadcast_to(tmp657, [XBLOCK, RBLOCK])
    _tmp665 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp648 = tmp647.to(tl.float32)
        tmp652 = tmp649 + tmp651
        tmp653 = tmp652 * tmp645
        tmp654 = tmp614 + tmp653
        tmp655 = tmp654.to(tl.float32)
        tmp659 = tmp656 + tmp658
        tmp660 = tmp659 * tmp645
        tmp661 = tmp626 + tmp660
        tmp662 = tmp661.to(tl.float32)
        tmp663 = tmp648 * tmp648
        tmp664 = tl.broadcast_to(tmp663, [XBLOCK, RBLOCK])
        tmp666 = _tmp665 + tmp664
        _tmp665 = tl.where(rmask, tmp666, _tmp665)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp638, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp648, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp655, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp662, rmask)
    tmp665 = tl.sum(_tmp665, 1)[:, None]
    _tmp680 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp667 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp675 = tl.load(in_ptr58 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp677 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp668 = 4096.0
        tmp669 = tmp665 / tmp668
        tmp670 = 1e-05
        tmp671 = tmp669 + tmp670
        tmp672 = tl.math.rsqrt(tmp671)
        tmp673 = tmp667 * tmp672
        tmp674 = tmp673.to(tl.float32)
        tmp676 = tmp674 * tmp675
        tmp678 = tmp677 * tmp677
        tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
        tmp681 = _tmp680 + tmp679
        _tmp680 = tl.where(rmask, tmp681, _tmp680)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp676, rmask)
    tmp680 = tl.sum(_tmp680, 1)[:, None]
    _tmp695 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp682 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp690 = tl.load(in_ptr59 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp692 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp683 = 4096.0
        tmp684 = tmp680 / tmp683
        tmp685 = 1e-05
        tmp686 = tmp684 + tmp685
        tmp687 = tl.math.rsqrt(tmp686)
        tmp688 = tmp682 * tmp687
        tmp689 = tmp688.to(tl.float32)
        tmp691 = tmp689 * tmp690
        tmp693 = tmp692 * tmp692
        tmp694 = tl.broadcast_to(tmp693, [XBLOCK, RBLOCK])
        tmp696 = _tmp695 + tmp694
        _tmp695 = tl.where(rmask, tmp696, _tmp695)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp691, rmask)
    tmp695 = tl.sum(_tmp695, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp697 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp705 = tl.load(in_ptr60 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp698 = 4096.0
        tmp699 = tmp695 / tmp698
        tmp700 = 1e-05
        tmp701 = tmp699 + tmp700
        tmp702 = tl.math.rsqrt(tmp701)
        tmp703 = tmp697 * tmp702
        tmp704 = tmp703.to(tl.float32)
        tmp706 = tmp704 * tmp705
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp706, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/mw/cmwfxkpjkghdaywb64abkkb4okrna734zvzkm4xanpfuds523snw.py
# Source Nodes: [add_1058, add_1247, add_1248, add_1249, float_6, mean_3, mul_1223, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1058 => add_1259
# add_1247 => add_1461
# add_1248 => add_1467
# add_1249 => add_1468
# float_6 => convert_element_type_440
# mean_3 => mean_121
# mul_1223 => mul_1841
# mul_18 => mul_1860
# mul_19 => mul_1861
# mul_20 => mul_1862
# rsqrt_3 => rsqrt_121
# type_as_5 => convert_element_type_441
triton_red_fused__to_copy_add_mean_mul_rsqrt_74 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_74', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_74', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_74(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (98 + (100*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ad/cadc6dkcftil4xfd2qkpger6326hv3ivlwy64msudvepklboqglf.py
# Source Nodes: [l__mod___dynamic_dense_24_act, l__mod___dynamic_dense_24_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_24_act => add_1471, convert_element_type_444, convert_element_type_445, erf_24, mul_1866, mul_1867, mul_1868
# l__mod___dynamic_dense_24_w2 => view_872
triton_poi_fused_gelu_view_75 = async_compile.triton('triton_poi_fused_gelu_view_75', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_75', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_75(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 851968
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/zc/czcetxpzok7iwy66vkvqjpchqd7xkcj4rjlhmo3yhxfsfb4tcayn.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_1251, add_1252, add_1253, add_1254, add_1255, add_1256, add_1257, add_1258, add_1259, add_126, add_1260, add_1261, add_1262, add_1263, add_1264, add_1265, add_1266, add_1267, add_1268, add_1269, add_1270, add_1271, add_1272, add_1273, add_1274, add_1275, add_1276, add_1277, add_1278, add_1279, add_128, add_1280, add_1281, add_1282, add_1283, add_1284, add_1285, add_1286, add_1287, add_1288, add_1289, add_1290, add_1291, add_1292, add_1293, add_1294, add_1295, add_1296, add_1297, add_1298, add_1299, add_1300, add_1301, add_1302, add_1303, add_1304, add_1305, add_1306, add_1307, add_1308, add_1309, add_1310, add_1311, add_1312, add_1313, add_1314, add_1315, add_1316, add_1317, add_1318, add_1319, add_1320, add_1321, add_1322, add_1323, add_1324, add_1325, add_1326, add_1327, add_1328, add_1329, add_1330, add_1331, add_1332, add_1333, add_1334, add_1335, add_1336, add_1337, add_1338, add_1339, add_1340, add_1341, add_1342, add_1343, add_1344, add_1345, add_1346, add_1347, add_1348, add_1349, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1225, mul_1226, mul_1227, mul_1228, mul_1229, mul_1230, mul_1231, mul_1232, mul_1233, mul_1234, mul_1235, mul_1236, mul_1237, mul_1238, mul_1239, mul_1240, mul_1241, mul_1242, mul_1243, mul_1244, mul_1245, mul_1246, mul_1247, mul_1248, mul_1249, mul_1250, mul_1251, mul_1252, mul_1253, mul_1254, mul_1255, mul_1256, mul_1257, mul_1258, mul_1259, mul_1260, mul_1261, mul_1262, mul_1263, mul_1264, mul_1265, mul_1266, mul_1267, mul_1268, mul_1269, mul_1270, mul_1271, mul_1272, mul_1273, mul_1274, mul_1275, mul_1276, mul_1277, mul_1278, mul_1279, mul_1280, mul_1281, mul_1282, mul_1283, mul_1284, mul_1285, mul_1286, mul_1287, mul_1288, mul_1289, mul_1290, mul_1291, mul_1292, mul_1293, mul_1294, mul_1295, mul_1296, mul_1297, mul_1298, mul_1299, mul_1300, mul_1301, mul_1302, mul_1303, mul_1304, mul_1305, mul_1306, mul_1307, mul_1308, mul_1309, mul_1310, mul_1311, mul_1312, mul_1313, mul_1314, mul_1315, mul_1316, mul_1317, mul_1318, mul_1319, mul_1320, mul_1321, mul_1322, mul_1323, mul_1324, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1573
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1473
# add_1251 => add_1474
# add_1252 => add_1475
# add_1253 => add_1476
# add_1254 => add_1477
# add_1255 => add_1478
# add_1256 => add_1479
# add_1257 => add_1480
# add_1258 => add_1481
# add_1259 => add_1482
# add_126 => add_192
# add_1260 => add_1483
# add_1261 => add_1484
# add_1262 => add_1485
# add_1263 => add_1486
# add_1264 => add_1487
# add_1265 => add_1488
# add_1266 => add_1489
# add_1267 => add_1490
# add_1268 => add_1491
# add_1269 => add_1492
# add_1270 => add_1493
# add_1271 => add_1494
# add_1272 => add_1495
# add_1273 => add_1496
# add_1274 => add_1497
# add_1275 => add_1498
# add_1276 => add_1499
# add_1277 => add_1500
# add_1278 => add_1501
# add_1279 => add_1502
# add_128 => add_194
# add_1280 => add_1503
# add_1281 => add_1504
# add_1282 => add_1505
# add_1283 => add_1506
# add_1284 => add_1507
# add_1285 => add_1508
# add_1286 => add_1509
# add_1287 => add_1510
# add_1288 => add_1511
# add_1289 => add_1512
# add_1290 => add_1513
# add_1291 => add_1514
# add_1292 => add_1515
# add_1293 => add_1516
# add_1294 => add_1517
# add_1295 => add_1518
# add_1296 => add_1519
# add_1297 => add_1520
# add_1298 => add_1521
# add_1299 => add_1522
# add_1300 => add_1523, add_1574
# add_1301 => add_1524
# add_1302 => add_1525
# add_1303 => add_1526
# add_1304 => add_1527
# add_1305 => add_1528
# add_1306 => add_1529
# add_1307 => add_1530
# add_1308 => add_1531
# add_1309 => add_1532
# add_1310 => add_1533
# add_1311 => add_1534
# add_1312 => add_1535
# add_1313 => add_1536
# add_1314 => add_1537
# add_1315 => add_1538
# add_1316 => add_1539
# add_1317 => add_1540
# add_1318 => add_1541
# add_1319 => add_1542
# add_1320 => add_1543
# add_1321 => add_1544
# add_1322 => add_1545
# add_1323 => add_1546
# add_1324 => add_1547
# add_1325 => add_1548, add_1575
# add_1326 => add_1549
# add_1327 => add_1550
# add_1328 => add_1551
# add_1329 => add_1552
# add_1330 => add_1553
# add_1331 => add_1554
# add_1332 => add_1555
# add_1333 => add_1556
# add_1334 => add_1557
# add_1335 => add_1558
# add_1336 => add_1559
# add_1337 => add_1560
# add_1338 => add_1561
# add_1339 => add_1562
# add_1340 => add_1563
# add_1341 => add_1564
# add_1342 => add_1565
# add_1343 => add_1566
# add_1344 => add_1567
# add_1345 => add_1568
# add_1346 => add_1569
# add_1347 => add_1570
# add_1348 => add_1571
# add_1349 => add_1572
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_446
# float_2 => convert_element_type_448
# float_3 => convert_element_type_450
# mean => mean_123
# mean_1 => mean_124
# mean_2 => mean_125
# mul => mul_1969
# mul_1 => mul_1970
# mul_1225 => mul_1869
# mul_1226 => mul_1870
# mul_1227 => mul_1871
# mul_1228 => mul_1872
# mul_1229 => mul_1873
# mul_1230 => mul_1874
# mul_1231 => mul_1875
# mul_1232 => mul_1876
# mul_1233 => mul_1877
# mul_1234 => mul_1878
# mul_1235 => mul_1879
# mul_1236 => mul_1880
# mul_1237 => mul_1881
# mul_1238 => mul_1882
# mul_1239 => mul_1883
# mul_1240 => mul_1884
# mul_1241 => mul_1885
# mul_1242 => mul_1886
# mul_1243 => mul_1887
# mul_1244 => mul_1888
# mul_1245 => mul_1889
# mul_1246 => mul_1890
# mul_1247 => mul_1891
# mul_1248 => mul_1892
# mul_1249 => mul_1893
# mul_1250 => mul_1894
# mul_1251 => mul_1895
# mul_1252 => mul_1896
# mul_1253 => mul_1897
# mul_1254 => mul_1898
# mul_1255 => mul_1899
# mul_1256 => mul_1900
# mul_1257 => mul_1901
# mul_1258 => mul_1902
# mul_1259 => mul_1903
# mul_1260 => mul_1904
# mul_1261 => mul_1905
# mul_1262 => mul_1906
# mul_1263 => mul_1907
# mul_1264 => mul_1908
# mul_1265 => mul_1909
# mul_1266 => mul_1910
# mul_1267 => mul_1911
# mul_1268 => mul_1912
# mul_1269 => mul_1913
# mul_1270 => mul_1914
# mul_1271 => mul_1915
# mul_1272 => mul_1916
# mul_1273 => mul_1917
# mul_1274 => mul_1918
# mul_1275 => mul_1919
# mul_1276 => mul_1920
# mul_1277 => mul_1921
# mul_1278 => mul_1922
# mul_1279 => mul_1923
# mul_1280 => mul_1924
# mul_1281 => mul_1925
# mul_1282 => mul_1926
# mul_1283 => mul_1927
# mul_1284 => mul_1928
# mul_1285 => mul_1929
# mul_1286 => mul_1930
# mul_1287 => mul_1931
# mul_1288 => mul_1932
# mul_1289 => mul_1933
# mul_1290 => mul_1934
# mul_1291 => mul_1935
# mul_1292 => mul_1936
# mul_1293 => mul_1937
# mul_1294 => mul_1938
# mul_1295 => mul_1939
# mul_1296 => mul_1940
# mul_1297 => mul_1941
# mul_1298 => mul_1942
# mul_1299 => mul_1943
# mul_1300 => mul_1944
# mul_1301 => mul_1945
# mul_1302 => mul_1946
# mul_1303 => mul_1947
# mul_1304 => mul_1948
# mul_1305 => mul_1949
# mul_1306 => mul_1950
# mul_1307 => mul_1951
# mul_1308 => mul_1952
# mul_1309 => mul_1953
# mul_1310 => mul_1954
# mul_1311 => mul_1955
# mul_1312 => mul_1956
# mul_1313 => mul_1957
# mul_1314 => mul_1958
# mul_1315 => mul_1959
# mul_1316 => mul_1960
# mul_1317 => mul_1961
# mul_1318 => mul_1962
# mul_1319 => mul_1963
# mul_1320 => mul_1964
# mul_1321 => mul_1965
# mul_1322 => mul_1966
# mul_1323 => mul_1967
# mul_1324 => mul_1968
# mul_2 => mul_1971
# mul_3 => mul_1972
# mul_4 => mul_1973
# mul_5 => mul_1974
# mul_6 => mul_1975
# mul_7 => mul_1976
# mul_8 => mul_1977
# rsqrt => rsqrt_123
# rsqrt_1 => rsqrt_124
# rsqrt_2 => rsqrt_125
# type_as => convert_element_type_447
# type_as_1 => convert_element_type_449
# type_as_2 => convert_element_type_451
triton_red_fused__to_copy_add_mean_mul_rsqrt_76 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_76', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: 'i32', 72: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_76', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(71, 72))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_76(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (104*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (26 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (27 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (28 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (52 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (53 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (54 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (78 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (79 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (80 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (29 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (30 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (55 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (56 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (81 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (82 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (31 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (32 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (57 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (58 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (83 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (84 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (33 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (34 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (59 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (60 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (85 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (86 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (35 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (36 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (61 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (62 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (87 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (88 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (37 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (38 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (63 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (64 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (89 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (90 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (39 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (40 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (65 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (66 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (91 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (92 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (41 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (42 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (67 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (68 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (93 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (94 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (43 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (44 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (69 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (70 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (95 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (96 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (45 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (46 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (71 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (72 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (97 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (98 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (47 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (48 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (73 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (74 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (99 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (100 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (49 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (50 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (75 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (76 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (101 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (102 + (104*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    _tmp698 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp695 = tmp682.to(tl.float32)
        tmp696 = tmp695 * tmp695
        tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
        tmp699 = _tmp698 + tmp697
        _tmp698 = tl.where(rmask, tmp699, _tmp698)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp658, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp670, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp682, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp694, rmask)
    tmp698 = tl.sum(_tmp698, 1)[:, None]
    _tmp715 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp700 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr61 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp711 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp701 = tmp700.to(tl.float32)
        tmp702 = 4096.0
        tmp703 = tmp698 / tmp702
        tmp704 = 1e-05
        tmp705 = tmp703 + tmp704
        tmp706 = tl.math.rsqrt(tmp705)
        tmp707 = tmp701 * tmp706
        tmp708 = tmp707.to(tl.float32)
        tmp710 = tmp708 * tmp709
        tmp712 = tmp711.to(tl.float32)
        tmp713 = tmp712 * tmp712
        tmp714 = tl.broadcast_to(tmp713, [XBLOCK, RBLOCK])
        tmp716 = _tmp715 + tmp714
        _tmp715 = tl.where(rmask, tmp716, _tmp715)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp710, rmask)
    tmp715 = tl.sum(_tmp715, 1)[:, None]
    _tmp732 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp717 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp726 = tl.load(in_ptr62 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp728 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp718 = tmp717.to(tl.float32)
        tmp719 = 4096.0
        tmp720 = tmp715 / tmp719
        tmp721 = 1e-05
        tmp722 = tmp720 + tmp721
        tmp723 = tl.math.rsqrt(tmp722)
        tmp724 = tmp718 * tmp723
        tmp725 = tmp724.to(tl.float32)
        tmp727 = tmp725 * tmp726
        tmp729 = tmp728.to(tl.float32)
        tmp730 = tmp729 * tmp729
        tmp731 = tl.broadcast_to(tmp730, [XBLOCK, RBLOCK])
        tmp733 = _tmp732 + tmp731
        _tmp732 = tl.where(rmask, tmp733, _tmp732)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp727, rmask)
    tmp732 = tl.sum(_tmp732, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp734 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp743 = tl.load(in_ptr63 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp735 = tmp734.to(tl.float32)
        tmp736 = 4096.0
        tmp737 = tmp732 / tmp736
        tmp738 = 1e-05
        tmp739 = tmp737 + tmp738
        tmp740 = tl.math.rsqrt(tmp739)
        tmp741 = tmp735 * tmp740
        tmp742 = tmp741.to(tl.float32)
        tmp744 = tmp742 * tmp743
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp744, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/xy/cxyknic22jo2yk4nacatcja7st3p4xokcukl4hdmbaen6fqby4j4.py
# Source Nodes: [l__mod___dynamic_dense_25_act, l__mod___dynamic_dense_25_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_25_act => add_1582, convert_element_type_462, convert_element_type_463, erf_25, mul_1993, mul_1994, mul_1995
# l__mod___dynamic_dense_25_w2 => view_907
triton_poi_fused_gelu_view_77 = async_compile.triton('triton_poi_fused_gelu_view_77', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_77', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_77(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 884736
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/4y/c4yelu54pdqpp4dx3pzr3af5rgtct5il6j6jpjvzrphabjtitsug.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1352, add_1353, add_1354, add_1355, add_1356, add_1357, add_1358, add_1359, add_1360, add_1361, add_1362, add_1363, add_1364, add_1365, add_1366, add_1367, add_1368, add_1369, add_1370, add_1371, add_1372, add_1373, add_1374, add_1375, add_1376, add_1377, add_1378, add_1379, add_1380, add_1381, add_1382, add_1383, add_1384, add_1385, add_1386, add_1387, add_1388, add_1389, add_1390, add_1391, add_1392, add_1393, add_1394, add_1395, add_1396, add_1397, add_1398, add_1399, add_1400, add_1401, add_1402, add_1403, add_1404, add_1405, add_1406, add_1407, add_1408, add_1409, add_1410, add_1411, add_1412, add_1413, add_1414, add_1415, add_1416, add_1417, add_1418, add_1419, add_1420, add_1421, add_1422, add_1423, add_1424, add_1425, add_1426, add_1427, add_1428, add_1429, add_1430, add_1431, add_1432, add_1433, add_1434, add_1435, add_1436, add_1437, add_1438, add_1439, add_1440, add_1441, add_1442, add_1443, add_1444, add_1445, add_1446, add_1447, add_1448, add_1449, add_1450, add_1451, add_1452, add_1453, add_1454, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1326, mul_1327, mul_1328, mul_1329, mul_1330, mul_1331, mul_1332, mul_1333, mul_1334, mul_1335, mul_1336, mul_1337, mul_1338, mul_1339, mul_1340, mul_1341, mul_1342, mul_1343, mul_1344, mul_1345, mul_1346, mul_1347, mul_1348, mul_1349, mul_1350, mul_1351, mul_1352, mul_1353, mul_1354, mul_1355, mul_1356, mul_1357, mul_1358, mul_1359, mul_1360, mul_1361, mul_1362, mul_1363, mul_1364, mul_1365, mul_1366, mul_1367, mul_1368, mul_1369, mul_1370, mul_1371, mul_1372, mul_1373, mul_1374, mul_1375, mul_1376, mul_1377, mul_1378, mul_1379, mul_1380, mul_1381, mul_1382, mul_1383, mul_1384, mul_1385, mul_1386, mul_1387, mul_1388, mul_1389, mul_1390, mul_1391, mul_1392, mul_1393, mul_1394, mul_1395, mul_1396, mul_1397, mul_1398, mul_1399, mul_1400, mul_1401, mul_1402, mul_1403, mul_1404, mul_1405, mul_1406, mul_1407, mul_1408, mul_1409, mul_1410, mul_1411, mul_1412, mul_1413, mul_1414, mul_1415, mul_1416, mul_1417, mul_1418, mul_1419, mul_1420, mul_1421, mul_1422, mul_1423, mul_1424, mul_1425, mul_1426, mul_1427, mul_1428, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1688
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1352 => add_1584
# add_1353 => add_1585
# add_1354 => add_1586
# add_1355 => add_1587
# add_1356 => add_1588
# add_1357 => add_1589
# add_1358 => add_1590
# add_1359 => add_1591
# add_1360 => add_1592
# add_1361 => add_1593
# add_1362 => add_1594
# add_1363 => add_1595
# add_1364 => add_1596
# add_1365 => add_1597
# add_1366 => add_1598
# add_1367 => add_1599
# add_1368 => add_1600
# add_1369 => add_1601
# add_1370 => add_1602
# add_1371 => add_1603
# add_1372 => add_1604
# add_1373 => add_1605
# add_1374 => add_1606
# add_1375 => add_1607
# add_1376 => add_1608
# add_1377 => add_1609
# add_1378 => add_1610
# add_1379 => add_1611
# add_1380 => add_1612
# add_1381 => add_1613
# add_1382 => add_1614
# add_1383 => add_1615
# add_1384 => add_1616
# add_1385 => add_1617
# add_1386 => add_1618
# add_1387 => add_1619
# add_1388 => add_1620
# add_1389 => add_1621
# add_1390 => add_1622
# add_1391 => add_1623
# add_1392 => add_1624
# add_1393 => add_1625
# add_1394 => add_1626
# add_1395 => add_1627
# add_1396 => add_1628
# add_1397 => add_1629
# add_1398 => add_1630
# add_1399 => add_1631
# add_1400 => add_1632
# add_1401 => add_1633
# add_1402 => add_1634
# add_1403 => add_1635
# add_1404 => add_1636, add_1689
# add_1405 => add_1637
# add_1406 => add_1638
# add_1407 => add_1639
# add_1408 => add_1640
# add_1409 => add_1641
# add_1410 => add_1642
# add_1411 => add_1643
# add_1412 => add_1644
# add_1413 => add_1645
# add_1414 => add_1646
# add_1415 => add_1647
# add_1416 => add_1648
# add_1417 => add_1649
# add_1418 => add_1650
# add_1419 => add_1651
# add_1420 => add_1652
# add_1421 => add_1653
# add_1422 => add_1654
# add_1423 => add_1655
# add_1424 => add_1656
# add_1425 => add_1657
# add_1426 => add_1658
# add_1427 => add_1659
# add_1428 => add_1660
# add_1429 => add_1661
# add_1430 => add_1662, add_1690
# add_1431 => add_1663
# add_1432 => add_1664
# add_1433 => add_1665
# add_1434 => add_1666
# add_1435 => add_1667
# add_1436 => add_1668
# add_1437 => add_1669
# add_1438 => add_1670
# add_1439 => add_1671
# add_1440 => add_1672
# add_1441 => add_1673
# add_1442 => add_1674
# add_1443 => add_1675
# add_1444 => add_1676
# add_1445 => add_1677
# add_1446 => add_1678
# add_1447 => add_1679
# add_1448 => add_1680
# add_1449 => add_1681
# add_1450 => add_1682
# add_1451 => add_1683
# add_1452 => add_1684
# add_1453 => add_1685
# add_1454 => add_1686
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_464
# float_2 => convert_element_type_466
# float_3 => convert_element_type_468
# mean => mean_128
# mean_1 => mean_129
# mean_2 => mean_130
# mul => mul_2100
# mul_1 => mul_2101
# mul_1326 => mul_1996
# mul_1327 => mul_1997
# mul_1328 => mul_1998
# mul_1329 => mul_1999
# mul_1330 => mul_2000
# mul_1331 => mul_2001
# mul_1332 => mul_2002
# mul_1333 => mul_2003
# mul_1334 => mul_2004
# mul_1335 => mul_2005
# mul_1336 => mul_2006
# mul_1337 => mul_2007
# mul_1338 => mul_2008
# mul_1339 => mul_2009
# mul_1340 => mul_2010
# mul_1341 => mul_2011
# mul_1342 => mul_2012
# mul_1343 => mul_2013
# mul_1344 => mul_2014
# mul_1345 => mul_2015
# mul_1346 => mul_2016
# mul_1347 => mul_2017
# mul_1348 => mul_2018
# mul_1349 => mul_2019
# mul_1350 => mul_2020
# mul_1351 => mul_2021
# mul_1352 => mul_2022
# mul_1353 => mul_2023
# mul_1354 => mul_2024
# mul_1355 => mul_2025
# mul_1356 => mul_2026
# mul_1357 => mul_2027
# mul_1358 => mul_2028
# mul_1359 => mul_2029
# mul_1360 => mul_2030
# mul_1361 => mul_2031
# mul_1362 => mul_2032
# mul_1363 => mul_2033
# mul_1364 => mul_2034
# mul_1365 => mul_2035
# mul_1366 => mul_2036
# mul_1367 => mul_2037
# mul_1368 => mul_2038
# mul_1369 => mul_2039
# mul_1370 => mul_2040
# mul_1371 => mul_2041
# mul_1372 => mul_2042
# mul_1373 => mul_2043
# mul_1374 => mul_2044
# mul_1375 => mul_2045
# mul_1376 => mul_2046
# mul_1377 => mul_2047
# mul_1378 => mul_2048
# mul_1379 => mul_2049
# mul_1380 => mul_2050
# mul_1381 => mul_2051
# mul_1382 => mul_2052
# mul_1383 => mul_2053
# mul_1384 => mul_2054
# mul_1385 => mul_2055
# mul_1386 => mul_2056
# mul_1387 => mul_2057
# mul_1388 => mul_2058
# mul_1389 => mul_2059
# mul_1390 => mul_2060
# mul_1391 => mul_2061
# mul_1392 => mul_2062
# mul_1393 => mul_2063
# mul_1394 => mul_2064
# mul_1395 => mul_2065
# mul_1396 => mul_2066
# mul_1397 => mul_2067
# mul_1398 => mul_2068
# mul_1399 => mul_2069
# mul_1400 => mul_2070
# mul_1401 => mul_2071
# mul_1402 => mul_2072
# mul_1403 => mul_2073
# mul_1404 => mul_2074
# mul_1405 => mul_2075
# mul_1406 => mul_2076
# mul_1407 => mul_2077
# mul_1408 => mul_2078
# mul_1409 => mul_2079
# mul_1410 => mul_2080
# mul_1411 => mul_2081
# mul_1412 => mul_2082
# mul_1413 => mul_2083
# mul_1414 => mul_2084
# mul_1415 => mul_2085
# mul_1416 => mul_2086
# mul_1417 => mul_2087
# mul_1418 => mul_2088
# mul_1419 => mul_2089
# mul_1420 => mul_2090
# mul_1421 => mul_2091
# mul_1422 => mul_2092
# mul_1423 => mul_2093
# mul_1424 => mul_2094
# mul_1425 => mul_2095
# mul_1426 => mul_2096
# mul_1427 => mul_2097
# mul_1428 => mul_2098
# mul_2 => mul_2102
# mul_3 => mul_2103
# mul_4 => mul_2104
# mul_5 => mul_2105
# mul_6 => mul_2106
# mul_7 => mul_2107
# mul_8 => mul_2108
# rsqrt => rsqrt_128
# rsqrt_1 => rsqrt_129
# rsqrt_2 => rsqrt_130
# type_as => convert_element_type_465
# type_as_1 => convert_element_type_467
# type_as_2 => convert_element_type_469
triton_red_fused__to_copy_add_mean_mul_rsqrt_78 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_78', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: 'i32', 74: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_78', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(73, 74))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_78(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (108*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (27 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (28 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (29 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (54 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (55 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (56 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (81 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (82 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (83 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (30 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (31 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (57 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (58 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (84 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (85 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (32 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (33 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (59 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (60 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (86 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (87 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (34 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (35 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (61 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (62 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (88 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (89 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (36 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (37 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (63 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (64 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (90 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (91 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (38 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (39 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (65 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (66 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (92 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (93 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (40 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (41 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (67 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (68 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (94 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (95 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (42 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (43 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (69 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (70 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (96 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (97 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (44 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (45 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (71 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (72 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (98 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (99 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (46 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (47 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (73 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (74 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (100 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (101 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (48 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (49 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (75 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (76 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (102 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (103 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (50 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (51 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (77 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (78 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (104 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (105 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp705 = tl.load(in_ptr0 + (52 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp706 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp707 = tl.broadcast_to(tmp706, [XBLOCK, RBLOCK])
    tmp712 = tl.load(in_ptr0 + (79 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp713 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp714 = tl.broadcast_to(tmp713, [XBLOCK, RBLOCK])
    _tmp721 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp704 = tmp703.to(tl.float32)
        tmp708 = tmp705 + tmp707
        tmp709 = tmp708 * tmp701
        tmp710 = tmp670 + tmp709
        tmp711 = tmp710.to(tl.float32)
        tmp715 = tmp712 + tmp714
        tmp716 = tmp715 * tmp701
        tmp717 = tmp682 + tmp716
        tmp718 = tmp717.to(tl.float32)
        tmp719 = tmp704 * tmp704
        tmp720 = tl.broadcast_to(tmp719, [XBLOCK, RBLOCK])
        tmp722 = _tmp721 + tmp720
        _tmp721 = tl.where(rmask, tmp722, _tmp721)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp694, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp704, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp711, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp718, rmask)
    tmp721 = tl.sum(_tmp721, 1)[:, None]
    _tmp736 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp723 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp731 = tl.load(in_ptr63 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp733 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp724 = 4096.0
        tmp725 = tmp721 / tmp724
        tmp726 = 1e-05
        tmp727 = tmp725 + tmp726
        tmp728 = tl.math.rsqrt(tmp727)
        tmp729 = tmp723 * tmp728
        tmp730 = tmp729.to(tl.float32)
        tmp732 = tmp730 * tmp731
        tmp734 = tmp733 * tmp733
        tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
        tmp737 = _tmp736 + tmp735
        _tmp736 = tl.where(rmask, tmp737, _tmp736)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp732, rmask)
    tmp736 = tl.sum(_tmp736, 1)[:, None]
    _tmp751 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp738 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp746 = tl.load(in_ptr64 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp748 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp739 = 4096.0
        tmp740 = tmp736 / tmp739
        tmp741 = 1e-05
        tmp742 = tmp740 + tmp741
        tmp743 = tl.math.rsqrt(tmp742)
        tmp744 = tmp738 * tmp743
        tmp745 = tmp744.to(tl.float32)
        tmp747 = tmp745 * tmp746
        tmp749 = tmp748 * tmp748
        tmp750 = tl.broadcast_to(tmp749, [XBLOCK, RBLOCK])
        tmp752 = _tmp751 + tmp750
        _tmp751 = tl.where(rmask, tmp752, _tmp751)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp747, rmask)
    tmp751 = tl.sum(_tmp751, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp753 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp761 = tl.load(in_ptr65 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp754 = 4096.0
        tmp755 = tmp751 / tmp754
        tmp756 = 1e-05
        tmp757 = tmp755 + tmp756
        tmp758 = tl.math.rsqrt(tmp757)
        tmp759 = tmp753 * tmp758
        tmp760 = tmp759.to(tl.float32)
        tmp762 = tmp760 * tmp761
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp762, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ge/cgecnbimjvnexdlzem4nwbkgd7jvftvkkjn2vp773ng4gujmwu42.py
# Source Nodes: [add_1250, add_1455, add_1456, add_1457, float_6, mean_3, mul_1429, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1250 => add_1469
# add_1455 => add_1687
# add_1456 => add_1693
# add_1457 => add_1694
# float_6 => convert_element_type_476
# mean_3 => mean_131
# mul_1429 => mul_2099
# mul_18 => mul_2118
# mul_19 => mul_2119
# mul_20 => mul_2120
# rsqrt_3 => rsqrt_131
# type_as_5 => convert_element_type_477
triton_red_fused__to_copy_add_mean_mul_rsqrt_79 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_79', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_79', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_79(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (106 + (108*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/cp/ccpgtf5g64kvpyfaaglidfsye4ilue4ics473s2i5s2kjuw7tyyg.py
# Source Nodes: [l__mod___dynamic_dense_26_act, l__mod___dynamic_dense_26_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_26_act => add_1697, convert_element_type_480, convert_element_type_481, erf_26, mul_2124, mul_2125, mul_2126
# l__mod___dynamic_dense_26_w2 => view_942
triton_poi_fused_gelu_view_80 = async_compile.triton('triton_poi_fused_gelu_view_80', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_80', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_80(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 917504
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/nn/cnnx3qmdbov4j4qmzd3fn5dbll2ctki4vq656bw5uc5fknsmobkf.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1459, add_1460, add_1461, add_1462, add_1463, add_1464, add_1465, add_1466, add_1467, add_1468, add_1469, add_1470, add_1471, add_1472, add_1473, add_1474, add_1475, add_1476, add_1477, add_1478, add_1479, add_1480, add_1481, add_1482, add_1483, add_1484, add_1485, add_1486, add_1487, add_1488, add_1489, add_1490, add_1491, add_1492, add_1493, add_1494, add_1495, add_1496, add_1497, add_1498, add_1499, add_1500, add_1501, add_1502, add_1503, add_1504, add_1505, add_1506, add_1507, add_1508, add_1509, add_1510, add_1511, add_1512, add_1513, add_1514, add_1515, add_1516, add_1517, add_1518, add_1519, add_1520, add_1521, add_1522, add_1523, add_1524, add_1525, add_1526, add_1527, add_1528, add_1529, add_1530, add_1531, add_1532, add_1533, add_1534, add_1535, add_1536, add_1537, add_1538, add_1539, add_1540, add_1541, add_1542, add_1543, add_1544, add_1545, add_1546, add_1547, add_1548, add_1549, add_1550, add_1551, add_1552, add_1553, add_1554, add_1555, add_1556, add_1557, add_1558, add_1559, add_1560, add_1561, add_1562, add_1563, add_1564, add_1565, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1431, mul_1432, mul_1433, mul_1434, mul_1435, mul_1436, mul_1437, mul_1438, mul_1439, mul_1440, mul_1441, mul_1442, mul_1443, mul_1444, mul_1445, mul_1446, mul_1447, mul_1448, mul_1449, mul_1450, mul_1451, mul_1452, mul_1453, mul_1454, mul_1455, mul_1456, mul_1457, mul_1458, mul_1459, mul_1460, mul_1461, mul_1462, mul_1463, mul_1464, mul_1465, mul_1466, mul_1467, mul_1468, mul_1469, mul_1470, mul_1471, mul_1472, mul_1473, mul_1474, mul_1475, mul_1476, mul_1477, mul_1478, mul_1479, mul_1480, mul_1481, mul_1482, mul_1483, mul_1484, mul_1485, mul_1486, mul_1487, mul_1488, mul_1489, mul_1490, mul_1491, mul_1492, mul_1493, mul_1494, mul_1495, mul_1496, mul_1497, mul_1498, mul_1499, mul_1500, mul_1501, mul_1502, mul_1503, mul_1504, mul_1505, mul_1506, mul_1507, mul_1508, mul_1509, mul_1510, mul_1511, mul_1512, mul_1513, mul_1514, mul_1515, mul_1516, mul_1517, mul_1518, mul_1519, mul_1520, mul_1521, mul_1522, mul_1523, mul_1524, mul_1525, mul_1526, mul_1527, mul_1528, mul_1529, mul_1530, mul_1531, mul_1532, mul_1533, mul_1534, mul_1535, mul_1536, mul_1537, mul_1538, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1807
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1699
# add_1459 => add_1700
# add_1460 => add_1701
# add_1461 => add_1702
# add_1462 => add_1703
# add_1463 => add_1704
# add_1464 => add_1705
# add_1465 => add_1706
# add_1466 => add_1707
# add_1467 => add_1708
# add_1468 => add_1709
# add_1469 => add_1710
# add_1470 => add_1711
# add_1471 => add_1712
# add_1472 => add_1713
# add_1473 => add_1714
# add_1474 => add_1715
# add_1475 => add_1716
# add_1476 => add_1717
# add_1477 => add_1718
# add_1478 => add_1719
# add_1479 => add_1720
# add_1480 => add_1721
# add_1481 => add_1722
# add_1482 => add_1723
# add_1483 => add_1724
# add_1484 => add_1725
# add_1485 => add_1726
# add_1486 => add_1727
# add_1487 => add_1728
# add_1488 => add_1729
# add_1489 => add_1730
# add_1490 => add_1731
# add_1491 => add_1732
# add_1492 => add_1733
# add_1493 => add_1734
# add_1494 => add_1735
# add_1495 => add_1736
# add_1496 => add_1737
# add_1497 => add_1738
# add_1498 => add_1739
# add_1499 => add_1740
# add_1500 => add_1741
# add_1501 => add_1742
# add_1502 => add_1743
# add_1503 => add_1744
# add_1504 => add_1745
# add_1505 => add_1746
# add_1506 => add_1747
# add_1507 => add_1748
# add_1508 => add_1749
# add_1509 => add_1750
# add_1510 => add_1751
# add_1511 => add_1752
# add_1512 => add_1753, add_1808
# add_1513 => add_1754
# add_1514 => add_1755
# add_1515 => add_1756
# add_1516 => add_1757
# add_1517 => add_1758
# add_1518 => add_1759
# add_1519 => add_1760
# add_1520 => add_1761
# add_1521 => add_1762
# add_1522 => add_1763
# add_1523 => add_1764
# add_1524 => add_1765
# add_1525 => add_1766
# add_1526 => add_1767
# add_1527 => add_1768
# add_1528 => add_1769
# add_1529 => add_1770
# add_1530 => add_1771
# add_1531 => add_1772
# add_1532 => add_1773
# add_1533 => add_1774
# add_1534 => add_1775
# add_1535 => add_1776
# add_1536 => add_1777
# add_1537 => add_1778
# add_1538 => add_1779
# add_1539 => add_1780, add_1809
# add_1540 => add_1781
# add_1541 => add_1782
# add_1542 => add_1783
# add_1543 => add_1784
# add_1544 => add_1785
# add_1545 => add_1786
# add_1546 => add_1787
# add_1547 => add_1788
# add_1548 => add_1789
# add_1549 => add_1790
# add_1550 => add_1791
# add_1551 => add_1792
# add_1552 => add_1793
# add_1553 => add_1794
# add_1554 => add_1795
# add_1555 => add_1796
# add_1556 => add_1797
# add_1557 => add_1798
# add_1558 => add_1799
# add_1559 => add_1800
# add_1560 => add_1801
# add_1561 => add_1802
# add_1562 => add_1803
# add_1563 => add_1804
# add_1564 => add_1805
# add_1565 => add_1806
# add_162 => add_237
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_482
# float_2 => convert_element_type_484
# float_3 => convert_element_type_486
# mean => mean_133
# mean_1 => mean_134
# mean_2 => mean_135
# mul => mul_2235
# mul_1 => mul_2236
# mul_1431 => mul_2127
# mul_1432 => mul_2128
# mul_1433 => mul_2129
# mul_1434 => mul_2130
# mul_1435 => mul_2131
# mul_1436 => mul_2132
# mul_1437 => mul_2133
# mul_1438 => mul_2134
# mul_1439 => mul_2135
# mul_1440 => mul_2136
# mul_1441 => mul_2137
# mul_1442 => mul_2138
# mul_1443 => mul_2139
# mul_1444 => mul_2140
# mul_1445 => mul_2141
# mul_1446 => mul_2142
# mul_1447 => mul_2143
# mul_1448 => mul_2144
# mul_1449 => mul_2145
# mul_1450 => mul_2146
# mul_1451 => mul_2147
# mul_1452 => mul_2148
# mul_1453 => mul_2149
# mul_1454 => mul_2150
# mul_1455 => mul_2151
# mul_1456 => mul_2152
# mul_1457 => mul_2153
# mul_1458 => mul_2154
# mul_1459 => mul_2155
# mul_1460 => mul_2156
# mul_1461 => mul_2157
# mul_1462 => mul_2158
# mul_1463 => mul_2159
# mul_1464 => mul_2160
# mul_1465 => mul_2161
# mul_1466 => mul_2162
# mul_1467 => mul_2163
# mul_1468 => mul_2164
# mul_1469 => mul_2165
# mul_1470 => mul_2166
# mul_1471 => mul_2167
# mul_1472 => mul_2168
# mul_1473 => mul_2169
# mul_1474 => mul_2170
# mul_1475 => mul_2171
# mul_1476 => mul_2172
# mul_1477 => mul_2173
# mul_1478 => mul_2174
# mul_1479 => mul_2175
# mul_1480 => mul_2176
# mul_1481 => mul_2177
# mul_1482 => mul_2178
# mul_1483 => mul_2179
# mul_1484 => mul_2180
# mul_1485 => mul_2181
# mul_1486 => mul_2182
# mul_1487 => mul_2183
# mul_1488 => mul_2184
# mul_1489 => mul_2185
# mul_1490 => mul_2186
# mul_1491 => mul_2187
# mul_1492 => mul_2188
# mul_1493 => mul_2189
# mul_1494 => mul_2190
# mul_1495 => mul_2191
# mul_1496 => mul_2192
# mul_1497 => mul_2193
# mul_1498 => mul_2194
# mul_1499 => mul_2195
# mul_1500 => mul_2196
# mul_1501 => mul_2197
# mul_1502 => mul_2198
# mul_1503 => mul_2199
# mul_1504 => mul_2200
# mul_1505 => mul_2201
# mul_1506 => mul_2202
# mul_1507 => mul_2203
# mul_1508 => mul_2204
# mul_1509 => mul_2205
# mul_1510 => mul_2206
# mul_1511 => mul_2207
# mul_1512 => mul_2208
# mul_1513 => mul_2209
# mul_1514 => mul_2210
# mul_1515 => mul_2211
# mul_1516 => mul_2212
# mul_1517 => mul_2213
# mul_1518 => mul_2214
# mul_1519 => mul_2215
# mul_1520 => mul_2216
# mul_1521 => mul_2217
# mul_1522 => mul_2218
# mul_1523 => mul_2219
# mul_1524 => mul_2220
# mul_1525 => mul_2221
# mul_1526 => mul_2222
# mul_1527 => mul_2223
# mul_1528 => mul_2224
# mul_1529 => mul_2225
# mul_1530 => mul_2226
# mul_1531 => mul_2227
# mul_1532 => mul_2228
# mul_1533 => mul_2229
# mul_1534 => mul_2230
# mul_1535 => mul_2231
# mul_1536 => mul_2232
# mul_1537 => mul_2233
# mul_1538 => mul_2234
# mul_2 => mul_2237
# mul_3 => mul_2238
# mul_4 => mul_2239
# mul_5 => mul_2240
# mul_6 => mul_2241
# mul_7 => mul_2242
# mul_8 => mul_2243
# rsqrt => rsqrt_133
# rsqrt_1 => rsqrt_134
# rsqrt_2 => rsqrt_135
# type_as => convert_element_type_483
# type_as_1 => convert_element_type_485
# type_as_2 => convert_element_type_487
triton_red_fused__to_copy_add_mean_mul_rsqrt_81 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_81', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: 'i32', 77: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_81', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(76, 77))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_81(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (112*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (28 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (29 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (30 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (56 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (57 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (58 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (84 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (85 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (86 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (31 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (32 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (59 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (60 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (87 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (88 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (33 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (34 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (61 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (62 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (89 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (90 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (35 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (36 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (63 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (64 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (91 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (92 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (37 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (38 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (65 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (66 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (93 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (94 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (39 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (40 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (67 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (68 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (95 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (96 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (41 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (42 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (69 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (70 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (97 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (98 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (43 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (44 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (71 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (72 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (99 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (100 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (45 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (46 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (73 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (74 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (101 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (102 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (47 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (48 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (75 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (76 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (103 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (104 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (49 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (50 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (77 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (78 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (105 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (106 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (51 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (52 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (79 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (80 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (107 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (107)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (108 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (108)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp704 = tl.load(in_ptr0 + (26 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp705 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp706 = tl.broadcast_to(tmp705, [XBLOCK, RBLOCK])
    tmp715 = tl.load(in_ptr0 + (53 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp716 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp717 = tl.broadcast_to(tmp716, [XBLOCK, RBLOCK])
    tmp721 = tl.load(in_ptr0 + (54 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp722 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp723 = tl.broadcast_to(tmp722, [XBLOCK, RBLOCK])
    tmp727 = tl.load(in_ptr0 + (81 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp728 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp729 = tl.broadcast_to(tmp728, [XBLOCK, RBLOCK])
    tmp733 = tl.load(in_ptr0 + (82 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp734 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
    tmp739 = tl.load(in_ptr0 + (109 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp740 = tl.load(in_ptr1 + (109)).to(tl.float32)
    tmp741 = tl.broadcast_to(tmp740, [XBLOCK, RBLOCK])
    tmp745 = tl.load(in_ptr0 + (110 + (112*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp746 = tl.load(in_ptr1 + (110)).to(tl.float32)
    tmp747 = tl.broadcast_to(tmp746, [XBLOCK, RBLOCK])
    _tmp754 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp708 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp711 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp707 = tmp704 + tmp706
        tmp710 = tmp708 + tmp709
        tmp712 = tmp710 + tmp711
        tmp713 = tmp707 * tmp712
        tmp714 = tmp703 + tmp713
        tmp718 = tmp715 + tmp717
        tmp719 = tmp718 * tmp701
        tmp720 = tmp670 + tmp719
        tmp724 = tmp721 + tmp723
        tmp725 = tmp724 * tmp712
        tmp726 = tmp720 + tmp725
        tmp730 = tmp727 + tmp729
        tmp731 = tmp730 * tmp701
        tmp732 = tmp682 + tmp731
        tmp736 = tmp733 + tmp735
        tmp737 = tmp736 * tmp712
        tmp738 = tmp732 + tmp737
        tmp742 = tmp739 + tmp741
        tmp743 = tmp742 * tmp701
        tmp744 = tmp694 + tmp743
        tmp748 = tmp745 + tmp747
        tmp749 = tmp748 * tmp712
        tmp750 = tmp744 + tmp749
        tmp751 = tmp738.to(tl.float32)
        tmp752 = tmp751 * tmp751
        tmp753 = tl.broadcast_to(tmp752, [XBLOCK, RBLOCK])
        tmp755 = _tmp754 + tmp753
        _tmp754 = tl.where(rmask, tmp755, _tmp754)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp714, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp726, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp738, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp750, rmask)
    tmp754 = tl.sum(_tmp754, 1)[:, None]
    _tmp771 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp756 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp765 = tl.load(in_ptr66 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp767 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp757 = tmp756.to(tl.float32)
        tmp758 = 4096.0
        tmp759 = tmp754 / tmp758
        tmp760 = 1e-05
        tmp761 = tmp759 + tmp760
        tmp762 = tl.math.rsqrt(tmp761)
        tmp763 = tmp757 * tmp762
        tmp764 = tmp763.to(tl.float32)
        tmp766 = tmp764 * tmp765
        tmp768 = tmp767.to(tl.float32)
        tmp769 = tmp768 * tmp768
        tmp770 = tl.broadcast_to(tmp769, [XBLOCK, RBLOCK])
        tmp772 = _tmp771 + tmp770
        _tmp771 = tl.where(rmask, tmp772, _tmp771)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp766, rmask)
    tmp771 = tl.sum(_tmp771, 1)[:, None]
    _tmp788 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp773 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp782 = tl.load(in_ptr67 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp784 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp774 = tmp773.to(tl.float32)
        tmp775 = 4096.0
        tmp776 = tmp771 / tmp775
        tmp777 = 1e-05
        tmp778 = tmp776 + tmp777
        tmp779 = tl.math.rsqrt(tmp778)
        tmp780 = tmp774 * tmp779
        tmp781 = tmp780.to(tl.float32)
        tmp783 = tmp781 * tmp782
        tmp785 = tmp784.to(tl.float32)
        tmp786 = tmp785 * tmp785
        tmp787 = tl.broadcast_to(tmp786, [XBLOCK, RBLOCK])
        tmp789 = _tmp788 + tmp787
        _tmp788 = tl.where(rmask, tmp789, _tmp788)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp783, rmask)
    tmp788 = tl.sum(_tmp788, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp790 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp799 = tl.load(in_ptr68 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp791 = tmp790.to(tl.float32)
        tmp792 = 4096.0
        tmp793 = tmp788 / tmp792
        tmp794 = 1e-05
        tmp795 = tmp793 + tmp794
        tmp796 = tl.math.rsqrt(tmp795)
        tmp797 = tmp791 * tmp796
        tmp798 = tmp797.to(tl.float32)
        tmp800 = tmp798 * tmp799
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp800, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/bs/cbsfureebowxmuq6mjnxchqznr4sovzdxnmckayuhyzuboepm57m.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_82 = async_compile.triton('triton_poi_fused_82', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[4096, 128], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_82', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_82(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 116
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (4096*x1)), xmask, eviction_policy='evict_last').to(tl.float32)
    tl.store(out_ptr0 + (x1 + (120*y0)), tmp0, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/pn/cpnmzuc2pheerqpqszupg2ccrvzq5k2pcs4horv6chlhgsfeipoo.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_83 = async_compile.triton('triton_poi_fused_83', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16384], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_83', 'configs': [instance_descriptor(divisible_by_16=(1,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_83(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 4
    x1 = (xindex // 4)
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0 + (120*x1)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/55/c55mxxdwzrf45vqdido6tm342rogwivmzl6vzhwx3x5fai4vphf7.py
# Source Nodes: [l__mod___dynamic_dense_27_act, l__mod___dynamic_dense_27_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_27_act => add_1816, convert_element_type_498, convert_element_type_499, erf_27, mul_2259, mul_2260, mul_2261
# l__mod___dynamic_dense_27_w2 => view_977
triton_poi_fused_gelu_view_84 = async_compile.triton('triton_poi_fused_gelu_view_84', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_84', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_84(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 950272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 116
    x1 = (xindex // 116)
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (120*x1)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x2), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/t6/ct6v7nttxrgx3bndibd5xqwzmyiqrvmnb3bxp2j4k5ryolelarls.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1568, add_1569, add_1570, add_1571, add_1572, add_1573, add_1574, add_1575, add_1576, add_1577, add_1578, add_1579, add_1580, add_1581, add_1582, add_1583, add_1584, add_1585, add_1586, add_1587, add_1588, add_1589, add_1590, add_1591, add_1592, add_1593, add_1594, add_1595, add_1596, add_1597, add_1598, add_1599, add_1600, add_1601, add_1602, add_1603, add_1604, add_1605, add_1606, add_1607, add_1608, add_1609, add_1610, add_1611, add_1612, add_1613, add_1614, add_1615, add_1616, add_1617, add_1618, add_1619, add_162, add_1620, add_1621, add_1622, add_1623, add_1624, add_1625, add_1626, add_1627, add_1628, add_1629, add_1630, add_1631, add_1632, add_1633, add_1634, add_1635, add_1636, add_1637, add_1638, add_1639, add_1640, add_1641, add_1642, add_1643, add_1644, add_1645, add_1646, add_1647, add_1648, add_1649, add_1650, add_1651, add_1652, add_1653, add_1654, add_1655, add_1656, add_1657, add_1658, add_1659, add_1660, add_1661, add_1662, add_1663, add_1664, add_1665, add_1666, add_1667, add_1668, add_1669, add_1670, add_1671, add_1672, add_1673, add_1674, add_1675, add_1676, add_1677, add_1678, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1540, mul_1541, mul_1542, mul_1543, mul_1544, mul_1545, mul_1546, mul_1547, mul_1548, mul_1549, mul_1550, mul_1551, mul_1552, mul_1553, mul_1554, mul_1555, mul_1556, mul_1557, mul_1558, mul_1559, mul_1560, mul_1561, mul_1562, mul_1563, mul_1564, mul_1565, mul_1566, mul_1567, mul_1568, mul_1569, mul_1570, mul_1571, mul_1572, mul_1573, mul_1574, mul_1575, mul_1576, mul_1577, mul_1578, mul_1579, mul_1580, mul_1581, mul_1582, mul_1583, mul_1584, mul_1585, mul_1586, mul_1587, mul_1588, mul_1589, mul_1590, mul_1591, mul_1592, mul_1593, mul_1594, mul_1595, mul_1596, mul_1597, mul_1598, mul_1599, mul_1600, mul_1601, mul_1602, mul_1603, mul_1604, mul_1605, mul_1606, mul_1607, mul_1608, mul_1609, mul_1610, mul_1611, mul_1612, mul_1613, mul_1614, mul_1615, mul_1616, mul_1617, mul_1618, mul_1619, mul_1620, mul_1621, mul_1622, mul_1623, mul_1624, mul_1625, mul_1626, mul_1627, mul_1628, mul_1629, mul_1630, mul_1631, mul_1632, mul_1633, mul_1634, mul_1635, mul_1636, mul_1637, mul_1638, mul_1639, mul_1640, mul_1641, mul_1642, mul_1643, mul_1644, mul_1645, mul_1646, mul_1647, mul_1648, mul_1649, mul_1650, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_1930
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1695
# add_1568 => add_1818
# add_1569 => add_1819
# add_1570 => add_1820
# add_1571 => add_1821
# add_1572 => add_1822
# add_1573 => add_1823
# add_1574 => add_1824
# add_1575 => add_1825
# add_1576 => add_1826
# add_1577 => add_1827
# add_1578 => add_1828
# add_1579 => add_1829
# add_1580 => add_1830
# add_1581 => add_1831
# add_1582 => add_1832
# add_1583 => add_1833
# add_1584 => add_1834
# add_1585 => add_1835
# add_1586 => add_1836
# add_1587 => add_1837
# add_1588 => add_1838
# add_1589 => add_1839
# add_1590 => add_1840
# add_1591 => add_1841
# add_1592 => add_1842
# add_1593 => add_1843
# add_1594 => add_1844
# add_1595 => add_1845
# add_1596 => add_1846
# add_1597 => add_1847
# add_1598 => add_1848
# add_1599 => add_1849
# add_1600 => add_1850
# add_1601 => add_1851
# add_1602 => add_1852
# add_1603 => add_1853
# add_1604 => add_1854
# add_1605 => add_1855
# add_1606 => add_1856
# add_1607 => add_1857
# add_1608 => add_1858
# add_1609 => add_1859
# add_1610 => add_1860
# add_1611 => add_1861
# add_1612 => add_1862
# add_1613 => add_1863
# add_1614 => add_1864
# add_1615 => add_1865
# add_1616 => add_1866
# add_1617 => add_1867
# add_1618 => add_1868
# add_1619 => add_1869
# add_162 => add_237
# add_1620 => add_1870
# add_1621 => add_1871
# add_1622 => add_1872
# add_1623 => add_1873
# add_1624 => add_1874, add_1931
# add_1625 => add_1875
# add_1626 => add_1876
# add_1627 => add_1877
# add_1628 => add_1878
# add_1629 => add_1879
# add_1630 => add_1880
# add_1631 => add_1881
# add_1632 => add_1882
# add_1633 => add_1883
# add_1634 => add_1884
# add_1635 => add_1885
# add_1636 => add_1886
# add_1637 => add_1887
# add_1638 => add_1888
# add_1639 => add_1889
# add_1640 => add_1890
# add_1641 => add_1891
# add_1642 => add_1892
# add_1643 => add_1893
# add_1644 => add_1894
# add_1645 => add_1895
# add_1646 => add_1896
# add_1647 => add_1897
# add_1648 => add_1898
# add_1649 => add_1899
# add_1650 => add_1900
# add_1651 => add_1901
# add_1652 => add_1902, add_1932
# add_1653 => add_1903
# add_1654 => add_1904
# add_1655 => add_1905
# add_1656 => add_1906
# add_1657 => add_1907
# add_1658 => add_1908
# add_1659 => add_1909
# add_1660 => add_1910
# add_1661 => add_1911
# add_1662 => add_1912
# add_1663 => add_1913
# add_1664 => add_1914
# add_1665 => add_1915
# add_1666 => add_1916
# add_1667 => add_1917
# add_1668 => add_1918
# add_1669 => add_1919
# add_1670 => add_1920
# add_1671 => add_1921
# add_1672 => add_1922
# add_1673 => add_1923
# add_1674 => add_1924
# add_1675 => add_1925
# add_1676 => add_1926
# add_1677 => add_1927
# add_1678 => add_1928
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_500
# float_2 => convert_element_type_502
# float_3 => convert_element_type_504
# mean => mean_138
# mean_1 => mean_139
# mean_2 => mean_140
# mul => mul_2374
# mul_1 => mul_2375
# mul_1540 => mul_2262
# mul_1541 => mul_2263
# mul_1542 => mul_2264
# mul_1543 => mul_2265
# mul_1544 => mul_2266
# mul_1545 => mul_2267
# mul_1546 => mul_2268
# mul_1547 => mul_2269
# mul_1548 => mul_2270
# mul_1549 => mul_2271
# mul_1550 => mul_2272
# mul_1551 => mul_2273
# mul_1552 => mul_2274
# mul_1553 => mul_2275
# mul_1554 => mul_2276
# mul_1555 => mul_2277
# mul_1556 => mul_2278
# mul_1557 => mul_2279
# mul_1558 => mul_2280
# mul_1559 => mul_2281
# mul_1560 => mul_2282
# mul_1561 => mul_2283
# mul_1562 => mul_2284
# mul_1563 => mul_2285
# mul_1564 => mul_2286
# mul_1565 => mul_2287
# mul_1566 => mul_2288
# mul_1567 => mul_2289
# mul_1568 => mul_2290
# mul_1569 => mul_2291
# mul_1570 => mul_2292
# mul_1571 => mul_2293
# mul_1572 => mul_2294
# mul_1573 => mul_2295
# mul_1574 => mul_2296
# mul_1575 => mul_2297
# mul_1576 => mul_2298
# mul_1577 => mul_2299
# mul_1578 => mul_2300
# mul_1579 => mul_2301
# mul_1580 => mul_2302
# mul_1581 => mul_2303
# mul_1582 => mul_2304
# mul_1583 => mul_2305
# mul_1584 => mul_2306
# mul_1585 => mul_2307
# mul_1586 => mul_2308
# mul_1587 => mul_2309
# mul_1588 => mul_2310
# mul_1589 => mul_2311
# mul_1590 => mul_2312
# mul_1591 => mul_2313
# mul_1592 => mul_2314
# mul_1593 => mul_2315
# mul_1594 => mul_2316
# mul_1595 => mul_2317
# mul_1596 => mul_2318
# mul_1597 => mul_2319
# mul_1598 => mul_2320
# mul_1599 => mul_2321
# mul_1600 => mul_2322
# mul_1601 => mul_2323
# mul_1602 => mul_2324
# mul_1603 => mul_2325
# mul_1604 => mul_2326
# mul_1605 => mul_2327
# mul_1606 => mul_2328
# mul_1607 => mul_2329
# mul_1608 => mul_2330
# mul_1609 => mul_2331
# mul_1610 => mul_2332
# mul_1611 => mul_2333
# mul_1612 => mul_2334
# mul_1613 => mul_2335
# mul_1614 => mul_2336
# mul_1615 => mul_2337
# mul_1616 => mul_2338
# mul_1617 => mul_2339
# mul_1618 => mul_2340
# mul_1619 => mul_2341
# mul_1620 => mul_2342
# mul_1621 => mul_2343
# mul_1622 => mul_2344
# mul_1623 => mul_2345
# mul_1624 => mul_2346
# mul_1625 => mul_2347
# mul_1626 => mul_2348
# mul_1627 => mul_2349
# mul_1628 => mul_2350
# mul_1629 => mul_2351
# mul_1630 => mul_2352
# mul_1631 => mul_2353
# mul_1632 => mul_2354
# mul_1633 => mul_2355
# mul_1634 => mul_2356
# mul_1635 => mul_2357
# mul_1636 => mul_2358
# mul_1637 => mul_2359
# mul_1638 => mul_2360
# mul_1639 => mul_2361
# mul_1640 => mul_2362
# mul_1641 => mul_2363
# mul_1642 => mul_2364
# mul_1643 => mul_2365
# mul_1644 => mul_2366
# mul_1645 => mul_2367
# mul_1646 => mul_2368
# mul_1647 => mul_2369
# mul_1648 => mul_2370
# mul_1649 => mul_2371
# mul_1650 => mul_2372
# mul_2 => mul_2376
# mul_3 => mul_2377
# mul_4 => mul_2378
# mul_5 => mul_2379
# mul_6 => mul_2380
# mul_7 => mul_2381
# mul_8 => mul_2382
# rsqrt => rsqrt_138
# rsqrt_1 => rsqrt_139
# rsqrt_2 => rsqrt_140
# type_as => convert_element_type_501
# type_as_1 => convert_element_type_503
# type_as_2 => convert_element_type_505
triton_red_fused__to_copy_add_mean_mul_rsqrt_85 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_85', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: 'i32', 79: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_85', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(78, 79))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_85(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, out_ptr8, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (116*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (29 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (30 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (31 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (58 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (59 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (60 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (87 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (88 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (89 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (32 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (33 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (61 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (62 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (90 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (91 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (34 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (35 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (63 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (64 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (92 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (93 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (36 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (37 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (65 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (66 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (94 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (95 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (38 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (39 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (67 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (68 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (96 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (97 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (40 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (41 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (69 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (70 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (98 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (99 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (42 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (43 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (71 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (72 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (100 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (101 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (44 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (45 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (73 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (74 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (102 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (103 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (46 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (47 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (75 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (76 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (104 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (105 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (48 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (49 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (77 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (78 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (106 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (107 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (107)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (50 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (51 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (79 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (80 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (108 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (108)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (109 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (109)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (52 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (53 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (81 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (82 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (110 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (110)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (111 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (111)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp704 = tl.load(in_ptr0 + (26 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp705 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp706 = tl.broadcast_to(tmp705, [XBLOCK, RBLOCK])
    tmp715 = tl.load(in_ptr0 + (54 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp716 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp717 = tl.broadcast_to(tmp716, [XBLOCK, RBLOCK])
    tmp721 = tl.load(in_ptr0 + (55 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp722 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp723 = tl.broadcast_to(tmp722, [XBLOCK, RBLOCK])
    tmp727 = tl.load(in_ptr0 + (83 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp728 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp729 = tl.broadcast_to(tmp728, [XBLOCK, RBLOCK])
    tmp733 = tl.load(in_ptr0 + (84 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp734 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
    tmp739 = tl.load(in_ptr0 + (112 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp740 = tl.load(in_ptr1 + (112)).to(tl.float32)
    tmp741 = tl.broadcast_to(tmp740, [XBLOCK, RBLOCK])
    tmp745 = tl.load(in_ptr0 + (113 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp746 = tl.load(in_ptr1 + (113)).to(tl.float32)
    tmp747 = tl.broadcast_to(tmp746, [XBLOCK, RBLOCK])
    tmp751 = tl.load(in_ptr0 + (27 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp752 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp753 = tl.broadcast_to(tmp752, [XBLOCK, RBLOCK])
    tmp761 = tl.load(in_ptr0 + (56 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp762 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp763 = tl.broadcast_to(tmp762, [XBLOCK, RBLOCK])
    tmp768 = tl.load(in_ptr0 + (85 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp769 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp770 = tl.broadcast_to(tmp769, [XBLOCK, RBLOCK])
    _tmp777 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp708 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp711 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp755 = tl.load(in_ptr66 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp756 = tl.load(in_ptr67 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp707 = tmp704 + tmp706
        tmp710 = tmp708 + tmp709
        tmp712 = tmp710 + tmp711
        tmp713 = tmp707 * tmp712
        tmp714 = tmp703 + tmp713
        tmp718 = tmp715 + tmp717
        tmp719 = tmp718 * tmp701
        tmp720 = tmp670 + tmp719
        tmp724 = tmp721 + tmp723
        tmp725 = tmp724 * tmp712
        tmp726 = tmp720 + tmp725
        tmp730 = tmp727 + tmp729
        tmp731 = tmp730 * tmp701
        tmp732 = tmp682 + tmp731
        tmp736 = tmp733 + tmp735
        tmp737 = tmp736 * tmp712
        tmp738 = tmp732 + tmp737
        tmp742 = tmp739 + tmp741
        tmp743 = tmp742 * tmp701
        tmp744 = tmp694 + tmp743
        tmp748 = tmp745 + tmp747
        tmp749 = tmp748 * tmp712
        tmp750 = tmp744 + tmp749
        tmp754 = tmp751 + tmp753
        tmp757 = tmp755 + tmp756
        tmp758 = tmp754 * tmp757
        tmp759 = tmp714 + tmp758
        tmp760 = tmp759.to(tl.float32)
        tmp764 = tmp761 + tmp763
        tmp765 = tmp764 * tmp757
        tmp766 = tmp726 + tmp765
        tmp767 = tmp766.to(tl.float32)
        tmp771 = tmp768 + tmp770
        tmp772 = tmp771 * tmp757
        tmp773 = tmp738 + tmp772
        tmp774 = tmp773.to(tl.float32)
        tmp775 = tmp760 * tmp760
        tmp776 = tl.broadcast_to(tmp775, [XBLOCK, RBLOCK])
        tmp778 = _tmp777 + tmp776
        _tmp777 = tl.where(rmask, tmp778, _tmp777)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp750, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp760, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp767, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp774, rmask)
    tmp777 = tl.sum(_tmp777, 1)[:, None]
    _tmp792 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp779 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp787 = tl.load(in_ptr68 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp789 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp780 = 4096.0
        tmp781 = tmp777 / tmp780
        tmp782 = 1e-05
        tmp783 = tmp781 + tmp782
        tmp784 = tl.math.rsqrt(tmp783)
        tmp785 = tmp779 * tmp784
        tmp786 = tmp785.to(tl.float32)
        tmp788 = tmp786 * tmp787
        tmp790 = tmp789 * tmp789
        tmp791 = tl.broadcast_to(tmp790, [XBLOCK, RBLOCK])
        tmp793 = _tmp792 + tmp791
        _tmp792 = tl.where(rmask, tmp793, _tmp792)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp788, rmask)
    tmp792 = tl.sum(_tmp792, 1)[:, None]
    _tmp807 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp794 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp802 = tl.load(in_ptr69 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp804 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp795 = 4096.0
        tmp796 = tmp792 / tmp795
        tmp797 = 1e-05
        tmp798 = tmp796 + tmp797
        tmp799 = tl.math.rsqrt(tmp798)
        tmp800 = tmp794 * tmp799
        tmp801 = tmp800.to(tl.float32)
        tmp803 = tmp801 * tmp802
        tmp805 = tmp804 * tmp804
        tmp806 = tl.broadcast_to(tmp805, [XBLOCK, RBLOCK])
        tmp808 = _tmp807 + tmp806
        _tmp807 = tl.where(rmask, tmp808, _tmp807)
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp803, rmask)
    tmp807 = tl.sum(_tmp807, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp809 = tl.load(out_ptr2 + (r1 + (4096*x0)), rmask, other=0)
        tmp817 = tl.load(in_ptr70 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp810 = 4096.0
        tmp811 = tmp807 / tmp810
        tmp812 = 1e-05
        tmp813 = tmp811 + tmp812
        tmp814 = tl.math.rsqrt(tmp813)
        tmp815 = tmp809 * tmp814
        tmp816 = tmp815.to(tl.float32)
        tmp818 = tmp816 * tmp817
        tl.store(out_ptr8 + (r1 + (4096*x0)), tmp818, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/5j/c5johhy6uxqcyhoskroyazmgste6k44mob66twebg477joggayn7.py
# Source Nodes: [add_1458, add_1679, add_1680, add_1681, float_6, mean_3, mul_1651, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1458 => add_1695
# add_1679 => add_1929
# add_1680 => add_1935
# add_1681 => add_1936
# float_6 => convert_element_type_512
# mean_3 => mean_141
# mul_1651 => mul_2373
# mul_18 => mul_2392
# mul_19 => mul_2393
# mul_20 => mul_2394
# rsqrt_3 => rsqrt_141
# type_as_5 => convert_element_type_513
triton_red_fused__to_copy_add_mean_mul_rsqrt_86 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_86', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_86', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_86(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (114 + (116*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (114)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wu/cwubua6wreakk7rmguqnwqluzr4dmgtloauswwiacnie5me2tpp7.py
# Source Nodes: [l__mod___dynamic_dense_28_act, l__mod___dynamic_dense_28_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_28_act => add_1939, convert_element_type_516, convert_element_type_517, erf_28, mul_2398, mul_2399, mul_2400
# l__mod___dynamic_dense_28_w2 => view_1012
triton_poi_fused_gelu_view_87 = async_compile.triton('triton_poi_fused_gelu_view_87', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_87', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_87(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 983040
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yq/cyqskd3qvgjyuj5gs4c7lrhboarph37n2i2cxwavtaqcuml7xt5g.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1683, add_1684, add_1685, add_1686, add_1687, add_1688, add_1689, add_1690, add_1691, add_1692, add_1693, add_1694, add_1695, add_1696, add_1697, add_1698, add_1699, add_1700, add_1701, add_1702, add_1703, add_1704, add_1705, add_1706, add_1707, add_1708, add_1709, add_1710, add_1711, add_1712, add_1713, add_1714, add_1715, add_1716, add_1717, add_1718, add_1719, add_1720, add_1721, add_1722, add_1723, add_1724, add_1725, add_1726, add_1727, add_1728, add_1729, add_1730, add_1731, add_1732, add_1733, add_1734, add_1735, add_1736, add_1737, add_1738, add_1739, add_1740, add_1741, add_1742, add_1743, add_1744, add_1745, add_1746, add_1747, add_1748, add_1749, add_1750, add_1751, add_1752, add_1753, add_1754, add_1755, add_1756, add_1757, add_1758, add_1759, add_1760, add_1761, add_1762, add_1763, add_1764, add_1765, add_1766, add_1767, add_1768, add_1769, add_1770, add_1771, add_1772, add_1773, add_1774, add_1775, add_1776, add_1777, add_1778, add_1779, add_1780, add_1781, add_1782, add_1783, add_1784, add_1785, add_1786, add_1787, add_1788, add_1789, add_1790, add_1791, add_1792, add_1793, add_1794, add_1795, add_1796, add_1797, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1653, mul_1654, mul_1655, mul_1656, mul_1657, mul_1658, mul_1659, mul_1660, mul_1661, mul_1662, mul_1663, mul_1664, mul_1665, mul_1666, mul_1667, mul_1668, mul_1669, mul_1670, mul_1671, mul_1672, mul_1673, mul_1674, mul_1675, mul_1676, mul_1677, mul_1678, mul_1679, mul_1680, mul_1681, mul_1682, mul_1683, mul_1684, mul_1685, mul_1686, mul_1687, mul_1688, mul_1689, mul_1690, mul_1691, mul_1692, mul_1693, mul_1694, mul_1695, mul_1696, mul_1697, mul_1698, mul_1699, mul_1700, mul_1701, mul_1702, mul_1703, mul_1704, mul_1705, mul_1706, mul_1707, mul_1708, mul_1709, mul_1710, mul_1711, mul_1712, mul_1713, mul_1714, mul_1715, mul_1716, mul_1717, mul_1718, mul_1719, mul_1720, mul_1721, mul_1722, mul_1723, mul_1724, mul_1725, mul_1726, mul_1727, mul_1728, mul_1729, mul_1730, mul_1731, mul_1732, mul_1733, mul_1734, mul_1735, mul_1736, mul_1737, mul_1738, mul_1739, mul_1740, mul_1741, mul_1742, mul_1743, mul_1744, mul_1745, mul_1746, mul_1747, mul_1748, mul_1749, mul_1750, mul_1751, mul_1752, mul_1753, mul_1754, mul_1755, mul_1756, mul_1757, mul_1758, mul_1759, mul_1760, mul_1761, mul_1762, mul_1763, mul_1764, mul_1765, mul_1766, mul_1767, mul_1768, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_2057
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1695
# add_1566 => add_1812
# add_1568 => add_1814
# add_162 => add_237
# add_1682 => add_1941
# add_1683 => add_1942
# add_1684 => add_1943
# add_1685 => add_1944
# add_1686 => add_1945
# add_1687 => add_1946
# add_1688 => add_1947
# add_1689 => add_1948
# add_1690 => add_1949
# add_1691 => add_1950
# add_1692 => add_1951
# add_1693 => add_1952
# add_1694 => add_1953
# add_1695 => add_1954
# add_1696 => add_1955
# add_1697 => add_1956
# add_1698 => add_1957
# add_1699 => add_1958
# add_1700 => add_1959
# add_1701 => add_1960
# add_1702 => add_1961
# add_1703 => add_1962
# add_1704 => add_1963
# add_1705 => add_1964
# add_1706 => add_1965
# add_1707 => add_1966
# add_1708 => add_1967
# add_1709 => add_1968
# add_1710 => add_1969
# add_1711 => add_1970
# add_1712 => add_1971
# add_1713 => add_1972
# add_1714 => add_1973
# add_1715 => add_1974
# add_1716 => add_1975
# add_1717 => add_1976
# add_1718 => add_1977
# add_1719 => add_1978
# add_1720 => add_1979
# add_1721 => add_1980
# add_1722 => add_1981
# add_1723 => add_1982
# add_1724 => add_1983
# add_1725 => add_1984
# add_1726 => add_1985
# add_1727 => add_1986
# add_1728 => add_1987
# add_1729 => add_1988
# add_1730 => add_1989
# add_1731 => add_1990
# add_1732 => add_1991
# add_1733 => add_1992
# add_1734 => add_1993
# add_1735 => add_1994
# add_1736 => add_1995
# add_1737 => add_1996
# add_1738 => add_1997
# add_1739 => add_1998
# add_1740 => add_1999, add_2058
# add_1741 => add_2000
# add_1742 => add_2001
# add_1743 => add_2002
# add_1744 => add_2003
# add_1745 => add_2004
# add_1746 => add_2005
# add_1747 => add_2006
# add_1748 => add_2007
# add_1749 => add_2008
# add_1750 => add_2009
# add_1751 => add_2010
# add_1752 => add_2011
# add_1753 => add_2012
# add_1754 => add_2013
# add_1755 => add_2014
# add_1756 => add_2015
# add_1757 => add_2016
# add_1758 => add_2017
# add_1759 => add_2018
# add_1760 => add_2019
# add_1761 => add_2020
# add_1762 => add_2021
# add_1763 => add_2022
# add_1764 => add_2023
# add_1765 => add_2024
# add_1766 => add_2025
# add_1767 => add_2026
# add_1768 => add_2027
# add_1769 => add_2028, add_2059
# add_1770 => add_2029
# add_1771 => add_2030
# add_1772 => add_2031
# add_1773 => add_2032
# add_1774 => add_2033
# add_1775 => add_2034
# add_1776 => add_2035
# add_1777 => add_2036
# add_1778 => add_2037
# add_1779 => add_2038
# add_1780 => add_2039
# add_1781 => add_2040
# add_1782 => add_2041
# add_1783 => add_2042
# add_1784 => add_2043
# add_1785 => add_2044
# add_1786 => add_2045
# add_1787 => add_2046
# add_1788 => add_2047
# add_1789 => add_2048
# add_1790 => add_2049
# add_1791 => add_2050
# add_1792 => add_2051
# add_1793 => add_2052
# add_1794 => add_2053
# add_1795 => add_2054
# add_1796 => add_2055
# add_1797 => add_2056
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_518
# float_2 => convert_element_type_520
# float_3 => convert_element_type_522
# mean => mean_143
# mean_1 => mean_144
# mean_2 => mean_145
# mul => mul_2517
# mul_1 => mul_2518
# mul_1653 => mul_2401
# mul_1654 => mul_2402
# mul_1655 => mul_2403
# mul_1656 => mul_2404
# mul_1657 => mul_2405
# mul_1658 => mul_2406
# mul_1659 => mul_2407
# mul_1660 => mul_2408
# mul_1661 => mul_2409
# mul_1662 => mul_2410
# mul_1663 => mul_2411
# mul_1664 => mul_2412
# mul_1665 => mul_2413
# mul_1666 => mul_2414
# mul_1667 => mul_2415
# mul_1668 => mul_2416
# mul_1669 => mul_2417
# mul_1670 => mul_2418
# mul_1671 => mul_2419
# mul_1672 => mul_2420
# mul_1673 => mul_2421
# mul_1674 => mul_2422
# mul_1675 => mul_2423
# mul_1676 => mul_2424
# mul_1677 => mul_2425
# mul_1678 => mul_2426
# mul_1679 => mul_2427
# mul_1680 => mul_2428
# mul_1681 => mul_2429
# mul_1682 => mul_2430
# mul_1683 => mul_2431
# mul_1684 => mul_2432
# mul_1685 => mul_2433
# mul_1686 => mul_2434
# mul_1687 => mul_2435
# mul_1688 => mul_2436
# mul_1689 => mul_2437
# mul_1690 => mul_2438
# mul_1691 => mul_2439
# mul_1692 => mul_2440
# mul_1693 => mul_2441
# mul_1694 => mul_2442
# mul_1695 => mul_2443
# mul_1696 => mul_2444
# mul_1697 => mul_2445
# mul_1698 => mul_2446
# mul_1699 => mul_2447
# mul_1700 => mul_2448
# mul_1701 => mul_2449
# mul_1702 => mul_2450
# mul_1703 => mul_2451
# mul_1704 => mul_2452
# mul_1705 => mul_2453
# mul_1706 => mul_2454
# mul_1707 => mul_2455
# mul_1708 => mul_2456
# mul_1709 => mul_2457
# mul_1710 => mul_2458
# mul_1711 => mul_2459
# mul_1712 => mul_2460
# mul_1713 => mul_2461
# mul_1714 => mul_2462
# mul_1715 => mul_2463
# mul_1716 => mul_2464
# mul_1717 => mul_2465
# mul_1718 => mul_2466
# mul_1719 => mul_2467
# mul_1720 => mul_2468
# mul_1721 => mul_2469
# mul_1722 => mul_2470
# mul_1723 => mul_2471
# mul_1724 => mul_2472
# mul_1725 => mul_2473
# mul_1726 => mul_2474
# mul_1727 => mul_2475
# mul_1728 => mul_2476
# mul_1729 => mul_2477
# mul_1730 => mul_2478
# mul_1731 => mul_2479
# mul_1732 => mul_2480
# mul_1733 => mul_2481
# mul_1734 => mul_2482
# mul_1735 => mul_2483
# mul_1736 => mul_2484
# mul_1737 => mul_2485
# mul_1738 => mul_2486
# mul_1739 => mul_2487
# mul_1740 => mul_2488
# mul_1741 => mul_2489
# mul_1742 => mul_2490
# mul_1743 => mul_2491
# mul_1744 => mul_2492
# mul_1745 => mul_2493
# mul_1746 => mul_2494
# mul_1747 => mul_2495
# mul_1748 => mul_2496
# mul_1749 => mul_2497
# mul_1750 => mul_2498
# mul_1751 => mul_2499
# mul_1752 => mul_2500
# mul_1753 => mul_2501
# mul_1754 => mul_2502
# mul_1755 => mul_2503
# mul_1756 => mul_2504
# mul_1757 => mul_2505
# mul_1758 => mul_2506
# mul_1759 => mul_2507
# mul_1760 => mul_2508
# mul_1761 => mul_2509
# mul_1762 => mul_2510
# mul_1763 => mul_2511
# mul_1764 => mul_2512
# mul_1765 => mul_2513
# mul_1766 => mul_2514
# mul_1767 => mul_2515
# mul_1768 => mul_2516
# mul_2 => mul_2519
# mul_3 => mul_2520
# mul_4 => mul_2521
# mul_5 => mul_2522
# mul_6 => mul_2523
# mul_7 => mul_2524
# mul_8 => mul_2525
# rsqrt => rsqrt_143
# rsqrt_1 => rsqrt_144
# rsqrt_2 => rsqrt_145
# type_as => convert_element_type_519
# type_as_1 => convert_element_type_521
# type_as_2 => convert_element_type_523
triton_red_fused__to_copy_add_mean_mul_rsqrt_88 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_88', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: 'i32', 82: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_88', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(81, 82))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_88(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, out_ptr1, out_ptr3, out_ptr5, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (120*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (30 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (31 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (32 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (60 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (61 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (62 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (90 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (91 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (92 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (33 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (34 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (63 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (64 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (93 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (94 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (35 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (36 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (65 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (66 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (95 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (96 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (37 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (38 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (67 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (68 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (97 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (98 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (39 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (40 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (69 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (70 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (99 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (100 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (41 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (42 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (71 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (72 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (101 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (102 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (43 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (44 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (73 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (74 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (103 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (104 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (45 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (46 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (75 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (76 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (105 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (106 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (47 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (48 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (77 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (78 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (107 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (107)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (108 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (108)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (49 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (50 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (79 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (80 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (109 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (109)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (110 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (110)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (51 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (52 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (81 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (82 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (111 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (111)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (112 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (112)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (53 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (54 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (83 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (84 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (113 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (113)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (114 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (114)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp704 = tl.load(in_ptr0 + (26 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp705 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp706 = tl.broadcast_to(tmp705, [XBLOCK, RBLOCK])
    tmp715 = tl.load(in_ptr0 + (55 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp716 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp717 = tl.broadcast_to(tmp716, [XBLOCK, RBLOCK])
    tmp721 = tl.load(in_ptr0 + (56 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp722 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp723 = tl.broadcast_to(tmp722, [XBLOCK, RBLOCK])
    tmp727 = tl.load(in_ptr0 + (85 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp728 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp729 = tl.broadcast_to(tmp728, [XBLOCK, RBLOCK])
    tmp733 = tl.load(in_ptr0 + (86 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp734 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
    tmp739 = tl.load(in_ptr0 + (115 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp740 = tl.load(in_ptr1 + (115)).to(tl.float32)
    tmp741 = tl.broadcast_to(tmp740, [XBLOCK, RBLOCK])
    tmp745 = tl.load(in_ptr0 + (116 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp746 = tl.load(in_ptr1 + (116)).to(tl.float32)
    tmp747 = tl.broadcast_to(tmp746, [XBLOCK, RBLOCK])
    tmp751 = tl.load(in_ptr0 + (27 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp752 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp753 = tl.broadcast_to(tmp752, [XBLOCK, RBLOCK])
    tmp760 = tl.load(in_ptr0 + (28 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp761 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp762 = tl.broadcast_to(tmp761, [XBLOCK, RBLOCK])
    tmp771 = tl.load(in_ptr0 + (57 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp772 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp773 = tl.broadcast_to(tmp772, [XBLOCK, RBLOCK])
    tmp777 = tl.load(in_ptr0 + (58 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp778 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp779 = tl.broadcast_to(tmp778, [XBLOCK, RBLOCK])
    tmp783 = tl.load(in_ptr0 + (87 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp784 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp785 = tl.broadcast_to(tmp784, [XBLOCK, RBLOCK])
    tmp789 = tl.load(in_ptr0 + (88 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp790 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp791 = tl.broadcast_to(tmp790, [XBLOCK, RBLOCK])
    tmp795 = tl.load(in_ptr0 + (117 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp796 = tl.load(in_ptr1 + (117)).to(tl.float32)
    tmp797 = tl.broadcast_to(tmp796, [XBLOCK, RBLOCK])
    tmp801 = tl.load(in_ptr0 + (118 + (120*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp802 = tl.load(in_ptr1 + (118)).to(tl.float32)
    tmp803 = tl.broadcast_to(tmp802, [XBLOCK, RBLOCK])
    _tmp810 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp708 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp711 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp755 = tl.load(in_ptr66 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp756 = tl.load(in_ptr67 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp764 = tl.load(in_ptr68 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp765 = tl.load(in_ptr69 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp767 = tl.load(in_ptr70 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp707 = tmp704 + tmp706
        tmp710 = tmp708 + tmp709
        tmp712 = tmp710 + tmp711
        tmp713 = tmp707 * tmp712
        tmp714 = tmp703 + tmp713
        tmp718 = tmp715 + tmp717
        tmp719 = tmp718 * tmp701
        tmp720 = tmp670 + tmp719
        tmp724 = tmp721 + tmp723
        tmp725 = tmp724 * tmp712
        tmp726 = tmp720 + tmp725
        tmp730 = tmp727 + tmp729
        tmp731 = tmp730 * tmp701
        tmp732 = tmp682 + tmp731
        tmp736 = tmp733 + tmp735
        tmp737 = tmp736 * tmp712
        tmp738 = tmp732 + tmp737
        tmp742 = tmp739 + tmp741
        tmp743 = tmp742 * tmp701
        tmp744 = tmp694 + tmp743
        tmp748 = tmp745 + tmp747
        tmp749 = tmp748 * tmp712
        tmp750 = tmp744 + tmp749
        tmp754 = tmp751 + tmp753
        tmp757 = tmp755 + tmp756
        tmp758 = tmp754 * tmp757
        tmp759 = tmp714 + tmp758
        tmp763 = tmp760 + tmp762
        tmp766 = tmp764 + tmp765
        tmp768 = tmp766 + tmp767
        tmp769 = tmp763 * tmp768
        tmp770 = tmp759 + tmp769
        tmp774 = tmp771 + tmp773
        tmp775 = tmp774 * tmp757
        tmp776 = tmp726 + tmp775
        tmp780 = tmp777 + tmp779
        tmp781 = tmp780 * tmp768
        tmp782 = tmp776 + tmp781
        tmp786 = tmp783 + tmp785
        tmp787 = tmp786 * tmp757
        tmp788 = tmp738 + tmp787
        tmp792 = tmp789 + tmp791
        tmp793 = tmp792 * tmp768
        tmp794 = tmp788 + tmp793
        tmp798 = tmp795 + tmp797
        tmp799 = tmp798 * tmp757
        tmp800 = tmp750 + tmp799
        tmp804 = tmp801 + tmp803
        tmp805 = tmp804 * tmp768
        tmp806 = tmp800 + tmp805
        tmp807 = tmp794.to(tl.float32)
        tmp808 = tmp807 * tmp807
        tmp809 = tl.broadcast_to(tmp808, [XBLOCK, RBLOCK])
        tmp811 = _tmp810 + tmp809
        _tmp810 = tl.where(rmask, tmp811, _tmp810)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp770, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp782, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp794, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp806, rmask)
    tmp810 = tl.sum(_tmp810, 1)[:, None]
    _tmp827 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp812 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp821 = tl.load(in_ptr71 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp823 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp813 = tmp812.to(tl.float32)
        tmp814 = 4096.0
        tmp815 = tmp810 / tmp814
        tmp816 = 1e-05
        tmp817 = tmp815 + tmp816
        tmp818 = tl.math.rsqrt(tmp817)
        tmp819 = tmp813 * tmp818
        tmp820 = tmp819.to(tl.float32)
        tmp822 = tmp820 * tmp821
        tmp824 = tmp823.to(tl.float32)
        tmp825 = tmp824 * tmp824
        tmp826 = tl.broadcast_to(tmp825, [XBLOCK, RBLOCK])
        tmp828 = _tmp827 + tmp826
        _tmp827 = tl.where(rmask, tmp828, _tmp827)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp822, rmask)
    tmp827 = tl.sum(_tmp827, 1)[:, None]
    _tmp844 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp829 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp838 = tl.load(in_ptr72 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp840 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp830 = tmp829.to(tl.float32)
        tmp831 = 4096.0
        tmp832 = tmp827 / tmp831
        tmp833 = 1e-05
        tmp834 = tmp832 + tmp833
        tmp835 = tl.math.rsqrt(tmp834)
        tmp836 = tmp830 * tmp835
        tmp837 = tmp836.to(tl.float32)
        tmp839 = tmp837 * tmp838
        tmp841 = tmp840.to(tl.float32)
        tmp842 = tmp841 * tmp841
        tmp843 = tl.broadcast_to(tmp842, [XBLOCK, RBLOCK])
        tmp845 = _tmp844 + tmp843
        _tmp844 = tl.where(rmask, tmp845, _tmp844)
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp839, rmask)
    tmp844 = tl.sum(_tmp844, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp846 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp855 = tl.load(in_ptr73 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp847 = tmp846.to(tl.float32)
        tmp848 = 4096.0
        tmp849 = tmp844 / tmp848
        tmp850 = 1e-05
        tmp851 = tmp849 + tmp850
        tmp852 = tl.math.rsqrt(tmp851)
        tmp853 = tmp847 * tmp852
        tmp854 = tmp853.to(tl.float32)
        tmp856 = tmp854 * tmp855
        tl.store(out_ptr5 + (r1 + (4096*x0)), tmp856, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/eq/ceqpifdboo5laiqiiz4rb4u6bwueqia6wkoa2nwpjbmb5b4eblwb.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_89 = async_compile.triton('triton_poi_fused_89', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[4096, 128], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_89', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_89(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 124
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (4096*x1)), xmask, eviction_policy='evict_last').to(tl.float32)
    tl.store(out_ptr0 + (x1 + (128*y0)), tmp0, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/wf/cwfk5ir66v3u2vs4bxqrngxml3nau25oojwemyq5gsjssbd7nj5o.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_90 = async_compile.triton('triton_poi_fused_90', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16384], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_90', 'configs': [instance_descriptor(divisible_by_16=(1,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_90(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 4
    x1 = (xindex // 4)
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0 + (128*x1)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lv/clvilzv6l3nlxzfgah6q53z5bsi4lqu3rnhxznrvysljct76fmrk.py
# Source Nodes: [l__mod___dynamic_dense_29_act, l__mod___dynamic_dense_29_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_29_act => add_2066, convert_element_type_534, convert_element_type_535, erf_29, mul_2541, mul_2542, mul_2543
# l__mod___dynamic_dense_29_w2 => view_1047
triton_poi_fused_gelu_view_91 = async_compile.triton('triton_poi_fused_gelu_view_91', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_91', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_91(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1015808
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 124
    x1 = (xindex // 124)
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*x1)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x2), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/5p/c5ptcgxkl6v3afeimahf5hqgqi3oqrsbz3n2bfojmeb34ketbdft.py
# Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1800, add_1801, add_1802, add_1803, add_1804, add_1805, add_1806, add_1807, add_1808, add_1809, add_1810, add_1811, add_1812, add_1813, add_1814, add_1815, add_1816, add_1817, add_1818, add_1819, add_1820, add_1821, add_1822, add_1823, add_1824, add_1825, add_1826, add_1827, add_1828, add_1829, add_1830, add_1831, add_1832, add_1833, add_1834, add_1835, add_1836, add_1837, add_1838, add_1839, add_1840, add_1841, add_1842, add_1843, add_1844, add_1845, add_1846, add_1847, add_1848, add_1849, add_1850, add_1851, add_1852, add_1853, add_1854, add_1855, add_1856, add_1857, add_1858, add_1859, add_1860, add_1861, add_1862, add_1863, add_1864, add_1865, add_1866, add_1867, add_1868, add_1869, add_1870, add_1871, add_1872, add_1873, add_1874, add_1875, add_1876, add_1877, add_1878, add_1879, add_1880, add_1881, add_1882, add_1883, add_1884, add_1885, add_1886, add_1887, add_1888, add_1889, add_1890, add_1891, add_1892, add_1893, add_1894, add_1895, add_1896, add_1897, add_1898, add_1899, add_1900, add_1901, add_1902, add_1903, add_1904, add_1905, add_1906, add_1907, add_1908, add_1909, add_1910, add_1911, add_1912, add_1913, add_1914, add_1915, add_1916, add_1917, add_1918, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mul, mul_1, mul_1770, mul_1771, mul_1772, mul_1773, mul_1774, mul_1775, mul_1776, mul_1777, mul_1778, mul_1779, mul_1780, mul_1781, mul_1782, mul_1783, mul_1784, mul_1785, mul_1786, mul_1787, mul_1788, mul_1789, mul_1790, mul_1791, mul_1792, mul_1793, mul_1794, mul_1795, mul_1796, mul_1797, mul_1798, mul_1799, mul_1800, mul_1801, mul_1802, mul_1803, mul_1804, mul_1805, mul_1806, mul_1807, mul_1808, mul_1809, mul_1810, mul_1811, mul_1812, mul_1813, mul_1814, mul_1815, mul_1816, mul_1817, mul_1818, mul_1819, mul_1820, mul_1821, mul_1822, mul_1823, mul_1824, mul_1825, mul_1826, mul_1827, mul_1828, mul_1829, mul_1830, mul_1831, mul_1832, mul_1833, mul_1834, mul_1835, mul_1836, mul_1837, mul_1838, mul_1839, mul_1840, mul_1841, mul_1842, mul_1843, mul_1844, mul_1845, mul_1846, mul_1847, mul_1848, mul_1849, mul_1850, mul_1851, mul_1852, mul_1853, mul_1854, mul_1855, mul_1856, mul_1857, mul_1858, mul_1859, mul_1860, mul_1861, mul_1862, mul_1863, mul_1864, mul_1865, mul_1866, mul_1867, mul_1868, mul_1869, mul_1870, mul_1871, mul_1872, mul_1873, mul_1874, mul_1875, mul_1876, mul_1877, mul_1878, mul_1879, mul_1880, mul_1881, mul_1882, mul_1883, mul_1884, mul_1885, mul_1886, mul_1887, mul_1888, mul_2, mul_3, mul_4, mul_5, rsqrt, rsqrt_1, type_as, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_2188
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1695
# add_1566 => add_1812
# add_1568 => add_1814
# add_162 => add_237
# add_1682 => add_1937
# add_1800 => add_2068
# add_1801 => add_2069
# add_1802 => add_2070
# add_1803 => add_2071
# add_1804 => add_2072
# add_1805 => add_2073
# add_1806 => add_2074
# add_1807 => add_2075
# add_1808 => add_2076
# add_1809 => add_2077
# add_1810 => add_2078
# add_1811 => add_2079
# add_1812 => add_2080
# add_1813 => add_2081
# add_1814 => add_2082
# add_1815 => add_2083
# add_1816 => add_2084
# add_1817 => add_2085
# add_1818 => add_2086
# add_1819 => add_2087
# add_1820 => add_2088
# add_1821 => add_2089
# add_1822 => add_2090
# add_1823 => add_2091
# add_1824 => add_2092
# add_1825 => add_2093
# add_1826 => add_2094
# add_1827 => add_2095
# add_1828 => add_2096
# add_1829 => add_2097
# add_1830 => add_2098
# add_1831 => add_2099
# add_1832 => add_2100
# add_1833 => add_2101
# add_1834 => add_2102
# add_1835 => add_2103
# add_1836 => add_2104
# add_1837 => add_2105
# add_1838 => add_2106
# add_1839 => add_2107
# add_1840 => add_2108
# add_1841 => add_2109
# add_1842 => add_2110
# add_1843 => add_2111
# add_1844 => add_2112
# add_1845 => add_2113
# add_1846 => add_2114
# add_1847 => add_2115
# add_1848 => add_2116
# add_1849 => add_2117
# add_1850 => add_2118
# add_1851 => add_2119
# add_1852 => add_2120
# add_1853 => add_2121
# add_1854 => add_2122
# add_1855 => add_2123
# add_1856 => add_2124
# add_1857 => add_2125
# add_1858 => add_2126
# add_1859 => add_2127
# add_1860 => add_2128, add_2189
# add_1861 => add_2129
# add_1862 => add_2130
# add_1863 => add_2131
# add_1864 => add_2132
# add_1865 => add_2133
# add_1866 => add_2134
# add_1867 => add_2135
# add_1868 => add_2136
# add_1869 => add_2137
# add_1870 => add_2138
# add_1871 => add_2139
# add_1872 => add_2140
# add_1873 => add_2141
# add_1874 => add_2142
# add_1875 => add_2143
# add_1876 => add_2144
# add_1877 => add_2145
# add_1878 => add_2146
# add_1879 => add_2147
# add_1880 => add_2148
# add_1881 => add_2149
# add_1882 => add_2150
# add_1883 => add_2151
# add_1884 => add_2152
# add_1885 => add_2153
# add_1886 => add_2154
# add_1887 => add_2155
# add_1888 => add_2156
# add_1889 => add_2157
# add_1890 => add_2158
# add_1891 => add_2159
# add_1892 => add_2160
# add_1893 => add_2161
# add_1894 => add_2162
# add_1895 => add_2163
# add_1896 => add_2164
# add_1897 => add_2165
# add_1898 => add_2166
# add_1899 => add_2167
# add_1900 => add_2168
# add_1901 => add_2169
# add_1902 => add_2170
# add_1903 => add_2171
# add_1904 => add_2172
# add_1905 => add_2173
# add_1906 => add_2174
# add_1907 => add_2175
# add_1908 => add_2176
# add_1909 => add_2177
# add_1910 => add_2178
# add_1911 => add_2179
# add_1912 => add_2180
# add_1913 => add_2181
# add_1914 => add_2182
# add_1915 => add_2183
# add_1916 => add_2184
# add_1917 => add_2185
# add_1918 => add_2186
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_536
# float_2 => convert_element_type_538
# float_3 => convert_element_type_540
# mean => mean_148
# mean_1 => mean_149
# mul => mul_2664
# mul_1 => mul_2665
# mul_1770 => mul_2544
# mul_1771 => mul_2545
# mul_1772 => mul_2546
# mul_1773 => mul_2547
# mul_1774 => mul_2548
# mul_1775 => mul_2549
# mul_1776 => mul_2550
# mul_1777 => mul_2551
# mul_1778 => mul_2552
# mul_1779 => mul_2553
# mul_1780 => mul_2554
# mul_1781 => mul_2555
# mul_1782 => mul_2556
# mul_1783 => mul_2557
# mul_1784 => mul_2558
# mul_1785 => mul_2559
# mul_1786 => mul_2560
# mul_1787 => mul_2561
# mul_1788 => mul_2562
# mul_1789 => mul_2563
# mul_1790 => mul_2564
# mul_1791 => mul_2565
# mul_1792 => mul_2566
# mul_1793 => mul_2567
# mul_1794 => mul_2568
# mul_1795 => mul_2569
# mul_1796 => mul_2570
# mul_1797 => mul_2571
# mul_1798 => mul_2572
# mul_1799 => mul_2573
# mul_1800 => mul_2574
# mul_1801 => mul_2575
# mul_1802 => mul_2576
# mul_1803 => mul_2577
# mul_1804 => mul_2578
# mul_1805 => mul_2579
# mul_1806 => mul_2580
# mul_1807 => mul_2581
# mul_1808 => mul_2582
# mul_1809 => mul_2583
# mul_1810 => mul_2584
# mul_1811 => mul_2585
# mul_1812 => mul_2586
# mul_1813 => mul_2587
# mul_1814 => mul_2588
# mul_1815 => mul_2589
# mul_1816 => mul_2590
# mul_1817 => mul_2591
# mul_1818 => mul_2592
# mul_1819 => mul_2593
# mul_1820 => mul_2594
# mul_1821 => mul_2595
# mul_1822 => mul_2596
# mul_1823 => mul_2597
# mul_1824 => mul_2598
# mul_1825 => mul_2599
# mul_1826 => mul_2600
# mul_1827 => mul_2601
# mul_1828 => mul_2602
# mul_1829 => mul_2603
# mul_1830 => mul_2604
# mul_1831 => mul_2605
# mul_1832 => mul_2606
# mul_1833 => mul_2607
# mul_1834 => mul_2608
# mul_1835 => mul_2609
# mul_1836 => mul_2610
# mul_1837 => mul_2611
# mul_1838 => mul_2612
# mul_1839 => mul_2613
# mul_1840 => mul_2614
# mul_1841 => mul_2615
# mul_1842 => mul_2616
# mul_1843 => mul_2617
# mul_1844 => mul_2618
# mul_1845 => mul_2619
# mul_1846 => mul_2620
# mul_1847 => mul_2621
# mul_1848 => mul_2622
# mul_1849 => mul_2623
# mul_1850 => mul_2624
# mul_1851 => mul_2625
# mul_1852 => mul_2626
# mul_1853 => mul_2627
# mul_1854 => mul_2628
# mul_1855 => mul_2629
# mul_1856 => mul_2630
# mul_1857 => mul_2631
# mul_1858 => mul_2632
# mul_1859 => mul_2633
# mul_1860 => mul_2634
# mul_1861 => mul_2635
# mul_1862 => mul_2636
# mul_1863 => mul_2637
# mul_1864 => mul_2638
# mul_1865 => mul_2639
# mul_1866 => mul_2640
# mul_1867 => mul_2641
# mul_1868 => mul_2642
# mul_1869 => mul_2643
# mul_1870 => mul_2644
# mul_1871 => mul_2645
# mul_1872 => mul_2646
# mul_1873 => mul_2647
# mul_1874 => mul_2648
# mul_1875 => mul_2649
# mul_1876 => mul_2650
# mul_1877 => mul_2651
# mul_1878 => mul_2652
# mul_1879 => mul_2653
# mul_1880 => mul_2654
# mul_1881 => mul_2655
# mul_1882 => mul_2656
# mul_1883 => mul_2657
# mul_1884 => mul_2658
# mul_1885 => mul_2659
# mul_1886 => mul_2660
# mul_1887 => mul_2661
# mul_1888 => mul_2662
# mul_2 => mul_2666
# mul_3 => mul_2667
# mul_4 => mul_2668
# mul_5 => mul_2669
# rsqrt => rsqrt_148
# rsqrt_1 => rsqrt_149
# type_as => convert_element_type_537
# type_as_1 => convert_element_type_539
triton_red_fused__to_copy_add_mean_mul_rsqrt_92 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_92', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp16', 80: '*fp16', 81: 'i32', 82: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_92', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(81, 82))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_92(in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, out_ptr0, out_ptr1, out_ptr2, out_ptr4, out_ptr6, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (124*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (31 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (31)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (32 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (33 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (62 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (63 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (64 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (93 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (94 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (95 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (95)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (34 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (35 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (65 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (66 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (96 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (97 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (36 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (37 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (67 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (68 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (98 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (99 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (38 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (39 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (69 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (70 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (100 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (101 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (40 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (41 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (71 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (72 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (102 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (103 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (42 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (43 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (73 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (74 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (104 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (105 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (44 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (45 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (75 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (76 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (106 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (107 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (107)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (46 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (47 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (77 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (78 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (108 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (108)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (109 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (109)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (48 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (49 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (79 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (80 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (110 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (110)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (111 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (111)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (50 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (51 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (81 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (82 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (112 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (112)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (113 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (113)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (52 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (53 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (83 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (84 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (114 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (114)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (115 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (115)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (54 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (55 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (85 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (86 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (116 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (116)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (117 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (117)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp704 = tl.load(in_ptr0 + (26 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp705 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp706 = tl.broadcast_to(tmp705, [XBLOCK, RBLOCK])
    tmp715 = tl.load(in_ptr0 + (56 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp716 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp717 = tl.broadcast_to(tmp716, [XBLOCK, RBLOCK])
    tmp721 = tl.load(in_ptr0 + (57 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp722 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp723 = tl.broadcast_to(tmp722, [XBLOCK, RBLOCK])
    tmp727 = tl.load(in_ptr0 + (87 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp728 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp729 = tl.broadcast_to(tmp728, [XBLOCK, RBLOCK])
    tmp733 = tl.load(in_ptr0 + (88 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp734 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
    tmp739 = tl.load(in_ptr0 + (118 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp740 = tl.load(in_ptr1 + (118)).to(tl.float32)
    tmp741 = tl.broadcast_to(tmp740, [XBLOCK, RBLOCK])
    tmp745 = tl.load(in_ptr0 + (119 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp746 = tl.load(in_ptr1 + (119)).to(tl.float32)
    tmp747 = tl.broadcast_to(tmp746, [XBLOCK, RBLOCK])
    tmp751 = tl.load(in_ptr0 + (27 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp752 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp753 = tl.broadcast_to(tmp752, [XBLOCK, RBLOCK])
    tmp760 = tl.load(in_ptr0 + (28 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp761 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp762 = tl.broadcast_to(tmp761, [XBLOCK, RBLOCK])
    tmp771 = tl.load(in_ptr0 + (58 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp772 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp773 = tl.broadcast_to(tmp772, [XBLOCK, RBLOCK])
    tmp777 = tl.load(in_ptr0 + (59 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp778 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp779 = tl.broadcast_to(tmp778, [XBLOCK, RBLOCK])
    tmp783 = tl.load(in_ptr0 + (89 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp784 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp785 = tl.broadcast_to(tmp784, [XBLOCK, RBLOCK])
    tmp789 = tl.load(in_ptr0 + (90 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp790 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp791 = tl.broadcast_to(tmp790, [XBLOCK, RBLOCK])
    tmp795 = tl.load(in_ptr0 + (120 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp796 = tl.load(in_ptr1 + (120)).to(tl.float32)
    tmp797 = tl.broadcast_to(tmp796, [XBLOCK, RBLOCK])
    tmp801 = tl.load(in_ptr0 + (121 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp802 = tl.load(in_ptr1 + (121)).to(tl.float32)
    tmp803 = tl.broadcast_to(tmp802, [XBLOCK, RBLOCK])
    tmp807 = tl.load(in_ptr0 + (29 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp808 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp809 = tl.broadcast_to(tmp808, [XBLOCK, RBLOCK])
    tmp817 = tl.load(in_ptr0 + (60 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp818 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp819 = tl.broadcast_to(tmp818, [XBLOCK, RBLOCK])
    tmp824 = tl.load(in_ptr0 + (91 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp825 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp826 = tl.broadcast_to(tmp825, [XBLOCK, RBLOCK])
    _tmp833 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp708 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp711 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp755 = tl.load(in_ptr66 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp756 = tl.load(in_ptr67 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp764 = tl.load(in_ptr68 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp765 = tl.load(in_ptr69 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp767 = tl.load(in_ptr70 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp811 = tl.load(in_ptr71 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp812 = tl.load(in_ptr72 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp707 = tmp704 + tmp706
        tmp710 = tmp708 + tmp709
        tmp712 = tmp710 + tmp711
        tmp713 = tmp707 * tmp712
        tmp714 = tmp703 + tmp713
        tmp718 = tmp715 + tmp717
        tmp719 = tmp718 * tmp701
        tmp720 = tmp670 + tmp719
        tmp724 = tmp721 + tmp723
        tmp725 = tmp724 * tmp712
        tmp726 = tmp720 + tmp725
        tmp730 = tmp727 + tmp729
        tmp731 = tmp730 * tmp701
        tmp732 = tmp682 + tmp731
        tmp736 = tmp733 + tmp735
        tmp737 = tmp736 * tmp712
        tmp738 = tmp732 + tmp737
        tmp742 = tmp739 + tmp741
        tmp743 = tmp742 * tmp701
        tmp744 = tmp694 + tmp743
        tmp748 = tmp745 + tmp747
        tmp749 = tmp748 * tmp712
        tmp750 = tmp744 + tmp749
        tmp754 = tmp751 + tmp753
        tmp757 = tmp755 + tmp756
        tmp758 = tmp754 * tmp757
        tmp759 = tmp714 + tmp758
        tmp763 = tmp760 + tmp762
        tmp766 = tmp764 + tmp765
        tmp768 = tmp766 + tmp767
        tmp769 = tmp763 * tmp768
        tmp770 = tmp759 + tmp769
        tmp774 = tmp771 + tmp773
        tmp775 = tmp774 * tmp757
        tmp776 = tmp726 + tmp775
        tmp780 = tmp777 + tmp779
        tmp781 = tmp780 * tmp768
        tmp782 = tmp776 + tmp781
        tmp786 = tmp783 + tmp785
        tmp787 = tmp786 * tmp757
        tmp788 = tmp738 + tmp787
        tmp792 = tmp789 + tmp791
        tmp793 = tmp792 * tmp768
        tmp794 = tmp788 + tmp793
        tmp798 = tmp795 + tmp797
        tmp799 = tmp798 * tmp757
        tmp800 = tmp750 + tmp799
        tmp804 = tmp801 + tmp803
        tmp805 = tmp804 * tmp768
        tmp806 = tmp800 + tmp805
        tmp810 = tmp807 + tmp809
        tmp813 = tmp811 + tmp812
        tmp814 = tmp810 * tmp813
        tmp815 = tmp770 + tmp814
        tmp816 = tmp815.to(tl.float32)
        tmp820 = tmp817 + tmp819
        tmp821 = tmp820 * tmp813
        tmp822 = tmp782 + tmp821
        tmp823 = tmp822.to(tl.float32)
        tmp827 = tmp824 + tmp826
        tmp828 = tmp827 * tmp813
        tmp829 = tmp794 + tmp828
        tmp830 = tmp829.to(tl.float32)
        tmp831 = tmp816 * tmp816
        tmp832 = tl.broadcast_to(tmp831, [XBLOCK, RBLOCK])
        tmp834 = _tmp833 + tmp832
        _tmp833 = tl.where(rmask, tmp834, _tmp833)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp806, rmask)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp816, rmask)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp823, rmask)
        tl.store(out_ptr2 + (r1 + (4096*x0)), tmp830, rmask)
    tmp833 = tl.sum(_tmp833, 1)[:, None]
    _tmp848 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp835 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp843 = tl.load(in_ptr73 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp845 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp836 = 4096.0
        tmp837 = tmp833 / tmp836
        tmp838 = 1e-05
        tmp839 = tmp837 + tmp838
        tmp840 = tl.math.rsqrt(tmp839)
        tmp841 = tmp835 * tmp840
        tmp842 = tmp841.to(tl.float32)
        tmp844 = tmp842 * tmp843
        tmp846 = tmp845 * tmp845
        tmp847 = tl.broadcast_to(tmp846, [XBLOCK, RBLOCK])
        tmp849 = _tmp848 + tmp847
        _tmp848 = tl.where(rmask, tmp849, _tmp848)
        tl.store(out_ptr4 + (r1 + (4096*x0)), tmp844, rmask)
    tmp848 = tl.sum(_tmp848, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp850 = tl.load(out_ptr1 + (r1 + (4096*x0)), rmask, other=0)
        tmp858 = tl.load(in_ptr74 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp851 = 4096.0
        tmp852 = tmp848 / tmp851
        tmp853 = 1e-05
        tmp854 = tmp852 + tmp853
        tmp855 = tl.math.rsqrt(tmp854)
        tmp856 = tmp850 * tmp855
        tmp857 = tmp856.to(tl.float32)
        tmp859 = tmp857 * tmp858
        tl.store(out_ptr6 + (r1 + (4096*x0)), tmp859, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/hg/chg7vj75bz6lxlu5aak5kfjwftidmj2ev33nwv2jf4eovtdnzsa5.py
# Source Nodes: [add_1890, mean_2, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1890 => add_2190
# mean_2 => mean_150
# mul_6 => mul_2670
# mul_7 => mul_2671
# mul_8 => mul_2672
# rsqrt_2 => rsqrt_150
# type_as_2 => convert_element_type_541
triton_red_fused__to_copy_add_mean_mul_rsqrt_93 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_93', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp32', 1: '*fp16', 2: '*fp16', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_93', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_93(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp3 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp4 = _tmp3 + tmp2
        _tmp3 = tl.where(rmask, tmp4, _tmp3)
    tmp3 = tl.sum(_tmp3, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp5 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp13 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = 4096.0
        tmp7 = tmp3 / tmp6
        tmp8 = 1e-05
        tmp9 = tmp7 + tmp8
        tmp10 = tl.math.rsqrt(tmp9)
        tmp11 = tmp5 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = tmp12 * tmp13
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp14, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/zx/czxxoxsgi4p2ckl3ww752blgyrugldmnv2c75zgx35mk7krtuk5y.py
# Source Nodes: [add_1682, add_1919, add_1920, add_1921, float_6, mean_3, mul_18, mul_1889, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1682 => add_1937
# add_1919 => add_2187
# add_1920 => add_2193
# add_1921 => add_2194
# float_6 => convert_element_type_548
# mean_3 => mean_151
# mul_18 => mul_2682
# mul_1889 => mul_2663
# mul_19 => mul_2683
# mul_20 => mul_2684
# rsqrt_3 => rsqrt_151
# type_as_5 => convert_element_type_549
triton_red_fused__to_copy_add_mean_mul_rsqrt_94 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_94', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: 'i32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_94', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_94(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp1 = tl.load(in_ptr0 + (122 + (124*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tl.load(in_ptr1 + (122)).to(tl.float32)
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp5 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp6 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp10 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp4 = tmp1 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 * tmp7
        tmp9 = tmp0 + tmp8
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp11, rmask)
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp17 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp26 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = 4096.0
        tmp20 = tmp15 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = tl.math.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp25 * tmp26
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp27, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/en/cenggf3jat4wsezucxecpg2cw4xgoezypcs4kypgjmp4c3vvfcag.py
# Source Nodes: [l__mod___dynamic_dense_30_act, l__mod___dynamic_dense_30_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_30_act => add_2197, convert_element_type_552, convert_element_type_553, erf_30, mul_2688, mul_2689, mul_2690
# l__mod___dynamic_dense_30_w2 => view_1082
triton_poi_fused_gelu_view_95 = async_compile.triton('triton_poi_fused_gelu_view_95', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_95', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_95(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1048576
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/bl/cblcbmqmt646pwtd76i5fxhhotjvkbdgoe7kofeiln23o3ojnrcl.py
# Source Nodes: [add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1798, add_1800, add_1922, add_1923, add_1924, add_1925, add_1926, add_1927, add_1928, add_1929, add_1930, add_1931, add_1932, add_1933, add_1934, add_1935, add_1936, add_1937, add_1938, add_1939, add_1940, add_1941, add_1942, add_1943, add_1944, add_1945, add_1946, add_1947, add_1948, add_1949, add_1950, add_1951, add_1952, add_1953, add_1954, add_1955, add_1956, add_1957, add_1958, add_1959, add_1960, add_1961, add_1962, add_1963, add_1964, add_1965, add_1966, add_1967, add_1968, add_1969, add_1970, add_1971, add_1972, add_1973, add_1974, add_1975, add_1976, add_1977, add_1978, add_1979, add_198, add_1980, add_1981, add_1982, add_1983, add_1984, add_1985, add_1986, add_1987, add_1988, add_1989, add_1990, add_1991, add_1992, add_1993, add_1994, add_1995, add_1996, add_1997, add_1998, add_1999, add_20, add_200, add_2000, add_2001, add_2002, add_2003, add_2004, add_2005, add_2006, add_2007, add_2008, add_2009, add_2010, add_2011, add_2012, add_2013, add_2014, add_2015, add_2016, add_2017, add_2018, add_2019, add_2020, add_2021, add_2022, add_2023, add_2024, add_2025, add_2026, add_2027, add_2028, add_2029, add_2030, add_2031, add_2032, add_2033, add_2034, add_2035, add_2036, add_2037, add_2038, add_2039, add_2040, add_2041, add_2042, add_2043, add_2044, add_2045, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_2, float_3, mean_1, mean_2, mul_1891, mul_1892, mul_1893, mul_1894, mul_1895, mul_1896, mul_1897, mul_1898, mul_1899, mul_1900, mul_1901, mul_1902, mul_1903, mul_1904, mul_1905, mul_1906, mul_1907, mul_1908, mul_1909, mul_1910, mul_1911, mul_1912, mul_1913, mul_1914, mul_1915, mul_1916, mul_1917, mul_1918, mul_1919, mul_1920, mul_1921, mul_1922, mul_1923, mul_1924, mul_1925, mul_1926, mul_1927, mul_1928, mul_1929, mul_1930, mul_1931, mul_1932, mul_1933, mul_1934, mul_1935, mul_1936, mul_1937, mul_1938, mul_1939, mul_1940, mul_1941, mul_1942, mul_1943, mul_1944, mul_1945, mul_1946, mul_1947, mul_1948, mul_1949, mul_1950, mul_1951, mul_1952, mul_1953, mul_1954, mul_1955, mul_1956, mul_1957, mul_1958, mul_1959, mul_1960, mul_1961, mul_1962, mul_1963, mul_1964, mul_1965, mul_1966, mul_1967, mul_1968, mul_1969, mul_1970, mul_1971, mul_1972, mul_1973, mul_1974, mul_1975, mul_1976, mul_1977, mul_1978, mul_1979, mul_1980, mul_1981, mul_1982, mul_1983, mul_1984, mul_1985, mul_1986, mul_1987, mul_1988, mul_1989, mul_1990, mul_1991, mul_1992, mul_1993, mul_1994, mul_1995, mul_1996, mul_1997, mul_1998, mul_1999, mul_2000, mul_2001, mul_2002, mul_2003, mul_2004, mul_2005, mul_2006, mul_2007, mul_2008, mul_2009, mul_2010, mul_2011, mul_2012, mul_2013, mul_2014, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt_1, rsqrt_2, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1695
# add_1566 => add_1812
# add_1568 => add_1814
# add_162 => add_237
# add_1682 => add_1937
# add_1798 => add_2062
# add_1800 => add_2064
# add_1922 => add_2199
# add_1923 => add_2200
# add_1924 => add_2201
# add_1925 => add_2202
# add_1926 => add_2203
# add_1927 => add_2204
# add_1928 => add_2205
# add_1929 => add_2206
# add_1930 => add_2207
# add_1931 => add_2208
# add_1932 => add_2209
# add_1933 => add_2210
# add_1934 => add_2211
# add_1935 => add_2212
# add_1936 => add_2213
# add_1937 => add_2214
# add_1938 => add_2215
# add_1939 => add_2216
# add_1940 => add_2217
# add_1941 => add_2218
# add_1942 => add_2219
# add_1943 => add_2220
# add_1944 => add_2221
# add_1945 => add_2222
# add_1946 => add_2223
# add_1947 => add_2224
# add_1948 => add_2225
# add_1949 => add_2226
# add_1950 => add_2227
# add_1951 => add_2228
# add_1952 => add_2229
# add_1953 => add_2230
# add_1954 => add_2231
# add_1955 => add_2232
# add_1956 => add_2233
# add_1957 => add_2234
# add_1958 => add_2235
# add_1959 => add_2236
# add_1960 => add_2237
# add_1961 => add_2238
# add_1962 => add_2239
# add_1963 => add_2240
# add_1964 => add_2241
# add_1965 => add_2242
# add_1966 => add_2243
# add_1967 => add_2244
# add_1968 => add_2245
# add_1969 => add_2246
# add_1970 => add_2247
# add_1971 => add_2248
# add_1972 => add_2249
# add_1973 => add_2250
# add_1974 => add_2251
# add_1975 => add_2252
# add_1976 => add_2253
# add_1977 => add_2254
# add_1978 => add_2255
# add_1979 => add_2256
# add_198 => add_282
# add_1980 => add_2257
# add_1981 => add_2258
# add_1982 => add_2259
# add_1983 => add_2260
# add_1984 => add_2261, add_2324
# add_1985 => add_2262
# add_1986 => add_2263
# add_1987 => add_2264
# add_1988 => add_2265
# add_1989 => add_2266
# add_1990 => add_2267
# add_1991 => add_2268
# add_1992 => add_2269
# add_1993 => add_2270
# add_1994 => add_2271
# add_1995 => add_2272
# add_1996 => add_2273
# add_1997 => add_2274
# add_1998 => add_2275
# add_1999 => add_2276
# add_20 => add_39
# add_200 => add_284
# add_2000 => add_2277
# add_2001 => add_2278
# add_2002 => add_2279
# add_2003 => add_2280
# add_2004 => add_2281
# add_2005 => add_2282
# add_2006 => add_2283
# add_2007 => add_2284
# add_2008 => add_2285
# add_2009 => add_2286
# add_2010 => add_2287
# add_2011 => add_2288
# add_2012 => add_2289
# add_2013 => add_2290
# add_2014 => add_2291
# add_2015 => add_2292, add_2325
# add_2016 => add_2293
# add_2017 => add_2294
# add_2018 => add_2295
# add_2019 => add_2296
# add_2020 => add_2297
# add_2021 => add_2298
# add_2022 => add_2299
# add_2023 => add_2300
# add_2024 => add_2301
# add_2025 => add_2302
# add_2026 => add_2303
# add_2027 => add_2304
# add_2028 => add_2305
# add_2029 => add_2306
# add_2030 => add_2307
# add_2031 => add_2308
# add_2032 => add_2309
# add_2033 => add_2310
# add_2034 => add_2311
# add_2035 => add_2312
# add_2036 => add_2313
# add_2037 => add_2314
# add_2038 => add_2315
# add_2039 => add_2316
# add_2040 => add_2317
# add_2041 => add_2318
# add_2042 => add_2319
# add_2043 => add_2320
# add_2044 => add_2321
# add_2045 => add_2322
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_2 => convert_element_type_556
# float_3 => convert_element_type_558
# mean_1 => mean_154
# mean_2 => mean_155
# mul_1891 => mul_2691
# mul_1892 => mul_2692
# mul_1893 => mul_2693
# mul_1894 => mul_2694
# mul_1895 => mul_2695
# mul_1896 => mul_2696
# mul_1897 => mul_2697
# mul_1898 => mul_2698
# mul_1899 => mul_2699
# mul_1900 => mul_2700
# mul_1901 => mul_2701
# mul_1902 => mul_2702
# mul_1903 => mul_2703
# mul_1904 => mul_2704
# mul_1905 => mul_2705
# mul_1906 => mul_2706
# mul_1907 => mul_2707
# mul_1908 => mul_2708
# mul_1909 => mul_2709
# mul_1910 => mul_2710
# mul_1911 => mul_2711
# mul_1912 => mul_2712
# mul_1913 => mul_2713
# mul_1914 => mul_2714
# mul_1915 => mul_2715
# mul_1916 => mul_2716
# mul_1917 => mul_2717
# mul_1918 => mul_2718
# mul_1919 => mul_2719
# mul_1920 => mul_2720
# mul_1921 => mul_2721
# mul_1922 => mul_2722
# mul_1923 => mul_2723
# mul_1924 => mul_2724
# mul_1925 => mul_2725
# mul_1926 => mul_2726
# mul_1927 => mul_2727
# mul_1928 => mul_2728
# mul_1929 => mul_2729
# mul_1930 => mul_2730
# mul_1931 => mul_2731
# mul_1932 => mul_2732
# mul_1933 => mul_2733
# mul_1934 => mul_2734
# mul_1935 => mul_2735
# mul_1936 => mul_2736
# mul_1937 => mul_2737
# mul_1938 => mul_2738
# mul_1939 => mul_2739
# mul_1940 => mul_2740
# mul_1941 => mul_2741
# mul_1942 => mul_2742
# mul_1943 => mul_2743
# mul_1944 => mul_2744
# mul_1945 => mul_2745
# mul_1946 => mul_2746
# mul_1947 => mul_2747
# mul_1948 => mul_2748
# mul_1949 => mul_2749
# mul_1950 => mul_2750
# mul_1951 => mul_2751
# mul_1952 => mul_2752
# mul_1953 => mul_2753
# mul_1954 => mul_2754
# mul_1955 => mul_2755
# mul_1956 => mul_2756
# mul_1957 => mul_2757
# mul_1958 => mul_2758
# mul_1959 => mul_2759
# mul_1960 => mul_2760
# mul_1961 => mul_2761
# mul_1962 => mul_2762
# mul_1963 => mul_2763
# mul_1964 => mul_2764
# mul_1965 => mul_2765
# mul_1966 => mul_2766
# mul_1967 => mul_2767
# mul_1968 => mul_2768
# mul_1969 => mul_2769
# mul_1970 => mul_2770
# mul_1971 => mul_2771
# mul_1972 => mul_2772
# mul_1973 => mul_2773
# mul_1974 => mul_2774
# mul_1975 => mul_2775
# mul_1976 => mul_2776
# mul_1977 => mul_2777
# mul_1978 => mul_2778
# mul_1979 => mul_2779
# mul_1980 => mul_2780
# mul_1981 => mul_2781
# mul_1982 => mul_2782
# mul_1983 => mul_2783
# mul_1984 => mul_2784
# mul_1985 => mul_2785
# mul_1986 => mul_2786
# mul_1987 => mul_2787
# mul_1988 => mul_2788
# mul_1989 => mul_2789
# mul_1990 => mul_2790
# mul_1991 => mul_2791
# mul_1992 => mul_2792
# mul_1993 => mul_2793
# mul_1994 => mul_2794
# mul_1995 => mul_2795
# mul_1996 => mul_2796
# mul_1997 => mul_2797
# mul_1998 => mul_2798
# mul_1999 => mul_2799
# mul_2000 => mul_2800
# mul_2001 => mul_2801
# mul_2002 => mul_2802
# mul_2003 => mul_2803
# mul_2004 => mul_2804
# mul_2005 => mul_2805
# mul_2006 => mul_2806
# mul_2007 => mul_2807
# mul_2008 => mul_2808
# mul_2009 => mul_2809
# mul_2010 => mul_2810
# mul_2011 => mul_2811
# mul_2012 => mul_2812
# mul_2013 => mul_2813
# mul_2014 => mul_2814
# mul_3 => mul_2818
# mul_4 => mul_2819
# mul_5 => mul_2820
# mul_6 => mul_2821
# mul_7 => mul_2822
# mul_8 => mul_2823
# rsqrt_1 => rsqrt_154
# rsqrt_2 => rsqrt_155
# type_as_1 => convert_element_type_557
# type_as_2 => convert_element_type_559
triton_red_fused__to_copy_add_mean_mul_rsqrt_96 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_96', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp16', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp16', 81: '*fp16', 82: '*fp16', 83: '*fp16', 84: 'i32', 85: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_96', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(84, 85))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_96(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, out_ptr1, out_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (128*x0), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (0)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (1 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (1)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (2 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (2)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (32 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (32)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp31 = tl.load(in_ptr0 + (33 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp32 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK, RBLOCK])
    tmp37 = tl.load(in_ptr0 + (34 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp38 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
    tmp43 = tl.load(in_ptr0 + (64 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp44 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
    tmp49 = tl.load(in_ptr0 + (65 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp50 = tl.load(in_ptr1 + (65)).to(tl.float32)
    tmp51 = tl.broadcast_to(tmp50, [XBLOCK, RBLOCK])
    tmp55 = tl.load(in_ptr0 + (66 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp56 = tl.load(in_ptr1 + (66)).to(tl.float32)
    tmp57 = tl.broadcast_to(tmp56, [XBLOCK, RBLOCK])
    tmp61 = tl.load(in_ptr0 + (96 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp62 = tl.load(in_ptr1 + (96)).to(tl.float32)
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK, RBLOCK])
    tmp67 = tl.load(in_ptr0 + (97 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp68 = tl.load(in_ptr1 + (97)).to(tl.float32)
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK, RBLOCK])
    tmp73 = tl.load(in_ptr0 + (98 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp74 = tl.load(in_ptr1 + (98)).to(tl.float32)
    tmp75 = tl.broadcast_to(tmp74, [XBLOCK, RBLOCK])
    tmp79 = tl.load(in_ptr0 + (3 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp80 = tl.load(in_ptr1 + (3)).to(tl.float32)
    tmp81 = tl.broadcast_to(tmp80, [XBLOCK, RBLOCK])
    tmp88 = tl.load(in_ptr0 + (4 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp89 = tl.load(in_ptr1 + (4)).to(tl.float32)
    tmp90 = tl.broadcast_to(tmp89, [XBLOCK, RBLOCK])
    tmp99 = tl.load(in_ptr0 + (35 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp100 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp101 = tl.broadcast_to(tmp100, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (36 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp111 = tl.load(in_ptr0 + (67 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp112 = tl.load(in_ptr1 + (67)).to(tl.float32)
    tmp113 = tl.broadcast_to(tmp112, [XBLOCK, RBLOCK])
    tmp117 = tl.load(in_ptr0 + (68 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp118 = tl.load(in_ptr1 + (68)).to(tl.float32)
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK, RBLOCK])
    tmp123 = tl.load(in_ptr0 + (99 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp124 = tl.load(in_ptr1 + (99)).to(tl.float32)
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK, RBLOCK])
    tmp129 = tl.load(in_ptr0 + (100 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp130 = tl.load(in_ptr1 + (100)).to(tl.float32)
    tmp131 = tl.broadcast_to(tmp130, [XBLOCK, RBLOCK])
    tmp135 = tl.load(in_ptr0 + (5 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp136 = tl.load(in_ptr1 + (5)).to(tl.float32)
    tmp137 = tl.broadcast_to(tmp136, [XBLOCK, RBLOCK])
    tmp144 = tl.load(in_ptr0 + (6 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp145 = tl.load(in_ptr1 + (6)).to(tl.float32)
    tmp146 = tl.broadcast_to(tmp145, [XBLOCK, RBLOCK])
    tmp155 = tl.load(in_ptr0 + (37 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp156 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp157 = tl.broadcast_to(tmp156, [XBLOCK, RBLOCK])
    tmp161 = tl.load(in_ptr0 + (38 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp162 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp163 = tl.broadcast_to(tmp162, [XBLOCK, RBLOCK])
    tmp167 = tl.load(in_ptr0 + (69 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp168 = tl.load(in_ptr1 + (69)).to(tl.float32)
    tmp169 = tl.broadcast_to(tmp168, [XBLOCK, RBLOCK])
    tmp173 = tl.load(in_ptr0 + (70 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp174 = tl.load(in_ptr1 + (70)).to(tl.float32)
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK, RBLOCK])
    tmp179 = tl.load(in_ptr0 + (101 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp180 = tl.load(in_ptr1 + (101)).to(tl.float32)
    tmp181 = tl.broadcast_to(tmp180, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (102 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (102)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp191 = tl.load(in_ptr0 + (7 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp192 = tl.load(in_ptr1 + (7)).to(tl.float32)
    tmp193 = tl.broadcast_to(tmp192, [XBLOCK, RBLOCK])
    tmp200 = tl.load(in_ptr0 + (8 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp201 = tl.load(in_ptr1 + (8)).to(tl.float32)
    tmp202 = tl.broadcast_to(tmp201, [XBLOCK, RBLOCK])
    tmp211 = tl.load(in_ptr0 + (39 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp212 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp213 = tl.broadcast_to(tmp212, [XBLOCK, RBLOCK])
    tmp217 = tl.load(in_ptr0 + (40 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp218 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp219 = tl.broadcast_to(tmp218, [XBLOCK, RBLOCK])
    tmp223 = tl.load(in_ptr0 + (71 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp224 = tl.load(in_ptr1 + (71)).to(tl.float32)
    tmp225 = tl.broadcast_to(tmp224, [XBLOCK, RBLOCK])
    tmp229 = tl.load(in_ptr0 + (72 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp230 = tl.load(in_ptr1 + (72)).to(tl.float32)
    tmp231 = tl.broadcast_to(tmp230, [XBLOCK, RBLOCK])
    tmp235 = tl.load(in_ptr0 + (103 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp236 = tl.load(in_ptr1 + (103)).to(tl.float32)
    tmp237 = tl.broadcast_to(tmp236, [XBLOCK, RBLOCK])
    tmp241 = tl.load(in_ptr0 + (104 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp242 = tl.load(in_ptr1 + (104)).to(tl.float32)
    tmp243 = tl.broadcast_to(tmp242, [XBLOCK, RBLOCK])
    tmp247 = tl.load(in_ptr0 + (9 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp248 = tl.load(in_ptr1 + (9)).to(tl.float32)
    tmp249 = tl.broadcast_to(tmp248, [XBLOCK, RBLOCK])
    tmp256 = tl.load(in_ptr0 + (10 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp257 = tl.load(in_ptr1 + (10)).to(tl.float32)
    tmp258 = tl.broadcast_to(tmp257, [XBLOCK, RBLOCK])
    tmp267 = tl.load(in_ptr0 + (41 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp268 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp269 = tl.broadcast_to(tmp268, [XBLOCK, RBLOCK])
    tmp273 = tl.load(in_ptr0 + (42 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp274 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp275 = tl.broadcast_to(tmp274, [XBLOCK, RBLOCK])
    tmp279 = tl.load(in_ptr0 + (73 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp280 = tl.load(in_ptr1 + (73)).to(tl.float32)
    tmp281 = tl.broadcast_to(tmp280, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (74 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (74)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp291 = tl.load(in_ptr0 + (105 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp292 = tl.load(in_ptr1 + (105)).to(tl.float32)
    tmp293 = tl.broadcast_to(tmp292, [XBLOCK, RBLOCK])
    tmp297 = tl.load(in_ptr0 + (106 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp298 = tl.load(in_ptr1 + (106)).to(tl.float32)
    tmp299 = tl.broadcast_to(tmp298, [XBLOCK, RBLOCK])
    tmp303 = tl.load(in_ptr0 + (11 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp304 = tl.load(in_ptr1 + (11)).to(tl.float32)
    tmp305 = tl.broadcast_to(tmp304, [XBLOCK, RBLOCK])
    tmp312 = tl.load(in_ptr0 + (12 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp313 = tl.load(in_ptr1 + (12)).to(tl.float32)
    tmp314 = tl.broadcast_to(tmp313, [XBLOCK, RBLOCK])
    tmp323 = tl.load(in_ptr0 + (43 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp324 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp325 = tl.broadcast_to(tmp324, [XBLOCK, RBLOCK])
    tmp329 = tl.load(in_ptr0 + (44 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp330 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp331 = tl.broadcast_to(tmp330, [XBLOCK, RBLOCK])
    tmp335 = tl.load(in_ptr0 + (75 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp336 = tl.load(in_ptr1 + (75)).to(tl.float32)
    tmp337 = tl.broadcast_to(tmp336, [XBLOCK, RBLOCK])
    tmp341 = tl.load(in_ptr0 + (76 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp342 = tl.load(in_ptr1 + (76)).to(tl.float32)
    tmp343 = tl.broadcast_to(tmp342, [XBLOCK, RBLOCK])
    tmp347 = tl.load(in_ptr0 + (107 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp348 = tl.load(in_ptr1 + (107)).to(tl.float32)
    tmp349 = tl.broadcast_to(tmp348, [XBLOCK, RBLOCK])
    tmp353 = tl.load(in_ptr0 + (108 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp354 = tl.load(in_ptr1 + (108)).to(tl.float32)
    tmp355 = tl.broadcast_to(tmp354, [XBLOCK, RBLOCK])
    tmp359 = tl.load(in_ptr0 + (13 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp360 = tl.load(in_ptr1 + (13)).to(tl.float32)
    tmp361 = tl.broadcast_to(tmp360, [XBLOCK, RBLOCK])
    tmp368 = tl.load(in_ptr0 + (14 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp369 = tl.load(in_ptr1 + (14)).to(tl.float32)
    tmp370 = tl.broadcast_to(tmp369, [XBLOCK, RBLOCK])
    tmp379 = tl.load(in_ptr0 + (45 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp380 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp381 = tl.broadcast_to(tmp380, [XBLOCK, RBLOCK])
    tmp385 = tl.load(in_ptr0 + (46 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp386 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp387 = tl.broadcast_to(tmp386, [XBLOCK, RBLOCK])
    tmp391 = tl.load(in_ptr0 + (77 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp392 = tl.load(in_ptr1 + (77)).to(tl.float32)
    tmp393 = tl.broadcast_to(tmp392, [XBLOCK, RBLOCK])
    tmp397 = tl.load(in_ptr0 + (78 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp398 = tl.load(in_ptr1 + (78)).to(tl.float32)
    tmp399 = tl.broadcast_to(tmp398, [XBLOCK, RBLOCK])
    tmp403 = tl.load(in_ptr0 + (109 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp404 = tl.load(in_ptr1 + (109)).to(tl.float32)
    tmp405 = tl.broadcast_to(tmp404, [XBLOCK, RBLOCK])
    tmp409 = tl.load(in_ptr0 + (110 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp410 = tl.load(in_ptr1 + (110)).to(tl.float32)
    tmp411 = tl.broadcast_to(tmp410, [XBLOCK, RBLOCK])
    tmp415 = tl.load(in_ptr0 + (15 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp416 = tl.load(in_ptr1 + (15)).to(tl.float32)
    tmp417 = tl.broadcast_to(tmp416, [XBLOCK, RBLOCK])
    tmp424 = tl.load(in_ptr0 + (16 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp425 = tl.load(in_ptr1 + (16)).to(tl.float32)
    tmp426 = tl.broadcast_to(tmp425, [XBLOCK, RBLOCK])
    tmp435 = tl.load(in_ptr0 + (47 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp436 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp437 = tl.broadcast_to(tmp436, [XBLOCK, RBLOCK])
    tmp441 = tl.load(in_ptr0 + (48 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp442 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp443 = tl.broadcast_to(tmp442, [XBLOCK, RBLOCK])
    tmp447 = tl.load(in_ptr0 + (79 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp448 = tl.load(in_ptr1 + (79)).to(tl.float32)
    tmp449 = tl.broadcast_to(tmp448, [XBLOCK, RBLOCK])
    tmp453 = tl.load(in_ptr0 + (80 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp454 = tl.load(in_ptr1 + (80)).to(tl.float32)
    tmp455 = tl.broadcast_to(tmp454, [XBLOCK, RBLOCK])
    tmp459 = tl.load(in_ptr0 + (111 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp460 = tl.load(in_ptr1 + (111)).to(tl.float32)
    tmp461 = tl.broadcast_to(tmp460, [XBLOCK, RBLOCK])
    tmp465 = tl.load(in_ptr0 + (112 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp466 = tl.load(in_ptr1 + (112)).to(tl.float32)
    tmp467 = tl.broadcast_to(tmp466, [XBLOCK, RBLOCK])
    tmp471 = tl.load(in_ptr0 + (17 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp472 = tl.load(in_ptr1 + (17)).to(tl.float32)
    tmp473 = tl.broadcast_to(tmp472, [XBLOCK, RBLOCK])
    tmp480 = tl.load(in_ptr0 + (18 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp481 = tl.load(in_ptr1 + (18)).to(tl.float32)
    tmp482 = tl.broadcast_to(tmp481, [XBLOCK, RBLOCK])
    tmp491 = tl.load(in_ptr0 + (49 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp492 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp493 = tl.broadcast_to(tmp492, [XBLOCK, RBLOCK])
    tmp497 = tl.load(in_ptr0 + (50 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp498 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp499 = tl.broadcast_to(tmp498, [XBLOCK, RBLOCK])
    tmp503 = tl.load(in_ptr0 + (81 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp504 = tl.load(in_ptr1 + (81)).to(tl.float32)
    tmp505 = tl.broadcast_to(tmp504, [XBLOCK, RBLOCK])
    tmp509 = tl.load(in_ptr0 + (82 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp510 = tl.load(in_ptr1 + (82)).to(tl.float32)
    tmp511 = tl.broadcast_to(tmp510, [XBLOCK, RBLOCK])
    tmp515 = tl.load(in_ptr0 + (113 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp516 = tl.load(in_ptr1 + (113)).to(tl.float32)
    tmp517 = tl.broadcast_to(tmp516, [XBLOCK, RBLOCK])
    tmp521 = tl.load(in_ptr0 + (114 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp522 = tl.load(in_ptr1 + (114)).to(tl.float32)
    tmp523 = tl.broadcast_to(tmp522, [XBLOCK, RBLOCK])
    tmp527 = tl.load(in_ptr0 + (19 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp528 = tl.load(in_ptr1 + (19)).to(tl.float32)
    tmp529 = tl.broadcast_to(tmp528, [XBLOCK, RBLOCK])
    tmp536 = tl.load(in_ptr0 + (20 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp537 = tl.load(in_ptr1 + (20)).to(tl.float32)
    tmp538 = tl.broadcast_to(tmp537, [XBLOCK, RBLOCK])
    tmp547 = tl.load(in_ptr0 + (51 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp548 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp549 = tl.broadcast_to(tmp548, [XBLOCK, RBLOCK])
    tmp553 = tl.load(in_ptr0 + (52 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp554 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp555 = tl.broadcast_to(tmp554, [XBLOCK, RBLOCK])
    tmp559 = tl.load(in_ptr0 + (83 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp560 = tl.load(in_ptr1 + (83)).to(tl.float32)
    tmp561 = tl.broadcast_to(tmp560, [XBLOCK, RBLOCK])
    tmp565 = tl.load(in_ptr0 + (84 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp566 = tl.load(in_ptr1 + (84)).to(tl.float32)
    tmp567 = tl.broadcast_to(tmp566, [XBLOCK, RBLOCK])
    tmp571 = tl.load(in_ptr0 + (115 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp572 = tl.load(in_ptr1 + (115)).to(tl.float32)
    tmp573 = tl.broadcast_to(tmp572, [XBLOCK, RBLOCK])
    tmp577 = tl.load(in_ptr0 + (116 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp578 = tl.load(in_ptr1 + (116)).to(tl.float32)
    tmp579 = tl.broadcast_to(tmp578, [XBLOCK, RBLOCK])
    tmp583 = tl.load(in_ptr0 + (21 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp584 = tl.load(in_ptr1 + (21)).to(tl.float32)
    tmp585 = tl.broadcast_to(tmp584, [XBLOCK, RBLOCK])
    tmp592 = tl.load(in_ptr0 + (22 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp593 = tl.load(in_ptr1 + (22)).to(tl.float32)
    tmp594 = tl.broadcast_to(tmp593, [XBLOCK, RBLOCK])
    tmp603 = tl.load(in_ptr0 + (53 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp604 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp605 = tl.broadcast_to(tmp604, [XBLOCK, RBLOCK])
    tmp609 = tl.load(in_ptr0 + (54 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp610 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp611 = tl.broadcast_to(tmp610, [XBLOCK, RBLOCK])
    tmp615 = tl.load(in_ptr0 + (85 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp616 = tl.load(in_ptr1 + (85)).to(tl.float32)
    tmp617 = tl.broadcast_to(tmp616, [XBLOCK, RBLOCK])
    tmp621 = tl.load(in_ptr0 + (86 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp622 = tl.load(in_ptr1 + (86)).to(tl.float32)
    tmp623 = tl.broadcast_to(tmp622, [XBLOCK, RBLOCK])
    tmp627 = tl.load(in_ptr0 + (117 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp628 = tl.load(in_ptr1 + (117)).to(tl.float32)
    tmp629 = tl.broadcast_to(tmp628, [XBLOCK, RBLOCK])
    tmp633 = tl.load(in_ptr0 + (118 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp634 = tl.load(in_ptr1 + (118)).to(tl.float32)
    tmp635 = tl.broadcast_to(tmp634, [XBLOCK, RBLOCK])
    tmp639 = tl.load(in_ptr0 + (23 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp640 = tl.load(in_ptr1 + (23)).to(tl.float32)
    tmp641 = tl.broadcast_to(tmp640, [XBLOCK, RBLOCK])
    tmp648 = tl.load(in_ptr0 + (24 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp649 = tl.load(in_ptr1 + (24)).to(tl.float32)
    tmp650 = tl.broadcast_to(tmp649, [XBLOCK, RBLOCK])
    tmp659 = tl.load(in_ptr0 + (55 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp660 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp661 = tl.broadcast_to(tmp660, [XBLOCK, RBLOCK])
    tmp665 = tl.load(in_ptr0 + (56 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp666 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp667 = tl.broadcast_to(tmp666, [XBLOCK, RBLOCK])
    tmp671 = tl.load(in_ptr0 + (87 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp672 = tl.load(in_ptr1 + (87)).to(tl.float32)
    tmp673 = tl.broadcast_to(tmp672, [XBLOCK, RBLOCK])
    tmp677 = tl.load(in_ptr0 + (88 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp678 = tl.load(in_ptr1 + (88)).to(tl.float32)
    tmp679 = tl.broadcast_to(tmp678, [XBLOCK, RBLOCK])
    tmp683 = tl.load(in_ptr0 + (119 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp684 = tl.load(in_ptr1 + (119)).to(tl.float32)
    tmp685 = tl.broadcast_to(tmp684, [XBLOCK, RBLOCK])
    tmp689 = tl.load(in_ptr0 + (120 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp690 = tl.load(in_ptr1 + (120)).to(tl.float32)
    tmp691 = tl.broadcast_to(tmp690, [XBLOCK, RBLOCK])
    tmp695 = tl.load(in_ptr0 + (25 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp696 = tl.load(in_ptr1 + (25)).to(tl.float32)
    tmp697 = tl.broadcast_to(tmp696, [XBLOCK, RBLOCK])
    tmp704 = tl.load(in_ptr0 + (26 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp705 = tl.load(in_ptr1 + (26)).to(tl.float32)
    tmp706 = tl.broadcast_to(tmp705, [XBLOCK, RBLOCK])
    tmp715 = tl.load(in_ptr0 + (57 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp716 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp717 = tl.broadcast_to(tmp716, [XBLOCK, RBLOCK])
    tmp721 = tl.load(in_ptr0 + (58 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp722 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp723 = tl.broadcast_to(tmp722, [XBLOCK, RBLOCK])
    tmp727 = tl.load(in_ptr0 + (89 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp728 = tl.load(in_ptr1 + (89)).to(tl.float32)
    tmp729 = tl.broadcast_to(tmp728, [XBLOCK, RBLOCK])
    tmp733 = tl.load(in_ptr0 + (90 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp734 = tl.load(in_ptr1 + (90)).to(tl.float32)
    tmp735 = tl.broadcast_to(tmp734, [XBLOCK, RBLOCK])
    tmp739 = tl.load(in_ptr0 + (121 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp740 = tl.load(in_ptr1 + (121)).to(tl.float32)
    tmp741 = tl.broadcast_to(tmp740, [XBLOCK, RBLOCK])
    tmp745 = tl.load(in_ptr0 + (122 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp746 = tl.load(in_ptr1 + (122)).to(tl.float32)
    tmp747 = tl.broadcast_to(tmp746, [XBLOCK, RBLOCK])
    tmp751 = tl.load(in_ptr0 + (27 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp752 = tl.load(in_ptr1 + (27)).to(tl.float32)
    tmp753 = tl.broadcast_to(tmp752, [XBLOCK, RBLOCK])
    tmp760 = tl.load(in_ptr0 + (28 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp761 = tl.load(in_ptr1 + (28)).to(tl.float32)
    tmp762 = tl.broadcast_to(tmp761, [XBLOCK, RBLOCK])
    tmp771 = tl.load(in_ptr0 + (59 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp772 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp773 = tl.broadcast_to(tmp772, [XBLOCK, RBLOCK])
    tmp777 = tl.load(in_ptr0 + (60 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp778 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp779 = tl.broadcast_to(tmp778, [XBLOCK, RBLOCK])
    tmp783 = tl.load(in_ptr0 + (91 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp784 = tl.load(in_ptr1 + (91)).to(tl.float32)
    tmp785 = tl.broadcast_to(tmp784, [XBLOCK, RBLOCK])
    tmp789 = tl.load(in_ptr0 + (92 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp790 = tl.load(in_ptr1 + (92)).to(tl.float32)
    tmp791 = tl.broadcast_to(tmp790, [XBLOCK, RBLOCK])
    tmp795 = tl.load(in_ptr0 + (123 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp796 = tl.load(in_ptr1 + (123)).to(tl.float32)
    tmp797 = tl.broadcast_to(tmp796, [XBLOCK, RBLOCK])
    tmp801 = tl.load(in_ptr0 + (124 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp802 = tl.load(in_ptr1 + (124)).to(tl.float32)
    tmp803 = tl.broadcast_to(tmp802, [XBLOCK, RBLOCK])
    tmp807 = tl.load(in_ptr0 + (29 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp808 = tl.load(in_ptr1 + (29)).to(tl.float32)
    tmp809 = tl.broadcast_to(tmp808, [XBLOCK, RBLOCK])
    tmp816 = tl.load(in_ptr0 + (30 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp817 = tl.load(in_ptr1 + (30)).to(tl.float32)
    tmp818 = tl.broadcast_to(tmp817, [XBLOCK, RBLOCK])
    tmp827 = tl.load(in_ptr0 + (61 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp828 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp829 = tl.broadcast_to(tmp828, [XBLOCK, RBLOCK])
    tmp833 = tl.load(in_ptr0 + (62 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp834 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp835 = tl.broadcast_to(tmp834, [XBLOCK, RBLOCK])
    tmp839 = tl.load(in_ptr0 + (93 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp840 = tl.load(in_ptr1 + (93)).to(tl.float32)
    tmp841 = tl.broadcast_to(tmp840, [XBLOCK, RBLOCK])
    tmp845 = tl.load(in_ptr0 + (94 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp846 = tl.load(in_ptr1 + (94)).to(tl.float32)
    tmp847 = tl.broadcast_to(tmp846, [XBLOCK, RBLOCK])
    tmp851 = tl.load(in_ptr0 + (125 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp852 = tl.load(in_ptr1 + (125)).to(tl.float32)
    tmp853 = tl.broadcast_to(tmp852, [XBLOCK, RBLOCK])
    tmp857 = tl.load(in_ptr0 + (126 + (128*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp858 = tl.load(in_ptr1 + (126)).to(tl.float32)
    tmp859 = tl.broadcast_to(tmp858, [XBLOCK, RBLOCK])
    _tmp866 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp83 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp84 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp92 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp93 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp95 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp140 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp148 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp151 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp195 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp196 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp204 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp205 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp207 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp251 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp252 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp260 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp263 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp307 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp308 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp316 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp317 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp319 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp363 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp364 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp372 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp373 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp375 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp419 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp420 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp428 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp429 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp431 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp475 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp476 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp484 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp485 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp487 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp531 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp532 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp540 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp541 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp543 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp587 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp588 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp596 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp597 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp599 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp643 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp644 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp652 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp653 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp655 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp699 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp700 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp708 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp709 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp711 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp755 = tl.load(in_ptr66 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp756 = tl.load(in_ptr67 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp764 = tl.load(in_ptr68 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp765 = tl.load(in_ptr69 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp767 = tl.load(in_ptr70 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp811 = tl.load(in_ptr71 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp812 = tl.load(in_ptr72 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp820 = tl.load(in_ptr73 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp821 = tl.load(in_ptr74 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp823 = tl.load(in_ptr75 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp29 = tmp28 * tmp4
        tmp30 = tmp29 + tmp6
        tmp34 = tmp31 + tmp33
        tmp35 = tmp34 * tmp15
        tmp36 = tmp30 + tmp35
        tmp40 = tmp37 + tmp39
        tmp41 = tmp40 * tmp22
        tmp42 = tmp36 + tmp41
        tmp46 = tmp43 + tmp45
        tmp47 = tmp46 * tmp4
        tmp48 = tmp47 + tmp6
        tmp52 = tmp49 + tmp51
        tmp53 = tmp52 * tmp15
        tmp54 = tmp48 + tmp53
        tmp58 = tmp55 + tmp57
        tmp59 = tmp58 * tmp22
        tmp60 = tmp54 + tmp59
        tmp64 = tmp61 + tmp63
        tmp65 = tmp64 * tmp4
        tmp66 = tmp65 + tmp6
        tmp70 = tmp67 + tmp69
        tmp71 = tmp70 * tmp15
        tmp72 = tmp66 + tmp71
        tmp76 = tmp73 + tmp75
        tmp77 = tmp76 * tmp22
        tmp78 = tmp72 + tmp77
        tmp82 = tmp79 + tmp81
        tmp85 = tmp83 + tmp84
        tmp86 = tmp82 * tmp85
        tmp87 = tmp24 + tmp86
        tmp91 = tmp88 + tmp90
        tmp94 = tmp92 + tmp93
        tmp96 = tmp94 + tmp95
        tmp97 = tmp91 * tmp96
        tmp98 = tmp87 + tmp97
        tmp102 = tmp99 + tmp101
        tmp103 = tmp102 * tmp85
        tmp104 = tmp42 + tmp103
        tmp108 = tmp105 + tmp107
        tmp109 = tmp108 * tmp96
        tmp110 = tmp104 + tmp109
        tmp114 = tmp111 + tmp113
        tmp115 = tmp114 * tmp85
        tmp116 = tmp60 + tmp115
        tmp120 = tmp117 + tmp119
        tmp121 = tmp120 * tmp96
        tmp122 = tmp116 + tmp121
        tmp126 = tmp123 + tmp125
        tmp127 = tmp126 * tmp85
        tmp128 = tmp78 + tmp127
        tmp132 = tmp129 + tmp131
        tmp133 = tmp132 * tmp96
        tmp134 = tmp128 + tmp133
        tmp138 = tmp135 + tmp137
        tmp141 = tmp139 + tmp140
        tmp142 = tmp138 * tmp141
        tmp143 = tmp98 + tmp142
        tmp147 = tmp144 + tmp146
        tmp150 = tmp148 + tmp149
        tmp152 = tmp150 + tmp151
        tmp153 = tmp147 * tmp152
        tmp154 = tmp143 + tmp153
        tmp158 = tmp155 + tmp157
        tmp159 = tmp158 * tmp141
        tmp160 = tmp110 + tmp159
        tmp164 = tmp161 + tmp163
        tmp165 = tmp164 * tmp152
        tmp166 = tmp160 + tmp165
        tmp170 = tmp167 + tmp169
        tmp171 = tmp170 * tmp141
        tmp172 = tmp122 + tmp171
        tmp176 = tmp173 + tmp175
        tmp177 = tmp176 * tmp152
        tmp178 = tmp172 + tmp177
        tmp182 = tmp179 + tmp181
        tmp183 = tmp182 * tmp141
        tmp184 = tmp134 + tmp183
        tmp188 = tmp185 + tmp187
        tmp189 = tmp188 * tmp152
        tmp190 = tmp184 + tmp189
        tmp194 = tmp191 + tmp193
        tmp197 = tmp195 + tmp196
        tmp198 = tmp194 * tmp197
        tmp199 = tmp154 + tmp198
        tmp203 = tmp200 + tmp202
        tmp206 = tmp204 + tmp205
        tmp208 = tmp206 + tmp207
        tmp209 = tmp203 * tmp208
        tmp210 = tmp199 + tmp209
        tmp214 = tmp211 + tmp213
        tmp215 = tmp214 * tmp197
        tmp216 = tmp166 + tmp215
        tmp220 = tmp217 + tmp219
        tmp221 = tmp220 * tmp208
        tmp222 = tmp216 + tmp221
        tmp226 = tmp223 + tmp225
        tmp227 = tmp226 * tmp197
        tmp228 = tmp178 + tmp227
        tmp232 = tmp229 + tmp231
        tmp233 = tmp232 * tmp208
        tmp234 = tmp228 + tmp233
        tmp238 = tmp235 + tmp237
        tmp239 = tmp238 * tmp197
        tmp240 = tmp190 + tmp239
        tmp244 = tmp241 + tmp243
        tmp245 = tmp244 * tmp208
        tmp246 = tmp240 + tmp245
        tmp250 = tmp247 + tmp249
        tmp253 = tmp251 + tmp252
        tmp254 = tmp250 * tmp253
        tmp255 = tmp210 + tmp254
        tmp259 = tmp256 + tmp258
        tmp262 = tmp260 + tmp261
        tmp264 = tmp262 + tmp263
        tmp265 = tmp259 * tmp264
        tmp266 = tmp255 + tmp265
        tmp270 = tmp267 + tmp269
        tmp271 = tmp270 * tmp253
        tmp272 = tmp222 + tmp271
        tmp276 = tmp273 + tmp275
        tmp277 = tmp276 * tmp264
        tmp278 = tmp272 + tmp277
        tmp282 = tmp279 + tmp281
        tmp283 = tmp282 * tmp253
        tmp284 = tmp234 + tmp283
        tmp288 = tmp285 + tmp287
        tmp289 = tmp288 * tmp264
        tmp290 = tmp284 + tmp289
        tmp294 = tmp291 + tmp293
        tmp295 = tmp294 * tmp253
        tmp296 = tmp246 + tmp295
        tmp300 = tmp297 + tmp299
        tmp301 = tmp300 * tmp264
        tmp302 = tmp296 + tmp301
        tmp306 = tmp303 + tmp305
        tmp309 = tmp307 + tmp308
        tmp310 = tmp306 * tmp309
        tmp311 = tmp266 + tmp310
        tmp315 = tmp312 + tmp314
        tmp318 = tmp316 + tmp317
        tmp320 = tmp318 + tmp319
        tmp321 = tmp315 * tmp320
        tmp322 = tmp311 + tmp321
        tmp326 = tmp323 + tmp325
        tmp327 = tmp326 * tmp309
        tmp328 = tmp278 + tmp327
        tmp332 = tmp329 + tmp331
        tmp333 = tmp332 * tmp320
        tmp334 = tmp328 + tmp333
        tmp338 = tmp335 + tmp337
        tmp339 = tmp338 * tmp309
        tmp340 = tmp290 + tmp339
        tmp344 = tmp341 + tmp343
        tmp345 = tmp344 * tmp320
        tmp346 = tmp340 + tmp345
        tmp350 = tmp347 + tmp349
        tmp351 = tmp350 * tmp309
        tmp352 = tmp302 + tmp351
        tmp356 = tmp353 + tmp355
        tmp357 = tmp356 * tmp320
        tmp358 = tmp352 + tmp357
        tmp362 = tmp359 + tmp361
        tmp365 = tmp363 + tmp364
        tmp366 = tmp362 * tmp365
        tmp367 = tmp322 + tmp366
        tmp371 = tmp368 + tmp370
        tmp374 = tmp372 + tmp373
        tmp376 = tmp374 + tmp375
        tmp377 = tmp371 * tmp376
        tmp378 = tmp367 + tmp377
        tmp382 = tmp379 + tmp381
        tmp383 = tmp382 * tmp365
        tmp384 = tmp334 + tmp383
        tmp388 = tmp385 + tmp387
        tmp389 = tmp388 * tmp376
        tmp390 = tmp384 + tmp389
        tmp394 = tmp391 + tmp393
        tmp395 = tmp394 * tmp365
        tmp396 = tmp346 + tmp395
        tmp400 = tmp397 + tmp399
        tmp401 = tmp400 * tmp376
        tmp402 = tmp396 + tmp401
        tmp406 = tmp403 + tmp405
        tmp407 = tmp406 * tmp365
        tmp408 = tmp358 + tmp407
        tmp412 = tmp409 + tmp411
        tmp413 = tmp412 * tmp376
        tmp414 = tmp408 + tmp413
        tmp418 = tmp415 + tmp417
        tmp421 = tmp419 + tmp420
        tmp422 = tmp418 * tmp421
        tmp423 = tmp378 + tmp422
        tmp427 = tmp424 + tmp426
        tmp430 = tmp428 + tmp429
        tmp432 = tmp430 + tmp431
        tmp433 = tmp427 * tmp432
        tmp434 = tmp423 + tmp433
        tmp438 = tmp435 + tmp437
        tmp439 = tmp438 * tmp421
        tmp440 = tmp390 + tmp439
        tmp444 = tmp441 + tmp443
        tmp445 = tmp444 * tmp432
        tmp446 = tmp440 + tmp445
        tmp450 = tmp447 + tmp449
        tmp451 = tmp450 * tmp421
        tmp452 = tmp402 + tmp451
        tmp456 = tmp453 + tmp455
        tmp457 = tmp456 * tmp432
        tmp458 = tmp452 + tmp457
        tmp462 = tmp459 + tmp461
        tmp463 = tmp462 * tmp421
        tmp464 = tmp414 + tmp463
        tmp468 = tmp465 + tmp467
        tmp469 = tmp468 * tmp432
        tmp470 = tmp464 + tmp469
        tmp474 = tmp471 + tmp473
        tmp477 = tmp475 + tmp476
        tmp478 = tmp474 * tmp477
        tmp479 = tmp434 + tmp478
        tmp483 = tmp480 + tmp482
        tmp486 = tmp484 + tmp485
        tmp488 = tmp486 + tmp487
        tmp489 = tmp483 * tmp488
        tmp490 = tmp479 + tmp489
        tmp494 = tmp491 + tmp493
        tmp495 = tmp494 * tmp477
        tmp496 = tmp446 + tmp495
        tmp500 = tmp497 + tmp499
        tmp501 = tmp500 * tmp488
        tmp502 = tmp496 + tmp501
        tmp506 = tmp503 + tmp505
        tmp507 = tmp506 * tmp477
        tmp508 = tmp458 + tmp507
        tmp512 = tmp509 + tmp511
        tmp513 = tmp512 * tmp488
        tmp514 = tmp508 + tmp513
        tmp518 = tmp515 + tmp517
        tmp519 = tmp518 * tmp477
        tmp520 = tmp470 + tmp519
        tmp524 = tmp521 + tmp523
        tmp525 = tmp524 * tmp488
        tmp526 = tmp520 + tmp525
        tmp530 = tmp527 + tmp529
        tmp533 = tmp531 + tmp532
        tmp534 = tmp530 * tmp533
        tmp535 = tmp490 + tmp534
        tmp539 = tmp536 + tmp538
        tmp542 = tmp540 + tmp541
        tmp544 = tmp542 + tmp543
        tmp545 = tmp539 * tmp544
        tmp546 = tmp535 + tmp545
        tmp550 = tmp547 + tmp549
        tmp551 = tmp550 * tmp533
        tmp552 = tmp502 + tmp551
        tmp556 = tmp553 + tmp555
        tmp557 = tmp556 * tmp544
        tmp558 = tmp552 + tmp557
        tmp562 = tmp559 + tmp561
        tmp563 = tmp562 * tmp533
        tmp564 = tmp514 + tmp563
        tmp568 = tmp565 + tmp567
        tmp569 = tmp568 * tmp544
        tmp570 = tmp564 + tmp569
        tmp574 = tmp571 + tmp573
        tmp575 = tmp574 * tmp533
        tmp576 = tmp526 + tmp575
        tmp580 = tmp577 + tmp579
        tmp581 = tmp580 * tmp544
        tmp582 = tmp576 + tmp581
        tmp586 = tmp583 + tmp585
        tmp589 = tmp587 + tmp588
        tmp590 = tmp586 * tmp589
        tmp591 = tmp546 + tmp590
        tmp595 = tmp592 + tmp594
        tmp598 = tmp596 + tmp597
        tmp600 = tmp598 + tmp599
        tmp601 = tmp595 * tmp600
        tmp602 = tmp591 + tmp601
        tmp606 = tmp603 + tmp605
        tmp607 = tmp606 * tmp589
        tmp608 = tmp558 + tmp607
        tmp612 = tmp609 + tmp611
        tmp613 = tmp612 * tmp600
        tmp614 = tmp608 + tmp613
        tmp618 = tmp615 + tmp617
        tmp619 = tmp618 * tmp589
        tmp620 = tmp570 + tmp619
        tmp624 = tmp621 + tmp623
        tmp625 = tmp624 * tmp600
        tmp626 = tmp620 + tmp625
        tmp630 = tmp627 + tmp629
        tmp631 = tmp630 * tmp589
        tmp632 = tmp582 + tmp631
        tmp636 = tmp633 + tmp635
        tmp637 = tmp636 * tmp600
        tmp638 = tmp632 + tmp637
        tmp642 = tmp639 + tmp641
        tmp645 = tmp643 + tmp644
        tmp646 = tmp642 * tmp645
        tmp647 = tmp602 + tmp646
        tmp651 = tmp648 + tmp650
        tmp654 = tmp652 + tmp653
        tmp656 = tmp654 + tmp655
        tmp657 = tmp651 * tmp656
        tmp658 = tmp647 + tmp657
        tmp662 = tmp659 + tmp661
        tmp663 = tmp662 * tmp645
        tmp664 = tmp614 + tmp663
        tmp668 = tmp665 + tmp667
        tmp669 = tmp668 * tmp656
        tmp670 = tmp664 + tmp669
        tmp674 = tmp671 + tmp673
        tmp675 = tmp674 * tmp645
        tmp676 = tmp626 + tmp675
        tmp680 = tmp677 + tmp679
        tmp681 = tmp680 * tmp656
        tmp682 = tmp676 + tmp681
        tmp686 = tmp683 + tmp685
        tmp687 = tmp686 * tmp645
        tmp688 = tmp638 + tmp687
        tmp692 = tmp689 + tmp691
        tmp693 = tmp692 * tmp656
        tmp694 = tmp688 + tmp693
        tmp698 = tmp695 + tmp697
        tmp701 = tmp699 + tmp700
        tmp702 = tmp698 * tmp701
        tmp703 = tmp658 + tmp702
        tmp707 = tmp704 + tmp706
        tmp710 = tmp708 + tmp709
        tmp712 = tmp710 + tmp711
        tmp713 = tmp707 * tmp712
        tmp714 = tmp703 + tmp713
        tmp718 = tmp715 + tmp717
        tmp719 = tmp718 * tmp701
        tmp720 = tmp670 + tmp719
        tmp724 = tmp721 + tmp723
        tmp725 = tmp724 * tmp712
        tmp726 = tmp720 + tmp725
        tmp730 = tmp727 + tmp729
        tmp731 = tmp730 * tmp701
        tmp732 = tmp682 + tmp731
        tmp736 = tmp733 + tmp735
        tmp737 = tmp736 * tmp712
        tmp738 = tmp732 + tmp737
        tmp742 = tmp739 + tmp741
        tmp743 = tmp742 * tmp701
        tmp744 = tmp694 + tmp743
        tmp748 = tmp745 + tmp747
        tmp749 = tmp748 * tmp712
        tmp750 = tmp744 + tmp749
        tmp754 = tmp751 + tmp753
        tmp757 = tmp755 + tmp756
        tmp758 = tmp754 * tmp757
        tmp759 = tmp714 + tmp758
        tmp763 = tmp760 + tmp762
        tmp766 = tmp764 + tmp765
        tmp768 = tmp766 + tmp767
        tmp769 = tmp763 * tmp768
        tmp770 = tmp759 + tmp769
        tmp774 = tmp771 + tmp773
        tmp775 = tmp774 * tmp757
        tmp776 = tmp726 + tmp775
        tmp780 = tmp777 + tmp779
        tmp781 = tmp780 * tmp768
        tmp782 = tmp776 + tmp781
        tmp786 = tmp783 + tmp785
        tmp787 = tmp786 * tmp757
        tmp788 = tmp738 + tmp787
        tmp792 = tmp789 + tmp791
        tmp793 = tmp792 * tmp768
        tmp794 = tmp788 + tmp793
        tmp798 = tmp795 + tmp797
        tmp799 = tmp798 * tmp757
        tmp800 = tmp750 + tmp799
        tmp804 = tmp801 + tmp803
        tmp805 = tmp804 * tmp768
        tmp806 = tmp800 + tmp805
        tmp810 = tmp807 + tmp809
        tmp813 = tmp811 + tmp812
        tmp814 = tmp810 * tmp813
        tmp815 = tmp770 + tmp814
        tmp819 = tmp816 + tmp818
        tmp822 = tmp820 + tmp821
        tmp824 = tmp822 + tmp823
        tmp825 = tmp819 * tmp824
        tmp826 = tmp815 + tmp825
        tmp830 = tmp827 + tmp829
        tmp831 = tmp830 * tmp813
        tmp832 = tmp782 + tmp831
        tmp836 = tmp833 + tmp835
        tmp837 = tmp836 * tmp824
        tmp838 = tmp832 + tmp837
        tmp842 = tmp839 + tmp841
        tmp843 = tmp842 * tmp813
        tmp844 = tmp794 + tmp843
        tmp848 = tmp845 + tmp847
        tmp849 = tmp848 * tmp824
        tmp850 = tmp844 + tmp849
        tmp854 = tmp851 + tmp853
        tmp855 = tmp854 * tmp813
        tmp856 = tmp806 + tmp855
        tmp860 = tmp857 + tmp859
        tmp861 = tmp860 * tmp824
        tmp862 = tmp856 + tmp861
        tmp863 = tmp850.to(tl.float32)
        tmp864 = tmp863 * tmp863
        tmp865 = tl.broadcast_to(tmp864, [XBLOCK, RBLOCK])
        tmp867 = _tmp866 + tmp865
        _tmp866 = tl.where(rmask, tmp867, _tmp866)
        tl.store(in_out_ptr0 + (r1 + (4096*x0)), tmp826, rmask)
        tl.store(in_out_ptr1 + (r1 + (4096*x0)), tmp838, rmask)
        tl.store(in_out_ptr2 + (r1 + (4096*x0)), tmp850, rmask)
        tl.store(in_out_ptr3 + (r1 + (4096*x0)), tmp862, rmask)
    tmp866 = tl.sum(_tmp866, 1)[:, None]
    _tmp883 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp868 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp877 = tl.load(in_ptr76 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp879 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp869 = tmp868.to(tl.float32)
        tmp870 = 4096.0
        tmp871 = tmp866 / tmp870
        tmp872 = 1e-05
        tmp873 = tmp871 + tmp872
        tmp874 = tl.math.rsqrt(tmp873)
        tmp875 = tmp869 * tmp874
        tmp876 = tmp875.to(tl.float32)
        tmp878 = tmp876 * tmp877
        tmp880 = tmp879.to(tl.float32)
        tmp881 = tmp880 * tmp880
        tmp882 = tl.broadcast_to(tmp881, [XBLOCK, RBLOCK])
        tmp884 = _tmp883 + tmp882
        _tmp883 = tl.where(rmask, tmp884, _tmp883)
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp878, rmask)
    tmp883 = tl.sum(_tmp883, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp885 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp894 = tl.load(in_ptr77 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp886 = tmp885.to(tl.float32)
        tmp887 = 4096.0
        tmp888 = tmp883 / tmp887
        tmp889 = 1e-05
        tmp890 = tmp888 + tmp889
        tmp891 = tl.math.rsqrt(tmp890)
        tmp892 = tmp886 * tmp891
        tmp893 = tmp892.to(tl.float32)
        tmp895 = tmp893 * tmp894
        tl.store(out_ptr3 + (r1 + (4096*x0)), tmp895, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/h2/ch2453npl4qo72dfghcqdm3qfyasryrvi7sxhiiaqn46mduxgnny.py
# Source Nodes: [add, float_1, mean, mul, mul_1, mul_2, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
# add => add_2323
# float_1 => convert_element_type_554
# mean => mean_153
# mul => mul_2815
# mul_1 => mul_2816
# mul_2 => mul_2817
# rsqrt => rsqrt_153
# type_as => convert_element_type_555
triton_red_fused__to_copy_add_mean_mul_rsqrt_97 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_97', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_97', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_97(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp4 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = _tmp4 + tmp3
        _tmp4 = tl.where(rmask, tmp5, _tmp4)
    tmp4 = tl.sum(_tmp4, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp6 = tl.load(in_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp15 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = 4096.0
        tmp9 = tmp4 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = tl.math.rsqrt(tmp11)
        tmp13 = tmp7 * tmp12
        tmp14 = tmp13.to(tl.float32)
        tmp16 = tmp14 * tmp15
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp16, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/ya/cyao6mnbv5vkqggtgklontbawm3udq6l4es4jsdbcxriyksp5qyw.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_98 = async_compile.triton('triton_poi_fused_98', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[4096, 256], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_98', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_98(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 132
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (4096*x1)), xmask, eviction_policy='evict_last').to(tl.float32)
    tl.store(out_ptr0 + (x1 + (136*y0)), tmp0, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/kv/ckvgp7kiugs3abh6ryjm3qoiafgfxq4v2gsrfbbc2i4g7rbpb4tm.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_99 = async_compile.triton('triton_poi_fused_99', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[16384], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_99', 'configs': [instance_descriptor(divisible_by_16=(1,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_99(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 16384
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 4
    x1 = (xindex // 4)
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0 + (136*x1)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/c2/cc2qqwa6rshpfycitohbtxbx4evqjzkffg3gej7rfxexpjur5lx3.py
# Source Nodes: [l__mod___dynamic_dense_31_act, l__mod___dynamic_dense_31_w2], Original ATen: [aten.gelu, aten.view]
# l__mod___dynamic_dense_31_act => add_2332, convert_element_type_570, convert_element_type_571, erf_31, mul_2839, mul_2840, mul_2841
# l__mod___dynamic_dense_31_w2 => view_1117
triton_poi_fused_gelu_view_100 = async_compile.triton('triton_poi_fused_gelu_view_100', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_view_100', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_gelu_view_100(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1081344
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 132
    x1 = (xindex // 132)
    x2 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (136*x1)), None).to(tl.float32)
    tmp1 = tmp0.to(tl.float32)
    tmp2 = 0.5
    tmp3 = tmp1 * tmp2
    tmp4 = 0.7071067811865476
    tmp5 = tmp1 * tmp4
    tmp6 = tl.math.erf(tmp5)
    tmp7 = 1.0
    tmp8 = tmp6 + tmp7
    tmp9 = tmp3 * tmp8
    tmp10 = tmp9.to(tl.float32)
    tl.store(out_ptr0 + (x2), tmp10, None)
''')


# kernel path: /tmp/torchinductor_mengqy/a6/ca6gdvbpotfzqoqpolfu34dynj2ihrblwkxafhsg7fjwda5d5vwy.py
# Source Nodes: [add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1798, add_1800, add_1922, add_198, add_20, add_200, add_2080, add_2081, add_2082, add_2083, add_2084, add_2085, add_2086, add_2087, add_2088, add_2089, add_2090, add_2091, add_2092, add_2093, add_2094, add_2095, add_2096, add_2097, add_2098, add_2099, add_2100, add_2101, add_2102, add_2103, add_2104, add_2105, add_2106, add_2107, add_2108, add_2109, add_2110, add_2111, add_2176, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, l__mod___output, mean_32, mul_2048, mul_2049, mul_2050, mul_2051, mul_2052, mul_2053, mul_2054, mul_2055, mul_2056, mul_2057, mul_2058, mul_2059, mul_2060, mul_2061, mul_2062, mul_2063, mul_2064, mul_2065, mul_2066, mul_2067, mul_2068, mul_2069, mul_2070, mul_2071, mul_2072, mul_2073, mul_2074, mul_2075, mul_2076, mul_2077, mul_2078, mul_2079, mul_2144, mul_2145, mul_2146, rsqrt_32, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.view]
# add_1058 => add_1259
# add_1150 => add_1360
# add_1152 => add_1362
# add_1250 => add_1469
# add_126 => add_192
# add_128 => add_194
# add_1350 => add_1578
# add_1352 => add_1580
# add_1458 => add_1695
# add_1566 => add_1812
# add_1568 => add_1814
# add_162 => add_237
# add_1682 => add_1937
# add_1798 => add_2062
# add_1800 => add_2064
# add_1922 => add_2195
# add_198 => add_282
# add_20 => add_39
# add_200 => add_284
# add_2080 => add_2366
# add_2081 => add_2367
# add_2082 => add_2368
# add_2083 => add_2369
# add_2084 => add_2370
# add_2085 => add_2371
# add_2086 => add_2372
# add_2087 => add_2373
# add_2088 => add_2374
# add_2089 => add_2375
# add_2090 => add_2376
# add_2091 => add_2377
# add_2092 => add_2378
# add_2093 => add_2379
# add_2094 => add_2380
# add_2095 => add_2381
# add_2096 => add_2382
# add_2097 => add_2383
# add_2098 => add_2384
# add_2099 => add_2385
# add_2100 => add_2386
# add_2101 => add_2387
# add_2102 => add_2388
# add_2103 => add_2389
# add_2104 => add_2390
# add_2105 => add_2391
# add_2106 => add_2392
# add_2107 => add_2393
# add_2108 => add_2394
# add_2109 => add_2395
# add_2110 => add_2396
# add_2111 => add_2397
# add_2176 => add_2462
# add_242 => add_335
# add_286 => add_388
# add_288 => add_390
# add_3 => add_3
# add_31 => add_60
# add_33 => add_62
# add_338 => add_449
# add_390 => add_510
# add_392 => add_512
# add_450 => add_579
# add_5 => add_5
# add_50 => add_89
# add_510 => add_648
# add_512 => add_650
# add_578 => add_725
# add_646 => add_802
# add_648 => add_804
# add_70 => add_118
# add_72 => add_120
# add_722 => add_887
# add_798 => add_972
# add_800 => add_974
# add_882 => add_1065
# add_966 => add_1158
# add_968 => add_1160
# add_98 => add_155
# float_1 => convert_element_type_572
# l__mod___output => view_1120
# mean_32 => mean_158
# mul_2048 => mul_2874
# mul_2049 => mul_2875
# mul_2050 => mul_2876
# mul_2051 => mul_2877
# mul_2052 => mul_2878
# mul_2053 => mul_2879
# mul_2054 => mul_2880
# mul_2055 => mul_2881
# mul_2056 => mul_2882
# mul_2057 => mul_2883
# mul_2058 => mul_2884
# mul_2059 => mul_2885
# mul_2060 => mul_2886
# mul_2061 => mul_2887
# mul_2062 => mul_2888
# mul_2063 => mul_2889
# mul_2064 => mul_2890
# mul_2065 => mul_2891
# mul_2066 => mul_2892
# mul_2067 => mul_2893
# mul_2068 => mul_2894
# mul_2069 => mul_2895
# mul_2070 => mul_2896
# mul_2071 => mul_2897
# mul_2072 => mul_2898
# mul_2073 => mul_2899
# mul_2074 => mul_2900
# mul_2075 => mul_2901
# mul_2076 => mul_2902
# mul_2077 => mul_2903
# mul_2078 => mul_2904
# mul_2079 => mul_2905
# mul_2144 => mul_2970
# mul_2145 => mul_2971
# mul_2146 => mul_2972
# rsqrt_32 => rsqrt_158
# type_as => convert_element_type_573
triton_red_fused__to_copy_add_mean_mul_rsqrt_view_101 = async_compile.triton('triton_red_fused__to_copy_add_mean_mul_rsqrt_view_101', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: '*fp16', 4: '*fp16', 5: '*fp16', 6: '*fp16', 7: '*fp16', 8: '*fp16', 9: '*fp32', 10: '*fp16', 11: '*fp16', 12: '*fp16', 13: '*fp16', 14: '*fp16', 15: '*fp16', 16: '*fp16', 17: '*fp16', 18: '*fp16', 19: '*fp16', 20: '*fp16', 21: '*fp16', 22: '*fp16', 23: '*fp16', 24: '*fp16', 25: '*fp16', 26: '*fp16', 27: '*fp16', 28: '*fp16', 29: '*fp16', 30: '*fp16', 31: '*fp16', 32: '*fp16', 33: '*fp16', 34: '*fp16', 35: '*fp16', 36: '*fp16', 37: '*fp16', 38: '*fp16', 39: '*fp16', 40: '*fp16', 41: '*fp16', 42: '*fp16', 43: '*fp16', 44: '*fp16', 45: '*fp16', 46: '*fp16', 47: '*fp16', 48: '*fp16', 49: '*fp16', 50: '*fp16', 51: '*fp16', 52: '*fp16', 53: '*fp16', 54: '*fp16', 55: '*fp16', 56: '*fp16', 57: '*fp16', 58: '*fp16', 59: '*fp16', 60: '*fp16', 61: '*fp16', 62: '*fp16', 63: '*fp16', 64: '*fp16', 65: '*fp16', 66: '*fp16', 67: '*fp16', 68: '*fp16', 69: '*fp16', 70: '*fp16', 71: '*fp16', 72: '*fp16', 73: '*fp16', 74: '*fp16', 75: '*fp16', 76: '*fp16', 77: '*fp16', 78: '*fp16', 79: '*fp16', 80: '*fp32', 81: '*fp16', 82: 'i32', 83: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1', 'in_out_ptr2', 'in_out_ptr3', 'in_out_ptr4', 'in_out_ptr5', 'in_out_ptr6', 'in_out_ptr7', 'in_out_ptr8', 'in_out_ptr9'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__to_copy_add_mean_mul_rsqrt_view_101', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(82, 83))]}
)
@triton.jit
def triton_red_fused__to_copy_add_mean_mul_rsqrt_view_101(in_out_ptr0, in_out_ptr1, in_out_ptr2, in_out_ptr3, in_out_ptr4, in_out_ptr5, in_out_ptr6, in_out_ptr7, in_out_ptr8, in_out_ptr9, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 4096
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (33 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (33)).to(tl.float32)
    tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
    tmp8 = tl.load(in_ptr0 + (34 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp9 = tl.load(in_ptr1 + (34)).to(tl.float32)
    tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
    tmp18 = tl.load(in_ptr0 + (35 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp19 = tl.load(in_ptr1 + (35)).to(tl.float32)
    tmp20 = tl.broadcast_to(tmp19, [XBLOCK, RBLOCK])
    tmp25 = tl.load(in_ptr0 + (36 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp26 = tl.load(in_ptr1 + (36)).to(tl.float32)
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
    tmp34 = tl.load(in_ptr0 + (37 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp35 = tl.load(in_ptr1 + (37)).to(tl.float32)
    tmp36 = tl.broadcast_to(tmp35, [XBLOCK, RBLOCK])
    tmp45 = tl.load(in_ptr0 + (38 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp46 = tl.load(in_ptr1 + (38)).to(tl.float32)
    tmp47 = tl.broadcast_to(tmp46, [XBLOCK, RBLOCK])
    tmp54 = tl.load(in_ptr0 + (39 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp55 = tl.load(in_ptr1 + (39)).to(tl.float32)
    tmp56 = tl.broadcast_to(tmp55, [XBLOCK, RBLOCK])
    tmp65 = tl.load(in_ptr0 + (40 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp66 = tl.load(in_ptr1 + (40)).to(tl.float32)
    tmp67 = tl.broadcast_to(tmp66, [XBLOCK, RBLOCK])
    tmp74 = tl.load(in_ptr0 + (41 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp75 = tl.load(in_ptr1 + (41)).to(tl.float32)
    tmp76 = tl.broadcast_to(tmp75, [XBLOCK, RBLOCK])
    tmp85 = tl.load(in_ptr0 + (42 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp86 = tl.load(in_ptr1 + (42)).to(tl.float32)
    tmp87 = tl.broadcast_to(tmp86, [XBLOCK, RBLOCK])
    tmp94 = tl.load(in_ptr0 + (43 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp95 = tl.load(in_ptr1 + (43)).to(tl.float32)
    tmp96 = tl.broadcast_to(tmp95, [XBLOCK, RBLOCK])
    tmp105 = tl.load(in_ptr0 + (44 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp106 = tl.load(in_ptr1 + (44)).to(tl.float32)
    tmp107 = tl.broadcast_to(tmp106, [XBLOCK, RBLOCK])
    tmp114 = tl.load(in_ptr0 + (45 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp115 = tl.load(in_ptr1 + (45)).to(tl.float32)
    tmp116 = tl.broadcast_to(tmp115, [XBLOCK, RBLOCK])
    tmp125 = tl.load(in_ptr0 + (46 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp126 = tl.load(in_ptr1 + (46)).to(tl.float32)
    tmp127 = tl.broadcast_to(tmp126, [XBLOCK, RBLOCK])
    tmp134 = tl.load(in_ptr0 + (47 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp135 = tl.load(in_ptr1 + (47)).to(tl.float32)
    tmp136 = tl.broadcast_to(tmp135, [XBLOCK, RBLOCK])
    tmp145 = tl.load(in_ptr0 + (48 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp146 = tl.load(in_ptr1 + (48)).to(tl.float32)
    tmp147 = tl.broadcast_to(tmp146, [XBLOCK, RBLOCK])
    tmp154 = tl.load(in_ptr0 + (49 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp155 = tl.load(in_ptr1 + (49)).to(tl.float32)
    tmp156 = tl.broadcast_to(tmp155, [XBLOCK, RBLOCK])
    tmp165 = tl.load(in_ptr0 + (50 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp166 = tl.load(in_ptr1 + (50)).to(tl.float32)
    tmp167 = tl.broadcast_to(tmp166, [XBLOCK, RBLOCK])
    tmp174 = tl.load(in_ptr0 + (51 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp175 = tl.load(in_ptr1 + (51)).to(tl.float32)
    tmp176 = tl.broadcast_to(tmp175, [XBLOCK, RBLOCK])
    tmp185 = tl.load(in_ptr0 + (52 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp186 = tl.load(in_ptr1 + (52)).to(tl.float32)
    tmp187 = tl.broadcast_to(tmp186, [XBLOCK, RBLOCK])
    tmp194 = tl.load(in_ptr0 + (53 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp195 = tl.load(in_ptr1 + (53)).to(tl.float32)
    tmp196 = tl.broadcast_to(tmp195, [XBLOCK, RBLOCK])
    tmp205 = tl.load(in_ptr0 + (54 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp206 = tl.load(in_ptr1 + (54)).to(tl.float32)
    tmp207 = tl.broadcast_to(tmp206, [XBLOCK, RBLOCK])
    tmp214 = tl.load(in_ptr0 + (55 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp215 = tl.load(in_ptr1 + (55)).to(tl.float32)
    tmp216 = tl.broadcast_to(tmp215, [XBLOCK, RBLOCK])
    tmp225 = tl.load(in_ptr0 + (56 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp226 = tl.load(in_ptr1 + (56)).to(tl.float32)
    tmp227 = tl.broadcast_to(tmp226, [XBLOCK, RBLOCK])
    tmp234 = tl.load(in_ptr0 + (57 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp235 = tl.load(in_ptr1 + (57)).to(tl.float32)
    tmp236 = tl.broadcast_to(tmp235, [XBLOCK, RBLOCK])
    tmp245 = tl.load(in_ptr0 + (58 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp246 = tl.load(in_ptr1 + (58)).to(tl.float32)
    tmp247 = tl.broadcast_to(tmp246, [XBLOCK, RBLOCK])
    tmp254 = tl.load(in_ptr0 + (59 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp255 = tl.load(in_ptr1 + (59)).to(tl.float32)
    tmp256 = tl.broadcast_to(tmp255, [XBLOCK, RBLOCK])
    tmp265 = tl.load(in_ptr0 + (60 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp266 = tl.load(in_ptr1 + (60)).to(tl.float32)
    tmp267 = tl.broadcast_to(tmp266, [XBLOCK, RBLOCK])
    tmp274 = tl.load(in_ptr0 + (61 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp275 = tl.load(in_ptr1 + (61)).to(tl.float32)
    tmp276 = tl.broadcast_to(tmp275, [XBLOCK, RBLOCK])
    tmp285 = tl.load(in_ptr0 + (62 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp286 = tl.load(in_ptr1 + (62)).to(tl.float32)
    tmp287 = tl.broadcast_to(tmp286, [XBLOCK, RBLOCK])
    tmp294 = tl.load(in_ptr0 + (63 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp295 = tl.load(in_ptr1 + (63)).to(tl.float32)
    tmp296 = tl.broadcast_to(tmp295, [XBLOCK, RBLOCK])
    tmp305 = tl.load(in_ptr0 + (64 + (132*x0)), None, eviction_policy='evict_last').to(tl.float32)
    tmp306 = tl.load(in_ptr1 + (64)).to(tl.float32)
    tmp307 = tl.broadcast_to(tmp306, [XBLOCK, RBLOCK])
    _tmp317 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp4 = tl.load(in_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp12 = tl.load(in_out_ptr0 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp14 = tl.load(in_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp22 = tl.load(in_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp29 = tl.load(in_out_ptr1 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp30 = tl.load(in_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp38 = tl.load(in_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp39 = tl.load(in_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp41 = tl.load(in_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp49 = tl.load(in_out_ptr2 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp50 = tl.load(in_ptr9 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp58 = tl.load(in_ptr10 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp59 = tl.load(in_ptr11 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp61 = tl.load(in_ptr12 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp69 = tl.load(in_ptr13 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp70 = tl.load(in_ptr14 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp78 = tl.load(in_ptr15 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp79 = tl.load(in_ptr16 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp81 = tl.load(in_ptr17 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp89 = tl.load(in_ptr18 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp90 = tl.load(in_ptr19 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp98 = tl.load(in_ptr20 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp99 = tl.load(in_ptr21 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp101 = tl.load(in_ptr22 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp109 = tl.load(in_ptr23 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp110 = tl.load(in_ptr24 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp118 = tl.load(in_ptr25 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp119 = tl.load(in_ptr26 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp121 = tl.load(in_ptr27 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp129 = tl.load(in_ptr28 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp130 = tl.load(in_ptr29 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp138 = tl.load(in_ptr30 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp139 = tl.load(in_ptr31 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp141 = tl.load(in_ptr32 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp149 = tl.load(in_ptr33 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp150 = tl.load(in_ptr34 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp158 = tl.load(in_ptr35 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp159 = tl.load(in_ptr36 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp161 = tl.load(in_ptr37 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp169 = tl.load(in_ptr38 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp170 = tl.load(in_ptr39 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp178 = tl.load(in_ptr40 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp179 = tl.load(in_ptr41 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp181 = tl.load(in_ptr42 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp189 = tl.load(in_out_ptr3 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp190 = tl.load(in_ptr43 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp198 = tl.load(in_ptr44 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp199 = tl.load(in_ptr45 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp201 = tl.load(in_ptr46 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp209 = tl.load(in_out_ptr4 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp210 = tl.load(in_ptr47 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp218 = tl.load(in_ptr48 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp219 = tl.load(in_ptr49 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp221 = tl.load(in_ptr50 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp229 = tl.load(in_out_ptr5 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp230 = tl.load(in_ptr51 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp238 = tl.load(in_ptr52 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp239 = tl.load(in_ptr53 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp241 = tl.load(in_ptr54 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp249 = tl.load(in_out_ptr6 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp250 = tl.load(in_ptr55 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp258 = tl.load(in_ptr56 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp259 = tl.load(in_ptr57 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp261 = tl.load(in_ptr58 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp269 = tl.load(in_out_ptr7 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp270 = tl.load(in_ptr59 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp278 = tl.load(in_ptr60 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp279 = tl.load(in_ptr61 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp281 = tl.load(in_ptr62 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp289 = tl.load(in_out_ptr8 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp290 = tl.load(in_ptr63 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp298 = tl.load(in_ptr64 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp299 = tl.load(in_ptr65 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp301 = tl.load(in_ptr66 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp309 = tl.load(in_ptr67 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp310 = tl.load(in_ptr68 + (r1 + (4096*x0)), rmask, other=0).to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = tmp5 + tmp6
        tmp11 = tmp8 + tmp10
        tmp13 = tmp4 + tmp12
        tmp15 = tmp13 + tmp14
        tmp16 = tmp11 * tmp15
        tmp17 = tmp7 + tmp16
        tmp21 = tmp18 + tmp20
        tmp23 = tmp21 * tmp22
        tmp24 = tmp17 + tmp23
        tmp28 = tmp25 + tmp27
        tmp31 = tmp29 + tmp30
        tmp32 = tmp28 * tmp31
        tmp33 = tmp24 + tmp32
        tmp37 = tmp34 + tmp36
        tmp40 = tmp38 + tmp39
        tmp42 = tmp40 + tmp41
        tmp43 = tmp37 * tmp42
        tmp44 = tmp33 + tmp43
        tmp48 = tmp45 + tmp47
        tmp51 = tmp49 + tmp50
        tmp52 = tmp48 * tmp51
        tmp53 = tmp44 + tmp52
        tmp57 = tmp54 + tmp56
        tmp60 = tmp58 + tmp59
        tmp62 = tmp60 + tmp61
        tmp63 = tmp57 * tmp62
        tmp64 = tmp53 + tmp63
        tmp68 = tmp65 + tmp67
        tmp71 = tmp69 + tmp70
        tmp72 = tmp68 * tmp71
        tmp73 = tmp64 + tmp72
        tmp77 = tmp74 + tmp76
        tmp80 = tmp78 + tmp79
        tmp82 = tmp80 + tmp81
        tmp83 = tmp77 * tmp82
        tmp84 = tmp73 + tmp83
        tmp88 = tmp85 + tmp87
        tmp91 = tmp89 + tmp90
        tmp92 = tmp88 * tmp91
        tmp93 = tmp84 + tmp92
        tmp97 = tmp94 + tmp96
        tmp100 = tmp98 + tmp99
        tmp102 = tmp100 + tmp101
        tmp103 = tmp97 * tmp102
        tmp104 = tmp93 + tmp103
        tmp108 = tmp105 + tmp107
        tmp111 = tmp109 + tmp110
        tmp112 = tmp108 * tmp111
        tmp113 = tmp104 + tmp112
        tmp117 = tmp114 + tmp116
        tmp120 = tmp118 + tmp119
        tmp122 = tmp120 + tmp121
        tmp123 = tmp117 * tmp122
        tmp124 = tmp113 + tmp123
        tmp128 = tmp125 + tmp127
        tmp131 = tmp129 + tmp130
        tmp132 = tmp128 * tmp131
        tmp133 = tmp124 + tmp132
        tmp137 = tmp134 + tmp136
        tmp140 = tmp138 + tmp139
        tmp142 = tmp140 + tmp141
        tmp143 = tmp137 * tmp142
        tmp144 = tmp133 + tmp143
        tmp148 = tmp145 + tmp147
        tmp151 = tmp149 + tmp150
        tmp152 = tmp148 * tmp151
        tmp153 = tmp144 + tmp152
        tmp157 = tmp154 + tmp156
        tmp160 = tmp158 + tmp159
        tmp162 = tmp160 + tmp161
        tmp163 = tmp157 * tmp162
        tmp164 = tmp153 + tmp163
        tmp168 = tmp165 + tmp167
        tmp171 = tmp169 + tmp170
        tmp172 = tmp168 * tmp171
        tmp173 = tmp164 + tmp172
        tmp177 = tmp174 + tmp176
        tmp180 = tmp178 + tmp179
        tmp182 = tmp180 + tmp181
        tmp183 = tmp177 * tmp182
        tmp184 = tmp173 + tmp183
        tmp188 = tmp185 + tmp187
        tmp191 = tmp189 + tmp190
        tmp192 = tmp188 * tmp191
        tmp193 = tmp184 + tmp192
        tmp197 = tmp194 + tmp196
        tmp200 = tmp198 + tmp199
        tmp202 = tmp200 + tmp201
        tmp203 = tmp197 * tmp202
        tmp204 = tmp193 + tmp203
        tmp208 = tmp205 + tmp207
        tmp211 = tmp209 + tmp210
        tmp212 = tmp208 * tmp211
        tmp213 = tmp204 + tmp212
        tmp217 = tmp214 + tmp216
        tmp220 = tmp218 + tmp219
        tmp222 = tmp220 + tmp221
        tmp223 = tmp217 * tmp222
        tmp224 = tmp213 + tmp223
        tmp228 = tmp225 + tmp227
        tmp231 = tmp229 + tmp230
        tmp232 = tmp228 * tmp231
        tmp233 = tmp224 + tmp232
        tmp237 = tmp234 + tmp236
        tmp240 = tmp238 + tmp239
        tmp242 = tmp240 + tmp241
        tmp243 = tmp237 * tmp242
        tmp244 = tmp233 + tmp243
        tmp248 = tmp245 + tmp247
        tmp251 = tmp249 + tmp250
        tmp252 = tmp248 * tmp251
        tmp253 = tmp244 + tmp252
        tmp257 = tmp254 + tmp256
        tmp260 = tmp258 + tmp259
        tmp262 = tmp260 + tmp261
        tmp263 = tmp257 * tmp262
        tmp264 = tmp253 + tmp263
        tmp268 = tmp265 + tmp267
        tmp271 = tmp269 + tmp270
        tmp272 = tmp268 * tmp271
        tmp273 = tmp264 + tmp272
        tmp277 = tmp274 + tmp276
        tmp280 = tmp278 + tmp279
        tmp282 = tmp280 + tmp281
        tmp283 = tmp277 * tmp282
        tmp284 = tmp273 + tmp283
        tmp288 = tmp285 + tmp287
        tmp291 = tmp289 + tmp290
        tmp292 = tmp288 * tmp291
        tmp293 = tmp284 + tmp292
        tmp297 = tmp294 + tmp296
        tmp300 = tmp298 + tmp299
        tmp302 = tmp300 + tmp301
        tmp303 = tmp297 * tmp302
        tmp304 = tmp293 + tmp303
        tmp308 = tmp305 + tmp307
        tmp311 = tmp309 + tmp310
        tmp312 = tmp308 * tmp311
        tmp313 = tmp304 + tmp312
        tmp314 = tmp313.to(tl.float32)
        tmp315 = tmp314 * tmp314
        tmp316 = tl.broadcast_to(tmp315, [XBLOCK, RBLOCK])
        tmp318 = _tmp317 + tmp316
        _tmp317 = tl.where(rmask, tmp318, _tmp317)
        tl.store(out_ptr0 + (r1 + (4096*x0)), tmp314, rmask)
    tmp317 = tl.sum(_tmp317, 1)[:, None]
    tmp319 = 4096.0
    tmp320 = tmp317 / tmp319
    tmp321 = 1e-05
    tmp322 = tmp320 + tmp321
    tmp323 = tl.math.rsqrt(tmp322)
    tl.debug_barrier()
    tl.store(in_out_ptr9 + (x0), tmp323, None)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp324 = tl.load(out_ptr0 + (r1 + (4096*x0)), rmask, other=0)
        tmp327 = tl.load(in_ptr69 + (r1), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp325 = tmp324 * tmp323
        tmp326 = tmp325.to(tl.float32)
        tmp328 = tmp326 * tmp327
        tl.store(out_ptr1 + (r1 + (4096*x0)), tmp328, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/as/casasbubl5e7r7qazdpa4afu3xnn7yvf4fethk2xpcstwjaygwbp.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_102 = async_compile.triton('triton_poi_fused_102', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[4096, 65536], tile_hint=TileHint.SQUARE,filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_102', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_102(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
    ynumel = 4096
    xnumel = 50257
    yoffset = tl.program_id(1) * YBLOCK
    yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
    ymask = yindex < ynumel
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    x1 = xindex
    y0 = yindex
    tmp0 = tl.load(in_ptr0 + (y0 + (4096*x1)), xmask, eviction_policy='evict_last').to(tl.float32)
    tl.store(out_ptr0 + (x1 + (50264*y0)), tmp0, xmask)
''')


# kernel path: /tmp/torchinductor_mengqy/va/cvaay2lqobu7ovyvumi34nd64povnzoj67owfkeviw3p4qgzlcwl.py
# Source Nodes: [], Original ATen: []

triton_poi_fused_103 = async_compile.triton('triton_poi_fused_103', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[32768], filename=__file__, meta={'signature': {0: '*fp16', 1: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_103', 'configs': [instance_descriptor(divisible_by_16=(1,), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]})
@triton.jit
def triton_poi_fused_103(out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 28672
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 7
    x1 = (xindex // 7)
    tmp0 = 0.0
    tl.store(out_ptr0 + (x0 + (50264*x1)), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/cy/ccyiezqhbe7iisvvtebv6eczl5eenqhnf767euv4dc6ylfnivf3h.py
# Source Nodes: [cross_entropy], Original ATen: [aten._log_softmax]
# cross_entropy => amax_32, convert_element_type_574, convert_element_type_575, exp_32, log, sub_96, sub_97, sum_33
triton_red_fused__log_softmax_104 = async_compile.triton('triton_red_fused__log_softmax_104', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[8192, 65536],
    reduction_hint=ReductionHint.DEFAULT,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused__log_softmax_104', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]}
)
@triton.jit
def triton_red_fused__log_softmax_104(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 8192
    rnumel = 50257
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp3 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (r1 + (50264*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp4 = triton_helpers.maximum(_tmp3, tmp2)
        _tmp3 = tl.where(rmask, tmp4, _tmp3)
    tmp3 = triton_helpers.max2(_tmp3, 1)[:, None]
    _tmp10 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp5 = tl.load(in_ptr0 + (r1 + (50264*x0)), rmask, eviction_policy='evict_last', other=0).to(tl.float32)
        tmp6 = tmp5.to(tl.float32)
        tmp7 = tmp6 - tmp3
        tmp8 = tl.exp(tmp7)
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
        tmp11 = _tmp10 + tmp9
        _tmp10 = tl.where(rmask, tmp11, _tmp10)
    tmp10 = tl.sum(_tmp10, 1)[:, None]
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex
        tmp12 = tl.load(in_ptr0 + (r1 + (50264*x0)), rmask, other=0).to(tl.float32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp13 - tmp3
        tmp15 = tl.log(tmp10)
        tmp16 = tmp14 - tmp15
        tmp17 = tmp16.to(tl.float32)
        tl.store(out_ptr2 + (r1 + (50257*x0)), tmp17, rmask)
''')


# kernel path: /tmp/torchinductor_mengqy/vv/cvvl5dlcrkm5tb4tofsvshj4e2iuybkxwxsnn7udxpwkouulnk4t.py
# Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_forward]
# cross_entropy => convert_element_type_576, div_32, ne, neg, scalar_tensor_33, sum_34, sum_35, where_33
triton_red_fused_nll_loss_forward_105 = async_compile.triton('triton_red_fused_nll_loss_forward_105', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[1, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    meta={'signature': {0: '*fp16', 1: '*i64', 2: '*fp16', 3: '*fp16', 4: 'i32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': ['in_out_ptr0'], 'autotune_hints': set(), 'kernel_name': 'triton_red_fused_nll_loss_forward_105', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]}
)
@triton.jit
def triton_red_fused_nll_loss_forward_105(in_out_ptr0, in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 1
    rnumel = 8192
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
    _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + ((2049*(r0 // 2048)) + (r0 % 2048)), rmask, other=0)
        tmp1 = tl.full([1, 1], -100, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.int64)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = _tmp5 + tmp4
        _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp7 = tl.full([1, 1], 0, tl.int64)
        tmp8 = tl.where(tmp2, tmp0, tmp7)
        tmp9 = tl.where(tmp8 < 0, tmp8 + 50257, tmp8)
        tl.device_assert((0 <= tmp9) & (tmp9 < 50257), "index out of bounds: 0 <= tmp9 < 50257")
        tmp10 = tl.load(in_ptr1 + (tmp9 + (50257*r0)), rmask, other=0).to(tl.float32)
        tmp11 = -tmp10
        tmp12 = 0.0
        tmp13 = tl.where(tmp2, tmp11, tmp12)
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = _tmp15 + tmp14
        _tmp15 = tl.where(rmask, tmp16, _tmp15)
    tmp5 = tl.sum(_tmp5, 1)[:, None]
    tmp15 = tl.sum(_tmp15, 1)[:, None]
    tmp17 = tmp5.to(tl.float32)
    tmp18 = tmp15 / tmp17
    tl.store(out_ptr1 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp17, None)
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp18, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ak/cakx6xmorxccjpqiafmmusglgv5hbupzjg3uynbmhq6onyl4n3uy.py
# Source Nodes: [getitem_1], Original ATen: [aten.index]
# getitem_1 => index_1
triton_poi_fused_index_106 = async_compile.triton('triton_poi_fused_index_106', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_index_106', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]})
@triton.jit
def triton_poi_fused_index_106(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 262144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
    tl.store(out_ptr0 + (x0), tmp0, None)
''')


# kernel path: /tmp/torchinductor_mengqy/eh/cehne5juypvuatko2kbzybtouproy34hhx7g6zofrocwelapnijp.py
# Source Nodes: [add_1], Original ATen: [aten.add]
# add_1 => add_8
triton_poi_fused_add_107 = async_compile.triton('triton_poi_fused_add_107', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[65536], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_107', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_107(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 65536
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 2
    x1 = (xindex // 2) % 8192
    x2 = (xindex // 16384)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (2*x2) + (8*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (2*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/bs/cbsromrqz44umc5r4vm2hskrizb7sl6rufgvbiwxsizbh4emf3le.py
# Source Nodes: [add_7], Original ATen: [aten.add]
# add_7 => add_23
triton_poi_fused_add_108 = async_compile.triton('triton_poi_fused_add_108', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_108', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_108(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 98304
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 3
    x1 = (xindex // 3) % 8192
    x2 = (xindex // 24576)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (3*x2) + (12*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (3*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yw/cywnhf44zvklmgwyuyccremtarxiohuykb6ytbocrijdlmoagsdh.py
# Source Nodes: [add_17], Original ATen: [aten.add]
# add_17 => add_42
triton_poi_fused_add_109 = async_compile.triton('triton_poi_fused_add_109', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[131072], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_109', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_109(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 131072
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 4
    x1 = (xindex // 4) % 8192
    x2 = (xindex // 32768)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (4*x2) + (16*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (4*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/is/cisngclqh75pq6dkbz27aivodkrcvl5e3yvn2cxevajprcfmyy7c.py
# Source Nodes: [add_31], Original ATen: [aten.add]
# add_31 => add_65
triton_poi_fused_add_110 = async_compile.triton('triton_poi_fused_add_110', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_110', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_110(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 163840
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 5
    x1 = (xindex // 5) % 8192
    x2 = (xindex // 40960)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (5*x2) + (20*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (5*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/uy/cuye46qdyflzdtgbhkz2vny2t2cgea2b4vrcjnk2x7rd5nafcyoj.py
# Source Nodes: [add_49], Original ATen: [aten.add]
# add_49 => add_92
triton_poi_fused_add_111 = async_compile.triton('triton_poi_fused_add_111', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_111', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_111(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 196608
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 6
    x1 = (xindex // 6) % 8192
    x2 = (xindex // 49152)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (6*x2) + (24*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (6*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2k/c2kecpetlzho6lc76xlflvat4ys6u6oqod6sj4bkgwimstbonfyr.py
# Source Nodes: [add_71], Original ATen: [aten.add]
# add_71 => add_123
triton_poi_fused_add_112 = async_compile.triton('triton_poi_fused_add_112', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_112', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_112(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 229376
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 7
    x1 = (xindex // 7) % 8192
    x2 = (xindex // 57344)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (7*x2) + (28*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (7*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xu/cxuwq4keczagnkult6l74y3tm4p67377xgiiizhqzbew6jjqug7o.py
# Source Nodes: [add_97], Original ATen: [aten.add]
# add_97 => add_158
triton_poi_fused_add_113 = async_compile.triton('triton_poi_fused_add_113', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[262144], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_113', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_113(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 262144
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 8
    x1 = (xindex // 8) % 8192
    x2 = (xindex // 65536)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (8*x2) + (32*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (8*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/xx/cxxppareog74ooqh4efoqt524nymvnzjkydisd4kozvmg5dlbqtd.py
# Source Nodes: [add_127], Original ATen: [aten.add]
# add_127 => add_197
triton_poi_fused_add_114 = async_compile.triton('triton_poi_fused_add_114', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_114', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_114(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 294912
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 9
    x1 = (xindex // 9) % 8192
    x2 = (xindex // 73728)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (9*x2) + (36*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (9*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qg/cqgkr24xvdxtnnbk3untsv5j5p5kvy4iq65x5fl5udcvheiz7igb.py
# Source Nodes: [add_161], Original ATen: [aten.add]
# add_161 => add_240
triton_poi_fused_add_115 = async_compile.triton('triton_poi_fused_add_115', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_115', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_115(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 327680
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 10
    x1 = (xindex // 10) % 8192
    x2 = (xindex // 81920)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (10*x2) + (40*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (10*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/wi/cwib3x2k5l5hp4sva2ylifgsvua64vcklexjuxvp6lwqfjwui3b4.py
# Source Nodes: [add_199], Original ATen: [aten.add]
# add_199 => add_287
triton_poi_fused_add_116 = async_compile.triton('triton_poi_fused_add_116', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_116', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_116(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 360448
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 11
    x1 = (xindex // 11) % 8192
    x2 = (xindex // 90112)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (11*x2) + (44*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (11*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/2w/c2wbs6rfth7d62zozkobogulgiaxsrbiqltvi6t5ucsh4m2dqu3k.py
# Source Nodes: [add_241], Original ATen: [aten.add]
# add_241 => add_338
triton_poi_fused_add_117 = async_compile.triton('triton_poi_fused_add_117', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_117', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_117(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 393216
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 12
    x1 = (xindex // 12) % 8192
    x2 = (xindex // 98304)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (12*x2) + (48*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (12*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/gc/cgczr4omfblf6kcpenjp2bw6z5n7lsqls73q5fy5yx7ipioa7fea.py
# Source Nodes: [add_287], Original ATen: [aten.add]
# add_287 => add_393
triton_poi_fused_add_118 = async_compile.triton('triton_poi_fused_add_118', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_118', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_118(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 425984
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 13
    x1 = (xindex // 13) % 8192
    x2 = (xindex // 106496)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (13*x2) + (52*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (13*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/cf/ccfbwxe4253zqphixl54rr2x5hezjfxuke7qlc4ayomxsulk3xwl.py
# Source Nodes: [add_337], Original ATen: [aten.add]
# add_337 => add_452
triton_poi_fused_add_119 = async_compile.triton('triton_poi_fused_add_119', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_119', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_119(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 458752
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 14
    x1 = (xindex // 14) % 8192
    x2 = (xindex // 114688)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (14*x2) + (56*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (14*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fz/cfzdjmes2jmgjjtyb757k3fvhdvuikyhaodjripzw6birjltz7bv.py
# Source Nodes: [add_391], Original ATen: [aten.add]
# add_391 => add_515
triton_poi_fused_add_120 = async_compile.triton('triton_poi_fused_add_120', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_120', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_120(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 491520
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 15
    x1 = (xindex // 15) % 8192
    x2 = (xindex // 122880)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (15*x2) + (60*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (15*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/qq/cqqwkjxs4bbw4lhktnyfm7uk5h4lca24mctev43voexvgagruvii.py
# Source Nodes: [add_449], Original ATen: [aten.add]
# add_449 => add_582
triton_poi_fused_add_121 = async_compile.triton('triton_poi_fused_add_121', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[524288], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_121', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_121(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 524288
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 16
    x1 = (xindex // 16) % 8192
    x2 = (xindex // 131072)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (16*x2) + (64*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (16*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ui/cuixpaa2iyysnifig5vc3slx2rfgqdtmxwizpugbsd3bqujbejar.py
# Source Nodes: [add_511], Original ATen: [aten.add]
# add_511 => add_653
triton_poi_fused_add_122 = async_compile.triton('triton_poi_fused_add_122', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_122', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_122(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 557056
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 17
    x1 = (xindex // 17) % 8192
    x2 = (xindex // 139264)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (17*x2) + (68*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (17*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/o5/co5qwic5ylc5fwpzmglbhwkbpoqdf4eojhn4chceywir4np2uxt2.py
# Source Nodes: [add_577], Original ATen: [aten.add]
# add_577 => add_728
triton_poi_fused_add_123 = async_compile.triton('triton_poi_fused_add_123', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_123', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_123(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 589824
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 18
    x1 = (xindex // 18) % 8192
    x2 = (xindex // 147456)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (18*x2) + (72*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (18*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/jv/cjvtoua4zepzpu75r2frgg263glw7uqiirigardiwuzxejs4ss3t.py
# Source Nodes: [add_647], Original ATen: [aten.add]
# add_647 => add_807
triton_poi_fused_add_124 = async_compile.triton('triton_poi_fused_add_124', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_124', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_124(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 622592
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 19
    x1 = (xindex // 19) % 8192
    x2 = (xindex // 155648)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (19*x2) + (76*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (19*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/r4/cr4o3nceaglqamsxkldqegdtuzetp6bumxvqmdwqe6aljkr22rmb.py
# Source Nodes: [add_721], Original ATen: [aten.add]
# add_721 => add_890
triton_poi_fused_add_125 = async_compile.triton('triton_poi_fused_add_125', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_125', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_125(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 655360
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 20
    x1 = (xindex // 20) % 8192
    x2 = (xindex // 163840)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (20*x2) + (80*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (20*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/af/cafbdhagvavqhwau56gmwfqa77zzxolzg5hyd3kl3c5w2vs3ruj4.py
# Source Nodes: [add_799], Original ATen: [aten.add]
# add_799 => add_977
triton_poi_fused_add_126 = async_compile.triton('triton_poi_fused_add_126', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_126', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_126(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 688128
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 21
    x1 = (xindex // 21) % 8192
    x2 = (xindex // 172032)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (21*x2) + (84*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (21*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/em/cem33awfd4wqpjpcg53fmmunftk4o43wpey5jcdtgcmggkz5xyrl.py
# Source Nodes: [add_881], Original ATen: [aten.add]
# add_881 => add_1068
triton_poi_fused_add_127 = async_compile.triton('triton_poi_fused_add_127', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_127', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_127(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 720896
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 22
    x1 = (xindex // 22) % 8192
    x2 = (xindex // 180224)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (22*x2) + (88*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (22*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/hs/chsqqjfhcuaynizwveywkqrqwmu55j4cfw7f7wsxkclqmrxfcvqb.py
# Source Nodes: [add_967], Original ATen: [aten.add]
# add_967 => add_1163
triton_poi_fused_add_128 = async_compile.triton('triton_poi_fused_add_128', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_128', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_128(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 753664
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 23
    x1 = (xindex // 23) % 8192
    x2 = (xindex // 188416)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (23*x2) + (92*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (23*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lb/clbukh7cakrbd4g2pljsdb2byz7fyatra5j6rwm72kw2ui5n54zc.py
# Source Nodes: [add_1057], Original ATen: [aten.add]
# add_1057 => add_1262
triton_poi_fused_add_129 = async_compile.triton('triton_poi_fused_add_129', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_129', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_129(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 786432
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 24
    x1 = (xindex // 24) % 8192
    x2 = (xindex // 196608)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (24*x2) + (96*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (24*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/au/caulxwuy3emqyyengq6tdgwhxdjtl4far2egevzhdbspmlmdkp2x.py
# Source Nodes: [add_1151], Original ATen: [aten.add]
# add_1151 => add_1365
triton_poi_fused_add_130 = async_compile.triton('triton_poi_fused_add_130', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_130', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_130(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 819200
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 25
    x1 = (xindex // 25) % 8192
    x2 = (xindex // 204800)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (25*x2) + (100*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (25*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/ii/ciihijn5ydazewlu7z234gndkfreopdfqo5ukbiwcj7tntkpzyc7.py
# Source Nodes: [add_1249], Original ATen: [aten.add]
# add_1249 => add_1472
triton_poi_fused_add_131 = async_compile.triton('triton_poi_fused_add_131', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_131', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_131(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 851968
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 26
    x1 = (xindex // 26) % 8192
    x2 = (xindex // 212992)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (26*x2) + (104*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (26*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/x6/cx6vjrl3vbobz63cnk3i5ntuecjzil3hapdsy5ufkwy2rfa7pyz6.py
# Source Nodes: [add_1351], Original ATen: [aten.add]
# add_1351 => add_1583
triton_poi_fused_add_132 = async_compile.triton('triton_poi_fused_add_132', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_132', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_132(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 884736
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 27
    x1 = (xindex // 27) % 8192
    x2 = (xindex // 221184)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (27*x2) + (108*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (27*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/yn/cynzjhugc6rbcaafjpqs46cc6mzs7ohlecw55fkuhkh726pmx5lu.py
# Source Nodes: [add_1457], Original ATen: [aten.add]
# add_1457 => add_1698
triton_poi_fused_add_133 = async_compile.triton('triton_poi_fused_add_133', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_133', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_133(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 917504
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 28
    x1 = (xindex // 28) % 8192
    x2 = (xindex // 229376)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (28*x2) + (112*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (28*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fc/cfceexoe6sjr3y7i3r65tik2kwt3wmmtrb7gjnbxe2l5sreihvmd.py
# Source Nodes: [add_1567], Original ATen: [aten.add]
# add_1567 => add_1817
triton_poi_fused_add_134 = async_compile.triton('triton_poi_fused_add_134', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_134', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_134(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 950272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 29
    x1 = (xindex // 29) % 8192
    x2 = (xindex // 237568)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (29*x2) + (116*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (29*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/fd/cfddbshut354ol4e2vvlixoca4jxpacxmxywh3gxqdswl6wj6lsq.py
# Source Nodes: [add_1681], Original ATen: [aten.add]
# add_1681 => add_1940
triton_poi_fused_add_135 = async_compile.triton('triton_poi_fused_add_135', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_135', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_135(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 983040
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 30
    x1 = (xindex // 30) % 8192
    x2 = (xindex // 245760)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (30*x2) + (120*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (30*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/da/cdagqazkw6ivv4p4ybgkaq6rdi6rtp5czfcpbcujpe3j2px5yjm2.py
# Source Nodes: [add_1799], Original ATen: [aten.add]
# add_1799 => add_2067
triton_poi_fused_add_136 = async_compile.triton('triton_poi_fused_add_136', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_136', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_136(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1015808
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 31
    x1 = (xindex // 31) % 8192
    x2 = (xindex // 253952)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (31*x2) + (124*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (31*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/lk/clkxjzue2pkwuep2tfvdmms34djvfvvmkwnre7h6vbvrtxlsl32d.py
# Source Nodes: [add_1921], Original ATen: [aten.add]
# add_1921 => add_2198
triton_poi_fused_add_137 = async_compile.triton('triton_poi_fused_add_137', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[1048576], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_137', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_137(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1048576
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 32
    x1 = (xindex // 32) % 8192
    x2 = (xindex // 262144)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (32*x2) + (128*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (32*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


# kernel path: /tmp/torchinductor_mengqy/wo/cwowzzcupwsis5j65nng5rpytofmxhi6atodqjtbaypjdnjdrkdt.py
# Source Nodes: [add_2047], Original ATen: [aten.add]
# add_2047 => add_2333
triton_poi_fused_add_138 = async_compile.triton('triton_poi_fused_add_138', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(size_hints=[2097152], filename=__file__, meta={'signature': {0: '*fp16', 1: '*fp16', 2: '*fp16', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'mutated_arg_names': [], 'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_138', 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]})
@triton.jit
def triton_poi_fused_add_138(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1081344
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 33
    x1 = (xindex // 33) % 8192
    x2 = (xindex // 270336)
    x3 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (33*x2) + (132*x1)), None).to(tl.float32)
    tmp1 = tl.load(in_ptr1 + (x0 + (33*x2)), None, eviction_policy='evict_last').to(tl.float32)
    tmp2 = tmp0 + tmp1
    tl.store(out_ptr0 + (x3), tmp2, None)
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453 = args
    args.clear()
    assert_size_stride(primals_1, (4096, ), (1, ))
    assert_size_stride(primals_2, (4096, 4096), (4096, 1))
    assert_size_stride(primals_3, (4096, 4096), (4096, 1))
    assert_size_stride(primals_4, (4096, 4096), (4096, 1))
    assert_size_stride(primals_5, (4096, 4096), (4096, 1))
    assert_size_stride(primals_6, (4096, ), (1, ))
    assert_size_stride(primals_7, (11008, 4096), (4096, 1))
    assert_size_stride(primals_8, (11008, 4096), (4096, 1))
    assert_size_stride(primals_9, (4096, 11008), (11008, 1))
    assert_size_stride(primals_10, (4, 2), (2, 1))
    assert_size_stride(primals_11, (4096, ), (1, ))
    assert_size_stride(primals_12, (4096, ), (1, ))
    assert_size_stride(primals_13, (4096, ), (1, ))
    assert_size_stride(primals_14, (4096, 4096), (4096, 1))
    assert_size_stride(primals_15, (4096, 4096), (4096, 1))
    assert_size_stride(primals_16, (4096, 4096), (4096, 1))
    assert_size_stride(primals_17, (4096, 4096), (4096, 1))
    assert_size_stride(primals_18, (4096, ), (1, ))
    assert_size_stride(primals_19, (11008, 4096), (4096, 1))
    assert_size_stride(primals_20, (11008, 4096), (4096, 1))
    assert_size_stride(primals_21, (4096, 11008), (11008, 1))
    assert_size_stride(primals_22, (4, 3), (3, 1))
    assert_size_stride(primals_23, (4096, ), (1, ))
    assert_size_stride(primals_24, (4096, ), (1, ))
    assert_size_stride(primals_25, (4096, ), (1, ))
    assert_size_stride(primals_26, (4096, 4096), (4096, 1))
    assert_size_stride(primals_27, (4096, 4096), (4096, 1))
    assert_size_stride(primals_28, (4096, 4096), (4096, 1))
    assert_size_stride(primals_29, (4096, 4096), (4096, 1))
    assert_size_stride(primals_30, (4096, ), (1, ))
    assert_size_stride(primals_31, (11008, 4096), (4096, 1))
    assert_size_stride(primals_32, (11008, 4096), (4096, 1))
    assert_size_stride(primals_33, (4096, 11008), (11008, 1))
    assert_size_stride(primals_34, (4, 4), (4, 1))
    assert_size_stride(primals_35, (4096, ), (1, ))
    assert_size_stride(primals_36, (4096, ), (1, ))
    assert_size_stride(primals_37, (4096, ), (1, ))
    assert_size_stride(primals_38, (4096, 4096), (4096, 1))
    assert_size_stride(primals_39, (4096, 4096), (4096, 1))
    assert_size_stride(primals_40, (4096, 4096), (4096, 1))
    assert_size_stride(primals_41, (4096, 4096), (4096, 1))
    assert_size_stride(primals_42, (4096, ), (1, ))
    assert_size_stride(primals_43, (11008, 4096), (4096, 1))
    assert_size_stride(primals_44, (11008, 4096), (4096, 1))
    assert_size_stride(primals_45, (4096, 11008), (11008, 1))
    assert_size_stride(primals_46, (4, 5), (5, 1))
    assert_size_stride(primals_47, (4096, ), (1, ))
    assert_size_stride(primals_48, (4096, ), (1, ))
    assert_size_stride(primals_49, (4096, ), (1, ))
    assert_size_stride(primals_50, (4096, 4096), (4096, 1))
    assert_size_stride(primals_51, (4096, 4096), (4096, 1))
    assert_size_stride(primals_52, (4096, 4096), (4096, 1))
    assert_size_stride(primals_53, (4096, 4096), (4096, 1))
    assert_size_stride(primals_54, (4096, ), (1, ))
    assert_size_stride(primals_55, (11008, 4096), (4096, 1))
    assert_size_stride(primals_56, (11008, 4096), (4096, 1))
    assert_size_stride(primals_57, (4096, 11008), (11008, 1))
    assert_size_stride(primals_58, (4, 6), (6, 1))
    assert_size_stride(primals_59, (4096, ), (1, ))
    assert_size_stride(primals_60, (4096, ), (1, ))
    assert_size_stride(primals_61, (4096, ), (1, ))
    assert_size_stride(primals_62, (4096, 4096), (4096, 1))
    assert_size_stride(primals_63, (4096, 4096), (4096, 1))
    assert_size_stride(primals_64, (4096, 4096), (4096, 1))
    assert_size_stride(primals_65, (4096, 4096), (4096, 1))
    assert_size_stride(primals_66, (4096, ), (1, ))
    assert_size_stride(primals_67, (11008, 4096), (4096, 1))
    assert_size_stride(primals_68, (11008, 4096), (4096, 1))
    assert_size_stride(primals_69, (4096, 11008), (11008, 1))
    assert_size_stride(primals_70, (4, 7), (7, 1))
    assert_size_stride(primals_71, (4096, ), (1, ))
    assert_size_stride(primals_72, (4096, ), (1, ))
    assert_size_stride(primals_73, (4096, ), (1, ))
    assert_size_stride(primals_74, (4096, 4096), (4096, 1))
    assert_size_stride(primals_75, (4096, 4096), (4096, 1))
    assert_size_stride(primals_76, (4096, 4096), (4096, 1))
    assert_size_stride(primals_77, (4096, 4096), (4096, 1))
    assert_size_stride(primals_78, (4096, ), (1, ))
    assert_size_stride(primals_79, (11008, 4096), (4096, 1))
    assert_size_stride(primals_80, (11008, 4096), (4096, 1))
    assert_size_stride(primals_81, (4096, 11008), (11008, 1))
    assert_size_stride(primals_82, (4, 8), (8, 1))
    assert_size_stride(primals_83, (4096, ), (1, ))
    assert_size_stride(primals_84, (4096, ), (1, ))
    assert_size_stride(primals_85, (4096, ), (1, ))
    assert_size_stride(primals_86, (4096, 4096), (4096, 1))
    assert_size_stride(primals_87, (4096, 4096), (4096, 1))
    assert_size_stride(primals_88, (4096, 4096), (4096, 1))
    assert_size_stride(primals_89, (4096, 4096), (4096, 1))
    assert_size_stride(primals_90, (4096, ), (1, ))
    assert_size_stride(primals_91, (11008, 4096), (4096, 1))
    assert_size_stride(primals_92, (11008, 4096), (4096, 1))
    assert_size_stride(primals_93, (4096, 11008), (11008, 1))
    assert_size_stride(primals_94, (4, 9), (9, 1))
    assert_size_stride(primals_95, (4096, ), (1, ))
    assert_size_stride(primals_96, (4096, ), (1, ))
    assert_size_stride(primals_97, (4096, ), (1, ))
    assert_size_stride(primals_98, (4096, 4096), (4096, 1))
    assert_size_stride(primals_99, (4096, 4096), (4096, 1))
    assert_size_stride(primals_100, (4096, 4096), (4096, 1))
    assert_size_stride(primals_101, (4096, 4096), (4096, 1))
    assert_size_stride(primals_102, (4096, ), (1, ))
    assert_size_stride(primals_103, (11008, 4096), (4096, 1))
    assert_size_stride(primals_104, (11008, 4096), (4096, 1))
    assert_size_stride(primals_105, (4096, 11008), (11008, 1))
    assert_size_stride(primals_106, (4, 10), (10, 1))
    assert_size_stride(primals_107, (4096, ), (1, ))
    assert_size_stride(primals_108, (4096, ), (1, ))
    assert_size_stride(primals_109, (4096, ), (1, ))
    assert_size_stride(primals_110, (4096, 4096), (4096, 1))
    assert_size_stride(primals_111, (4096, 4096), (4096, 1))
    assert_size_stride(primals_112, (4096, 4096), (4096, 1))
    assert_size_stride(primals_113, (4096, 4096), (4096, 1))
    assert_size_stride(primals_114, (4096, ), (1, ))
    assert_size_stride(primals_115, (11008, 4096), (4096, 1))
    assert_size_stride(primals_116, (11008, 4096), (4096, 1))
    assert_size_stride(primals_117, (4096, 11008), (11008, 1))
    assert_size_stride(primals_118, (4, 11), (11, 1))
    assert_size_stride(primals_119, (4096, ), (1, ))
    assert_size_stride(primals_120, (4096, ), (1, ))
    assert_size_stride(primals_121, (4096, ), (1, ))
    assert_size_stride(primals_122, (4096, 4096), (4096, 1))
    assert_size_stride(primals_123, (4096, 4096), (4096, 1))
    assert_size_stride(primals_124, (4096, 4096), (4096, 1))
    assert_size_stride(primals_125, (4096, 4096), (4096, 1))
    assert_size_stride(primals_126, (4096, ), (1, ))
    assert_size_stride(primals_127, (11008, 4096), (4096, 1))
    assert_size_stride(primals_128, (11008, 4096), (4096, 1))
    assert_size_stride(primals_129, (4096, 11008), (11008, 1))
    assert_size_stride(primals_130, (4, 12), (12, 1))
    assert_size_stride(primals_131, (4096, ), (1, ))
    assert_size_stride(primals_132, (4096, ), (1, ))
    assert_size_stride(primals_133, (4096, ), (1, ))
    assert_size_stride(primals_134, (4096, 4096), (4096, 1))
    assert_size_stride(primals_135, (4096, 4096), (4096, 1))
    assert_size_stride(primals_136, (4096, 4096), (4096, 1))
    assert_size_stride(primals_137, (4096, 4096), (4096, 1))
    assert_size_stride(primals_138, (4096, ), (1, ))
    assert_size_stride(primals_139, (11008, 4096), (4096, 1))
    assert_size_stride(primals_140, (11008, 4096), (4096, 1))
    assert_size_stride(primals_141, (4096, 11008), (11008, 1))
    assert_size_stride(primals_142, (4, 13), (13, 1))
    assert_size_stride(primals_143, (4096, ), (1, ))
    assert_size_stride(primals_144, (4096, ), (1, ))
    assert_size_stride(primals_145, (4096, ), (1, ))
    assert_size_stride(primals_146, (4096, 4096), (4096, 1))
    assert_size_stride(primals_147, (4096, 4096), (4096, 1))
    assert_size_stride(primals_148, (4096, 4096), (4096, 1))
    assert_size_stride(primals_149, (4096, 4096), (4096, 1))
    assert_size_stride(primals_150, (4096, ), (1, ))
    assert_size_stride(primals_151, (11008, 4096), (4096, 1))
    assert_size_stride(primals_152, (11008, 4096), (4096, 1))
    assert_size_stride(primals_153, (4096, 11008), (11008, 1))
    assert_size_stride(primals_154, (4, 14), (14, 1))
    assert_size_stride(primals_155, (4096, ), (1, ))
    assert_size_stride(primals_156, (4096, ), (1, ))
    assert_size_stride(primals_157, (4096, ), (1, ))
    assert_size_stride(primals_158, (4096, 4096), (4096, 1))
    assert_size_stride(primals_159, (4096, 4096), (4096, 1))
    assert_size_stride(primals_160, (4096, 4096), (4096, 1))
    assert_size_stride(primals_161, (4096, 4096), (4096, 1))
    assert_size_stride(primals_162, (4096, ), (1, ))
    assert_size_stride(primals_163, (11008, 4096), (4096, 1))
    assert_size_stride(primals_164, (11008, 4096), (4096, 1))
    assert_size_stride(primals_165, (4096, 11008), (11008, 1))
    assert_size_stride(primals_166, (4, 15), (15, 1))
    assert_size_stride(primals_167, (4096, ), (1, ))
    assert_size_stride(primals_168, (4096, ), (1, ))
    assert_size_stride(primals_169, (4096, ), (1, ))
    assert_size_stride(primals_170, (4096, 4096), (4096, 1))
    assert_size_stride(primals_171, (4096, 4096), (4096, 1))
    assert_size_stride(primals_172, (4096, 4096), (4096, 1))
    assert_size_stride(primals_173, (4096, 4096), (4096, 1))
    assert_size_stride(primals_174, (4096, ), (1, ))
    assert_size_stride(primals_175, (11008, 4096), (4096, 1))
    assert_size_stride(primals_176, (11008, 4096), (4096, 1))
    assert_size_stride(primals_177, (4096, 11008), (11008, 1))
    assert_size_stride(primals_178, (4, 16), (16, 1))
    assert_size_stride(primals_179, (4096, ), (1, ))
    assert_size_stride(primals_180, (4096, ), (1, ))
    assert_size_stride(primals_181, (4096, ), (1, ))
    assert_size_stride(primals_182, (4096, 4096), (4096, 1))
    assert_size_stride(primals_183, (4096, 4096), (4096, 1))
    assert_size_stride(primals_184, (4096, 4096), (4096, 1))
    assert_size_stride(primals_185, (4096, 4096), (4096, 1))
    assert_size_stride(primals_186, (4096, ), (1, ))
    assert_size_stride(primals_187, (11008, 4096), (4096, 1))
    assert_size_stride(primals_188, (11008, 4096), (4096, 1))
    assert_size_stride(primals_189, (4096, 11008), (11008, 1))
    assert_size_stride(primals_190, (4, 17), (17, 1))
    assert_size_stride(primals_191, (4096, ), (1, ))
    assert_size_stride(primals_192, (4096, ), (1, ))
    assert_size_stride(primals_193, (4096, ), (1, ))
    assert_size_stride(primals_194, (4096, 4096), (4096, 1))
    assert_size_stride(primals_195, (4096, 4096), (4096, 1))
    assert_size_stride(primals_196, (4096, 4096), (4096, 1))
    assert_size_stride(primals_197, (4096, 4096), (4096, 1))
    assert_size_stride(primals_198, (4096, ), (1, ))
    assert_size_stride(primals_199, (11008, 4096), (4096, 1))
    assert_size_stride(primals_200, (11008, 4096), (4096, 1))
    assert_size_stride(primals_201, (4096, 11008), (11008, 1))
    assert_size_stride(primals_202, (4, 18), (18, 1))
    assert_size_stride(primals_203, (4096, ), (1, ))
    assert_size_stride(primals_204, (4096, ), (1, ))
    assert_size_stride(primals_205, (4096, ), (1, ))
    assert_size_stride(primals_206, (4096, 4096), (4096, 1))
    assert_size_stride(primals_207, (4096, 4096), (4096, 1))
    assert_size_stride(primals_208, (4096, 4096), (4096, 1))
    assert_size_stride(primals_209, (4096, 4096), (4096, 1))
    assert_size_stride(primals_210, (4096, ), (1, ))
    assert_size_stride(primals_211, (11008, 4096), (4096, 1))
    assert_size_stride(primals_212, (11008, 4096), (4096, 1))
    assert_size_stride(primals_213, (4096, 11008), (11008, 1))
    assert_size_stride(primals_214, (4, 19), (19, 1))
    assert_size_stride(primals_215, (4096, ), (1, ))
    assert_size_stride(primals_216, (4096, ), (1, ))
    assert_size_stride(primals_217, (4096, ), (1, ))
    assert_size_stride(primals_218, (4096, 4096), (4096, 1))
    assert_size_stride(primals_219, (4096, 4096), (4096, 1))
    assert_size_stride(primals_220, (4096, 4096), (4096, 1))
    assert_size_stride(primals_221, (4096, 4096), (4096, 1))
    assert_size_stride(primals_222, (4096, ), (1, ))
    assert_size_stride(primals_223, (11008, 4096), (4096, 1))
    assert_size_stride(primals_224, (11008, 4096), (4096, 1))
    assert_size_stride(primals_225, (4096, 11008), (11008, 1))
    assert_size_stride(primals_226, (4, 20), (20, 1))
    assert_size_stride(primals_227, (4096, ), (1, ))
    assert_size_stride(primals_228, (4096, ), (1, ))
    assert_size_stride(primals_229, (4096, ), (1, ))
    assert_size_stride(primals_230, (4096, 4096), (4096, 1))
    assert_size_stride(primals_231, (4096, 4096), (4096, 1))
    assert_size_stride(primals_232, (4096, 4096), (4096, 1))
    assert_size_stride(primals_233, (4096, 4096), (4096, 1))
    assert_size_stride(primals_234, (4096, ), (1, ))
    assert_size_stride(primals_235, (11008, 4096), (4096, 1))
    assert_size_stride(primals_236, (11008, 4096), (4096, 1))
    assert_size_stride(primals_237, (4096, 11008), (11008, 1))
    assert_size_stride(primals_238, (4, 21), (21, 1))
    assert_size_stride(primals_239, (4096, ), (1, ))
    assert_size_stride(primals_240, (4096, ), (1, ))
    assert_size_stride(primals_241, (4096, ), (1, ))
    assert_size_stride(primals_242, (4096, 4096), (4096, 1))
    assert_size_stride(primals_243, (4096, 4096), (4096, 1))
    assert_size_stride(primals_244, (4096, 4096), (4096, 1))
    assert_size_stride(primals_245, (4096, 4096), (4096, 1))
    assert_size_stride(primals_246, (4096, ), (1, ))
    assert_size_stride(primals_247, (11008, 4096), (4096, 1))
    assert_size_stride(primals_248, (11008, 4096), (4096, 1))
    assert_size_stride(primals_249, (4096, 11008), (11008, 1))
    assert_size_stride(primals_250, (4, 22), (22, 1))
    assert_size_stride(primals_251, (4096, ), (1, ))
    assert_size_stride(primals_252, (4096, ), (1, ))
    assert_size_stride(primals_253, (4096, ), (1, ))
    assert_size_stride(primals_254, (4096, 4096), (4096, 1))
    assert_size_stride(primals_255, (4096, 4096), (4096, 1))
    assert_size_stride(primals_256, (4096, 4096), (4096, 1))
    assert_size_stride(primals_257, (4096, 4096), (4096, 1))
    assert_size_stride(primals_258, (4096, ), (1, ))
    assert_size_stride(primals_259, (11008, 4096), (4096, 1))
    assert_size_stride(primals_260, (11008, 4096), (4096, 1))
    assert_size_stride(primals_261, (4096, 11008), (11008, 1))
    assert_size_stride(primals_262, (4, 23), (23, 1))
    assert_size_stride(primals_263, (4096, ), (1, ))
    assert_size_stride(primals_264, (4096, ), (1, ))
    assert_size_stride(primals_265, (4096, ), (1, ))
    assert_size_stride(primals_266, (4096, 4096), (4096, 1))
    assert_size_stride(primals_267, (4096, 4096), (4096, 1))
    assert_size_stride(primals_268, (4096, 4096), (4096, 1))
    assert_size_stride(primals_269, (4096, 4096), (4096, 1))
    assert_size_stride(primals_270, (4096, ), (1, ))
    assert_size_stride(primals_271, (11008, 4096), (4096, 1))
    assert_size_stride(primals_272, (11008, 4096), (4096, 1))
    assert_size_stride(primals_273, (4096, 11008), (11008, 1))
    assert_size_stride(primals_274, (4, 24), (24, 1))
    assert_size_stride(primals_275, (4096, ), (1, ))
    assert_size_stride(primals_276, (4096, ), (1, ))
    assert_size_stride(primals_277, (4096, ), (1, ))
    assert_size_stride(primals_278, (4096, 4096), (4096, 1))
    assert_size_stride(primals_279, (4096, 4096), (4096, 1))
    assert_size_stride(primals_280, (4096, 4096), (4096, 1))
    assert_size_stride(primals_281, (4096, 4096), (4096, 1))
    assert_size_stride(primals_282, (4096, ), (1, ))
    assert_size_stride(primals_283, (11008, 4096), (4096, 1))
    assert_size_stride(primals_284, (11008, 4096), (4096, 1))
    assert_size_stride(primals_285, (4096, 11008), (11008, 1))
    assert_size_stride(primals_286, (4, 25), (25, 1))
    assert_size_stride(primals_287, (4096, ), (1, ))
    assert_size_stride(primals_288, (4096, ), (1, ))
    assert_size_stride(primals_289, (4096, ), (1, ))
    assert_size_stride(primals_290, (4096, 4096), (4096, 1))
    assert_size_stride(primals_291, (4096, 4096), (4096, 1))
    assert_size_stride(primals_292, (4096, 4096), (4096, 1))
    assert_size_stride(primals_293, (4096, 4096), (4096, 1))
    assert_size_stride(primals_294, (4096, ), (1, ))
    assert_size_stride(primals_295, (11008, 4096), (4096, 1))
    assert_size_stride(primals_296, (11008, 4096), (4096, 1))
    assert_size_stride(primals_297, (4096, 11008), (11008, 1))
    assert_size_stride(primals_298, (4, 26), (26, 1))
    assert_size_stride(primals_299, (4096, ), (1, ))
    assert_size_stride(primals_300, (4096, ), (1, ))
    assert_size_stride(primals_301, (4096, ), (1, ))
    assert_size_stride(primals_302, (4096, 4096), (4096, 1))
    assert_size_stride(primals_303, (4096, 4096), (4096, 1))
    assert_size_stride(primals_304, (4096, 4096), (4096, 1))
    assert_size_stride(primals_305, (4096, 4096), (4096, 1))
    assert_size_stride(primals_306, (4096, ), (1, ))
    assert_size_stride(primals_307, (11008, 4096), (4096, 1))
    assert_size_stride(primals_308, (11008, 4096), (4096, 1))
    assert_size_stride(primals_309, (4096, 11008), (11008, 1))
    assert_size_stride(primals_310, (4, 27), (27, 1))
    assert_size_stride(primals_311, (4096, ), (1, ))
    assert_size_stride(primals_312, (4096, ), (1, ))
    assert_size_stride(primals_313, (4096, ), (1, ))
    assert_size_stride(primals_314, (4096, 4096), (4096, 1))
    assert_size_stride(primals_315, (4096, 4096), (4096, 1))
    assert_size_stride(primals_316, (4096, 4096), (4096, 1))
    assert_size_stride(primals_317, (4096, 4096), (4096, 1))
    assert_size_stride(primals_318, (4096, ), (1, ))
    assert_size_stride(primals_319, (11008, 4096), (4096, 1))
    assert_size_stride(primals_320, (11008, 4096), (4096, 1))
    assert_size_stride(primals_321, (4096, 11008), (11008, 1))
    assert_size_stride(primals_322, (4, 28), (28, 1))
    assert_size_stride(primals_323, (4096, ), (1, ))
    assert_size_stride(primals_324, (4096, ), (1, ))
    assert_size_stride(primals_325, (4096, ), (1, ))
    assert_size_stride(primals_326, (4096, 4096), (4096, 1))
    assert_size_stride(primals_327, (4096, 4096), (4096, 1))
    assert_size_stride(primals_328, (4096, 4096), (4096, 1))
    assert_size_stride(primals_329, (4096, 4096), (4096, 1))
    assert_size_stride(primals_330, (4096, ), (1, ))
    assert_size_stride(primals_331, (11008, 4096), (4096, 1))
    assert_size_stride(primals_332, (11008, 4096), (4096, 1))
    assert_size_stride(primals_333, (4096, 11008), (11008, 1))
    assert_size_stride(primals_334, (4, 29), (29, 1))
    assert_size_stride(primals_335, (4096, ), (1, ))
    assert_size_stride(primals_336, (4096, ), (1, ))
    assert_size_stride(primals_337, (4096, ), (1, ))
    assert_size_stride(primals_338, (4096, 4096), (4096, 1))
    assert_size_stride(primals_339, (4096, 4096), (4096, 1))
    assert_size_stride(primals_340, (4096, 4096), (4096, 1))
    assert_size_stride(primals_341, (4096, 4096), (4096, 1))
    assert_size_stride(primals_342, (4096, ), (1, ))
    assert_size_stride(primals_343, (11008, 4096), (4096, 1))
    assert_size_stride(primals_344, (11008, 4096), (4096, 1))
    assert_size_stride(primals_345, (4096, 11008), (11008, 1))
    assert_size_stride(primals_346, (4, 30), (30, 1))
    assert_size_stride(primals_347, (4096, ), (1, ))
    assert_size_stride(primals_348, (4096, ), (1, ))
    assert_size_stride(primals_349, (4096, ), (1, ))
    assert_size_stride(primals_350, (4096, 4096), (4096, 1))
    assert_size_stride(primals_351, (4096, 4096), (4096, 1))
    assert_size_stride(primals_352, (4096, 4096), (4096, 1))
    assert_size_stride(primals_353, (4096, 4096), (4096, 1))
    assert_size_stride(primals_354, (4096, ), (1, ))
    assert_size_stride(primals_355, (11008, 4096), (4096, 1))
    assert_size_stride(primals_356, (11008, 4096), (4096, 1))
    assert_size_stride(primals_357, (4096, 11008), (11008, 1))
    assert_size_stride(primals_358, (4, 31), (31, 1))
    assert_size_stride(primals_359, (4096, ), (1, ))
    assert_size_stride(primals_360, (4096, ), (1, ))
    assert_size_stride(primals_361, (4096, ), (1, ))
    assert_size_stride(primals_362, (4096, 4096), (4096, 1))
    assert_size_stride(primals_363, (4096, 4096), (4096, 1))
    assert_size_stride(primals_364, (4096, 4096), (4096, 1))
    assert_size_stride(primals_365, (4096, 4096), (4096, 1))
    assert_size_stride(primals_366, (4096, ), (1, ))
    assert_size_stride(primals_367, (11008, 4096), (4096, 1))
    assert_size_stride(primals_368, (11008, 4096), (4096, 1))
    assert_size_stride(primals_369, (4096, 11008), (11008, 1))
    assert_size_stride(primals_370, (4, 32), (32, 1))
    assert_size_stride(primals_371, (4096, ), (1, ))
    assert_size_stride(primals_372, (4096, ), (1, ))
    assert_size_stride(primals_373, (4096, ), (1, ))
    assert_size_stride(primals_374, (4096, 4096), (4096, 1))
    assert_size_stride(primals_375, (4096, 4096), (4096, 1))
    assert_size_stride(primals_376, (4096, 4096), (4096, 1))
    assert_size_stride(primals_377, (4096, 4096), (4096, 1))
    assert_size_stride(primals_378, (4096, ), (1, ))
    assert_size_stride(primals_379, (11008, 4096), (4096, 1))
    assert_size_stride(primals_380, (11008, 4096), (4096, 1))
    assert_size_stride(primals_381, (4096, 11008), (11008, 1))
    assert_size_stride(primals_382, (4, 33), (33, 1))
    assert_size_stride(primals_383, (4096, ), (1, ))
    assert_size_stride(primals_384, (50257, 4096), (4096, 1))
    assert_size_stride(primals_385, (8, 4096), (4096, 1))
    assert_size_stride(primals_386, (8, 8), (8, 1))
    assert_size_stride(primals_387, (12, 4096), (4096, 1))
    assert_size_stride(primals_388, (12, 12), (12, 1))
    assert_size_stride(primals_389, (16, 4096), (4096, 1))
    assert_size_stride(primals_390, (16, 16), (16, 1))
    assert_size_stride(primals_391, (20, 4096), (4096, 1))
    assert_size_stride(primals_392, (20, 20), (20, 1))
    assert_size_stride(primals_393, (24, 4096), (4096, 1))
    assert_size_stride(primals_394, (24, 24), (24, 1))
    assert_size_stride(primals_395, (28, 4096), (4096, 1))
    assert_size_stride(primals_396, (28, 28), (28, 1))
    assert_size_stride(primals_397, (32, 4096), (4096, 1))
    assert_size_stride(primals_398, (32, 32), (32, 1))
    assert_size_stride(primals_399, (36, 4096), (4096, 1))
    assert_size_stride(primals_400, (36, 36), (36, 1))
    assert_size_stride(primals_401, (40, 4096), (4096, 1))
    assert_size_stride(primals_402, (40, 40), (40, 1))
    assert_size_stride(primals_403, (44, 4096), (4096, 1))
    assert_size_stride(primals_404, (44, 44), (44, 1))
    assert_size_stride(primals_405, (48, 4096), (4096, 1))
    assert_size_stride(primals_406, (48, 48), (48, 1))
    assert_size_stride(primals_407, (52, 4096), (4096, 1))
    assert_size_stride(primals_408, (52, 52), (52, 1))
    assert_size_stride(primals_409, (56, 4096), (4096, 1))
    assert_size_stride(primals_410, (56, 56), (56, 1))
    assert_size_stride(primals_411, (60, 4096), (4096, 1))
    assert_size_stride(primals_412, (60, 60), (60, 1))
    assert_size_stride(primals_413, (64, 4096), (4096, 1))
    assert_size_stride(primals_414, (64, 64), (64, 1))
    assert_size_stride(primals_415, (68, 4096), (4096, 1))
    assert_size_stride(primals_416, (68, 68), (68, 1))
    assert_size_stride(primals_417, (72, 4096), (4096, 1))
    assert_size_stride(primals_418, (72, 72), (72, 1))
    assert_size_stride(primals_419, (76, 4096), (4096, 1))
    assert_size_stride(primals_420, (76, 76), (76, 1))
    assert_size_stride(primals_421, (80, 4096), (4096, 1))
    assert_size_stride(primals_422, (80, 80), (80, 1))
    assert_size_stride(primals_423, (84, 4096), (4096, 1))
    assert_size_stride(primals_424, (84, 84), (84, 1))
    assert_size_stride(primals_425, (88, 4096), (4096, 1))
    assert_size_stride(primals_426, (88, 88), (88, 1))
    assert_size_stride(primals_427, (92, 4096), (4096, 1))
    assert_size_stride(primals_428, (92, 92), (92, 1))
    assert_size_stride(primals_429, (96, 4096), (4096, 1))
    assert_size_stride(primals_430, (96, 96), (96, 1))
    assert_size_stride(primals_431, (100, 4096), (4096, 1))
    assert_size_stride(primals_432, (100, 100), (100, 1))
    assert_size_stride(primals_433, (104, 4096), (4096, 1))
    assert_size_stride(primals_434, (104, 104), (104, 1))
    assert_size_stride(primals_435, (108, 4096), (4096, 1))
    assert_size_stride(primals_436, (108, 108), (108, 1))
    assert_size_stride(primals_437, (112, 4096), (4096, 1))
    assert_size_stride(primals_438, (112, 112), (112, 1))
    assert_size_stride(primals_439, (116, 4096), (4096, 1))
    assert_size_stride(primals_440, (116, 116), (116, 1))
    assert_size_stride(primals_441, (120, 4096), (4096, 1))
    assert_size_stride(primals_442, (120, 120), (120, 1))
    assert_size_stride(primals_443, (124, 4096), (4096, 1))
    assert_size_stride(primals_444, (124, 124), (124, 1))
    assert_size_stride(primals_445, (128, 4096), (4096, 1))
    assert_size_stride(primals_446, (128, 128), (128, 1))
    assert_size_stride(primals_447, (132, 4096), (4096, 1))
    assert_size_stride(primals_448, (132, 132), (132, 1))
    assert_size_stride(primals_449, (50257, 4096), (4096, 1))
    assert_size_stride(primals_450, (2048, 64, 2), (128, 2, 1))
    assert_size_stride(primals_451, (2048, 2048), (2048, 1))
    assert_size_stride(primals_452, (4, 2048), (2049, 1))
    assert_size_stride(primals_453, (4, 2048), (2049, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0) # no-op to ensure context
        buf0 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___tok_embeddings], Original ATen: [aten.embedding]
        stream0 = get_cuda_stream(0)
        triton_poi_fused_embedding_0.run(primals_452, primals_384, buf0, 33554432, grid=grid(33554432), stream=stream0)
        del primals_384
        buf1 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf0, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_2, (4096, 4096), (1, 4096), 0), out=buf1)
        buf2 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf0, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_3, (4096, 4096), (1, 4096), 0), out=buf2)
        buf3 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf0, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_4, (4096, 4096), (1, 4096), 0), out=buf3)
        buf6 = empty_strided((4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf4 = reinterpret_tensor(buf6, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf5 = reinterpret_tensor(buf6, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf9 = empty_strided((4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1), device='cuda', dtype=torch.float32)
        buf7 = reinterpret_tensor(buf9, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf8 = reinterpret_tensor(buf9, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1, primals_450, buf2, buf4, buf5, buf7, buf8, 16777216, grid=grid(16777216), stream=stream0)
        buf10 = empty_strided((1, 1, 2048, 2048), (4194304, 4194304, 2048, 1), device='cuda', dtype=torch.bool)
        # Source Nodes: [getitem, getitem_18], Original ATen: [aten.index, aten.slice]
        triton_poi_fused_index_slice_2.run(primals_451, buf10, 4194304, grid=grid(4194304), stream=stream0)
        del buf4
        del buf5
        del buf7
        del buf8
        del primals_451
        buf11 = reinterpret_tensor(buf2, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf2  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf6, buf11, 33554432, grid=grid(33554432), stream=stream0)
        buf12 = reinterpret_tensor(buf1, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf9, buf12, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf13 = empty_strided((128, 2048, 2048), (4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf11, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf12, (128, 128, 2048), (262144, 2048, 1), 0), out=buf13)
        buf14 = empty_strided((), (), device='cuda', dtype=torch.float16)
        # Source Nodes: [where], Original ATen: [aten.scalar_tensor]
        triton_poi_fused_scalar_tensor_5.run(buf14, 1, grid=grid(1), stream=stream0)
        buf17 = empty_strided((4, 32, 2048, 2048), (134217728, 4194304, 2048, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [mul_11, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf13, buf14, buf17, 262144, 2048, grid=grid(262144), stream=stream0)
        print_mem()
        buf18 = reinterpret_tensor(buf12, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf12  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf3, buf18, 33554432, grid=grid(33554432), stream=stream0)
        buf19 = reinterpret_tensor(buf3, (128, 2048, 128), (262144, 128, 1)); del buf3  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf17, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf18, (128, 2048, 128), (262144, 128, 1), 0), out=buf19)
        buf20 = reinterpret_tensor(buf18, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf18  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf19, buf20, 33554432, grid=grid(33554432), stream=stream0)
        buf21 = reinterpret_tensor(buf19, (8192, 4096), (4096, 1)); del buf19  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf20, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_5, (4096, 4096), (1, 4096), 0), out=buf21)
        buf23 = reinterpret_tensor(buf20, (4, 2048, 4096), (8388608, 4096, 1)); del buf20  # reuse
        # Source Nodes: [add_3, add_4, float_4, mean_1, mul_12, mul_13, mul_14, rsqrt_1, type_as_3], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf0, buf21, primals_6, buf23, 8192, 4096, grid=grid(8192), stream=stream0)
        buf24 = empty_strided((8192, 11008), (11008, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf23, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_7, (4096, 11008), (1, 4096), 0), out=buf24)
        buf25 = empty_strided((8192, 11008), (11008, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf23, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_8, (4096, 11008), (1, 4096), 0), out=buf25)
        buf26 = reinterpret_tensor(buf24, (4, 2048, 11008), (22544384, 11008, 1)); del buf24  # reuse
        # Source Nodes: [mul_15, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf26, buf25, 90177536, grid=grid(90177536), stream=stream0)
        buf27 = reinterpret_tensor(buf23, (8192, 4096), (4096, 1)); del buf23  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf26, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_9, (11008, 4096), (1, 11008), 0), out=buf27)
        buf29 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf30 = reinterpret_tensor(buf11, (8192, 4096), (4096, 1)); del buf11  # reuse
        # Source Nodes: [add, add_3, add_5, l__mod___dynamic_dense_0_w1, mean, mul, pow_1, rsqrt], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf0, buf21, buf27, buf29, buf30, 8192, 4096, grid=grid(8192), stream=stream0)
        buf31 = empty_strided((8192, 8), (8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_0_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf30, reinterpret_tensor(primals_385, (4096, 8), (1, 4096), 0), out=buf31)
        buf32 = empty_strided((8192, 8), (8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_0_act, l__mod___dynamic_dense_0_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_12.run(buf31, buf32, 65536, grid=grid(65536), stream=stream0)
        buf33 = empty_strided((8192, 8), (8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_0_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf32, reinterpret_tensor(primals_386, (8, 8), (1, 8), 0), out=buf33)
        buf37 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf39 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf41 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_2, add_3, add_4, add_6, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_13.run(buf33, primals_10, buf0, primals_11, primals_12, primals_13, buf37, buf39, buf41, 8192, 4096, grid=grid(8192), stream=stream0)
        buf38 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf37, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_14, (4096, 4096), (1, 4096), 0), out=buf38)
        buf40 = reinterpret_tensor(buf37, (8192, 4096), (4096, 1)); del buf37  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf39, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_15, (4096, 4096), (1, 4096), 0), out=buf40)
        buf42 = reinterpret_tensor(buf39, (8192, 4096), (4096, 1)); del buf39  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf41, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_16, (4096, 4096), (1, 4096), 0), out=buf42)
        buf45 = buf9; del buf9  # reuse
        buf43 = reinterpret_tensor(buf45, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf44 = reinterpret_tensor(buf45, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf48 = buf6; del buf6  # reuse
        buf46 = reinterpret_tensor(buf48, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf47 = reinterpret_tensor(buf48, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf38, primals_450, buf40, buf43, buf44, buf46, buf47, 16777216, grid=grid(16777216), stream=stream0)
        buf49 = reinterpret_tensor(buf40, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf40  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf45, buf49, 33554432, grid=grid(33554432), stream=stream0)
        del buf43
        del buf44
        del buf46
        del buf47
        buf50 = reinterpret_tensor(buf38, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf38  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf48, buf50, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf51 = reinterpret_tensor(buf17, (128, 2048, 2048), (4194304, 2048, 1)); del buf17  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf49, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf50, (128, 128, 2048), (262144, 2048, 1), 0), out=buf51)
        buf54 = reinterpret_tensor(buf13, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf13  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf51, buf14, buf54, 262144, 2048, grid=grid(262144), stream=stream0)
        print_mem()
        buf55 = reinterpret_tensor(buf50, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf50  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf42, buf55, 33554432, grid=grid(33554432), stream=stream0)
        buf56 = reinterpret_tensor(buf42, (128, 2048, 128), (262144, 128, 1)); del buf42  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf54, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf55, (128, 2048, 128), (262144, 128, 1), 0), out=buf56)
        buf57 = reinterpret_tensor(buf55, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf55  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf56, buf57, 33554432, grid=grid(33554432), stream=stream0)
        buf58 = reinterpret_tensor(buf56, (8192, 4096), (4096, 1)); del buf56  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf57, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_17, (4096, 4096), (1, 4096), 0), out=buf58)
        buf60 = reinterpret_tensor(buf57, (4, 2048, 4096), (8388608, 4096, 1)); del buf57  # reuse
        # Source Nodes: [add_10, add_11, add_5, float_6, mean_3, mul_18, mul_19, mul_20, mul_4, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_14.run(buf33, primals_10, buf0, buf58, primals_18, buf60, 8192, 4096, grid=grid(8192), stream=stream0)
        buf61 = reinterpret_tensor(buf26, (8192, 11008), (11008, 1)); del buf26  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf60, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_19, (4096, 11008), (1, 4096), 0), out=buf61)
        buf62 = buf25; del buf25  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf60, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_20, (4096, 11008), (1, 4096), 0), out=buf62)
        buf63 = reinterpret_tensor(buf61, (4, 2048, 11008), (22544384, 11008, 1)); del buf61  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf63, buf62, 90177536, grid=grid(90177536), stream=stream0)
        buf64 = reinterpret_tensor(buf60, (8192, 4096), (4096, 1)); del buf60  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf63, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_21, (11008, 4096), (1, 11008), 0), out=buf64)
        buf65 = reinterpret_tensor(buf58, (4, 2048, 4096), (8388608, 4096, 1)); del buf58  # reuse
        buf67 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf68 = reinterpret_tensor(buf49, (8192, 4096), (4096, 1)); del buf49  # reuse
        # Source Nodes: [add_10, add_12, add_5, add_6, l__mod___dynamic_dense_1_w1, mean_1, mul_4, mul_5, pow_2, rsqrt_1], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_15.run(buf65, buf33, primals_10, buf0, buf64, buf67, buf68, 8192, 4096, grid=grid(8192), stream=stream0)
        buf69 = empty_strided((8192, 12), (12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_1_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf68, reinterpret_tensor(primals_387, (4096, 12), (1, 4096), 0), out=buf69)
        buf70 = empty_strided((8192, 12), (12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_1_act, l__mod___dynamic_dense_1_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_16.run(buf69, buf70, 98304, grid=grid(98304), stream=stream0)
        buf71 = empty_strided((8192, 12), (12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_1_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf70, reinterpret_tensor(primals_388, (12, 12), (1, 12), 0), out=buf71)
        buf72 = reinterpret_tensor(buf48, (4, 2048, 4096), (8388608, 4096, 1)); del buf48  # reuse
        buf74 = reinterpret_tensor(buf45, (4, 2048, 4096), (8388608, 4096, 1)); del buf45  # reuse
        buf76 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float32)
        buf78 = reinterpret_tensor(buf64, (4, 2048, 4096), (8388608, 4096, 1)); del buf64  # reuse
        buf80 = buf41; del buf41  # reuse
        buf82 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_10, add_11, add_12, add_13, add_14, add_3, add_5, add_8, add_9, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_10, mul_11, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_9, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_17.run(buf71, primals_22, buf0, buf21, buf27, primals_23, primals_24, primals_25, buf72, buf74, buf76, buf78, buf80, buf82, 8192, 4096, grid=grid(8192), stream=stream0)
        buf79 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf78, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_26, (4096, 4096), (1, 4096), 0), out=buf79)
        buf81 = reinterpret_tensor(buf78, (8192, 4096), (4096, 1)); del buf78  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf80, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_27, (4096, 4096), (1, 4096), 0), out=buf81)
        buf83 = reinterpret_tensor(buf80, (8192, 4096), (4096, 1)); del buf80  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf82, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_28, (4096, 4096), (1, 4096), 0), out=buf83)
        buf86 = reinterpret_tensor(buf76, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf76  # reuse
        buf84 = reinterpret_tensor(buf86, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf85 = reinterpret_tensor(buf86, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf89 = reinterpret_tensor(buf74, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf74  # reuse
        buf87 = reinterpret_tensor(buf89, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf88 = reinterpret_tensor(buf89, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf79, primals_450, buf81, buf84, buf85, buf87, buf88, 16777216, grid=grid(16777216), stream=stream0)
        buf90 = reinterpret_tensor(buf81, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf81  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf86, buf90, 33554432, grid=grid(33554432), stream=stream0)
        del buf84
        del buf85
        del buf87
        del buf88
        buf91 = reinterpret_tensor(buf79, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf79  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf89, buf91, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf92 = reinterpret_tensor(buf54, (128, 2048, 2048), (4194304, 2048, 1)); del buf54  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf90, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf91, (128, 128, 2048), (262144, 2048, 1), 0), out=buf92)
        buf95 = reinterpret_tensor(buf51, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf51  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf92, buf14, buf95, 262144, 2048, grid=grid(262144), stream=stream0)
        buf96 = reinterpret_tensor(buf91, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf91  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf83, buf96, 33554432, grid=grid(33554432), stream=stream0)
        buf97 = reinterpret_tensor(buf83, (128, 2048, 128), (262144, 128, 1)); del buf83  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf95, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf96, (128, 2048, 128), (262144, 128, 1), 0), out=buf97)
        buf98 = reinterpret_tensor(buf96, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf96  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf97, buf98, 33554432, grid=grid(33554432), stream=stream0)
        buf99 = reinterpret_tensor(buf97, (8192, 4096), (4096, 1)); del buf97  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf98, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_29, (4096, 4096), (1, 4096), 0), out=buf99)
        buf100 = reinterpret_tensor(buf99, (4, 2048, 4096), (8388608, 4096, 1)); del buf99  # reuse
        buf102 = reinterpret_tensor(buf98, (4, 2048, 4096), (8388608, 4096, 1)); del buf98  # reuse
        # Source Nodes: [add_14, add_15, add_18, add_19, add_3, add_5, float_6, mean_3, mul_12, mul_13, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_18.run(buf100, buf71, primals_22, buf0, buf21, buf27, primals_30, buf102, 8192, 4096, grid=grid(8192), stream=stream0)
        buf103 = reinterpret_tensor(buf63, (8192, 11008), (11008, 1)); del buf63  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf102, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_31, (4096, 11008), (1, 4096), 0), out=buf103)
        buf104 = buf62; del buf62  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf102, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_32, (4096, 11008), (1, 4096), 0), out=buf104)
        buf105 = reinterpret_tensor(buf103, (4, 2048, 11008), (22544384, 11008, 1)); del buf103  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf105, buf104, 90177536, grid=grid(90177536), stream=stream0)
        buf106 = reinterpret_tensor(buf102, (8192, 4096), (4096, 1)); del buf102  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf105, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_33, (11008, 4096), (1, 11008), 0), out=buf106)
        buf108 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf109 = reinterpret_tensor(buf90, (8192, 4096), (4096, 1)); del buf90  # reuse
        # Source Nodes: [add_16, add_20, l__mod___dynamic_dense_2_w1, mean_2, mul_14, pow_3, rsqrt_2], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf100, buf106, buf108, buf109, 8192, 4096, grid=grid(8192), stream=stream0)
        buf110 = empty_strided((8192, 16), (16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_2_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf109, reinterpret_tensor(primals_389, (4096, 16), (1, 4096), 0), out=buf110)
        buf111 = empty_strided((8192, 16), (16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_2_act, l__mod___dynamic_dense_2_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_20.run(buf110, buf111, 131072, grid=grid(131072), stream=stream0)
        buf112 = empty_strided((8192, 16), (16, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_2_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf111, reinterpret_tensor(primals_390, (16, 16), (1, 16), 0), out=buf112)
        buf113 = buf82; del buf82  # reuse
        buf114 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf115 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf116 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf120 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf122 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf124 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_18, add_19, add_20, add_21, add_22, add_23, add_24, add_25, add_26, add_27, add_28, add_29, add_3, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_15, mul_16, mul_17, mul_18, mul_19, mul_2, mul_20, mul_21, mul_22, mul_23, mul_24, mul_25, mul_26, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_21.run(buf112, primals_34, buf0, buf21, buf27, buf65, primals_35, primals_36, primals_37, buf113, buf114, buf115, buf116, buf120, buf122, buf124, 8192, 4096, grid=grid(8192), stream=stream0)
        buf121 = reinterpret_tensor(buf115, (8192, 4096), (4096, 1)); del buf115  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf120, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_38, (4096, 4096), (1, 4096), 0), out=buf121)
        buf123 = reinterpret_tensor(buf120, (8192, 4096), (4096, 1)); del buf120  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf122, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_39, (4096, 4096), (1, 4096), 0), out=buf123)
        buf125 = reinterpret_tensor(buf122, (8192, 4096), (4096, 1)); del buf122  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf124, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_40, (4096, 4096), (1, 4096), 0), out=buf125)
        buf128 = buf89; del buf89  # reuse
        buf126 = reinterpret_tensor(buf128, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf127 = reinterpret_tensor(buf128, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf131 = buf86; del buf86  # reuse
        buf129 = reinterpret_tensor(buf131, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf130 = reinterpret_tensor(buf131, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf121, primals_450, buf123, buf126, buf127, buf129, buf130, 16777216, grid=grid(16777216), stream=stream0)
        buf132 = reinterpret_tensor(buf123, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf123  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf128, buf132, 33554432, grid=grid(33554432), stream=stream0)
        del buf126
        del buf127
        del buf129
        del buf130
        buf133 = reinterpret_tensor(buf121, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf121  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf131, buf133, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf134 = reinterpret_tensor(buf95, (128, 2048, 2048), (4194304, 2048, 1)); del buf95  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf132, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf133, (128, 128, 2048), (262144, 2048, 1), 0), out=buf134)
        buf137 = reinterpret_tensor(buf92, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf92  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf134, buf14, buf137, 262144, 2048, grid=grid(262144), stream=stream0)
        buf138 = reinterpret_tensor(buf133, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf133  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf125, buf138, 33554432, grid=grid(33554432), stream=stream0)
        buf139 = reinterpret_tensor(buf125, (128, 2048, 128), (262144, 128, 1)); del buf125  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf137, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf138, (128, 2048, 128), (262144, 128, 1), 0), out=buf139)
        buf140 = reinterpret_tensor(buf138, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf138  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf139, buf140, 33554432, grid=grid(33554432), stream=stream0)
        buf141 = reinterpret_tensor(buf139, (8192, 4096), (4096, 1)); del buf139  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf140, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_41, (4096, 4096), (1, 4096), 0), out=buf141)
        buf143 = reinterpret_tensor(buf140, (4, 2048, 4096), (8388608, 4096, 1)); del buf140  # reuse
        # Source Nodes: [add_31, add_32, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf116, buf141, primals_42, buf143, 8192, 4096, grid=grid(8192), stream=stream0)
        buf144 = reinterpret_tensor(buf105, (8192, 11008), (11008, 1)); del buf105  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf143, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_43, (4096, 11008), (1, 4096), 0), out=buf144)
        buf145 = buf104; del buf104  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf143, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_44, (4096, 11008), (1, 4096), 0), out=buf145)
        buf146 = reinterpret_tensor(buf144, (4, 2048, 11008), (22544384, 11008, 1)); del buf144  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf146, buf145, 90177536, grid=grid(90177536), stream=stream0)
        buf147 = reinterpret_tensor(buf143, (8192, 4096), (4096, 1)); del buf143  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf146, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_45, (11008, 4096), (1, 11008), 0), out=buf147)
        buf149 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf150 = reinterpret_tensor(buf132, (8192, 4096), (4096, 1)); del buf132  # reuse
        # Source Nodes: [add_30, add_31, add_33, l__mod___dynamic_dense_3_w1, mean_3, mul_27, pow_4, rsqrt_3], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf116, buf141, buf147, buf149, buf150, 8192, 4096, grid=grid(8192), stream=stream0)
        buf151 = empty_strided((8192, 20), (20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_3_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf150, reinterpret_tensor(primals_391, (4096, 20), (1, 4096), 0), out=buf151)
        buf152 = empty_strided((8192, 20), (20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_3_act, l__mod___dynamic_dense_3_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_22.run(buf151, buf152, 163840, grid=grid(163840), stream=stream0)
        buf153 = empty_strided((8192, 20), (20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_3_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf152, reinterpret_tensor(primals_392, (20, 20), (1, 20), 0), out=buf153)
        buf157 = buf124; del buf124  # reuse
        buf158 = reinterpret_tensor(buf131, (4, 2048, 4096), (8388608, 4096, 1)); del buf131  # reuse
        buf160 = reinterpret_tensor(buf128, (4, 2048, 4096), (8388608, 4096, 1)); del buf128  # reuse
        buf162 = buf72; del buf72  # reuse
        buf164 = buf114; del buf114  # reuse
        buf166 = buf113; del buf113  # reuse
        buf168 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_20, add_3, add_32, add_33, add_34, add_35, add_36, add_37, add_38, add_39, add_40, add_41, add_42, add_43, add_44, add_45, add_46, add_5, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_28, mul_29, mul_3, mul_30, mul_31, mul_32, mul_33, mul_34, mul_35, mul_36, mul_37, mul_38, mul_39, mul_4, mul_40, mul_41, mul_42, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_23.run(buf153, primals_46, buf0, buf21, buf27, buf65, buf100, buf106, primals_47, primals_48, primals_49, buf157, buf158, buf160, buf162, buf164, buf166, buf168, 8192, 4096, grid=grid(8192), stream=stream0)
        buf165 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf164, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_50, (4096, 4096), (1, 4096), 0), out=buf165)
        buf167 = reinterpret_tensor(buf164, (8192, 4096), (4096, 1)); del buf164  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf166, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_51, (4096, 4096), (1, 4096), 0), out=buf167)
        buf169 = reinterpret_tensor(buf166, (8192, 4096), (4096, 1)); del buf166  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf168, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_52, (4096, 4096), (1, 4096), 0), out=buf169)
        buf172 = reinterpret_tensor(buf162, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf162  # reuse
        buf170 = reinterpret_tensor(buf172, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf171 = reinterpret_tensor(buf172, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf175 = reinterpret_tensor(buf160, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf160  # reuse
        buf173 = reinterpret_tensor(buf175, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf174 = reinterpret_tensor(buf175, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf165, primals_450, buf167, buf170, buf171, buf173, buf174, 16777216, grid=grid(16777216), stream=stream0)
        buf176 = reinterpret_tensor(buf167, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf167  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf172, buf176, 33554432, grid=grid(33554432), stream=stream0)
        del buf170
        del buf171
        del buf173
        del buf174
        buf177 = reinterpret_tensor(buf165, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf165  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf175, buf177, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf178 = reinterpret_tensor(buf137, (128, 2048, 2048), (4194304, 2048, 1)); del buf137  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf176, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf177, (128, 128, 2048), (262144, 2048, 1), 0), out=buf178)
        buf181 = reinterpret_tensor(buf134, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf134  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf178, buf14, buf181, 262144, 2048, grid=grid(262144), stream=stream0)
        buf182 = reinterpret_tensor(buf177, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf177  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf169, buf182, 33554432, grid=grid(33554432), stream=stream0)
        buf183 = reinterpret_tensor(buf169, (128, 2048, 128), (262144, 128, 1)); del buf169  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf181, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf182, (128, 2048, 128), (262144, 128, 1), 0), out=buf183)
        buf184 = reinterpret_tensor(buf182, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf182  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf183, buf184, 33554432, grid=grid(33554432), stream=stream0)
        buf185 = reinterpret_tensor(buf183, (8192, 4096), (4096, 1)); del buf183  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf184, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_53, (4096, 4096), (1, 4096), 0), out=buf185)
        buf186 = buf157; del buf157  # reuse
        buf188 = reinterpret_tensor(buf184, (4, 2048, 4096), (8388608, 4096, 1)); del buf184  # reuse
        # Source Nodes: [add_20, add_47, add_48, add_49, float_6, mean_3, mul_18, mul_19, mul_20, mul_43, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_24.run(buf186, buf153, primals_46, buf100, buf106, buf185, primals_54, buf188, 8192, 4096, grid=grid(8192), stream=stream0)
        buf189 = reinterpret_tensor(buf146, (8192, 11008), (11008, 1)); del buf146  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf188, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_55, (4096, 11008), (1, 4096), 0), out=buf189)
        buf190 = buf145; del buf145  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf188, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_56, (4096, 11008), (1, 4096), 0), out=buf190)
        buf191 = reinterpret_tensor(buf189, (4, 2048, 11008), (22544384, 11008, 1)); del buf189  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf191, buf190, 90177536, grid=grid(90177536), stream=stream0)
        buf192 = reinterpret_tensor(buf188, (8192, 4096), (4096, 1)); del buf188  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf191, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_57, (11008, 4096), (1, 11008), 0), out=buf192)
        buf194 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf195 = buf185; del buf185  # reuse
        # Source Nodes: [add_48, add_50, l__mod___dynamic_dense_4_w1, mean_4, mul_44, pow_5, rsqrt_4], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf186, buf192, buf194, buf195, 8192, 4096, grid=grid(8192), stream=stream0)
        buf196 = empty_strided((8192, 24), (24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_4_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf195, reinterpret_tensor(primals_393, (4096, 24), (1, 4096), 0), out=buf196)
        buf197 = empty_strided((8192, 24), (24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_4_act, l__mod___dynamic_dense_4_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_25.run(buf196, buf197, 196608, grid=grid(196608), stream=stream0)
        buf198 = empty_strided((8192, 24), (24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_4_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf197, reinterpret_tensor(primals_394, (24, 24), (1, 24), 0), out=buf198)
        buf199 = reinterpret_tensor(buf176, (4, 2048, 4096), (8388608, 4096, 1)); del buf176  # reuse
        buf201 = buf168; del buf168  # reuse
        buf203 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf205 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf200 = buf199; del buf199  # reuse
        buf202 = buf201; del buf201  # reuse
        buf204 = buf203; del buf203  # reuse
        buf206 = buf205; del buf205  # reuse
        buf214 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf212 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf210 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_20, add_3, add_31, add_33, add_5, add_50, add_51, add_52, add_53, add_54, add_55, add_56, add_57, add_58, add_59, add_60, add_61, add_62, add_63, add_64, add_65, add_66, add_67, add_68, add_69, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_45, mul_46, mul_47, mul_48, mul_49, mul_5, mul_50, mul_51, mul_52, mul_53, mul_54, mul_55, mul_56, mul_57, mul_58, mul_59, mul_6, mul_60, mul_61, mul_62, mul_63, mul_64, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_26.run(buf200, buf202, buf204, buf206, buf198, primals_58, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, primals_61, primals_60, primals_59, buf214, buf212, buf210, 8192, 4096, grid=grid(8192), stream=stream0)
        buf211 = reinterpret_tensor(buf204, (8192, 4096), (4096, 1)); del buf204  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf210, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_62, (4096, 4096), (1, 4096), 0), out=buf211)
        buf213 = reinterpret_tensor(buf210, (8192, 4096), (4096, 1)); del buf210  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf212, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_63, (4096, 4096), (1, 4096), 0), out=buf213)
        buf215 = reinterpret_tensor(buf212, (8192, 4096), (4096, 1)); del buf212  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf214, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_64, (4096, 4096), (1, 4096), 0), out=buf215)
        buf218 = buf175; del buf175  # reuse
        buf216 = reinterpret_tensor(buf218, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf217 = reinterpret_tensor(buf218, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf221 = buf172; del buf172  # reuse
        buf219 = reinterpret_tensor(buf221, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf220 = reinterpret_tensor(buf221, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf211, primals_450, buf213, buf216, buf217, buf219, buf220, 16777216, grid=grid(16777216), stream=stream0)
        buf222 = reinterpret_tensor(buf213, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf213  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf218, buf222, 33554432, grid=grid(33554432), stream=stream0)
        del buf216
        del buf217
        del buf219
        del buf220
        buf223 = reinterpret_tensor(buf211, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf211  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf221, buf223, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf224 = reinterpret_tensor(buf181, (128, 2048, 2048), (4194304, 2048, 1)); del buf181  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf222, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf223, (128, 128, 2048), (262144, 2048, 1), 0), out=buf224)
        buf227 = reinterpret_tensor(buf178, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf178  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf224, buf14, buf227, 262144, 2048, grid=grid(262144), stream=stream0)
        buf228 = reinterpret_tensor(buf223, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf223  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf215, buf228, 33554432, grid=grid(33554432), stream=stream0)
        buf229 = reinterpret_tensor(buf215, (128, 2048, 128), (262144, 128, 1)); del buf215  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf227, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf228, (128, 2048, 128), (262144, 128, 1), 0), out=buf229)
        buf230 = reinterpret_tensor(buf228, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf228  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf229, buf230, 33554432, grid=grid(33554432), stream=stream0)
        buf231 = reinterpret_tensor(buf229, (8192, 4096), (4096, 1)); del buf229  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf230, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_65, (4096, 4096), (1, 4096), 0), out=buf231)
        buf233 = reinterpret_tensor(buf230, (4, 2048, 4096), (8388608, 4096, 1)); del buf230  # reuse
        # Source Nodes: [add_70, add_71, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf206, buf231, primals_66, buf233, 8192, 4096, grid=grid(8192), stream=stream0)
        buf234 = reinterpret_tensor(buf191, (8192, 11008), (11008, 1)); del buf191  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf233, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_67, (4096, 11008), (1, 4096), 0), out=buf234)
        buf235 = buf190; del buf190  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf233, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_68, (4096, 11008), (1, 4096), 0), out=buf235)
        buf236 = reinterpret_tensor(buf234, (4, 2048, 11008), (22544384, 11008, 1)); del buf234  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf236, buf235, 90177536, grid=grid(90177536), stream=stream0)
        buf237 = reinterpret_tensor(buf233, (8192, 4096), (4096, 1)); del buf233  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf236, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_69, (11008, 4096), (1, 11008), 0), out=buf237)
        buf239 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf240 = reinterpret_tensor(buf222, (8192, 4096), (4096, 1)); del buf222  # reuse
        # Source Nodes: [add_70, add_72, l__mod___dynamic_dense_5_w1, mean_5, mul_65, pow_6, rsqrt_5], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf206, buf231, buf237, buf239, buf240, 8192, 4096, grid=grid(8192), stream=stream0)
        buf241 = empty_strided((8192, 28), (28, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_5_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf240, reinterpret_tensor(primals_395, (4096, 28), (1, 4096), 0), out=buf241)
        buf242 = empty_strided((8192, 28), (28, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_5_act, l__mod___dynamic_dense_5_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_27.run(buf241, buf242, 229376, grid=grid(229376), stream=stream0)
        buf243 = empty_strided((8192, 28), (28, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_5_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf242, reinterpret_tensor(primals_396, (28, 28), (1, 28), 0), out=buf243)
        buf250 = buf214; del buf214  # reuse
        buf251 = buf250; del buf250  # reuse
        buf252 = reinterpret_tensor(buf221, (4, 2048, 4096), (8388608, 4096, 1)); del buf221  # reuse
        buf254 = reinterpret_tensor(buf218, (4, 2048, 4096), (8388608, 4096, 1)); del buf218  # reuse
        buf256 = buf158; del buf158  # reuse
        buf258 = buf202; del buf202  # reuse
        buf260 = buf200; del buf200  # reuse
        buf262 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_20, add_3, add_31, add_33, add_5, add_50, add_72, add_73, add_74, add_75, add_76, add_77, add_78, add_79, add_80, add_81, add_82, add_83, add_84, add_85, add_86, add_87, add_88, add_89, add_90, add_91, add_92, add_93, add_94, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_66, mul_67, mul_68, mul_69, mul_7, mul_70, mul_71, mul_72, mul_73, mul_74, mul_75, mul_76, mul_77, mul_78, mul_79, mul_8, mul_80, mul_81, mul_82, mul_83, mul_84, mul_85, mul_86, mul_87, mul_88, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_28.run(buf251, buf243, primals_70, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, primals_71, primals_72, primals_73, buf252, buf254, buf256, buf258, buf260, buf262, 8192, 4096, grid=grid(8192), stream=stream0)
        buf259 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf258, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_74, (4096, 4096), (1, 4096), 0), out=buf259)
        buf261 = reinterpret_tensor(buf258, (8192, 4096), (4096, 1)); del buf258  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf260, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_75, (4096, 4096), (1, 4096), 0), out=buf261)
        buf263 = reinterpret_tensor(buf260, (8192, 4096), (4096, 1)); del buf260  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf262, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_76, (4096, 4096), (1, 4096), 0), out=buf263)
        buf266 = reinterpret_tensor(buf256, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf256  # reuse
        buf264 = reinterpret_tensor(buf266, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf265 = reinterpret_tensor(buf266, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf269 = reinterpret_tensor(buf254, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf254  # reuse
        buf267 = reinterpret_tensor(buf269, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf268 = reinterpret_tensor(buf269, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf259, primals_450, buf261, buf264, buf265, buf267, buf268, 16777216, grid=grid(16777216), stream=stream0)
        buf270 = reinterpret_tensor(buf261, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf261  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf266, buf270, 33554432, grid=grid(33554432), stream=stream0)
        del buf264
        del buf265
        del buf267
        del buf268
        buf271 = reinterpret_tensor(buf259, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf259  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf269, buf271, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf272 = reinterpret_tensor(buf227, (128, 2048, 2048), (4194304, 2048, 1)); del buf227  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf270, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf271, (128, 128, 2048), (262144, 2048, 1), 0), out=buf272)
        buf275 = reinterpret_tensor(buf224, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf224  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf272, buf14, buf275, 262144, 2048, grid=grid(262144), stream=stream0)
        buf276 = reinterpret_tensor(buf271, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf271  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf263, buf276, 33554432, grid=grid(33554432), stream=stream0)
        buf277 = reinterpret_tensor(buf263, (128, 2048, 128), (262144, 128, 1)); del buf263  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf275, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf276, (128, 2048, 128), (262144, 128, 1), 0), out=buf277)
        buf278 = reinterpret_tensor(buf276, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf276  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf277, buf278, 33554432, grid=grid(33554432), stream=stream0)
        buf279 = reinterpret_tensor(buf277, (8192, 4096), (4096, 1)); del buf277  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf278, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_77, (4096, 4096), (1, 4096), 0), out=buf279)
        buf280 = buf251; del buf251  # reuse
        buf282 = reinterpret_tensor(buf278, (4, 2048, 4096), (8388608, 4096, 1)); del buf278  # reuse
        # Source Nodes: [add_50, add_95, add_96, add_97, float_6, mean_3, mul_18, mul_19, mul_20, mul_89, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_29.run(buf280, buf243, primals_70, buf186, buf192, buf279, primals_78, buf282, 8192, 4096, grid=grid(8192), stream=stream0)
        buf283 = reinterpret_tensor(buf236, (8192, 11008), (11008, 1)); del buf236  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf282, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_79, (4096, 11008), (1, 4096), 0), out=buf283)
        buf284 = buf235; del buf235  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf282, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_80, (4096, 11008), (1, 4096), 0), out=buf284)
        buf285 = reinterpret_tensor(buf283, (4, 2048, 11008), (22544384, 11008, 1)); del buf283  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf285, buf284, 90177536, grid=grid(90177536), stream=stream0)
        buf286 = reinterpret_tensor(buf282, (8192, 4096), (4096, 1)); del buf282  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf285, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_81, (11008, 4096), (1, 11008), 0), out=buf286)
        buf288 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf289 = buf279; del buf279  # reuse
        # Source Nodes: [add_96, add_98, l__mod___dynamic_dense_6_w1, mean_6, mul_90, pow_7, rsqrt_6], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf280, buf286, buf288, buf289, 8192, 4096, grid=grid(8192), stream=stream0)
        buf290 = empty_strided((8192, 32), (32, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_6_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf289, reinterpret_tensor(primals_397, (4096, 32), (1, 4096), 0), out=buf290)
        buf291 = empty_strided((8192, 32), (32, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_6_act, l__mod___dynamic_dense_6_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_30.run(buf290, buf291, 262144, grid=grid(262144), stream=stream0)
        buf292 = empty_strided((8192, 32), (32, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_6_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf291, reinterpret_tensor(primals_398, (32, 32), (1, 32), 0), out=buf292)
        buf293 = reinterpret_tensor(buf270, (4, 2048, 4096), (8388608, 4096, 1)); del buf270  # reuse
        buf296 = buf262; del buf262  # reuse
        buf299 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf302 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf294 = buf293; del buf293  # reuse
        buf297 = buf296; del buf296  # reuse
        buf300 = buf299; del buf299  # reuse
        buf303 = buf302; del buf302  # reuse
        buf295 = buf294; del buf294  # reuse
        buf298 = buf297; del buf297  # reuse
        buf301 = buf300; del buf300  # reuse
        buf304 = buf303; del buf303  # reuse
        buf312 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf310 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf308 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_100, add_101, add_102, add_103, add_104, add_105, add_106, add_107, add_108, add_109, add_110, add_111, add_112, add_113, add_114, add_115, add_116, add_117, add_118, add_119, add_120, add_121, add_122, add_123, add_124, add_125, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, add_99, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_100, mul_101, mul_102, mul_103, mul_104, mul_105, mul_106, mul_107, mul_108, mul_109, mul_110, mul_111, mul_112, mul_113, mul_114, mul_115, mul_116, mul_117, mul_118, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_91, mul_92, mul_93, mul_94, mul_95, mul_96, mul_97, mul_98, mul_99, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_31.run(buf295, buf298, buf301, buf304, buf292, primals_82, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, primals_85, primals_84, primals_83, buf312, buf310, buf308, 8192, 4096, grid=grid(8192), stream=stream0)
        buf309 = reinterpret_tensor(buf301, (8192, 4096), (4096, 1)); del buf301  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf308, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_86, (4096, 4096), (1, 4096), 0), out=buf309)
        buf311 = reinterpret_tensor(buf308, (8192, 4096), (4096, 1)); del buf308  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf310, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_87, (4096, 4096), (1, 4096), 0), out=buf311)
        buf313 = reinterpret_tensor(buf310, (8192, 4096), (4096, 1)); del buf310  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf312, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_88, (4096, 4096), (1, 4096), 0), out=buf313)
        buf316 = buf269; del buf269  # reuse
        buf314 = reinterpret_tensor(buf316, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf315 = reinterpret_tensor(buf316, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf319 = buf266; del buf266  # reuse
        buf317 = reinterpret_tensor(buf319, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf318 = reinterpret_tensor(buf319, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf309, primals_450, buf311, buf314, buf315, buf317, buf318, 16777216, grid=grid(16777216), stream=stream0)
        buf320 = reinterpret_tensor(buf311, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf311  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf316, buf320, 33554432, grid=grid(33554432), stream=stream0)
        del buf314
        del buf315
        del buf317
        del buf318
        buf321 = reinterpret_tensor(buf309, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf309  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf319, buf321, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf322 = reinterpret_tensor(buf275, (128, 2048, 2048), (4194304, 2048, 1)); del buf275  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf320, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf321, (128, 128, 2048), (262144, 2048, 1), 0), out=buf322)
        buf325 = reinterpret_tensor(buf272, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf272  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf322, buf14, buf325, 262144, 2048, grid=grid(262144), stream=stream0)
        buf326 = reinterpret_tensor(buf321, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf321  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf313, buf326, 33554432, grid=grid(33554432), stream=stream0)
        buf327 = reinterpret_tensor(buf313, (128, 2048, 128), (262144, 128, 1)); del buf313  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf325, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf326, (128, 2048, 128), (262144, 128, 1), 0), out=buf327)
        buf328 = reinterpret_tensor(buf326, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf326  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf327, buf328, 33554432, grid=grid(33554432), stream=stream0)
        buf329 = reinterpret_tensor(buf327, (8192, 4096), (4096, 1)); del buf327  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf328, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_89, (4096, 4096), (1, 4096), 0), out=buf329)
        buf331 = reinterpret_tensor(buf328, (4, 2048, 4096), (8388608, 4096, 1)); del buf328  # reuse
        # Source Nodes: [add_126, add_127, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf304, buf329, primals_90, buf331, 8192, 4096, grid=grid(8192), stream=stream0)
        buf332 = reinterpret_tensor(buf285, (8192, 11008), (11008, 1)); del buf285  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf331, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_91, (4096, 11008), (1, 4096), 0), out=buf332)
        buf333 = buf284; del buf284  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf331, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_92, (4096, 11008), (1, 4096), 0), out=buf333)
        buf334 = reinterpret_tensor(buf332, (4, 2048, 11008), (22544384, 11008, 1)); del buf332  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf334, buf333, 90177536, grid=grid(90177536), stream=stream0)
        buf335 = reinterpret_tensor(buf331, (8192, 4096), (4096, 1)); del buf331  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf334, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_93, (11008, 4096), (1, 11008), 0), out=buf335)
        buf337 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf338 = reinterpret_tensor(buf320, (8192, 4096), (4096, 1)); del buf320  # reuse
        # Source Nodes: [add_126, add_128, l__mod___dynamic_dense_7_w1, mean_7, mul_119, pow_8, rsqrt_7], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf304, buf329, buf335, buf337, buf338, 8192, 4096, grid=grid(8192), stream=stream0)
        buf339 = empty_strided((8192, 36), (36, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_7_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf338, reinterpret_tensor(primals_399, (4096, 36), (1, 4096), 0), out=buf339)
        buf340 = empty_strided((8192, 36), (36, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_7_act, l__mod___dynamic_dense_7_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_32.run(buf339, buf340, 294912, grid=grid(294912), stream=stream0)
        buf341 = empty_strided((8192, 36), (36, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_7_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf340, reinterpret_tensor(primals_400, (36, 36), (1, 36), 0), out=buf341)
        buf351 = buf312; del buf312  # reuse
        buf352 = buf351; del buf351  # reuse
        buf353 = buf352; del buf352  # reuse
        buf354 = reinterpret_tensor(buf319, (4, 2048, 4096), (8388608, 4096, 1)); del buf319  # reuse
        buf356 = reinterpret_tensor(buf316, (4, 2048, 4096), (8388608, 4096, 1)); del buf316  # reuse
        buf358 = buf252; del buf252  # reuse
        buf360 = buf298; del buf298  # reuse
        buf362 = buf295; del buf295  # reuse
        buf364 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_128, add_129, add_130, add_131, add_132, add_133, add_134, add_135, add_136, add_137, add_138, add_139, add_140, add_141, add_142, add_143, add_144, add_145, add_146, add_147, add_148, add_149, add_150, add_151, add_152, add_153, add_154, add_155, add_156, add_157, add_158, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_120, mul_121, mul_122, mul_123, mul_124, mul_125, mul_126, mul_127, mul_128, mul_129, mul_130, mul_131, mul_132, mul_133, mul_134, mul_135, mul_136, mul_137, mul_138, mul_139, mul_140, mul_141, mul_142, mul_143, mul_144, mul_145, mul_146, mul_147, mul_148, mul_149, mul_150, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_33.run(buf353, buf341, primals_94, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, primals_95, primals_96, primals_97, buf354, buf356, buf358, buf360, buf362, buf364, 8192, 4096, grid=grid(8192), stream=stream0)
        buf361 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf360, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_98, (4096, 4096), (1, 4096), 0), out=buf361)
        buf363 = reinterpret_tensor(buf360, (8192, 4096), (4096, 1)); del buf360  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf362, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_99, (4096, 4096), (1, 4096), 0), out=buf363)
        buf365 = reinterpret_tensor(buf362, (8192, 4096), (4096, 1)); del buf362  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf364, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_100, (4096, 4096), (1, 4096), 0), out=buf365)
        buf368 = reinterpret_tensor(buf358, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf358  # reuse
        buf366 = reinterpret_tensor(buf368, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf367 = reinterpret_tensor(buf368, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf371 = reinterpret_tensor(buf356, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf356  # reuse
        buf369 = reinterpret_tensor(buf371, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf370 = reinterpret_tensor(buf371, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf361, primals_450, buf363, buf366, buf367, buf369, buf370, 16777216, grid=grid(16777216), stream=stream0)
        buf372 = reinterpret_tensor(buf363, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf363  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf368, buf372, 33554432, grid=grid(33554432), stream=stream0)
        del buf366
        del buf367
        del buf369
        del buf370
        buf373 = reinterpret_tensor(buf361, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf361  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf371, buf373, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf374 = reinterpret_tensor(buf325, (128, 2048, 2048), (4194304, 2048, 1)); del buf325  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf372, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf373, (128, 128, 2048), (262144, 2048, 1), 0), out=buf374)
        buf377 = reinterpret_tensor(buf322, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf322  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf374, buf14, buf377, 262144, 2048, grid=grid(262144), stream=stream0)
        buf378 = reinterpret_tensor(buf373, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf373  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf365, buf378, 33554432, grid=grid(33554432), stream=stream0)
        buf379 = reinterpret_tensor(buf365, (128, 2048, 128), (262144, 128, 1)); del buf365  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf377, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf378, (128, 2048, 128), (262144, 128, 1), 0), out=buf379)
        buf380 = reinterpret_tensor(buf378, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf378  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf379, buf380, 33554432, grid=grid(33554432), stream=stream0)
        buf381 = reinterpret_tensor(buf379, (8192, 4096), (4096, 1)); del buf379  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf380, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_101, (4096, 4096), (1, 4096), 0), out=buf381)
        buf382 = buf353; del buf353  # reuse
        buf384 = reinterpret_tensor(buf380, (4, 2048, 4096), (8388608, 4096, 1)); del buf380  # reuse
        # Source Nodes: [add_159, add_160, add_161, add_98, float_6, mean_3, mul_151, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_34.run(buf382, buf341, primals_94, buf280, buf286, buf381, primals_102, buf384, 8192, 4096, grid=grid(8192), stream=stream0)
        buf385 = reinterpret_tensor(buf334, (8192, 11008), (11008, 1)); del buf334  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf384, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_103, (4096, 11008), (1, 4096), 0), out=buf385)
        buf386 = buf333; del buf333  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf384, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_104, (4096, 11008), (1, 4096), 0), out=buf386)
        buf387 = reinterpret_tensor(buf385, (4, 2048, 11008), (22544384, 11008, 1)); del buf385  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf387, buf386, 90177536, grid=grid(90177536), stream=stream0)
        buf388 = reinterpret_tensor(buf384, (8192, 4096), (4096, 1)); del buf384  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf387, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_105, (11008, 4096), (1, 11008), 0), out=buf388)
        buf390 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf391 = buf381; del buf381  # reuse
        # Source Nodes: [add_160, add_162, l__mod___dynamic_dense_8_w1, mean_8, mul_152, pow_9, rsqrt_8], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf382, buf388, buf390, buf391, 8192, 4096, grid=grid(8192), stream=stream0)
        buf392 = empty_strided((8192, 40), (40, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_8_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf391, reinterpret_tensor(primals_401, (4096, 40), (1, 4096), 0), out=buf392)
        buf393 = empty_strided((8192, 40), (40, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_8_act, l__mod___dynamic_dense_8_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_35.run(buf392, buf393, 327680, grid=grid(327680), stream=stream0)
        buf394 = empty_strided((8192, 40), (40, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_8_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf393, reinterpret_tensor(primals_402, (40, 40), (1, 40), 0), out=buf394)
        buf395 = reinterpret_tensor(buf372, (4, 2048, 4096), (8388608, 4096, 1)); del buf372  # reuse
        buf399 = buf364; del buf364  # reuse
        buf403 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf407 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf396 = buf395; del buf395  # reuse
        buf400 = buf399; del buf399  # reuse
        buf404 = buf403; del buf403  # reuse
        buf408 = buf407; del buf407  # reuse
        buf397 = buf396; del buf396  # reuse
        buf401 = buf400; del buf400  # reuse
        buf405 = buf404; del buf404  # reuse
        buf409 = buf408; del buf408  # reuse
        buf398 = buf397; del buf397  # reuse
        buf402 = buf401; del buf401  # reuse
        buf406 = buf405; del buf405  # reuse
        buf410 = buf409; del buf409  # reuse
        buf418 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf416 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf414 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_163, add_164, add_165, add_166, add_167, add_168, add_169, add_170, add_171, add_172, add_173, add_174, add_175, add_176, add_177, add_178, add_179, add_180, add_181, add_182, add_183, add_184, add_185, add_186, add_187, add_188, add_189, add_190, add_191, add_192, add_193, add_194, add_195, add_196, add_197, add_20, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_153, mul_154, mul_155, mul_156, mul_157, mul_158, mul_159, mul_160, mul_161, mul_162, mul_163, mul_164, mul_165, mul_166, mul_167, mul_168, mul_169, mul_170, mul_171, mul_172, mul_173, mul_174, mul_175, mul_176, mul_177, mul_178, mul_179, mul_180, mul_181, mul_182, mul_183, mul_184, mul_185, mul_186, mul_187, mul_188, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_36.run(buf398, buf402, buf406, buf410, buf394, primals_106, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, primals_109, primals_108, primals_107, buf418, buf416, buf414, 8192, 4096, grid=grid(8192), stream=stream0)
        buf415 = reinterpret_tensor(buf406, (8192, 4096), (4096, 1)); del buf406  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf414, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_110, (4096, 4096), (1, 4096), 0), out=buf415)
        buf417 = reinterpret_tensor(buf414, (8192, 4096), (4096, 1)); del buf414  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf416, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_111, (4096, 4096), (1, 4096), 0), out=buf417)
        buf419 = reinterpret_tensor(buf416, (8192, 4096), (4096, 1)); del buf416  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf418, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_112, (4096, 4096), (1, 4096), 0), out=buf419)
        buf422 = buf371; del buf371  # reuse
        buf420 = reinterpret_tensor(buf422, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf421 = reinterpret_tensor(buf422, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf425 = buf368; del buf368  # reuse
        buf423 = reinterpret_tensor(buf425, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf424 = reinterpret_tensor(buf425, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf415, primals_450, buf417, buf420, buf421, buf423, buf424, 16777216, grid=grid(16777216), stream=stream0)
        buf426 = reinterpret_tensor(buf417, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf417  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf422, buf426, 33554432, grid=grid(33554432), stream=stream0)
        del buf420
        del buf421
        del buf423
        del buf424
        buf427 = reinterpret_tensor(buf415, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf415  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf425, buf427, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf428 = reinterpret_tensor(buf377, (128, 2048, 2048), (4194304, 2048, 1)); del buf377  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf426, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf427, (128, 128, 2048), (262144, 2048, 1), 0), out=buf428)
        buf431 = reinterpret_tensor(buf374, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf374  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf428, buf14, buf431, 262144, 2048, grid=grid(262144), stream=stream0)
        buf432 = reinterpret_tensor(buf427, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf427  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf419, buf432, 33554432, grid=grid(33554432), stream=stream0)
        buf433 = reinterpret_tensor(buf419, (128, 2048, 128), (262144, 128, 1)); del buf419  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf431, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf432, (128, 2048, 128), (262144, 128, 1), 0), out=buf433)
        buf434 = reinterpret_tensor(buf432, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf432  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf433, buf434, 33554432, grid=grid(33554432), stream=stream0)
        buf435 = reinterpret_tensor(buf433, (8192, 4096), (4096, 1)); del buf433  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf434, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_113, (4096, 4096), (1, 4096), 0), out=buf435)
        buf437 = reinterpret_tensor(buf434, (4, 2048, 4096), (8388608, 4096, 1)); del buf434  # reuse
        # Source Nodes: [add_198, add_199, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf410, buf435, primals_114, buf437, 8192, 4096, grid=grid(8192), stream=stream0)
        buf438 = reinterpret_tensor(buf387, (8192, 11008), (11008, 1)); del buf387  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf437, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_115, (4096, 11008), (1, 4096), 0), out=buf438)
        buf439 = buf386; del buf386  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf437, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_116, (4096, 11008), (1, 4096), 0), out=buf439)
        buf440 = reinterpret_tensor(buf438, (4, 2048, 11008), (22544384, 11008, 1)); del buf438  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf440, buf439, 90177536, grid=grid(90177536), stream=stream0)
        buf441 = reinterpret_tensor(buf437, (8192, 4096), (4096, 1)); del buf437  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf440, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_117, (11008, 4096), (1, 11008), 0), out=buf441)
        buf443 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf444 = reinterpret_tensor(buf426, (8192, 4096), (4096, 1)); del buf426  # reuse
        # Source Nodes: [add_198, add_200, l__mod___dynamic_dense_9_w1, mean_9, mul_189, pow_10, rsqrt_9], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf410, buf435, buf441, buf443, buf444, 8192, 4096, grid=grid(8192), stream=stream0)
        buf445 = empty_strided((8192, 44), (44, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_9_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf444, reinterpret_tensor(primals_403, (4096, 44), (1, 4096), 0), out=buf445)
        buf446 = empty_strided((8192, 44), (44, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_9_act, l__mod___dynamic_dense_9_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_37.run(buf445, buf446, 360448, grid=grid(360448), stream=stream0)
        buf447 = empty_strided((8192, 44), (44, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_9_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf446, reinterpret_tensor(primals_404, (44, 44), (1, 44), 0), out=buf447)
        buf460 = buf418; del buf418  # reuse
        buf461 = buf460; del buf460  # reuse
        buf462 = buf461; del buf461  # reuse
        buf463 = buf462; del buf462  # reuse
        buf464 = reinterpret_tensor(buf425, (4, 2048, 4096), (8388608, 4096, 1)); del buf425  # reuse
        buf466 = reinterpret_tensor(buf422, (4, 2048, 4096), (8388608, 4096, 1)); del buf422  # reuse
        buf468 = buf354; del buf354  # reuse
        buf470 = buf402; del buf402  # reuse
        buf472 = buf398; del buf398  # reuse
        buf474 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_20, add_200, add_201, add_202, add_203, add_204, add_205, add_206, add_207, add_208, add_209, add_210, add_211, add_212, add_213, add_214, add_215, add_216, add_217, add_218, add_219, add_220, add_221, add_222, add_223, add_224, add_225, add_226, add_227, add_228, add_229, add_230, add_231, add_232, add_233, add_234, add_235, add_236, add_237, add_238, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_190, mul_191, mul_192, mul_193, mul_194, mul_195, mul_196, mul_197, mul_198, mul_199, mul_2, mul_200, mul_201, mul_202, mul_203, mul_204, mul_205, mul_206, mul_207, mul_208, mul_209, mul_210, mul_211, mul_212, mul_213, mul_214, mul_215, mul_216, mul_217, mul_218, mul_219, mul_220, mul_221, mul_222, mul_223, mul_224, mul_225, mul_226, mul_227, mul_228, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_38.run(buf463, buf447, primals_118, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, primals_119, primals_120, primals_121, buf464, buf466, buf468, buf470, buf472, buf474, 8192, 4096, grid=grid(8192), stream=stream0)
        buf471 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf470, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_122, (4096, 4096), (1, 4096), 0), out=buf471)
        buf473 = reinterpret_tensor(buf470, (8192, 4096), (4096, 1)); del buf470  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf472, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_123, (4096, 4096), (1, 4096), 0), out=buf473)
        buf475 = reinterpret_tensor(buf472, (8192, 4096), (4096, 1)); del buf472  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf474, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_124, (4096, 4096), (1, 4096), 0), out=buf475)
        buf478 = reinterpret_tensor(buf468, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf468  # reuse
        buf476 = reinterpret_tensor(buf478, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf477 = reinterpret_tensor(buf478, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf481 = reinterpret_tensor(buf466, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf466  # reuse
        buf479 = reinterpret_tensor(buf481, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf480 = reinterpret_tensor(buf481, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf471, primals_450, buf473, buf476, buf477, buf479, buf480, 16777216, grid=grid(16777216), stream=stream0)
        buf482 = reinterpret_tensor(buf473, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf473  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf478, buf482, 33554432, grid=grid(33554432), stream=stream0)
        del buf476
        del buf477
        del buf479
        del buf480
        buf483 = reinterpret_tensor(buf471, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf471  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf481, buf483, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf484 = reinterpret_tensor(buf431, (128, 2048, 2048), (4194304, 2048, 1)); del buf431  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf482, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf483, (128, 128, 2048), (262144, 2048, 1), 0), out=buf484)
        buf487 = reinterpret_tensor(buf428, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf428  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf484, buf14, buf487, 262144, 2048, grid=grid(262144), stream=stream0)
        buf488 = reinterpret_tensor(buf483, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf483  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf475, buf488, 33554432, grid=grid(33554432), stream=stream0)
        buf489 = reinterpret_tensor(buf475, (128, 2048, 128), (262144, 128, 1)); del buf475  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf487, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf488, (128, 2048, 128), (262144, 128, 1), 0), out=buf489)
        buf490 = reinterpret_tensor(buf488, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf488  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf489, buf490, 33554432, grid=grid(33554432), stream=stream0)
        buf491 = reinterpret_tensor(buf489, (8192, 4096), (4096, 1)); del buf489  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf490, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_125, (4096, 4096), (1, 4096), 0), out=buf491)
        buf492 = buf463; del buf463  # reuse
        buf494 = reinterpret_tensor(buf490, (4, 2048, 4096), (8388608, 4096, 1)); del buf490  # reuse
        # Source Nodes: [add_162, add_239, add_240, add_241, float_6, mean_3, mul_18, mul_19, mul_20, mul_229, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_39.run(buf492, buf447, primals_118, buf382, buf388, buf491, primals_126, buf494, 8192, 4096, grid=grid(8192), stream=stream0)
        buf495 = reinterpret_tensor(buf440, (8192, 11008), (11008, 1)); del buf440  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf494, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_127, (4096, 11008), (1, 4096), 0), out=buf495)
        buf496 = buf439; del buf439  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf494, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_128, (4096, 11008), (1, 4096), 0), out=buf496)
        buf497 = reinterpret_tensor(buf495, (4, 2048, 11008), (22544384, 11008, 1)); del buf495  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf497, buf496, 90177536, grid=grid(90177536), stream=stream0)
        buf498 = reinterpret_tensor(buf494, (8192, 4096), (4096, 1)); del buf494  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf497, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_129, (11008, 4096), (1, 11008), 0), out=buf498)
        buf500 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf501 = buf491; del buf491  # reuse
        # Source Nodes: [add_240, add_242, l__mod___dynamic_dense_10_w1, mean_10, mul_230, pow_11, rsqrt_10], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf492, buf498, buf500, buf501, 8192, 4096, grid=grid(8192), stream=stream0)
        buf502 = empty_strided((8192, 48), (48, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_10_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf501, reinterpret_tensor(primals_405, (4096, 48), (1, 4096), 0), out=buf502)
        buf503 = empty_strided((8192, 48), (48, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_10_act, l__mod___dynamic_dense_10_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_40.run(buf502, buf503, 393216, grid=grid(393216), stream=stream0)
        buf504 = empty_strided((8192, 48), (48, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_10_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf503, reinterpret_tensor(primals_406, (48, 48), (1, 48), 0), out=buf504)
        buf505 = reinterpret_tensor(buf482, (4, 2048, 4096), (8388608, 4096, 1)); del buf482  # reuse
        buf510 = buf474; del buf474  # reuse
        buf515 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf520 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf506 = buf505; del buf505  # reuse
        buf511 = buf510; del buf510  # reuse
        buf516 = buf515; del buf515  # reuse
        buf521 = buf520; del buf520  # reuse
        buf507 = buf506; del buf506  # reuse
        buf512 = buf511; del buf511  # reuse
        buf517 = buf516; del buf516  # reuse
        buf522 = buf521; del buf521  # reuse
        buf508 = buf507; del buf507  # reuse
        buf513 = buf512; del buf512  # reuse
        buf518 = buf517; del buf517  # reuse
        buf523 = buf522; del buf522  # reuse
        buf509 = buf508; del buf508  # reuse
        buf514 = buf513; del buf513  # reuse
        buf519 = buf518; del buf518  # reuse
        buf524 = buf523; del buf523  # reuse
        buf532 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf530 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf528 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_243, add_244, add_245, add_246, add_247, add_248, add_249, add_250, add_251, add_252, add_253, add_254, add_255, add_256, add_257, add_258, add_259, add_260, add_261, add_262, add_263, add_264, add_265, add_266, add_267, add_268, add_269, add_270, add_271, add_272, add_273, add_274, add_275, add_276, add_277, add_278, add_279, add_280, add_281, add_282, add_283, add_284, add_285, add_3, add_31, add_33, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_231, mul_232, mul_233, mul_234, mul_235, mul_236, mul_237, mul_238, mul_239, mul_240, mul_241, mul_242, mul_243, mul_244, mul_245, mul_246, mul_247, mul_248, mul_249, mul_250, mul_251, mul_252, mul_253, mul_254, mul_255, mul_256, mul_257, mul_258, mul_259, mul_260, mul_261, mul_262, mul_263, mul_264, mul_265, mul_266, mul_267, mul_268, mul_269, mul_270, mul_271, mul_272, mul_273, mul_274, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_41.run(buf509, buf514, buf519, buf524, buf504, primals_130, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, primals_133, primals_132, primals_131, buf532, buf530, buf528, 8192, 4096, grid=grid(8192), stream=stream0)
        buf529 = reinterpret_tensor(buf519, (8192, 4096), (4096, 1)); del buf519  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf528, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_134, (4096, 4096), (1, 4096), 0), out=buf529)
        buf531 = reinterpret_tensor(buf528, (8192, 4096), (4096, 1)); del buf528  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf530, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_135, (4096, 4096), (1, 4096), 0), out=buf531)
        buf533 = reinterpret_tensor(buf530, (8192, 4096), (4096, 1)); del buf530  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf532, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_136, (4096, 4096), (1, 4096), 0), out=buf533)
        buf536 = buf481; del buf481  # reuse
        buf534 = reinterpret_tensor(buf536, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf535 = reinterpret_tensor(buf536, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf539 = buf478; del buf478  # reuse
        buf537 = reinterpret_tensor(buf539, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf538 = reinterpret_tensor(buf539, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf529, primals_450, buf531, buf534, buf535, buf537, buf538, 16777216, grid=grid(16777216), stream=stream0)
        buf540 = reinterpret_tensor(buf531, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf531  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf536, buf540, 33554432, grid=grid(33554432), stream=stream0)
        del buf534
        del buf535
        del buf537
        del buf538
        buf541 = reinterpret_tensor(buf529, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf529  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf539, buf541, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf542 = reinterpret_tensor(buf487, (128, 2048, 2048), (4194304, 2048, 1)); del buf487  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf540, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf541, (128, 128, 2048), (262144, 2048, 1), 0), out=buf542)
        buf545 = reinterpret_tensor(buf484, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf484  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf542, buf14, buf545, 262144, 2048, grid=grid(262144), stream=stream0)
        buf546 = reinterpret_tensor(buf541, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf541  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf533, buf546, 33554432, grid=grid(33554432), stream=stream0)
        buf547 = reinterpret_tensor(buf533, (128, 2048, 128), (262144, 128, 1)); del buf533  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf545, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf546, (128, 2048, 128), (262144, 128, 1), 0), out=buf547)
        buf548 = reinterpret_tensor(buf546, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf546  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf547, buf548, 33554432, grid=grid(33554432), stream=stream0)
        buf549 = reinterpret_tensor(buf547, (8192, 4096), (4096, 1)); del buf547  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf548, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_137, (4096, 4096), (1, 4096), 0), out=buf549)
        buf551 = reinterpret_tensor(buf548, (4, 2048, 4096), (8388608, 4096, 1)); del buf548  # reuse
        # Source Nodes: [add_286, add_287, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf524, buf549, primals_138, buf551, 8192, 4096, grid=grid(8192), stream=stream0)
        buf552 = reinterpret_tensor(buf497, (8192, 11008), (11008, 1)); del buf497  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf551, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_139, (4096, 11008), (1, 4096), 0), out=buf552)
        buf553 = buf496; del buf496  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf551, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_140, (4096, 11008), (1, 4096), 0), out=buf553)
        buf554 = reinterpret_tensor(buf552, (4, 2048, 11008), (22544384, 11008, 1)); del buf552  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf554, buf553, 90177536, grid=grid(90177536), stream=stream0)
        buf555 = reinterpret_tensor(buf551, (8192, 4096), (4096, 1)); del buf551  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf554, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_141, (11008, 4096), (1, 11008), 0), out=buf555)
        buf557 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf558 = reinterpret_tensor(buf540, (8192, 4096), (4096, 1)); del buf540  # reuse
        # Source Nodes: [add_286, add_288, l__mod___dynamic_dense_11_w1, mean_11, mul_275, pow_12, rsqrt_11], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf524, buf549, buf555, buf557, buf558, 8192, 4096, grid=grid(8192), stream=stream0)
        buf559 = empty_strided((8192, 52), (52, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_11_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf558, reinterpret_tensor(primals_407, (4096, 52), (1, 4096), 0), out=buf559)
        buf560 = empty_strided((8192, 52), (52, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_11_act, l__mod___dynamic_dense_11_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_42.run(buf559, buf560, 425984, grid=grid(425984), stream=stream0)
        buf561 = empty_strided((8192, 52), (52, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_11_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf560, reinterpret_tensor(primals_408, (52, 52), (1, 52), 0), out=buf561)
        buf577 = buf532; del buf532  # reuse
        buf578 = buf577; del buf577  # reuse
        buf579 = buf578; del buf578  # reuse
        buf580 = buf579; del buf579  # reuse
        buf581 = buf580; del buf580  # reuse
        buf582 = reinterpret_tensor(buf539, (4, 2048, 4096), (8388608, 4096, 1)); del buf539  # reuse
        buf584 = reinterpret_tensor(buf536, (4, 2048, 4096), (8388608, 4096, 1)); del buf536  # reuse
        buf586 = buf464; del buf464  # reuse
        buf588 = buf514; del buf514  # reuse
        buf590 = buf509; del buf509  # reuse
        buf592 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_288, add_289, add_290, add_291, add_292, add_293, add_294, add_295, add_296, add_297, add_298, add_299, add_3, add_300, add_301, add_302, add_303, add_304, add_305, add_306, add_307, add_308, add_309, add_31, add_310, add_311, add_312, add_313, add_314, add_315, add_316, add_317, add_318, add_319, add_320, add_321, add_322, add_323, add_324, add_325, add_326, add_327, add_328, add_329, add_33, add_330, add_331, add_332, add_333, add_334, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_276, mul_277, mul_278, mul_279, mul_280, mul_281, mul_282, mul_283, mul_284, mul_285, mul_286, mul_287, mul_288, mul_289, mul_290, mul_291, mul_292, mul_293, mul_294, mul_295, mul_296, mul_297, mul_298, mul_299, mul_3, mul_300, mul_301, mul_302, mul_303, mul_304, mul_305, mul_306, mul_307, mul_308, mul_309, mul_310, mul_311, mul_312, mul_313, mul_314, mul_315, mul_316, mul_317, mul_318, mul_319, mul_320, mul_321, mul_322, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_43.run(buf581, buf561, primals_142, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, primals_143, primals_144, primals_145, buf582, buf584, buf586, buf588, buf590, buf592, 8192, 4096, grid=grid(8192), stream=stream0)
        buf589 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf588, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_146, (4096, 4096), (1, 4096), 0), out=buf589)
        buf591 = reinterpret_tensor(buf588, (8192, 4096), (4096, 1)); del buf588  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf590, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_147, (4096, 4096), (1, 4096), 0), out=buf591)
        buf593 = reinterpret_tensor(buf590, (8192, 4096), (4096, 1)); del buf590  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf592, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_148, (4096, 4096), (1, 4096), 0), out=buf593)
        buf596 = reinterpret_tensor(buf586, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf586  # reuse
        buf594 = reinterpret_tensor(buf596, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf595 = reinterpret_tensor(buf596, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf599 = reinterpret_tensor(buf584, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf584  # reuse
        buf597 = reinterpret_tensor(buf599, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf598 = reinterpret_tensor(buf599, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf589, primals_450, buf591, buf594, buf595, buf597, buf598, 16777216, grid=grid(16777216), stream=stream0)
        buf600 = reinterpret_tensor(buf591, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf591  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf596, buf600, 33554432, grid=grid(33554432), stream=stream0)
        del buf594
        del buf595
        del buf597
        del buf598
        buf601 = reinterpret_tensor(buf589, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf589  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf599, buf601, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf602 = reinterpret_tensor(buf545, (128, 2048, 2048), (4194304, 2048, 1)); del buf545  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf600, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf601, (128, 128, 2048), (262144, 2048, 1), 0), out=buf602)
        buf605 = reinterpret_tensor(buf542, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf542  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf602, buf14, buf605, 262144, 2048, grid=grid(262144), stream=stream0)
        buf606 = reinterpret_tensor(buf601, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf601  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf593, buf606, 33554432, grid=grid(33554432), stream=stream0)
        buf607 = reinterpret_tensor(buf593, (128, 2048, 128), (262144, 128, 1)); del buf593  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf605, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf606, (128, 2048, 128), (262144, 128, 1), 0), out=buf607)
        buf608 = reinterpret_tensor(buf606, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf606  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf607, buf608, 33554432, grid=grid(33554432), stream=stream0)
        buf609 = reinterpret_tensor(buf607, (8192, 4096), (4096, 1)); del buf607  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf608, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_149, (4096, 4096), (1, 4096), 0), out=buf609)
        buf610 = buf581; del buf581  # reuse
        buf612 = reinterpret_tensor(buf608, (4, 2048, 4096), (8388608, 4096, 1)); del buf608  # reuse
        # Source Nodes: [add_242, add_335, add_336, add_337, float_6, mean_3, mul_18, mul_19, mul_20, mul_323, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_44.run(buf610, buf561, primals_142, buf492, buf498, buf609, primals_150, buf612, 8192, 4096, grid=grid(8192), stream=stream0)
        buf613 = reinterpret_tensor(buf554, (8192, 11008), (11008, 1)); del buf554  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_151, (4096, 11008), (1, 4096), 0), out=buf613)
        buf614 = buf553; del buf553  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf612, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_152, (4096, 11008), (1, 4096), 0), out=buf614)
        buf615 = reinterpret_tensor(buf613, (4, 2048, 11008), (22544384, 11008, 1)); del buf613  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf615, buf614, 90177536, grid=grid(90177536), stream=stream0)
        buf616 = reinterpret_tensor(buf612, (8192, 4096), (4096, 1)); del buf612  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf615, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_153, (11008, 4096), (1, 11008), 0), out=buf616)
        buf618 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf619 = buf609; del buf609  # reuse
        # Source Nodes: [add_336, add_338, l__mod___dynamic_dense_12_w1, mean_12, mul_324, pow_13, rsqrt_12], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf610, buf616, buf618, buf619, 8192, 4096, grid=grid(8192), stream=stream0)
        buf620 = empty_strided((8192, 56), (56, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_12_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf619, reinterpret_tensor(primals_409, (4096, 56), (1, 4096), 0), out=buf620)
        buf621 = empty_strided((8192, 56), (56, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_12_act, l__mod___dynamic_dense_12_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_45.run(buf620, buf621, 458752, grid=grid(458752), stream=stream0)
        buf622 = empty_strided((8192, 56), (56, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_12_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf621, reinterpret_tensor(primals_410, (56, 56), (1, 56), 0), out=buf622)
        buf623 = reinterpret_tensor(buf600, (4, 2048, 4096), (8388608, 4096, 1)); del buf600  # reuse
        buf629 = buf592; del buf592  # reuse
        buf635 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf641 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf624 = buf623; del buf623  # reuse
        buf630 = buf629; del buf629  # reuse
        buf636 = buf635; del buf635  # reuse
        buf642 = buf641; del buf641  # reuse
        buf625 = buf624; del buf624  # reuse
        buf631 = buf630; del buf630  # reuse
        buf637 = buf636; del buf636  # reuse
        buf643 = buf642; del buf642  # reuse
        buf626 = buf625; del buf625  # reuse
        buf632 = buf631; del buf631  # reuse
        buf638 = buf637; del buf637  # reuse
        buf644 = buf643; del buf643  # reuse
        buf627 = buf626; del buf626  # reuse
        buf633 = buf632; del buf632  # reuse
        buf639 = buf638; del buf638  # reuse
        buf645 = buf644; del buf644  # reuse
        buf628 = buf627; del buf627  # reuse
        buf634 = buf633; del buf633  # reuse
        buf640 = buf639; del buf639  # reuse
        buf646 = buf645; del buf645  # reuse
        buf654 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf652 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf650 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_339, add_340, add_341, add_342, add_343, add_344, add_345, add_346, add_347, add_348, add_349, add_350, add_351, add_352, add_353, add_354, add_355, add_356, add_357, add_358, add_359, add_360, add_361, add_362, add_363, add_364, add_365, add_366, add_367, add_368, add_369, add_370, add_371, add_372, add_373, add_374, add_375, add_376, add_377, add_378, add_379, add_380, add_381, add_382, add_383, add_384, add_385, add_386, add_387, add_388, add_389, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_325, mul_326, mul_327, mul_328, mul_329, mul_330, mul_331, mul_332, mul_333, mul_334, mul_335, mul_336, mul_337, mul_338, mul_339, mul_340, mul_341, mul_342, mul_343, mul_344, mul_345, mul_346, mul_347, mul_348, mul_349, mul_350, mul_351, mul_352, mul_353, mul_354, mul_355, mul_356, mul_357, mul_358, mul_359, mul_360, mul_361, mul_362, mul_363, mul_364, mul_365, mul_366, mul_367, mul_368, mul_369, mul_370, mul_371, mul_372, mul_373, mul_374, mul_375, mul_376, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_46.run(buf628, buf634, buf640, buf646, buf622, primals_154, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, primals_157, primals_156, primals_155, buf654, buf652, buf650, 8192, 4096, grid=grid(8192), stream=stream0)
        buf651 = reinterpret_tensor(buf640, (8192, 4096), (4096, 1)); del buf640  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf650, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_158, (4096, 4096), (1, 4096), 0), out=buf651)
        buf653 = reinterpret_tensor(buf650, (8192, 4096), (4096, 1)); del buf650  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf652, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_159, (4096, 4096), (1, 4096), 0), out=buf653)
        buf655 = reinterpret_tensor(buf652, (8192, 4096), (4096, 1)); del buf652  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf654, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_160, (4096, 4096), (1, 4096), 0), out=buf655)
        buf658 = buf599; del buf599  # reuse
        buf656 = reinterpret_tensor(buf658, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf657 = reinterpret_tensor(buf658, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf661 = buf596; del buf596  # reuse
        buf659 = reinterpret_tensor(buf661, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf660 = reinterpret_tensor(buf661, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf651, primals_450, buf653, buf656, buf657, buf659, buf660, 16777216, grid=grid(16777216), stream=stream0)
        buf662 = reinterpret_tensor(buf653, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf653  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf658, buf662, 33554432, grid=grid(33554432), stream=stream0)
        del buf656
        del buf657
        del buf659
        del buf660
        buf663 = reinterpret_tensor(buf651, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf651  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf661, buf663, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf664 = reinterpret_tensor(buf605, (128, 2048, 2048), (4194304, 2048, 1)); del buf605  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf662, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf663, (128, 128, 2048), (262144, 2048, 1), 0), out=buf664)
        buf667 = reinterpret_tensor(buf602, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf602  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf664, buf14, buf667, 262144, 2048, grid=grid(262144), stream=stream0)
        buf668 = reinterpret_tensor(buf663, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf663  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf655, buf668, 33554432, grid=grid(33554432), stream=stream0)
        buf669 = reinterpret_tensor(buf655, (128, 2048, 128), (262144, 128, 1)); del buf655  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf667, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf668, (128, 2048, 128), (262144, 128, 1), 0), out=buf669)
        buf670 = reinterpret_tensor(buf668, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf668  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf669, buf670, 33554432, grid=grid(33554432), stream=stream0)
        buf671 = reinterpret_tensor(buf669, (8192, 4096), (4096, 1)); del buf669  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf670, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_161, (4096, 4096), (1, 4096), 0), out=buf671)
        buf673 = reinterpret_tensor(buf670, (4, 2048, 4096), (8388608, 4096, 1)); del buf670  # reuse
        # Source Nodes: [add_390, add_391, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf646, buf671, primals_162, buf673, 8192, 4096, grid=grid(8192), stream=stream0)
        buf674 = reinterpret_tensor(buf615, (8192, 11008), (11008, 1)); del buf615  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf673, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_163, (4096, 11008), (1, 4096), 0), out=buf674)
        buf675 = buf614; del buf614  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf673, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_164, (4096, 11008), (1, 4096), 0), out=buf675)
        buf676 = reinterpret_tensor(buf674, (4, 2048, 11008), (22544384, 11008, 1)); del buf674  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf676, buf675, 90177536, grid=grid(90177536), stream=stream0)
        buf677 = reinterpret_tensor(buf673, (8192, 4096), (4096, 1)); del buf673  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf676, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_165, (11008, 4096), (1, 11008), 0), out=buf677)
        buf679 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf680 = reinterpret_tensor(buf662, (8192, 4096), (4096, 1)); del buf662  # reuse
        # Source Nodes: [add_390, add_392, l__mod___dynamic_dense_13_w1, mean_13, mul_377, pow_14, rsqrt_13], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf646, buf671, buf677, buf679, buf680, 8192, 4096, grid=grid(8192), stream=stream0)
        buf681 = empty_strided((8192, 60), (60, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_13_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf680, reinterpret_tensor(primals_411, (4096, 60), (1, 4096), 0), out=buf681)
        buf682 = empty_strided((8192, 60), (60, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_13_act, l__mod___dynamic_dense_13_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_47.run(buf681, buf682, 491520, grid=grid(491520), stream=stream0)
        buf683 = empty_strided((8192, 60), (60, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_13_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf682, reinterpret_tensor(primals_412, (60, 60), (1, 60), 0), out=buf683)
        buf702 = buf654; del buf654  # reuse
        buf703 = buf702; del buf702  # reuse
        buf704 = buf703; del buf703  # reuse
        buf705 = buf704; del buf704  # reuse
        buf706 = buf705; del buf705  # reuse
        buf707 = buf706; del buf706  # reuse
        buf708 = reinterpret_tensor(buf661, (4, 2048, 4096), (8388608, 4096, 1)); del buf661  # reuse
        buf710 = reinterpret_tensor(buf658, (4, 2048, 4096), (8388608, 4096, 1)); del buf658  # reuse
        buf712 = buf582; del buf582  # reuse
        buf714 = buf634; del buf634  # reuse
        buf716 = buf628; del buf628  # reuse
        buf718 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_392, add_393, add_394, add_395, add_396, add_397, add_398, add_399, add_400, add_401, add_402, add_403, add_404, add_405, add_406, add_407, add_408, add_409, add_410, add_411, add_412, add_413, add_414, add_415, add_416, add_417, add_418, add_419, add_420, add_421, add_422, add_423, add_424, add_425, add_426, add_427, add_428, add_429, add_430, add_431, add_432, add_433, add_434, add_435, add_436, add_437, add_438, add_439, add_440, add_441, add_442, add_443, add_444, add_445, add_446, add_5, add_50, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_378, mul_379, mul_380, mul_381, mul_382, mul_383, mul_384, mul_385, mul_386, mul_387, mul_388, mul_389, mul_390, mul_391, mul_392, mul_393, mul_394, mul_395, mul_396, mul_397, mul_398, mul_399, mul_4, mul_400, mul_401, mul_402, mul_403, mul_404, mul_405, mul_406, mul_407, mul_408, mul_409, mul_410, mul_411, mul_412, mul_413, mul_414, mul_415, mul_416, mul_417, mul_418, mul_419, mul_420, mul_421, mul_422, mul_423, mul_424, mul_425, mul_426, mul_427, mul_428, mul_429, mul_430, mul_431, mul_432, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_48.run(buf707, buf683, primals_166, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, primals_167, primals_168, primals_169, buf708, buf710, buf712, buf714, buf716, buf718, 8192, 4096, grid=grid(8192), stream=stream0)
        buf715 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf714, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_170, (4096, 4096), (1, 4096), 0), out=buf715)
        buf717 = reinterpret_tensor(buf714, (8192, 4096), (4096, 1)); del buf714  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf716, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_171, (4096, 4096), (1, 4096), 0), out=buf717)
        buf719 = reinterpret_tensor(buf716, (8192, 4096), (4096, 1)); del buf716  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf718, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_172, (4096, 4096), (1, 4096), 0), out=buf719)
        buf722 = reinterpret_tensor(buf712, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf712  # reuse
        buf720 = reinterpret_tensor(buf722, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf721 = reinterpret_tensor(buf722, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf725 = reinterpret_tensor(buf710, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf710  # reuse
        buf723 = reinterpret_tensor(buf725, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf724 = reinterpret_tensor(buf725, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf715, primals_450, buf717, buf720, buf721, buf723, buf724, 16777216, grid=grid(16777216), stream=stream0)
        buf726 = reinterpret_tensor(buf717, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf717  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf722, buf726, 33554432, grid=grid(33554432), stream=stream0)
        del buf720
        del buf721
        del buf723
        del buf724
        buf727 = reinterpret_tensor(buf715, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf715  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf725, buf727, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf728 = reinterpret_tensor(buf667, (128, 2048, 2048), (4194304, 2048, 1)); del buf667  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf726, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf727, (128, 128, 2048), (262144, 2048, 1), 0), out=buf728)
        buf731 = reinterpret_tensor(buf664, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf664  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf728, buf14, buf731, 262144, 2048, grid=grid(262144), stream=stream0)
        buf732 = reinterpret_tensor(buf727, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf727  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf719, buf732, 33554432, grid=grid(33554432), stream=stream0)
        buf733 = reinterpret_tensor(buf719, (128, 2048, 128), (262144, 128, 1)); del buf719  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf731, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf732, (128, 2048, 128), (262144, 128, 1), 0), out=buf733)
        buf734 = reinterpret_tensor(buf732, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf732  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf733, buf734, 33554432, grid=grid(33554432), stream=stream0)
        buf735 = reinterpret_tensor(buf733, (8192, 4096), (4096, 1)); del buf733  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf734, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_173, (4096, 4096), (1, 4096), 0), out=buf735)
        buf736 = buf707; del buf707  # reuse
        buf738 = reinterpret_tensor(buf734, (4, 2048, 4096), (8388608, 4096, 1)); del buf734  # reuse
        # Source Nodes: [add_338, add_447, add_448, add_449, float_6, mean_3, mul_18, mul_19, mul_20, mul_433, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_49.run(buf736, buf683, primals_166, buf610, buf616, buf735, primals_174, buf738, 8192, 4096, grid=grid(8192), stream=stream0)
        buf739 = reinterpret_tensor(buf676, (8192, 11008), (11008, 1)); del buf676  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf738, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_175, (4096, 11008), (1, 4096), 0), out=buf739)
        buf740 = buf675; del buf675  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf738, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_176, (4096, 11008), (1, 4096), 0), out=buf740)
        buf741 = reinterpret_tensor(buf739, (4, 2048, 11008), (22544384, 11008, 1)); del buf739  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf741, buf740, 90177536, grid=grid(90177536), stream=stream0)
        buf742 = reinterpret_tensor(buf738, (8192, 4096), (4096, 1)); del buf738  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf741, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_177, (11008, 4096), (1, 11008), 0), out=buf742)
        buf744 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf745 = buf735; del buf735  # reuse
        # Source Nodes: [add_448, add_450, l__mod___dynamic_dense_14_w1, mean_14, mul_434, pow_15, rsqrt_14], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf736, buf742, buf744, buf745, 8192, 4096, grid=grid(8192), stream=stream0)
        buf746 = empty_strided((8192, 64), (64, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_14_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf745, reinterpret_tensor(primals_413, (4096, 64), (1, 4096), 0), out=buf746)
        buf747 = empty_strided((8192, 64), (64, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_14_act, l__mod___dynamic_dense_14_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_50.run(buf746, buf747, 524288, grid=grid(524288), stream=stream0)
        buf748 = empty_strided((8192, 64), (64, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_14_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf747, reinterpret_tensor(primals_414, (64, 64), (1, 64), 0), out=buf748)
        buf749 = reinterpret_tensor(buf726, (4, 2048, 4096), (8388608, 4096, 1)); del buf726  # reuse
        buf756 = buf718; del buf718  # reuse
        buf763 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf770 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf750 = buf749; del buf749  # reuse
        buf757 = buf756; del buf756  # reuse
        buf764 = buf763; del buf763  # reuse
        buf771 = buf770; del buf770  # reuse
        buf751 = buf750; del buf750  # reuse
        buf758 = buf757; del buf757  # reuse
        buf765 = buf764; del buf764  # reuse
        buf772 = buf771; del buf771  # reuse
        buf752 = buf751; del buf751  # reuse
        buf759 = buf758; del buf758  # reuse
        buf766 = buf765; del buf765  # reuse
        buf773 = buf772; del buf772  # reuse
        buf753 = buf752; del buf752  # reuse
        buf760 = buf759; del buf759  # reuse
        buf767 = buf766; del buf766  # reuse
        buf774 = buf773; del buf773  # reuse
        buf754 = buf753; del buf753  # reuse
        buf761 = buf760; del buf760  # reuse
        buf768 = buf767; del buf767  # reuse
        buf775 = buf774; del buf774  # reuse
        buf755 = buf754; del buf754  # reuse
        buf762 = buf761; del buf761  # reuse
        buf769 = buf768; del buf768  # reuse
        buf776 = buf775; del buf775  # reuse
        buf784 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf782 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf780 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_451, add_452, add_453, add_454, add_455, add_456, add_457, add_458, add_459, add_460, add_461, add_462, add_463, add_464, add_465, add_466, add_467, add_468, add_469, add_470, add_471, add_472, add_473, add_474, add_475, add_476, add_477, add_478, add_479, add_480, add_481, add_482, add_483, add_484, add_485, add_486, add_487, add_488, add_489, add_490, add_491, add_492, add_493, add_494, add_495, add_496, add_497, add_498, add_499, add_5, add_50, add_500, add_501, add_502, add_503, add_504, add_505, add_506, add_507, add_508, add_509, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_435, mul_436, mul_437, mul_438, mul_439, mul_440, mul_441, mul_442, mul_443, mul_444, mul_445, mul_446, mul_447, mul_448, mul_449, mul_450, mul_451, mul_452, mul_453, mul_454, mul_455, mul_456, mul_457, mul_458, mul_459, mul_460, mul_461, mul_462, mul_463, mul_464, mul_465, mul_466, mul_467, mul_468, mul_469, mul_470, mul_471, mul_472, mul_473, mul_474, mul_475, mul_476, mul_477, mul_478, mul_479, mul_480, mul_481, mul_482, mul_483, mul_484, mul_485, mul_486, mul_487, mul_488, mul_489, mul_490, mul_491, mul_492, mul_493, mul_494, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_51.run(buf755, buf762, buf769, buf776, buf748, primals_178, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, primals_181, primals_180, primals_179, buf784, buf782, buf780, 8192, 4096, grid=grid(8192), stream=stream0)
        buf781 = reinterpret_tensor(buf769, (8192, 4096), (4096, 1)); del buf769  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf780, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_182, (4096, 4096), (1, 4096), 0), out=buf781)
        buf783 = reinterpret_tensor(buf780, (8192, 4096), (4096, 1)); del buf780  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf782, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_183, (4096, 4096), (1, 4096), 0), out=buf783)
        buf785 = reinterpret_tensor(buf782, (8192, 4096), (4096, 1)); del buf782  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf784, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_184, (4096, 4096), (1, 4096), 0), out=buf785)
        buf788 = buf725; del buf725  # reuse
        buf786 = reinterpret_tensor(buf788, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf787 = reinterpret_tensor(buf788, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf791 = buf722; del buf722  # reuse
        buf789 = reinterpret_tensor(buf791, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf790 = reinterpret_tensor(buf791, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf781, primals_450, buf783, buf786, buf787, buf789, buf790, 16777216, grid=grid(16777216), stream=stream0)
        buf792 = reinterpret_tensor(buf783, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf783  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf788, buf792, 33554432, grid=grid(33554432), stream=stream0)
        del buf786
        del buf787
        del buf789
        del buf790
        buf793 = reinterpret_tensor(buf781, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf781  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf791, buf793, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf794 = reinterpret_tensor(buf731, (128, 2048, 2048), (4194304, 2048, 1)); del buf731  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf792, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf793, (128, 128, 2048), (262144, 2048, 1), 0), out=buf794)
        buf797 = reinterpret_tensor(buf728, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf728  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf794, buf14, buf797, 262144, 2048, grid=grid(262144), stream=stream0)
        buf798 = reinterpret_tensor(buf793, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf793  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf785, buf798, 33554432, grid=grid(33554432), stream=stream0)
        buf799 = reinterpret_tensor(buf785, (128, 2048, 128), (262144, 128, 1)); del buf785  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf797, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf798, (128, 2048, 128), (262144, 128, 1), 0), out=buf799)
        buf800 = reinterpret_tensor(buf798, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf798  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf799, buf800, 33554432, grid=grid(33554432), stream=stream0)
        buf801 = reinterpret_tensor(buf799, (8192, 4096), (4096, 1)); del buf799  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf800, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_185, (4096, 4096), (1, 4096), 0), out=buf801)
        buf803 = reinterpret_tensor(buf800, (4, 2048, 4096), (8388608, 4096, 1)); del buf800  # reuse
        # Source Nodes: [add_510, add_511, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf776, buf801, primals_186, buf803, 8192, 4096, grid=grid(8192), stream=stream0)
        buf804 = reinterpret_tensor(buf741, (8192, 11008), (11008, 1)); del buf741  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf803, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_187, (4096, 11008), (1, 4096), 0), out=buf804)
        buf805 = buf740; del buf740  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf803, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_188, (4096, 11008), (1, 4096), 0), out=buf805)
        buf806 = reinterpret_tensor(buf804, (4, 2048, 11008), (22544384, 11008, 1)); del buf804  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf806, buf805, 90177536, grid=grid(90177536), stream=stream0)
        buf807 = reinterpret_tensor(buf803, (8192, 4096), (4096, 1)); del buf803  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf806, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_189, (11008, 4096), (1, 11008), 0), out=buf807)
        buf809 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf810 = reinterpret_tensor(buf792, (8192, 4096), (4096, 1)); del buf792  # reuse
        # Source Nodes: [add_510, add_512, l__mod___dynamic_dense_15_w1, mean_15, mul_495, pow_16, rsqrt_15], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf776, buf801, buf807, buf809, buf810, 8192, 4096, grid=grid(8192), stream=stream0)
        buf811 = empty_strided((8192, 68), (68, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_15_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf810, reinterpret_tensor(primals_415, (4096, 68), (1, 4096), 0), out=buf811)
        buf812 = empty_strided((8192, 68), (68, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_15_act, l__mod___dynamic_dense_15_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_52.run(buf811, buf812, 557056, grid=grid(557056), stream=stream0)
        buf813 = empty_strided((8192, 68), (68, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_15_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf812, reinterpret_tensor(primals_416, (68, 68), (1, 68), 0), out=buf813)
        buf835 = buf784; del buf784  # reuse
        buf836 = buf835; del buf835  # reuse
        buf837 = buf836; del buf836  # reuse
        buf838 = buf837; del buf837  # reuse
        buf839 = buf838; del buf838  # reuse
        buf840 = buf839; del buf839  # reuse
        buf841 = buf840; del buf840  # reuse
        buf842 = reinterpret_tensor(buf791, (4, 2048, 4096), (8388608, 4096, 1)); del buf791  # reuse
        buf844 = reinterpret_tensor(buf788, (4, 2048, 4096), (8388608, 4096, 1)); del buf788  # reuse
        buf846 = buf708; del buf708  # reuse
        buf848 = buf762; del buf762  # reuse
        buf850 = buf755; del buf755  # reuse
        buf852 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_512, add_513, add_514, add_515, add_516, add_517, add_518, add_519, add_520, add_521, add_522, add_523, add_524, add_525, add_526, add_527, add_528, add_529, add_530, add_531, add_532, add_533, add_534, add_535, add_536, add_537, add_538, add_539, add_540, add_541, add_542, add_543, add_544, add_545, add_546, add_547, add_548, add_549, add_550, add_551, add_552, add_553, add_554, add_555, add_556, add_557, add_558, add_559, add_560, add_561, add_562, add_563, add_564, add_565, add_566, add_567, add_568, add_569, add_570, add_571, add_572, add_573, add_574, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_496, mul_497, mul_498, mul_499, mul_5, mul_500, mul_501, mul_502, mul_503, mul_504, mul_505, mul_506, mul_507, mul_508, mul_509, mul_510, mul_511, mul_512, mul_513, mul_514, mul_515, mul_516, mul_517, mul_518, mul_519, mul_520, mul_521, mul_522, mul_523, mul_524, mul_525, mul_526, mul_527, mul_528, mul_529, mul_530, mul_531, mul_532, mul_533, mul_534, mul_535, mul_536, mul_537, mul_538, mul_539, mul_540, mul_541, mul_542, mul_543, mul_544, mul_545, mul_546, mul_547, mul_548, mul_549, mul_550, mul_551, mul_552, mul_553, mul_554, mul_555, mul_556, mul_557, mul_558, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_53.run(buf841, buf813, primals_190, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, primals_191, primals_192, primals_193, buf842, buf844, buf846, buf848, buf850, buf852, 8192, 4096, grid=grid(8192), stream=stream0)
        buf849 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf848, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_194, (4096, 4096), (1, 4096), 0), out=buf849)
        buf851 = reinterpret_tensor(buf848, (8192, 4096), (4096, 1)); del buf848  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf850, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_195, (4096, 4096), (1, 4096), 0), out=buf851)
        buf853 = reinterpret_tensor(buf850, (8192, 4096), (4096, 1)); del buf850  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf852, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_196, (4096, 4096), (1, 4096), 0), out=buf853)
        buf856 = reinterpret_tensor(buf846, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf846  # reuse
        buf854 = reinterpret_tensor(buf856, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf855 = reinterpret_tensor(buf856, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf859 = reinterpret_tensor(buf844, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf844  # reuse
        buf857 = reinterpret_tensor(buf859, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf858 = reinterpret_tensor(buf859, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf849, primals_450, buf851, buf854, buf855, buf857, buf858, 16777216, grid=grid(16777216), stream=stream0)
        buf860 = reinterpret_tensor(buf851, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf851  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf856, buf860, 33554432, grid=grid(33554432), stream=stream0)
        del buf854
        del buf855
        del buf857
        del buf858
        buf861 = reinterpret_tensor(buf849, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf849  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf859, buf861, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf862 = reinterpret_tensor(buf797, (128, 2048, 2048), (4194304, 2048, 1)); del buf797  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf860, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf861, (128, 128, 2048), (262144, 2048, 1), 0), out=buf862)
        buf865 = reinterpret_tensor(buf794, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf794  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf862, buf14, buf865, 262144, 2048, grid=grid(262144), stream=stream0)
        buf866 = reinterpret_tensor(buf861, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf861  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf853, buf866, 33554432, grid=grid(33554432), stream=stream0)
        buf867 = reinterpret_tensor(buf853, (128, 2048, 128), (262144, 128, 1)); del buf853  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf865, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf866, (128, 2048, 128), (262144, 128, 1), 0), out=buf867)
        buf868 = reinterpret_tensor(buf866, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf866  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf867, buf868, 33554432, grid=grid(33554432), stream=stream0)
        buf869 = reinterpret_tensor(buf867, (8192, 4096), (4096, 1)); del buf867  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf868, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_197, (4096, 4096), (1, 4096), 0), out=buf869)
        buf870 = buf841; del buf841  # reuse
        buf872 = reinterpret_tensor(buf868, (4, 2048, 4096), (8388608, 4096, 1)); del buf868  # reuse
        # Source Nodes: [add_450, add_575, add_576, add_577, float_6, mean_3, mul_18, mul_19, mul_20, mul_559, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_54.run(buf870, buf813, primals_190, buf736, buf742, buf869, primals_198, buf872, 8192, 4096, grid=grid(8192), stream=stream0)
        buf873 = reinterpret_tensor(buf806, (8192, 11008), (11008, 1)); del buf806  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf872, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_199, (4096, 11008), (1, 4096), 0), out=buf873)
        buf874 = buf805; del buf805  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf872, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_200, (4096, 11008), (1, 4096), 0), out=buf874)
        buf875 = reinterpret_tensor(buf873, (4, 2048, 11008), (22544384, 11008, 1)); del buf873  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf875, buf874, 90177536, grid=grid(90177536), stream=stream0)
        buf876 = reinterpret_tensor(buf872, (8192, 4096), (4096, 1)); del buf872  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf875, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_201, (11008, 4096), (1, 11008), 0), out=buf876)
        buf878 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf879 = buf869; del buf869  # reuse
        # Source Nodes: [add_576, add_578, l__mod___dynamic_dense_16_w1, mean_16, mul_560, pow_17, rsqrt_16], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf870, buf876, buf878, buf879, 8192, 4096, grid=grid(8192), stream=stream0)
        buf880 = empty_strided((8192, 72), (72, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_16_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf879, reinterpret_tensor(primals_417, (4096, 72), (1, 4096), 0), out=buf880)
        buf881 = empty_strided((8192, 72), (72, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_16_act, l__mod___dynamic_dense_16_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_55.run(buf880, buf881, 589824, grid=grid(589824), stream=stream0)
        buf882 = empty_strided((8192, 72), (72, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_16_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf881, reinterpret_tensor(primals_418, (72, 72), (1, 72), 0), out=buf882)
        buf883 = reinterpret_tensor(buf860, (4, 2048, 4096), (8388608, 4096, 1)); del buf860  # reuse
        buf891 = buf852; del buf852  # reuse
        buf899 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf907 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf884 = buf883; del buf883  # reuse
        buf892 = buf891; del buf891  # reuse
        buf900 = buf899; del buf899  # reuse
        buf908 = buf907; del buf907  # reuse
        buf885 = buf884; del buf884  # reuse
        buf893 = buf892; del buf892  # reuse
        buf901 = buf900; del buf900  # reuse
        buf909 = buf908; del buf908  # reuse
        buf886 = buf885; del buf885  # reuse
        buf894 = buf893; del buf893  # reuse
        buf902 = buf901; del buf901  # reuse
        buf910 = buf909; del buf909  # reuse
        buf887 = buf886; del buf886  # reuse
        buf895 = buf894; del buf894  # reuse
        buf903 = buf902; del buf902  # reuse
        buf911 = buf910; del buf910  # reuse
        buf888 = buf887; del buf887  # reuse
        buf896 = buf895; del buf895  # reuse
        buf904 = buf903; del buf903  # reuse
        buf912 = buf911; del buf911  # reuse
        buf889 = buf888; del buf888  # reuse
        buf897 = buf896; del buf896  # reuse
        buf905 = buf904; del buf904  # reuse
        buf913 = buf912; del buf912  # reuse
        buf890 = buf889; del buf889  # reuse
        buf898 = buf897; del buf897  # reuse
        buf906 = buf905; del buf905  # reuse
        buf914 = buf913; del buf913  # reuse
        buf922 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf920 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf918 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_579, add_580, add_581, add_582, add_583, add_584, add_585, add_586, add_587, add_588, add_589, add_590, add_591, add_592, add_593, add_594, add_595, add_596, add_597, add_598, add_599, add_600, add_601, add_602, add_603, add_604, add_605, add_606, add_607, add_608, add_609, add_610, add_611, add_612, add_613, add_614, add_615, add_616, add_617, add_618, add_619, add_620, add_621, add_622, add_623, add_624, add_625, add_626, add_627, add_628, add_629, add_630, add_631, add_632, add_633, add_634, add_635, add_636, add_637, add_638, add_639, add_640, add_641, add_642, add_643, add_644, add_645, add_70, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_561, mul_562, mul_563, mul_564, mul_565, mul_566, mul_567, mul_568, mul_569, mul_570, mul_571, mul_572, mul_573, mul_574, mul_575, mul_576, mul_577, mul_578, mul_579, mul_580, mul_581, mul_582, mul_583, mul_584, mul_585, mul_586, mul_587, mul_588, mul_589, mul_590, mul_591, mul_592, mul_593, mul_594, mul_595, mul_596, mul_597, mul_598, mul_599, mul_6, mul_600, mul_601, mul_602, mul_603, mul_604, mul_605, mul_606, mul_607, mul_608, mul_609, mul_610, mul_611, mul_612, mul_613, mul_614, mul_615, mul_616, mul_617, mul_618, mul_619, mul_620, mul_621, mul_622, mul_623, mul_624, mul_625, mul_626, mul_627, mul_628, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_56.run(buf890, buf898, buf906, buf914, buf882, primals_202, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, primals_205, primals_204, primals_203, buf922, buf920, buf918, 8192, 4096, grid=grid(8192), stream=stream0)
        buf919 = reinterpret_tensor(buf906, (8192, 4096), (4096, 1)); del buf906  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf918, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_206, (4096, 4096), (1, 4096), 0), out=buf919)
        buf921 = reinterpret_tensor(buf918, (8192, 4096), (4096, 1)); del buf918  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf920, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_207, (4096, 4096), (1, 4096), 0), out=buf921)
        buf923 = reinterpret_tensor(buf920, (8192, 4096), (4096, 1)); del buf920  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf922, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_208, (4096, 4096), (1, 4096), 0), out=buf923)
        buf926 = buf859; del buf859  # reuse
        buf924 = reinterpret_tensor(buf926, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf925 = reinterpret_tensor(buf926, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf929 = buf856; del buf856  # reuse
        buf927 = reinterpret_tensor(buf929, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf928 = reinterpret_tensor(buf929, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf919, primals_450, buf921, buf924, buf925, buf927, buf928, 16777216, grid=grid(16777216), stream=stream0)
        buf930 = reinterpret_tensor(buf921, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf921  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf926, buf930, 33554432, grid=grid(33554432), stream=stream0)
        del buf924
        del buf925
        del buf927
        del buf928
        buf931 = reinterpret_tensor(buf919, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf919  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf929, buf931, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf932 = reinterpret_tensor(buf865, (128, 2048, 2048), (4194304, 2048, 1)); del buf865  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf930, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf931, (128, 128, 2048), (262144, 2048, 1), 0), out=buf932)
        buf935 = reinterpret_tensor(buf862, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf862  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf932, buf14, buf935, 262144, 2048, grid=grid(262144), stream=stream0)
        buf936 = reinterpret_tensor(buf931, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf931  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf923, buf936, 33554432, grid=grid(33554432), stream=stream0)
        buf937 = reinterpret_tensor(buf923, (128, 2048, 128), (262144, 128, 1)); del buf923  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf935, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf936, (128, 2048, 128), (262144, 128, 1), 0), out=buf937)
        buf938 = reinterpret_tensor(buf936, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf936  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf937, buf938, 33554432, grid=grid(33554432), stream=stream0)
        buf939 = reinterpret_tensor(buf937, (8192, 4096), (4096, 1)); del buf937  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf938, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_209, (4096, 4096), (1, 4096), 0), out=buf939)
        buf941 = reinterpret_tensor(buf938, (4, 2048, 4096), (8388608, 4096, 1)); del buf938  # reuse
        # Source Nodes: [add_646, add_647, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf914, buf939, primals_210, buf941, 8192, 4096, grid=grid(8192), stream=stream0)
        buf942 = reinterpret_tensor(buf875, (8192, 11008), (11008, 1)); del buf875  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf941, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_211, (4096, 11008), (1, 4096), 0), out=buf942)
        buf943 = buf874; del buf874  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf941, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_212, (4096, 11008), (1, 4096), 0), out=buf943)
        buf944 = reinterpret_tensor(buf942, (4, 2048, 11008), (22544384, 11008, 1)); del buf942  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf944, buf943, 90177536, grid=grid(90177536), stream=stream0)
        buf945 = reinterpret_tensor(buf941, (8192, 4096), (4096, 1)); del buf941  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf944, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_213, (11008, 4096), (1, 11008), 0), out=buf945)
        buf947 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf948 = reinterpret_tensor(buf930, (8192, 4096), (4096, 1)); del buf930  # reuse
        # Source Nodes: [add_646, add_648, l__mod___dynamic_dense_17_w1, mean_17, mul_629, pow_18, rsqrt_17], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf914, buf939, buf945, buf947, buf948, 8192, 4096, grid=grid(8192), stream=stream0)
        buf949 = empty_strided((8192, 76), (76, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_17_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf948, reinterpret_tensor(primals_419, (4096, 76), (1, 4096), 0), out=buf949)
        buf950 = empty_strided((8192, 76), (76, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_17_act, l__mod___dynamic_dense_17_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_57.run(buf949, buf950, 622592, grid=grid(622592), stream=stream0)
        buf951 = empty_strided((8192, 76), (76, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_17_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf950, reinterpret_tensor(primals_420, (76, 76), (1, 76), 0), out=buf951)
        buf976 = buf922; del buf922  # reuse
        buf977 = buf976; del buf976  # reuse
        buf978 = buf977; del buf977  # reuse
        buf979 = buf978; del buf978  # reuse
        buf980 = buf979; del buf979  # reuse
        buf981 = buf980; del buf980  # reuse
        buf982 = buf981; del buf981  # reuse
        buf983 = buf982; del buf982  # reuse
        buf984 = reinterpret_tensor(buf929, (4, 2048, 4096), (8388608, 4096, 1)); del buf929  # reuse
        buf986 = reinterpret_tensor(buf926, (4, 2048, 4096), (8388608, 4096, 1)); del buf926  # reuse
        buf988 = buf842; del buf842  # reuse
        buf990 = buf898; del buf898  # reuse
        buf992 = buf890; del buf890  # reuse
        buf994 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_648, add_649, add_650, add_651, add_652, add_653, add_654, add_655, add_656, add_657, add_658, add_659, add_660, add_661, add_662, add_663, add_664, add_665, add_666, add_667, add_668, add_669, add_670, add_671, add_672, add_673, add_674, add_675, add_676, add_677, add_678, add_679, add_680, add_681, add_682, add_683, add_684, add_685, add_686, add_687, add_688, add_689, add_690, add_691, add_692, add_693, add_694, add_695, add_696, add_697, add_698, add_699, add_70, add_700, add_701, add_702, add_703, add_704, add_705, add_706, add_707, add_708, add_709, add_710, add_711, add_712, add_713, add_714, add_715, add_716, add_717, add_718, add_72, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_630, mul_631, mul_632, mul_633, mul_634, mul_635, mul_636, mul_637, mul_638, mul_639, mul_640, mul_641, mul_642, mul_643, mul_644, mul_645, mul_646, mul_647, mul_648, mul_649, mul_650, mul_651, mul_652, mul_653, mul_654, mul_655, mul_656, mul_657, mul_658, mul_659, mul_660, mul_661, mul_662, mul_663, mul_664, mul_665, mul_666, mul_667, mul_668, mul_669, mul_670, mul_671, mul_672, mul_673, mul_674, mul_675, mul_676, mul_677, mul_678, mul_679, mul_680, mul_681, mul_682, mul_683, mul_684, mul_685, mul_686, mul_687, mul_688, mul_689, mul_690, mul_691, mul_692, mul_693, mul_694, mul_695, mul_696, mul_697, mul_698, mul_699, mul_7, mul_700, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_58.run(buf983, buf951, primals_214, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, primals_215, primals_216, primals_217, buf984, buf986, buf988, buf990, buf992, buf994, 8192, 4096, grid=grid(8192), stream=stream0)
        buf991 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf990, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_218, (4096, 4096), (1, 4096), 0), out=buf991)
        buf993 = reinterpret_tensor(buf990, (8192, 4096), (4096, 1)); del buf990  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf992, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_219, (4096, 4096), (1, 4096), 0), out=buf993)
        buf995 = reinterpret_tensor(buf992, (8192, 4096), (4096, 1)); del buf992  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf994, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_220, (4096, 4096), (1, 4096), 0), out=buf995)
        buf998 = reinterpret_tensor(buf988, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf988  # reuse
        buf996 = reinterpret_tensor(buf998, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf997 = reinterpret_tensor(buf998, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1001 = reinterpret_tensor(buf986, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf986  # reuse
        buf999 = reinterpret_tensor(buf1001, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1000 = reinterpret_tensor(buf1001, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf991, primals_450, buf993, buf996, buf997, buf999, buf1000, 16777216, grid=grid(16777216), stream=stream0)
        buf1002 = reinterpret_tensor(buf993, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf993  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf998, buf1002, 33554432, grid=grid(33554432), stream=stream0)
        del buf1000
        del buf996
        del buf997
        del buf999
        buf1003 = reinterpret_tensor(buf991, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf991  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1001, buf1003, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1004 = reinterpret_tensor(buf935, (128, 2048, 2048), (4194304, 2048, 1)); del buf935  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1002, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1003, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1004)
        buf1007 = reinterpret_tensor(buf932, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf932  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1004, buf14, buf1007, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1008 = reinterpret_tensor(buf1003, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1003  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf995, buf1008, 33554432, grid=grid(33554432), stream=stream0)
        buf1009 = reinterpret_tensor(buf995, (128, 2048, 128), (262144, 128, 1)); del buf995  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1007, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1008, (128, 2048, 128), (262144, 128, 1), 0), out=buf1009)
        buf1010 = reinterpret_tensor(buf1008, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1008  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1009, buf1010, 33554432, grid=grid(33554432), stream=stream0)
        buf1011 = reinterpret_tensor(buf1009, (8192, 4096), (4096, 1)); del buf1009  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1010, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_221, (4096, 4096), (1, 4096), 0), out=buf1011)
        buf1012 = reinterpret_tensor(buf1011, (4, 2048, 4096), (8388608, 4096, 1)); del buf1011  # reuse
        buf1014 = reinterpret_tensor(buf1010, (4, 2048, 4096), (8388608, 4096, 1)); del buf1010  # reuse
        # Source Nodes: [add_578, add_719, add_720, add_721, float_6, mean_3, mul_18, mul_19, mul_20, mul_701, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_59.run(buf1012, buf983, buf951, primals_214, buf870, buf876, primals_222, buf1014, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1015 = reinterpret_tensor(buf944, (8192, 11008), (11008, 1)); del buf944  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1014, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_223, (4096, 11008), (1, 4096), 0), out=buf1015)
        buf1016 = buf943; del buf943  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1014, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_224, (4096, 11008), (1, 4096), 0), out=buf1016)
        buf1017 = reinterpret_tensor(buf1015, (4, 2048, 11008), (22544384, 11008, 1)); del buf1015  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1017, buf1016, 90177536, grid=grid(90177536), stream=stream0)
        buf1018 = reinterpret_tensor(buf1014, (8192, 4096), (4096, 1)); del buf1014  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1017, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_225, (11008, 4096), (1, 11008), 0), out=buf1018)
        buf1020 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1021 = reinterpret_tensor(buf983, (8192, 4096), (4096, 1)); del buf983  # reuse
        # Source Nodes: [add_720, add_722, l__mod___dynamic_dense_18_w1, mean_18, mul_702, pow_19, rsqrt_18], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1012, buf1018, buf1020, buf1021, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1022 = empty_strided((8192, 80), (80, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_18_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1021, reinterpret_tensor(primals_421, (4096, 80), (1, 4096), 0), out=buf1022)
        buf1023 = empty_strided((8192, 80), (80, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_18_act, l__mod___dynamic_dense_18_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_60.run(buf1022, buf1023, 655360, grid=grid(655360), stream=stream0)
        buf1024 = empty_strided((8192, 80), (80, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_18_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1023, reinterpret_tensor(primals_422, (80, 80), (1, 80), 0), out=buf1024)
        buf1025 = reinterpret_tensor(buf1002, (4, 2048, 4096), (8388608, 4096, 1)); del buf1002  # reuse
        buf1034 = buf994; del buf994  # reuse
        buf1043 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1052 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1026 = buf1025; del buf1025  # reuse
        buf1035 = buf1034; del buf1034  # reuse
        buf1044 = buf1043; del buf1043  # reuse
        buf1053 = buf1052; del buf1052  # reuse
        buf1027 = buf1026; del buf1026  # reuse
        buf1036 = buf1035; del buf1035  # reuse
        buf1045 = buf1044; del buf1044  # reuse
        buf1054 = buf1053; del buf1053  # reuse
        buf1028 = buf1027; del buf1027  # reuse
        buf1037 = buf1036; del buf1036  # reuse
        buf1046 = buf1045; del buf1045  # reuse
        buf1055 = buf1054; del buf1054  # reuse
        buf1029 = buf1028; del buf1028  # reuse
        buf1038 = buf1037; del buf1037  # reuse
        buf1047 = buf1046; del buf1046  # reuse
        buf1056 = buf1055; del buf1055  # reuse
        buf1030 = buf1029; del buf1029  # reuse
        buf1039 = buf1038; del buf1038  # reuse
        buf1048 = buf1047; del buf1047  # reuse
        buf1057 = buf1056; del buf1056  # reuse
        buf1031 = buf1030; del buf1030  # reuse
        buf1040 = buf1039; del buf1039  # reuse
        buf1049 = buf1048; del buf1048  # reuse
        buf1058 = buf1057; del buf1057  # reuse
        buf1032 = buf1031; del buf1031  # reuse
        buf1041 = buf1040; del buf1040  # reuse
        buf1050 = buf1049; del buf1049  # reuse
        buf1059 = buf1058; del buf1058  # reuse
        buf1033 = buf1032; del buf1032  # reuse
        buf1042 = buf1041; del buf1041  # reuse
        buf1051 = buf1050; del buf1050  # reuse
        buf1060 = buf1059; del buf1059  # reuse
        buf1068 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1066 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1064 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_723, add_724, add_725, add_726, add_727, add_728, add_729, add_730, add_731, add_732, add_733, add_734, add_735, add_736, add_737, add_738, add_739, add_740, add_741, add_742, add_743, add_744, add_745, add_746, add_747, add_748, add_749, add_750, add_751, add_752, add_753, add_754, add_755, add_756, add_757, add_758, add_759, add_760, add_761, add_762, add_763, add_764, add_765, add_766, add_767, add_768, add_769, add_770, add_771, add_772, add_773, add_774, add_775, add_776, add_777, add_778, add_779, add_780, add_781, add_782, add_783, add_784, add_785, add_786, add_787, add_788, add_789, add_790, add_791, add_792, add_793, add_794, add_795, add_796, add_797, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_703, mul_704, mul_705, mul_706, mul_707, mul_708, mul_709, mul_710, mul_711, mul_712, mul_713, mul_714, mul_715, mul_716, mul_717, mul_718, mul_719, mul_720, mul_721, mul_722, mul_723, mul_724, mul_725, mul_726, mul_727, mul_728, mul_729, mul_730, mul_731, mul_732, mul_733, mul_734, mul_735, mul_736, mul_737, mul_738, mul_739, mul_740, mul_741, mul_742, mul_743, mul_744, mul_745, mul_746, mul_747, mul_748, mul_749, mul_750, mul_751, mul_752, mul_753, mul_754, mul_755, mul_756, mul_757, mul_758, mul_759, mul_760, mul_761, mul_762, mul_763, mul_764, mul_765, mul_766, mul_767, mul_768, mul_769, mul_770, mul_771, mul_772, mul_773, mul_774, mul_775, mul_776, mul_777, mul_778, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_61.run(buf1033, buf1042, buf1051, buf1060, buf1024, primals_226, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, primals_229, primals_228, primals_227, buf1068, buf1066, buf1064, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1065 = reinterpret_tensor(buf1051, (8192, 4096), (4096, 1)); del buf1051  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1064, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_230, (4096, 4096), (1, 4096), 0), out=buf1065)
        buf1067 = reinterpret_tensor(buf1064, (8192, 4096), (4096, 1)); del buf1064  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1066, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_231, (4096, 4096), (1, 4096), 0), out=buf1067)
        buf1069 = reinterpret_tensor(buf1066, (8192, 4096), (4096, 1)); del buf1066  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1068, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_232, (4096, 4096), (1, 4096), 0), out=buf1069)
        buf1072 = buf1001; del buf1001  # reuse
        buf1070 = reinterpret_tensor(buf1072, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1071 = reinterpret_tensor(buf1072, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1075 = buf998; del buf998  # reuse
        buf1073 = reinterpret_tensor(buf1075, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1074 = reinterpret_tensor(buf1075, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1065, primals_450, buf1067, buf1070, buf1071, buf1073, buf1074, 16777216, grid=grid(16777216), stream=stream0)
        buf1076 = reinterpret_tensor(buf1067, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1067  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1072, buf1076, 33554432, grid=grid(33554432), stream=stream0)
        del buf1070
        del buf1071
        del buf1073
        del buf1074
        buf1077 = reinterpret_tensor(buf1065, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1065  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1075, buf1077, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1078 = reinterpret_tensor(buf1007, (128, 2048, 2048), (4194304, 2048, 1)); del buf1007  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1076, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1077, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1078)
        buf1081 = reinterpret_tensor(buf1004, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1004  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1078, buf14, buf1081, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1082 = reinterpret_tensor(buf1077, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1077  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1069, buf1082, 33554432, grid=grid(33554432), stream=stream0)
        buf1083 = reinterpret_tensor(buf1069, (128, 2048, 128), (262144, 128, 1)); del buf1069  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1081, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1082, (128, 2048, 128), (262144, 128, 1), 0), out=buf1083)
        buf1084 = reinterpret_tensor(buf1082, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1082  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1083, buf1084, 33554432, grid=grid(33554432), stream=stream0)
        buf1085 = reinterpret_tensor(buf1083, (8192, 4096), (4096, 1)); del buf1083  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1084, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_233, (4096, 4096), (1, 4096), 0), out=buf1085)
        buf1087 = reinterpret_tensor(buf1084, (4, 2048, 4096), (8388608, 4096, 1)); del buf1084  # reuse
        # Source Nodes: [add_798, add_799, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1060, buf1085, primals_234, buf1087, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1088 = reinterpret_tensor(buf1017, (8192, 11008), (11008, 1)); del buf1017  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1087, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_235, (4096, 11008), (1, 4096), 0), out=buf1088)
        buf1089 = buf1016; del buf1016  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1087, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_236, (4096, 11008), (1, 4096), 0), out=buf1089)
        buf1090 = reinterpret_tensor(buf1088, (4, 2048, 11008), (22544384, 11008, 1)); del buf1088  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1090, buf1089, 90177536, grid=grid(90177536), stream=stream0)
        buf1091 = reinterpret_tensor(buf1087, (8192, 4096), (4096, 1)); del buf1087  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1090, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_237, (11008, 4096), (1, 11008), 0), out=buf1091)
        buf1093 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1094 = reinterpret_tensor(buf1076, (8192, 4096), (4096, 1)); del buf1076  # reuse
        # Source Nodes: [add_798, add_800, l__mod___dynamic_dense_19_w1, mean_19, mul_779, pow_20, rsqrt_19], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1060, buf1085, buf1091, buf1093, buf1094, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1095 = empty_strided((8192, 84), (84, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_19_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1094, reinterpret_tensor(primals_423, (4096, 84), (1, 4096), 0), out=buf1095)
        buf1096 = empty_strided((8192, 84), (84, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_19_act, l__mod___dynamic_dense_19_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_62.run(buf1095, buf1096, 688128, grid=grid(688128), stream=stream0)
        buf1097 = empty_strided((8192, 84), (84, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_19_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1096, reinterpret_tensor(primals_424, (84, 84), (1, 84), 0), out=buf1097)
        buf1125 = buf1068; del buf1068  # reuse
        buf1126 = buf1125; del buf1125  # reuse
        buf1127 = buf1126; del buf1126  # reuse
        buf1128 = buf1127; del buf1127  # reuse
        buf1129 = buf1128; del buf1128  # reuse
        buf1130 = buf1129; del buf1129  # reuse
        buf1131 = buf1130; del buf1130  # reuse
        buf1132 = buf1131; del buf1131  # reuse
        buf1133 = buf1132; del buf1132  # reuse
        buf1134 = reinterpret_tensor(buf1075, (4, 2048, 4096), (8388608, 4096, 1)); del buf1075  # reuse
        buf1136 = reinterpret_tensor(buf1072, (4, 2048, 4096), (8388608, 4096, 1)); del buf1072  # reuse
        buf1138 = buf984; del buf984  # reuse
        buf1140 = buf1042; del buf1042  # reuse
        buf1142 = buf1033; del buf1033  # reuse
        buf1144 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_800, add_801, add_802, add_803, add_804, add_805, add_806, add_807, add_808, add_809, add_810, add_811, add_812, add_813, add_814, add_815, add_816, add_817, add_818, add_819, add_820, add_821, add_822, add_823, add_824, add_825, add_826, add_827, add_828, add_829, add_830, add_831, add_832, add_833, add_834, add_835, add_836, add_837, add_838, add_839, add_840, add_841, add_842, add_843, add_844, add_845, add_846, add_847, add_848, add_849, add_850, add_851, add_852, add_853, add_854, add_855, add_856, add_857, add_858, add_859, add_860, add_861, add_862, add_863, add_864, add_865, add_866, add_867, add_868, add_869, add_870, add_871, add_872, add_873, add_874, add_875, add_876, add_877, add_878, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_780, mul_781, mul_782, mul_783, mul_784, mul_785, mul_786, mul_787, mul_788, mul_789, mul_790, mul_791, mul_792, mul_793, mul_794, mul_795, mul_796, mul_797, mul_798, mul_799, mul_8, mul_800, mul_801, mul_802, mul_803, mul_804, mul_805, mul_806, mul_807, mul_808, mul_809, mul_810, mul_811, mul_812, mul_813, mul_814, mul_815, mul_816, mul_817, mul_818, mul_819, mul_820, mul_821, mul_822, mul_823, mul_824, mul_825, mul_826, mul_827, mul_828, mul_829, mul_830, mul_831, mul_832, mul_833, mul_834, mul_835, mul_836, mul_837, mul_838, mul_839, mul_840, mul_841, mul_842, mul_843, mul_844, mul_845, mul_846, mul_847, mul_848, mul_849, mul_850, mul_851, mul_852, mul_853, mul_854, mul_855, mul_856, mul_857, mul_858, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_63.run(buf1133, buf1097, primals_238, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, primals_239, primals_240, primals_241, buf1134, buf1136, buf1138, buf1140, buf1142, buf1144, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1141 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1140, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_242, (4096, 4096), (1, 4096), 0), out=buf1141)
        buf1143 = reinterpret_tensor(buf1140, (8192, 4096), (4096, 1)); del buf1140  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1142, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_243, (4096, 4096), (1, 4096), 0), out=buf1143)
        buf1145 = reinterpret_tensor(buf1142, (8192, 4096), (4096, 1)); del buf1142  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1144, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_244, (4096, 4096), (1, 4096), 0), out=buf1145)
        buf1148 = reinterpret_tensor(buf1138, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1138  # reuse
        buf1146 = reinterpret_tensor(buf1148, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1147 = reinterpret_tensor(buf1148, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1151 = reinterpret_tensor(buf1136, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1136  # reuse
        buf1149 = reinterpret_tensor(buf1151, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1150 = reinterpret_tensor(buf1151, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1141, primals_450, buf1143, buf1146, buf1147, buf1149, buf1150, 16777216, grid=grid(16777216), stream=stream0)
        buf1152 = reinterpret_tensor(buf1143, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1143  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1148, buf1152, 33554432, grid=grid(33554432), stream=stream0)
        del buf1146
        del buf1147
        del buf1149
        del buf1150
        buf1153 = reinterpret_tensor(buf1141, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1141  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1151, buf1153, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1154 = reinterpret_tensor(buf1081, (128, 2048, 2048), (4194304, 2048, 1)); del buf1081  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1152, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1153, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1154)
        buf1157 = reinterpret_tensor(buf1078, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1078  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1154, buf14, buf1157, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1158 = reinterpret_tensor(buf1153, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1153  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1145, buf1158, 33554432, grid=grid(33554432), stream=stream0)
        buf1159 = reinterpret_tensor(buf1145, (128, 2048, 128), (262144, 128, 1)); del buf1145  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1157, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1158, (128, 2048, 128), (262144, 128, 1), 0), out=buf1159)
        buf1160 = reinterpret_tensor(buf1158, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1158  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1159, buf1160, 33554432, grid=grid(33554432), stream=stream0)
        buf1161 = reinterpret_tensor(buf1159, (8192, 4096), (4096, 1)); del buf1159  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1160, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_245, (4096, 4096), (1, 4096), 0), out=buf1161)
        buf1162 = buf1133; del buf1133  # reuse
        buf1164 = reinterpret_tensor(buf1160, (4, 2048, 4096), (8388608, 4096, 1)); del buf1160  # reuse
        # Source Nodes: [add_722, add_879, add_880, add_881, float_6, mean_3, mul_18, mul_19, mul_20, mul_859, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_64.run(buf1162, buf1097, primals_238, buf1012, buf1018, buf1161, primals_246, buf1164, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1165 = reinterpret_tensor(buf1090, (8192, 11008), (11008, 1)); del buf1090  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1164, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_247, (4096, 11008), (1, 4096), 0), out=buf1165)
        buf1166 = buf1089; del buf1089  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1164, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_248, (4096, 11008), (1, 4096), 0), out=buf1166)
        buf1167 = reinterpret_tensor(buf1165, (4, 2048, 11008), (22544384, 11008, 1)); del buf1165  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1167, buf1166, 90177536, grid=grid(90177536), stream=stream0)
        buf1168 = reinterpret_tensor(buf1164, (8192, 4096), (4096, 1)); del buf1164  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1167, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_249, (11008, 4096), (1, 11008), 0), out=buf1168)
        buf1170 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1171 = buf1161; del buf1161  # reuse
        # Source Nodes: [add_880, add_882, l__mod___dynamic_dense_20_w1, mean_20, mul_860, pow_21, rsqrt_20], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1162, buf1168, buf1170, buf1171, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1172 = empty_strided((8192, 88), (88, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_20_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1171, reinterpret_tensor(primals_425, (4096, 88), (1, 4096), 0), out=buf1172)
        buf1173 = empty_strided((8192, 88), (88, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_20_act, l__mod___dynamic_dense_20_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_65.run(buf1172, buf1173, 720896, grid=grid(720896), stream=stream0)
        buf1174 = empty_strided((8192, 88), (88, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_20_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1173, reinterpret_tensor(primals_426, (88, 88), (1, 88), 0), out=buf1174)
        buf1175 = reinterpret_tensor(buf1152, (4, 2048, 4096), (8388608, 4096, 1)); del buf1152  # reuse
        buf1185 = buf1144; del buf1144  # reuse
        buf1195 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1205 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1176 = buf1175; del buf1175  # reuse
        buf1186 = buf1185; del buf1185  # reuse
        buf1196 = buf1195; del buf1195  # reuse
        buf1206 = buf1205; del buf1205  # reuse
        buf1177 = buf1176; del buf1176  # reuse
        buf1187 = buf1186; del buf1186  # reuse
        buf1197 = buf1196; del buf1196  # reuse
        buf1207 = buf1206; del buf1206  # reuse
        buf1178 = buf1177; del buf1177  # reuse
        buf1188 = buf1187; del buf1187  # reuse
        buf1198 = buf1197; del buf1197  # reuse
        buf1208 = buf1207; del buf1207  # reuse
        buf1179 = buf1178; del buf1178  # reuse
        buf1189 = buf1188; del buf1188  # reuse
        buf1199 = buf1198; del buf1198  # reuse
        buf1209 = buf1208; del buf1208  # reuse
        buf1180 = buf1179; del buf1179  # reuse
        buf1190 = buf1189; del buf1189  # reuse
        buf1200 = buf1199; del buf1199  # reuse
        buf1210 = buf1209; del buf1209  # reuse
        buf1181 = buf1180; del buf1180  # reuse
        buf1191 = buf1190; del buf1190  # reuse
        buf1201 = buf1200; del buf1200  # reuse
        buf1211 = buf1210; del buf1210  # reuse
        buf1182 = buf1181; del buf1181  # reuse
        buf1192 = buf1191; del buf1191  # reuse
        buf1202 = buf1201; del buf1201  # reuse
        buf1212 = buf1211; del buf1211  # reuse
        buf1183 = buf1182; del buf1182  # reuse
        buf1193 = buf1192; del buf1192  # reuse
        buf1203 = buf1202; del buf1202  # reuse
        buf1213 = buf1212; del buf1212  # reuse
        buf1184 = buf1183; del buf1183  # reuse
        buf1194 = buf1193; del buf1193  # reuse
        buf1204 = buf1203; del buf1203  # reuse
        buf1214 = buf1213; del buf1213  # reuse
        buf1222 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1220 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1218 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_883, add_884, add_885, add_886, add_887, add_888, add_889, add_890, add_891, add_892, add_893, add_894, add_895, add_896, add_897, add_898, add_899, add_900, add_901, add_902, add_903, add_904, add_905, add_906, add_907, add_908, add_909, add_910, add_911, add_912, add_913, add_914, add_915, add_916, add_917, add_918, add_919, add_920, add_921, add_922, add_923, add_924, add_925, add_926, add_927, add_928, add_929, add_930, add_931, add_932, add_933, add_934, add_935, add_936, add_937, add_938, add_939, add_940, add_941, add_942, add_943, add_944, add_945, add_946, add_947, add_948, add_949, add_950, add_951, add_952, add_953, add_954, add_955, add_956, add_957, add_958, add_959, add_960, add_961, add_962, add_963, add_964, add_965, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_861, mul_862, mul_863, mul_864, mul_865, mul_866, mul_867, mul_868, mul_869, mul_870, mul_871, mul_872, mul_873, mul_874, mul_875, mul_876, mul_877, mul_878, mul_879, mul_880, mul_881, mul_882, mul_883, mul_884, mul_885, mul_886, mul_887, mul_888, mul_889, mul_890, mul_891, mul_892, mul_893, mul_894, mul_895, mul_896, mul_897, mul_898, mul_899, mul_900, mul_901, mul_902, mul_903, mul_904, mul_905, mul_906, mul_907, mul_908, mul_909, mul_910, mul_911, mul_912, mul_913, mul_914, mul_915, mul_916, mul_917, mul_918, mul_919, mul_920, mul_921, mul_922, mul_923, mul_924, mul_925, mul_926, mul_927, mul_928, mul_929, mul_930, mul_931, mul_932, mul_933, mul_934, mul_935, mul_936, mul_937, mul_938, mul_939, mul_940, mul_941, mul_942, mul_943, mul_944, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_66.run(buf1184, buf1194, buf1204, buf1214, buf1174, primals_250, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, primals_253, primals_252, primals_251, buf1222, buf1220, buf1218, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1219 = reinterpret_tensor(buf1204, (8192, 4096), (4096, 1)); del buf1204  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1218, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_254, (4096, 4096), (1, 4096), 0), out=buf1219)
        buf1221 = reinterpret_tensor(buf1218, (8192, 4096), (4096, 1)); del buf1218  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1220, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_255, (4096, 4096), (1, 4096), 0), out=buf1221)
        buf1223 = reinterpret_tensor(buf1220, (8192, 4096), (4096, 1)); del buf1220  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1222, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_256, (4096, 4096), (1, 4096), 0), out=buf1223)
        buf1226 = buf1151; del buf1151  # reuse
        buf1224 = reinterpret_tensor(buf1226, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1225 = reinterpret_tensor(buf1226, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1229 = buf1148; del buf1148  # reuse
        buf1227 = reinterpret_tensor(buf1229, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1228 = reinterpret_tensor(buf1229, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1219, primals_450, buf1221, buf1224, buf1225, buf1227, buf1228, 16777216, grid=grid(16777216), stream=stream0)
        buf1230 = reinterpret_tensor(buf1221, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1221  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1226, buf1230, 33554432, grid=grid(33554432), stream=stream0)
        del buf1224
        del buf1225
        del buf1227
        del buf1228
        buf1231 = reinterpret_tensor(buf1219, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1219  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1229, buf1231, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1232 = reinterpret_tensor(buf1157, (128, 2048, 2048), (4194304, 2048, 1)); del buf1157  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1230, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1231, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1232)
        buf1235 = reinterpret_tensor(buf1154, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1154  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1232, buf14, buf1235, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1236 = reinterpret_tensor(buf1231, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1231  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1223, buf1236, 33554432, grid=grid(33554432), stream=stream0)
        buf1237 = reinterpret_tensor(buf1223, (128, 2048, 128), (262144, 128, 1)); del buf1223  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1235, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1236, (128, 2048, 128), (262144, 128, 1), 0), out=buf1237)
        buf1238 = reinterpret_tensor(buf1236, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1236  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1237, buf1238, 33554432, grid=grid(33554432), stream=stream0)
        buf1239 = reinterpret_tensor(buf1237, (8192, 4096), (4096, 1)); del buf1237  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1238, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_257, (4096, 4096), (1, 4096), 0), out=buf1239)
        buf1241 = reinterpret_tensor(buf1238, (4, 2048, 4096), (8388608, 4096, 1)); del buf1238  # reuse
        # Source Nodes: [add_966, add_967, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1214, buf1239, primals_258, buf1241, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1242 = reinterpret_tensor(buf1167, (8192, 11008), (11008, 1)); del buf1167  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1241, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_259, (4096, 11008), (1, 4096), 0), out=buf1242)
        buf1243 = buf1166; del buf1166  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1241, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_260, (4096, 11008), (1, 4096), 0), out=buf1243)
        buf1244 = reinterpret_tensor(buf1242, (4, 2048, 11008), (22544384, 11008, 1)); del buf1242  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1244, buf1243, 90177536, grid=grid(90177536), stream=stream0)
        buf1245 = reinterpret_tensor(buf1241, (8192, 4096), (4096, 1)); del buf1241  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1244, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_261, (11008, 4096), (1, 11008), 0), out=buf1245)
        buf1247 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1248 = reinterpret_tensor(buf1230, (8192, 4096), (4096, 1)); del buf1230  # reuse
        # Source Nodes: [add_966, add_968, l__mod___dynamic_dense_21_w1, mean_21, mul_945, pow_22, rsqrt_21], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1214, buf1239, buf1245, buf1247, buf1248, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1249 = empty_strided((8192, 92), (92, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_21_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1248, reinterpret_tensor(primals_427, (4096, 92), (1, 4096), 0), out=buf1249)
        buf1250 = empty_strided((8192, 92), (92, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_21_act, l__mod___dynamic_dense_21_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_67.run(buf1249, buf1250, 753664, grid=grid(753664), stream=stream0)
        buf1251 = empty_strided((8192, 92), (92, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_21_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1250, reinterpret_tensor(primals_428, (92, 92), (1, 92), 0), out=buf1251)
        buf1282 = buf1222; del buf1222  # reuse
        buf1283 = buf1282; del buf1282  # reuse
        buf1284 = buf1283; del buf1283  # reuse
        buf1285 = buf1284; del buf1284  # reuse
        buf1286 = buf1285; del buf1285  # reuse
        buf1287 = buf1286; del buf1286  # reuse
        buf1288 = buf1287; del buf1287  # reuse
        buf1289 = buf1288; del buf1288  # reuse
        buf1290 = buf1289; del buf1289  # reuse
        buf1291 = buf1290; del buf1290  # reuse
        buf1292 = reinterpret_tensor(buf1229, (4, 2048, 4096), (8388608, 4096, 1)); del buf1229  # reuse
        buf1294 = reinterpret_tensor(buf1226, (4, 2048, 4096), (8388608, 4096, 1)); del buf1226  # reuse
        buf1296 = buf1134; del buf1134  # reuse
        buf1298 = buf1194; del buf1194  # reuse
        buf1300 = buf1184; del buf1184  # reuse
        buf1302 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1000, add_1001, add_1002, add_1003, add_1004, add_1005, add_1006, add_1007, add_1008, add_1009, add_1010, add_1011, add_1012, add_1013, add_1014, add_1015, add_1016, add_1017, add_1018, add_1019, add_1020, add_1021, add_1022, add_1023, add_1024, add_1025, add_1026, add_1027, add_1028, add_1029, add_1030, add_1031, add_1032, add_1033, add_1034, add_1035, add_1036, add_1037, add_1038, add_1039, add_1040, add_1041, add_1042, add_1043, add_1044, add_1045, add_1046, add_1047, add_1048, add_1049, add_1050, add_1051, add_1052, add_1053, add_1054, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_968, add_969, add_970, add_971, add_972, add_973, add_974, add_975, add_976, add_977, add_978, add_979, add_98, add_980, add_981, add_982, add_983, add_984, add_985, add_986, add_987, add_988, add_989, add_990, add_991, add_992, add_993, add_994, add_995, add_996, add_997, add_998, add_999, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1000, mul_1001, mul_1002, mul_1003, mul_1004, mul_1005, mul_1006, mul_1007, mul_1008, mul_1009, mul_1010, mul_1011, mul_1012, mul_1013, mul_1014, mul_1015, mul_1016, mul_1017, mul_1018, mul_1019, mul_1020, mul_1021, mul_1022, mul_1023, mul_1024, mul_1025, mul_1026, mul_1027, mul_1028, mul_1029, mul_1030, mul_1031, mul_1032, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, mul_946, mul_947, mul_948, mul_949, mul_950, mul_951, mul_952, mul_953, mul_954, mul_955, mul_956, mul_957, mul_958, mul_959, mul_960, mul_961, mul_962, mul_963, mul_964, mul_965, mul_966, mul_967, mul_968, mul_969, mul_970, mul_971, mul_972, mul_973, mul_974, mul_975, mul_976, mul_977, mul_978, mul_979, mul_980, mul_981, mul_982, mul_983, mul_984, mul_985, mul_986, mul_987, mul_988, mul_989, mul_990, mul_991, mul_992, mul_993, mul_994, mul_995, mul_996, mul_997, mul_998, mul_999, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_68.run(buf1291, buf1251, primals_262, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, primals_263, primals_264, primals_265, buf1292, buf1294, buf1296, buf1298, buf1300, buf1302, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1299 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1298, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_266, (4096, 4096), (1, 4096), 0), out=buf1299)
        buf1301 = reinterpret_tensor(buf1298, (8192, 4096), (4096, 1)); del buf1298  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1300, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_267, (4096, 4096), (1, 4096), 0), out=buf1301)
        buf1303 = reinterpret_tensor(buf1300, (8192, 4096), (4096, 1)); del buf1300  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1302, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_268, (4096, 4096), (1, 4096), 0), out=buf1303)
        buf1306 = reinterpret_tensor(buf1296, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1296  # reuse
        buf1304 = reinterpret_tensor(buf1306, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1305 = reinterpret_tensor(buf1306, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1309 = reinterpret_tensor(buf1294, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1294  # reuse
        buf1307 = reinterpret_tensor(buf1309, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1308 = reinterpret_tensor(buf1309, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1299, primals_450, buf1301, buf1304, buf1305, buf1307, buf1308, 16777216, grid=grid(16777216), stream=stream0)
        buf1310 = reinterpret_tensor(buf1301, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1301  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1306, buf1310, 33554432, grid=grid(33554432), stream=stream0)
        del buf1304
        del buf1305
        del buf1307
        del buf1308
        buf1311 = reinterpret_tensor(buf1299, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1299  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1309, buf1311, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1312 = reinterpret_tensor(buf1235, (128, 2048, 2048), (4194304, 2048, 1)); del buf1235  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1310, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1311, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1312)
        buf1315 = reinterpret_tensor(buf1232, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1232  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1312, buf14, buf1315, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1316 = reinterpret_tensor(buf1311, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1311  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1303, buf1316, 33554432, grid=grid(33554432), stream=stream0)
        buf1317 = reinterpret_tensor(buf1303, (128, 2048, 128), (262144, 128, 1)); del buf1303  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1315, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1316, (128, 2048, 128), (262144, 128, 1), 0), out=buf1317)
        buf1318 = reinterpret_tensor(buf1316, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1316  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1317, buf1318, 33554432, grid=grid(33554432), stream=stream0)
        buf1319 = reinterpret_tensor(buf1317, (8192, 4096), (4096, 1)); del buf1317  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1318, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_269, (4096, 4096), (1, 4096), 0), out=buf1319)
        buf1320 = buf1291; del buf1291  # reuse
        buf1322 = reinterpret_tensor(buf1318, (4, 2048, 4096), (8388608, 4096, 1)); del buf1318  # reuse
        # Source Nodes: [add_1055, add_1056, add_1057, add_882, float_6, mean_3, mul_1033, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_69.run(buf1320, buf1251, primals_262, buf1162, buf1168, buf1319, primals_270, buf1322, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1323 = reinterpret_tensor(buf1244, (8192, 11008), (11008, 1)); del buf1244  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1322, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_271, (4096, 11008), (1, 4096), 0), out=buf1323)
        buf1324 = buf1243; del buf1243  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1322, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_272, (4096, 11008), (1, 4096), 0), out=buf1324)
        buf1325 = reinterpret_tensor(buf1323, (4, 2048, 11008), (22544384, 11008, 1)); del buf1323  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1325, buf1324, 90177536, grid=grid(90177536), stream=stream0)
        buf1326 = reinterpret_tensor(buf1322, (8192, 4096), (4096, 1)); del buf1322  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1325, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_273, (11008, 4096), (1, 11008), 0), out=buf1326)
        buf1328 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1329 = buf1319; del buf1319  # reuse
        # Source Nodes: [add_1056, add_1058, l__mod___dynamic_dense_22_w1, mean_22, mul_1034, pow_23, rsqrt_22], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1320, buf1326, buf1328, buf1329, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1330 = empty_strided((8192, 96), (96, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_22_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1329, reinterpret_tensor(primals_429, (4096, 96), (1, 4096), 0), out=buf1330)
        buf1331 = empty_strided((8192, 96), (96, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_22_act, l__mod___dynamic_dense_22_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_70.run(buf1330, buf1331, 786432, grid=grid(786432), stream=stream0)
        buf1332 = empty_strided((8192, 96), (96, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_22_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1331, reinterpret_tensor(primals_430, (96, 96), (1, 96), 0), out=buf1332)
        buf1333 = reinterpret_tensor(buf1310, (4, 2048, 4096), (8388608, 4096, 1)); del buf1310  # reuse
        buf1344 = buf1302; del buf1302  # reuse
        buf1355 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1366 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1334 = buf1333; del buf1333  # reuse
        buf1345 = buf1344; del buf1344  # reuse
        buf1356 = buf1355; del buf1355  # reuse
        buf1367 = buf1366; del buf1366  # reuse
        buf1335 = buf1334; del buf1334  # reuse
        buf1346 = buf1345; del buf1345  # reuse
        buf1357 = buf1356; del buf1356  # reuse
        buf1368 = buf1367; del buf1367  # reuse
        buf1336 = buf1335; del buf1335  # reuse
        buf1347 = buf1346; del buf1346  # reuse
        buf1358 = buf1357; del buf1357  # reuse
        buf1369 = buf1368; del buf1368  # reuse
        buf1337 = buf1336; del buf1336  # reuse
        buf1348 = buf1347; del buf1347  # reuse
        buf1359 = buf1358; del buf1358  # reuse
        buf1370 = buf1369; del buf1369  # reuse
        buf1338 = buf1337; del buf1337  # reuse
        buf1349 = buf1348; del buf1348  # reuse
        buf1360 = buf1359; del buf1359  # reuse
        buf1371 = buf1370; del buf1370  # reuse
        buf1339 = buf1338; del buf1338  # reuse
        buf1350 = buf1349; del buf1349  # reuse
        buf1361 = buf1360; del buf1360  # reuse
        buf1372 = buf1371; del buf1371  # reuse
        buf1340 = buf1339; del buf1339  # reuse
        buf1351 = buf1350; del buf1350  # reuse
        buf1362 = buf1361; del buf1361  # reuse
        buf1373 = buf1372; del buf1372  # reuse
        buf1341 = buf1340; del buf1340  # reuse
        buf1352 = buf1351; del buf1351  # reuse
        buf1363 = buf1362; del buf1362  # reuse
        buf1374 = buf1373; del buf1373  # reuse
        buf1342 = buf1341; del buf1341  # reuse
        buf1353 = buf1352; del buf1352  # reuse
        buf1364 = buf1363; del buf1363  # reuse
        buf1375 = buf1374; del buf1374  # reuse
        buf1343 = buf1342; del buf1342  # reuse
        buf1354 = buf1353; del buf1353  # reuse
        buf1365 = buf1364; del buf1364  # reuse
        buf1376 = buf1375; del buf1375  # reuse
        buf1384 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1382 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1380 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1059, add_1060, add_1061, add_1062, add_1063, add_1064, add_1065, add_1066, add_1067, add_1068, add_1069, add_1070, add_1071, add_1072, add_1073, add_1074, add_1075, add_1076, add_1077, add_1078, add_1079, add_1080, add_1081, add_1082, add_1083, add_1084, add_1085, add_1086, add_1087, add_1088, add_1089, add_1090, add_1091, add_1092, add_1093, add_1094, add_1095, add_1096, add_1097, add_1098, add_1099, add_1100, add_1101, add_1102, add_1103, add_1104, add_1105, add_1106, add_1107, add_1108, add_1109, add_1110, add_1111, add_1112, add_1113, add_1114, add_1115, add_1116, add_1117, add_1118, add_1119, add_1120, add_1121, add_1122, add_1123, add_1124, add_1125, add_1126, add_1127, add_1128, add_1129, add_1130, add_1131, add_1132, add_1133, add_1134, add_1135, add_1136, add_1137, add_1138, add_1139, add_1140, add_1141, add_1142, add_1143, add_1144, add_1145, add_1146, add_1147, add_1148, add_1149, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1035, mul_1036, mul_1037, mul_1038, mul_1039, mul_1040, mul_1041, mul_1042, mul_1043, mul_1044, mul_1045, mul_1046, mul_1047, mul_1048, mul_1049, mul_1050, mul_1051, mul_1052, mul_1053, mul_1054, mul_1055, mul_1056, mul_1057, mul_1058, mul_1059, mul_1060, mul_1061, mul_1062, mul_1063, mul_1064, mul_1065, mul_1066, mul_1067, mul_1068, mul_1069, mul_1070, mul_1071, mul_1072, mul_1073, mul_1074, mul_1075, mul_1076, mul_1077, mul_1078, mul_1079, mul_1080, mul_1081, mul_1082, mul_1083, mul_1084, mul_1085, mul_1086, mul_1087, mul_1088, mul_1089, mul_1090, mul_1091, mul_1092, mul_1093, mul_1094, mul_1095, mul_1096, mul_1097, mul_1098, mul_1099, mul_1100, mul_1101, mul_1102, mul_1103, mul_1104, mul_1105, mul_1106, mul_1107, mul_1108, mul_1109, mul_1110, mul_1111, mul_1112, mul_1113, mul_1114, mul_1115, mul_1116, mul_1117, mul_1118, mul_1119, mul_1120, mul_1121, mul_1122, mul_1123, mul_1124, mul_1125, mul_1126, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_71.run(buf1343, buf1354, buf1365, buf1376, buf1332, primals_274, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, primals_277, primals_276, primals_275, buf1384, buf1382, buf1380, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1381 = reinterpret_tensor(buf1365, (8192, 4096), (4096, 1)); del buf1365  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1380, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_278, (4096, 4096), (1, 4096), 0), out=buf1381)
        buf1383 = reinterpret_tensor(buf1380, (8192, 4096), (4096, 1)); del buf1380  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1382, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_279, (4096, 4096), (1, 4096), 0), out=buf1383)
        buf1385 = reinterpret_tensor(buf1382, (8192, 4096), (4096, 1)); del buf1382  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1384, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_280, (4096, 4096), (1, 4096), 0), out=buf1385)
        buf1388 = buf1309; del buf1309  # reuse
        buf1386 = reinterpret_tensor(buf1388, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1387 = reinterpret_tensor(buf1388, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1391 = buf1306; del buf1306  # reuse
        buf1389 = reinterpret_tensor(buf1391, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1390 = reinterpret_tensor(buf1391, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1381, primals_450, buf1383, buf1386, buf1387, buf1389, buf1390, 16777216, grid=grid(16777216), stream=stream0)
        buf1392 = reinterpret_tensor(buf1383, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1383  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1388, buf1392, 33554432, grid=grid(33554432), stream=stream0)
        del buf1386
        del buf1387
        del buf1389
        del buf1390
        buf1393 = reinterpret_tensor(buf1381, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1381  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1391, buf1393, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1394 = reinterpret_tensor(buf1315, (128, 2048, 2048), (4194304, 2048, 1)); del buf1315  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1392, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1393, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1394)
        buf1397 = reinterpret_tensor(buf1312, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1312  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1394, buf14, buf1397, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1398 = reinterpret_tensor(buf1393, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1393  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1385, buf1398, 33554432, grid=grid(33554432), stream=stream0)
        buf1399 = reinterpret_tensor(buf1385, (128, 2048, 128), (262144, 128, 1)); del buf1385  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1397, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1398, (128, 2048, 128), (262144, 128, 1), 0), out=buf1399)
        buf1400 = reinterpret_tensor(buf1398, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1398  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1399, buf1400, 33554432, grid=grid(33554432), stream=stream0)
        buf1401 = reinterpret_tensor(buf1399, (8192, 4096), (4096, 1)); del buf1399  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1400, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_281, (4096, 4096), (1, 4096), 0), out=buf1401)
        buf1403 = reinterpret_tensor(buf1400, (4, 2048, 4096), (8388608, 4096, 1)); del buf1400  # reuse
        # Source Nodes: [add_1150, add_1151, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1376, buf1401, primals_282, buf1403, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1404 = reinterpret_tensor(buf1325, (8192, 11008), (11008, 1)); del buf1325  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1403, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_283, (4096, 11008), (1, 4096), 0), out=buf1404)
        buf1405 = buf1324; del buf1324  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1403, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_284, (4096, 11008), (1, 4096), 0), out=buf1405)
        buf1406 = reinterpret_tensor(buf1404, (4, 2048, 11008), (22544384, 11008, 1)); del buf1404  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1406, buf1405, 90177536, grid=grid(90177536), stream=stream0)
        buf1407 = reinterpret_tensor(buf1403, (8192, 4096), (4096, 1)); del buf1403  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1406, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_285, (11008, 4096), (1, 11008), 0), out=buf1407)
        buf1409 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1410 = reinterpret_tensor(buf1392, (8192, 4096), (4096, 1)); del buf1392  # reuse
        # Source Nodes: [add_1150, add_1152, l__mod___dynamic_dense_23_w1, mean_23, mul_1127, pow_24, rsqrt_23], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1376, buf1401, buf1407, buf1409, buf1410, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1411 = empty_strided((8192, 100), (100, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_23_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1410, reinterpret_tensor(primals_431, (4096, 100), (1, 4096), 0), out=buf1411)
        buf1412 = empty_strided((8192, 100), (100, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_23_act, l__mod___dynamic_dense_23_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_72.run(buf1411, buf1412, 819200, grid=grid(819200), stream=stream0)
        buf1413 = empty_strided((8192, 100), (100, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_23_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1412, reinterpret_tensor(primals_432, (100, 100), (1, 100), 0), out=buf1413)
        buf1447 = buf1384; del buf1384  # reuse
        buf1448 = buf1447; del buf1447  # reuse
        buf1449 = buf1448; del buf1448  # reuse
        buf1450 = buf1449; del buf1449  # reuse
        buf1451 = buf1450; del buf1450  # reuse
        buf1452 = buf1451; del buf1451  # reuse
        buf1453 = buf1452; del buf1452  # reuse
        buf1454 = buf1453; del buf1453  # reuse
        buf1455 = buf1454; del buf1454  # reuse
        buf1456 = buf1455; del buf1455  # reuse
        buf1457 = buf1456; del buf1456  # reuse
        buf1458 = reinterpret_tensor(buf1391, (4, 2048, 4096), (8388608, 4096, 1)); del buf1391  # reuse
        buf1460 = reinterpret_tensor(buf1388, (4, 2048, 4096), (8388608, 4096, 1)); del buf1388  # reuse
        buf1462 = buf1292; del buf1292  # reuse
        buf1464 = buf1354; del buf1354  # reuse
        buf1466 = buf1343; del buf1343  # reuse
        buf1468 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1152, add_1153, add_1154, add_1155, add_1156, add_1157, add_1158, add_1159, add_1160, add_1161, add_1162, add_1163, add_1164, add_1165, add_1166, add_1167, add_1168, add_1169, add_1170, add_1171, add_1172, add_1173, add_1174, add_1175, add_1176, add_1177, add_1178, add_1179, add_1180, add_1181, add_1182, add_1183, add_1184, add_1185, add_1186, add_1187, add_1188, add_1189, add_1190, add_1191, add_1192, add_1193, add_1194, add_1195, add_1196, add_1197, add_1198, add_1199, add_1200, add_1201, add_1202, add_1203, add_1204, add_1205, add_1206, add_1207, add_1208, add_1209, add_1210, add_1211, add_1212, add_1213, add_1214, add_1215, add_1216, add_1217, add_1218, add_1219, add_1220, add_1221, add_1222, add_1223, add_1224, add_1225, add_1226, add_1227, add_1228, add_1229, add_1230, add_1231, add_1232, add_1233, add_1234, add_1235, add_1236, add_1237, add_1238, add_1239, add_1240, add_1241, add_1242, add_1243, add_1244, add_1245, add_1246, add_126, add_128, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1128, mul_1129, mul_1130, mul_1131, mul_1132, mul_1133, mul_1134, mul_1135, mul_1136, mul_1137, mul_1138, mul_1139, mul_1140, mul_1141, mul_1142, mul_1143, mul_1144, mul_1145, mul_1146, mul_1147, mul_1148, mul_1149, mul_1150, mul_1151, mul_1152, mul_1153, mul_1154, mul_1155, mul_1156, mul_1157, mul_1158, mul_1159, mul_1160, mul_1161, mul_1162, mul_1163, mul_1164, mul_1165, mul_1166, mul_1167, mul_1168, mul_1169, mul_1170, mul_1171, mul_1172, mul_1173, mul_1174, mul_1175, mul_1176, mul_1177, mul_1178, mul_1179, mul_1180, mul_1181, mul_1182, mul_1183, mul_1184, mul_1185, mul_1186, mul_1187, mul_1188, mul_1189, mul_1190, mul_1191, mul_1192, mul_1193, mul_1194, mul_1195, mul_1196, mul_1197, mul_1198, mul_1199, mul_1200, mul_1201, mul_1202, mul_1203, mul_1204, mul_1205, mul_1206, mul_1207, mul_1208, mul_1209, mul_1210, mul_1211, mul_1212, mul_1213, mul_1214, mul_1215, mul_1216, mul_1217, mul_1218, mul_1219, mul_1220, mul_1221, mul_1222, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_73.run(buf1457, buf1413, primals_286, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, primals_287, primals_288, primals_289, buf1458, buf1460, buf1462, buf1464, buf1466, buf1468, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1465 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1464, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_290, (4096, 4096), (1, 4096), 0), out=buf1465)
        buf1467 = reinterpret_tensor(buf1464, (8192, 4096), (4096, 1)); del buf1464  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1466, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_291, (4096, 4096), (1, 4096), 0), out=buf1467)
        buf1469 = reinterpret_tensor(buf1466, (8192, 4096), (4096, 1)); del buf1466  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1468, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_292, (4096, 4096), (1, 4096), 0), out=buf1469)
        buf1472 = reinterpret_tensor(buf1462, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1462  # reuse
        buf1470 = reinterpret_tensor(buf1472, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1471 = reinterpret_tensor(buf1472, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1475 = reinterpret_tensor(buf1460, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1460  # reuse
        buf1473 = reinterpret_tensor(buf1475, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1474 = reinterpret_tensor(buf1475, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1465, primals_450, buf1467, buf1470, buf1471, buf1473, buf1474, 16777216, grid=grid(16777216), stream=stream0)
        buf1476 = reinterpret_tensor(buf1467, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1467  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1472, buf1476, 33554432, grid=grid(33554432), stream=stream0)
        del buf1470
        del buf1471
        del buf1473
        del buf1474
        buf1477 = reinterpret_tensor(buf1465, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1465  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1475, buf1477, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1478 = reinterpret_tensor(buf1397, (128, 2048, 2048), (4194304, 2048, 1)); del buf1397  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1476, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1477, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1478)
        buf1481 = reinterpret_tensor(buf1394, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1394  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1478, buf14, buf1481, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1482 = reinterpret_tensor(buf1477, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1477  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1469, buf1482, 33554432, grid=grid(33554432), stream=stream0)
        buf1483 = reinterpret_tensor(buf1469, (128, 2048, 128), (262144, 128, 1)); del buf1469  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1481, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1482, (128, 2048, 128), (262144, 128, 1), 0), out=buf1483)
        buf1484 = reinterpret_tensor(buf1482, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1482  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1483, buf1484, 33554432, grid=grid(33554432), stream=stream0)
        buf1485 = reinterpret_tensor(buf1483, (8192, 4096), (4096, 1)); del buf1483  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1484, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_293, (4096, 4096), (1, 4096), 0), out=buf1485)
        buf1486 = buf1457; del buf1457  # reuse
        buf1488 = reinterpret_tensor(buf1484, (4, 2048, 4096), (8388608, 4096, 1)); del buf1484  # reuse
        # Source Nodes: [add_1058, add_1247, add_1248, add_1249, float_6, mean_3, mul_1223, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_74.run(buf1486, buf1413, primals_286, buf1320, buf1326, buf1485, primals_294, buf1488, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1489 = reinterpret_tensor(buf1406, (8192, 11008), (11008, 1)); del buf1406  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1488, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_295, (4096, 11008), (1, 4096), 0), out=buf1489)
        buf1490 = buf1405; del buf1405  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1488, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_296, (4096, 11008), (1, 4096), 0), out=buf1490)
        buf1491 = reinterpret_tensor(buf1489, (4, 2048, 11008), (22544384, 11008, 1)); del buf1489  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1491, buf1490, 90177536, grid=grid(90177536), stream=stream0)
        buf1492 = reinterpret_tensor(buf1488, (8192, 4096), (4096, 1)); del buf1488  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1491, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_297, (11008, 4096), (1, 11008), 0), out=buf1492)
        buf1494 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1495 = buf1485; del buf1485  # reuse
        # Source Nodes: [add_1248, add_1250, l__mod___dynamic_dense_24_w1, mean_24, mul_1224, pow_25, rsqrt_24], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1486, buf1492, buf1494, buf1495, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1496 = empty_strided((8192, 104), (104, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_24_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1495, reinterpret_tensor(primals_433, (4096, 104), (1, 4096), 0), out=buf1496)
        buf1497 = empty_strided((8192, 104), (104, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_24_act, l__mod___dynamic_dense_24_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_75.run(buf1496, buf1497, 851968, grid=grid(851968), stream=stream0)
        buf1498 = empty_strided((8192, 104), (104, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_24_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1497, reinterpret_tensor(primals_434, (104, 104), (1, 104), 0), out=buf1498)
        buf1499 = reinterpret_tensor(buf1476, (4, 2048, 4096), (8388608, 4096, 1)); del buf1476  # reuse
        buf1511 = buf1468; del buf1468  # reuse
        buf1523 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1535 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1500 = buf1499; del buf1499  # reuse
        buf1512 = buf1511; del buf1511  # reuse
        buf1524 = buf1523; del buf1523  # reuse
        buf1536 = buf1535; del buf1535  # reuse
        buf1501 = buf1500; del buf1500  # reuse
        buf1513 = buf1512; del buf1512  # reuse
        buf1525 = buf1524; del buf1524  # reuse
        buf1537 = buf1536; del buf1536  # reuse
        buf1502 = buf1501; del buf1501  # reuse
        buf1514 = buf1513; del buf1513  # reuse
        buf1526 = buf1525; del buf1525  # reuse
        buf1538 = buf1537; del buf1537  # reuse
        buf1503 = buf1502; del buf1502  # reuse
        buf1515 = buf1514; del buf1514  # reuse
        buf1527 = buf1526; del buf1526  # reuse
        buf1539 = buf1538; del buf1538  # reuse
        buf1504 = buf1503; del buf1503  # reuse
        buf1516 = buf1515; del buf1515  # reuse
        buf1528 = buf1527; del buf1527  # reuse
        buf1540 = buf1539; del buf1539  # reuse
        buf1505 = buf1504; del buf1504  # reuse
        buf1517 = buf1516; del buf1516  # reuse
        buf1529 = buf1528; del buf1528  # reuse
        buf1541 = buf1540; del buf1540  # reuse
        buf1506 = buf1505; del buf1505  # reuse
        buf1518 = buf1517; del buf1517  # reuse
        buf1530 = buf1529; del buf1529  # reuse
        buf1542 = buf1541; del buf1541  # reuse
        buf1507 = buf1506; del buf1506  # reuse
        buf1519 = buf1518; del buf1518  # reuse
        buf1531 = buf1530; del buf1530  # reuse
        buf1543 = buf1542; del buf1542  # reuse
        buf1508 = buf1507; del buf1507  # reuse
        buf1520 = buf1519; del buf1519  # reuse
        buf1532 = buf1531; del buf1531  # reuse
        buf1544 = buf1543; del buf1543  # reuse
        buf1509 = buf1508; del buf1508  # reuse
        buf1521 = buf1520; del buf1520  # reuse
        buf1533 = buf1532; del buf1532  # reuse
        buf1545 = buf1544; del buf1544  # reuse
        buf1510 = buf1509; del buf1509  # reuse
        buf1522 = buf1521; del buf1521  # reuse
        buf1534 = buf1533; del buf1533  # reuse
        buf1546 = buf1545; del buf1545  # reuse
        buf1554 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1552 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1550 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_1251, add_1252, add_1253, add_1254, add_1255, add_1256, add_1257, add_1258, add_1259, add_126, add_1260, add_1261, add_1262, add_1263, add_1264, add_1265, add_1266, add_1267, add_1268, add_1269, add_1270, add_1271, add_1272, add_1273, add_1274, add_1275, add_1276, add_1277, add_1278, add_1279, add_128, add_1280, add_1281, add_1282, add_1283, add_1284, add_1285, add_1286, add_1287, add_1288, add_1289, add_1290, add_1291, add_1292, add_1293, add_1294, add_1295, add_1296, add_1297, add_1298, add_1299, add_1300, add_1301, add_1302, add_1303, add_1304, add_1305, add_1306, add_1307, add_1308, add_1309, add_1310, add_1311, add_1312, add_1313, add_1314, add_1315, add_1316, add_1317, add_1318, add_1319, add_1320, add_1321, add_1322, add_1323, add_1324, add_1325, add_1326, add_1327, add_1328, add_1329, add_1330, add_1331, add_1332, add_1333, add_1334, add_1335, add_1336, add_1337, add_1338, add_1339, add_1340, add_1341, add_1342, add_1343, add_1344, add_1345, add_1346, add_1347, add_1348, add_1349, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1225, mul_1226, mul_1227, mul_1228, mul_1229, mul_1230, mul_1231, mul_1232, mul_1233, mul_1234, mul_1235, mul_1236, mul_1237, mul_1238, mul_1239, mul_1240, mul_1241, mul_1242, mul_1243, mul_1244, mul_1245, mul_1246, mul_1247, mul_1248, mul_1249, mul_1250, mul_1251, mul_1252, mul_1253, mul_1254, mul_1255, mul_1256, mul_1257, mul_1258, mul_1259, mul_1260, mul_1261, mul_1262, mul_1263, mul_1264, mul_1265, mul_1266, mul_1267, mul_1268, mul_1269, mul_1270, mul_1271, mul_1272, mul_1273, mul_1274, mul_1275, mul_1276, mul_1277, mul_1278, mul_1279, mul_1280, mul_1281, mul_1282, mul_1283, mul_1284, mul_1285, mul_1286, mul_1287, mul_1288, mul_1289, mul_1290, mul_1291, mul_1292, mul_1293, mul_1294, mul_1295, mul_1296, mul_1297, mul_1298, mul_1299, mul_1300, mul_1301, mul_1302, mul_1303, mul_1304, mul_1305, mul_1306, mul_1307, mul_1308, mul_1309, mul_1310, mul_1311, mul_1312, mul_1313, mul_1314, mul_1315, mul_1316, mul_1317, mul_1318, mul_1319, mul_1320, mul_1321, mul_1322, mul_1323, mul_1324, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_76.run(buf1510, buf1522, buf1534, buf1546, buf1498, primals_298, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, primals_301, primals_300, primals_299, buf1554, buf1552, buf1550, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1551 = reinterpret_tensor(buf1534, (8192, 4096), (4096, 1)); del buf1534  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1550, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_302, (4096, 4096), (1, 4096), 0), out=buf1551)
        buf1553 = reinterpret_tensor(buf1550, (8192, 4096), (4096, 1)); del buf1550  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1552, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_303, (4096, 4096), (1, 4096), 0), out=buf1553)
        buf1555 = reinterpret_tensor(buf1552, (8192, 4096), (4096, 1)); del buf1552  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1554, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_304, (4096, 4096), (1, 4096), 0), out=buf1555)
        buf1558 = buf1475; del buf1475  # reuse
        buf1556 = reinterpret_tensor(buf1558, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1557 = reinterpret_tensor(buf1558, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1561 = buf1472; del buf1472  # reuse
        buf1559 = reinterpret_tensor(buf1561, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1560 = reinterpret_tensor(buf1561, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1551, primals_450, buf1553, buf1556, buf1557, buf1559, buf1560, 16777216, grid=grid(16777216), stream=stream0)
        buf1562 = reinterpret_tensor(buf1553, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1553  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1558, buf1562, 33554432, grid=grid(33554432), stream=stream0)
        del buf1556
        del buf1557
        del buf1559
        del buf1560
        buf1563 = reinterpret_tensor(buf1551, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1551  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1561, buf1563, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1564 = reinterpret_tensor(buf1481, (128, 2048, 2048), (4194304, 2048, 1)); del buf1481  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1562, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1563, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1564)
        buf1567 = reinterpret_tensor(buf1478, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1478  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1564, buf14, buf1567, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1568 = reinterpret_tensor(buf1563, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1563  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1555, buf1568, 33554432, grid=grid(33554432), stream=stream0)
        buf1569 = reinterpret_tensor(buf1555, (128, 2048, 128), (262144, 128, 1)); del buf1555  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1567, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1568, (128, 2048, 128), (262144, 128, 1), 0), out=buf1569)
        buf1570 = reinterpret_tensor(buf1568, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1568  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1569, buf1570, 33554432, grid=grid(33554432), stream=stream0)
        buf1571 = reinterpret_tensor(buf1569, (8192, 4096), (4096, 1)); del buf1569  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1570, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_305, (4096, 4096), (1, 4096), 0), out=buf1571)
        buf1573 = reinterpret_tensor(buf1570, (4, 2048, 4096), (8388608, 4096, 1)); del buf1570  # reuse
        # Source Nodes: [add_1350, add_1351, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1546, buf1571, primals_306, buf1573, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1574 = reinterpret_tensor(buf1491, (8192, 11008), (11008, 1)); del buf1491  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1573, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_307, (4096, 11008), (1, 4096), 0), out=buf1574)
        buf1575 = buf1490; del buf1490  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1573, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_308, (4096, 11008), (1, 4096), 0), out=buf1575)
        buf1576 = reinterpret_tensor(buf1574, (4, 2048, 11008), (22544384, 11008, 1)); del buf1574  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1576, buf1575, 90177536, grid=grid(90177536), stream=stream0)
        buf1577 = reinterpret_tensor(buf1573, (8192, 4096), (4096, 1)); del buf1573  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1576, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_309, (11008, 4096), (1, 11008), 0), out=buf1577)
        buf1579 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1580 = reinterpret_tensor(buf1562, (8192, 4096), (4096, 1)); del buf1562  # reuse
        # Source Nodes: [add_1350, add_1352, l__mod___dynamic_dense_25_w1, mean_25, mul_1325, pow_26, rsqrt_25], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1546, buf1571, buf1577, buf1579, buf1580, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1581 = empty_strided((8192, 108), (108, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_25_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1580, reinterpret_tensor(primals_435, (4096, 108), (1, 4096), 0), out=buf1581)
        buf1582 = empty_strided((8192, 108), (108, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_25_act, l__mod___dynamic_dense_25_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_77.run(buf1581, buf1582, 884736, grid=grid(884736), stream=stream0)
        buf1583 = empty_strided((8192, 108), (108, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_25_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1582, reinterpret_tensor(primals_436, (108, 108), (1, 108), 0), out=buf1583)
        buf1620 = buf1554; del buf1554  # reuse
        buf1621 = buf1620; del buf1620  # reuse
        buf1622 = buf1621; del buf1621  # reuse
        buf1623 = buf1622; del buf1622  # reuse
        buf1624 = buf1623; del buf1623  # reuse
        buf1625 = buf1624; del buf1624  # reuse
        buf1626 = buf1625; del buf1625  # reuse
        buf1627 = buf1626; del buf1626  # reuse
        buf1628 = buf1627; del buf1627  # reuse
        buf1629 = buf1628; del buf1628  # reuse
        buf1630 = buf1629; del buf1629  # reuse
        buf1631 = buf1630; del buf1630  # reuse
        buf1632 = reinterpret_tensor(buf1561, (4, 2048, 4096), (8388608, 4096, 1)); del buf1561  # reuse
        buf1634 = reinterpret_tensor(buf1558, (4, 2048, 4096), (8388608, 4096, 1)); del buf1558  # reuse
        buf1636 = buf1458; del buf1458  # reuse
        buf1638 = buf1522; del buf1522  # reuse
        buf1640 = buf1510; del buf1510  # reuse
        buf1642 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1352, add_1353, add_1354, add_1355, add_1356, add_1357, add_1358, add_1359, add_1360, add_1361, add_1362, add_1363, add_1364, add_1365, add_1366, add_1367, add_1368, add_1369, add_1370, add_1371, add_1372, add_1373, add_1374, add_1375, add_1376, add_1377, add_1378, add_1379, add_1380, add_1381, add_1382, add_1383, add_1384, add_1385, add_1386, add_1387, add_1388, add_1389, add_1390, add_1391, add_1392, add_1393, add_1394, add_1395, add_1396, add_1397, add_1398, add_1399, add_1400, add_1401, add_1402, add_1403, add_1404, add_1405, add_1406, add_1407, add_1408, add_1409, add_1410, add_1411, add_1412, add_1413, add_1414, add_1415, add_1416, add_1417, add_1418, add_1419, add_1420, add_1421, add_1422, add_1423, add_1424, add_1425, add_1426, add_1427, add_1428, add_1429, add_1430, add_1431, add_1432, add_1433, add_1434, add_1435, add_1436, add_1437, add_1438, add_1439, add_1440, add_1441, add_1442, add_1443, add_1444, add_1445, add_1446, add_1447, add_1448, add_1449, add_1450, add_1451, add_1452, add_1453, add_1454, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1326, mul_1327, mul_1328, mul_1329, mul_1330, mul_1331, mul_1332, mul_1333, mul_1334, mul_1335, mul_1336, mul_1337, mul_1338, mul_1339, mul_1340, mul_1341, mul_1342, mul_1343, mul_1344, mul_1345, mul_1346, mul_1347, mul_1348, mul_1349, mul_1350, mul_1351, mul_1352, mul_1353, mul_1354, mul_1355, mul_1356, mul_1357, mul_1358, mul_1359, mul_1360, mul_1361, mul_1362, mul_1363, mul_1364, mul_1365, mul_1366, mul_1367, mul_1368, mul_1369, mul_1370, mul_1371, mul_1372, mul_1373, mul_1374, mul_1375, mul_1376, mul_1377, mul_1378, mul_1379, mul_1380, mul_1381, mul_1382, mul_1383, mul_1384, mul_1385, mul_1386, mul_1387, mul_1388, mul_1389, mul_1390, mul_1391, mul_1392, mul_1393, mul_1394, mul_1395, mul_1396, mul_1397, mul_1398, mul_1399, mul_1400, mul_1401, mul_1402, mul_1403, mul_1404, mul_1405, mul_1406, mul_1407, mul_1408, mul_1409, mul_1410, mul_1411, mul_1412, mul_1413, mul_1414, mul_1415, mul_1416, mul_1417, mul_1418, mul_1419, mul_1420, mul_1421, mul_1422, mul_1423, mul_1424, mul_1425, mul_1426, mul_1427, mul_1428, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_78.run(buf1631, buf1583, primals_310, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, primals_311, primals_312, primals_313, buf1632, buf1634, buf1636, buf1638, buf1640, buf1642, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1639 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1638, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_314, (4096, 4096), (1, 4096), 0), out=buf1639)
        buf1641 = reinterpret_tensor(buf1638, (8192, 4096), (4096, 1)); del buf1638  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1640, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_315, (4096, 4096), (1, 4096), 0), out=buf1641)
        buf1643 = reinterpret_tensor(buf1640, (8192, 4096), (4096, 1)); del buf1640  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1642, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_316, (4096, 4096), (1, 4096), 0), out=buf1643)
        buf1646 = reinterpret_tensor(buf1636, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1636  # reuse
        buf1644 = reinterpret_tensor(buf1646, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1645 = reinterpret_tensor(buf1646, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1649 = reinterpret_tensor(buf1634, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1634  # reuse
        buf1647 = reinterpret_tensor(buf1649, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1648 = reinterpret_tensor(buf1649, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1639, primals_450, buf1641, buf1644, buf1645, buf1647, buf1648, 16777216, grid=grid(16777216), stream=stream0)
        buf1650 = reinterpret_tensor(buf1641, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1641  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1646, buf1650, 33554432, grid=grid(33554432), stream=stream0)
        del buf1644
        del buf1645
        del buf1647
        del buf1648
        buf1651 = reinterpret_tensor(buf1639, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1639  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1649, buf1651, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1652 = reinterpret_tensor(buf1567, (128, 2048, 2048), (4194304, 2048, 1)); del buf1567  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1650, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1651, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1652)
        buf1655 = reinterpret_tensor(buf1564, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1564  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1652, buf14, buf1655, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1656 = reinterpret_tensor(buf1651, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1651  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1643, buf1656, 33554432, grid=grid(33554432), stream=stream0)
        buf1657 = reinterpret_tensor(buf1643, (128, 2048, 128), (262144, 128, 1)); del buf1643  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1655, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1656, (128, 2048, 128), (262144, 128, 1), 0), out=buf1657)
        buf1658 = reinterpret_tensor(buf1656, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1656  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1657, buf1658, 33554432, grid=grid(33554432), stream=stream0)
        buf1659 = reinterpret_tensor(buf1657, (8192, 4096), (4096, 1)); del buf1657  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1658, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_317, (4096, 4096), (1, 4096), 0), out=buf1659)
        buf1660 = buf1631; del buf1631  # reuse
        buf1662 = reinterpret_tensor(buf1658, (4, 2048, 4096), (8388608, 4096, 1)); del buf1658  # reuse
        # Source Nodes: [add_1250, add_1455, add_1456, add_1457, float_6, mean_3, mul_1429, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_79.run(buf1660, buf1583, primals_310, buf1486, buf1492, buf1659, primals_318, buf1662, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1663 = reinterpret_tensor(buf1576, (8192, 11008), (11008, 1)); del buf1576  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1662, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_319, (4096, 11008), (1, 4096), 0), out=buf1663)
        buf1664 = buf1575; del buf1575  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1662, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_320, (4096, 11008), (1, 4096), 0), out=buf1664)
        buf1665 = reinterpret_tensor(buf1663, (4, 2048, 11008), (22544384, 11008, 1)); del buf1663  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1665, buf1664, 90177536, grid=grid(90177536), stream=stream0)
        buf1666 = reinterpret_tensor(buf1662, (8192, 4096), (4096, 1)); del buf1662  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1665, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_321, (11008, 4096), (1, 11008), 0), out=buf1666)
        buf1668 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1669 = buf1659; del buf1659  # reuse
        # Source Nodes: [add_1456, add_1458, l__mod___dynamic_dense_26_w1, mean_26, mul_1430, pow_27, rsqrt_26], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1660, buf1666, buf1668, buf1669, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1670 = empty_strided((8192, 112), (112, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_26_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1669, reinterpret_tensor(primals_437, (4096, 112), (1, 4096), 0), out=buf1670)
        buf1671 = empty_strided((8192, 112), (112, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_26_act, l__mod___dynamic_dense_26_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_80.run(buf1670, buf1671, 917504, grid=grid(917504), stream=stream0)
        buf1672 = empty_strided((8192, 112), (112, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_26_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1671, reinterpret_tensor(primals_438, (112, 112), (1, 112), 0), out=buf1672)
        buf1673 = reinterpret_tensor(buf1650, (4, 2048, 4096), (8388608, 4096, 1)); del buf1650  # reuse
        buf1686 = buf1642; del buf1642  # reuse
        buf1699 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1712 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1674 = buf1673; del buf1673  # reuse
        buf1687 = buf1686; del buf1686  # reuse
        buf1700 = buf1699; del buf1699  # reuse
        buf1713 = buf1712; del buf1712  # reuse
        buf1675 = buf1674; del buf1674  # reuse
        buf1688 = buf1687; del buf1687  # reuse
        buf1701 = buf1700; del buf1700  # reuse
        buf1714 = buf1713; del buf1713  # reuse
        buf1676 = buf1675; del buf1675  # reuse
        buf1689 = buf1688; del buf1688  # reuse
        buf1702 = buf1701; del buf1701  # reuse
        buf1715 = buf1714; del buf1714  # reuse
        buf1677 = buf1676; del buf1676  # reuse
        buf1690 = buf1689; del buf1689  # reuse
        buf1703 = buf1702; del buf1702  # reuse
        buf1716 = buf1715; del buf1715  # reuse
        buf1678 = buf1677; del buf1677  # reuse
        buf1691 = buf1690; del buf1690  # reuse
        buf1704 = buf1703; del buf1703  # reuse
        buf1717 = buf1716; del buf1716  # reuse
        buf1679 = buf1678; del buf1678  # reuse
        buf1692 = buf1691; del buf1691  # reuse
        buf1705 = buf1704; del buf1704  # reuse
        buf1718 = buf1717; del buf1717  # reuse
        buf1680 = buf1679; del buf1679  # reuse
        buf1693 = buf1692; del buf1692  # reuse
        buf1706 = buf1705; del buf1705  # reuse
        buf1719 = buf1718; del buf1718  # reuse
        buf1681 = buf1680; del buf1680  # reuse
        buf1694 = buf1693; del buf1693  # reuse
        buf1707 = buf1706; del buf1706  # reuse
        buf1720 = buf1719; del buf1719  # reuse
        buf1682 = buf1681; del buf1681  # reuse
        buf1695 = buf1694; del buf1694  # reuse
        buf1708 = buf1707; del buf1707  # reuse
        buf1721 = buf1720; del buf1720  # reuse
        buf1683 = buf1682; del buf1682  # reuse
        buf1696 = buf1695; del buf1695  # reuse
        buf1709 = buf1708; del buf1708  # reuse
        buf1722 = buf1721; del buf1721  # reuse
        buf1684 = buf1683; del buf1683  # reuse
        buf1697 = buf1696; del buf1696  # reuse
        buf1710 = buf1709; del buf1709  # reuse
        buf1723 = buf1722; del buf1722  # reuse
        buf1685 = buf1684; del buf1684  # reuse
        buf1698 = buf1697; del buf1697  # reuse
        buf1711 = buf1710; del buf1710  # reuse
        buf1724 = buf1723; del buf1723  # reuse
        buf1732 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1730 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1728 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1459, add_1460, add_1461, add_1462, add_1463, add_1464, add_1465, add_1466, add_1467, add_1468, add_1469, add_1470, add_1471, add_1472, add_1473, add_1474, add_1475, add_1476, add_1477, add_1478, add_1479, add_1480, add_1481, add_1482, add_1483, add_1484, add_1485, add_1486, add_1487, add_1488, add_1489, add_1490, add_1491, add_1492, add_1493, add_1494, add_1495, add_1496, add_1497, add_1498, add_1499, add_1500, add_1501, add_1502, add_1503, add_1504, add_1505, add_1506, add_1507, add_1508, add_1509, add_1510, add_1511, add_1512, add_1513, add_1514, add_1515, add_1516, add_1517, add_1518, add_1519, add_1520, add_1521, add_1522, add_1523, add_1524, add_1525, add_1526, add_1527, add_1528, add_1529, add_1530, add_1531, add_1532, add_1533, add_1534, add_1535, add_1536, add_1537, add_1538, add_1539, add_1540, add_1541, add_1542, add_1543, add_1544, add_1545, add_1546, add_1547, add_1548, add_1549, add_1550, add_1551, add_1552, add_1553, add_1554, add_1555, add_1556, add_1557, add_1558, add_1559, add_1560, add_1561, add_1562, add_1563, add_1564, add_1565, add_162, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1431, mul_1432, mul_1433, mul_1434, mul_1435, mul_1436, mul_1437, mul_1438, mul_1439, mul_1440, mul_1441, mul_1442, mul_1443, mul_1444, mul_1445, mul_1446, mul_1447, mul_1448, mul_1449, mul_1450, mul_1451, mul_1452, mul_1453, mul_1454, mul_1455, mul_1456, mul_1457, mul_1458, mul_1459, mul_1460, mul_1461, mul_1462, mul_1463, mul_1464, mul_1465, mul_1466, mul_1467, mul_1468, mul_1469, mul_1470, mul_1471, mul_1472, mul_1473, mul_1474, mul_1475, mul_1476, mul_1477, mul_1478, mul_1479, mul_1480, mul_1481, mul_1482, mul_1483, mul_1484, mul_1485, mul_1486, mul_1487, mul_1488, mul_1489, mul_1490, mul_1491, mul_1492, mul_1493, mul_1494, mul_1495, mul_1496, mul_1497, mul_1498, mul_1499, mul_1500, mul_1501, mul_1502, mul_1503, mul_1504, mul_1505, mul_1506, mul_1507, mul_1508, mul_1509, mul_1510, mul_1511, mul_1512, mul_1513, mul_1514, mul_1515, mul_1516, mul_1517, mul_1518, mul_1519, mul_1520, mul_1521, mul_1522, mul_1523, mul_1524, mul_1525, mul_1526, mul_1527, mul_1528, mul_1529, mul_1530, mul_1531, mul_1532, mul_1533, mul_1534, mul_1535, mul_1536, mul_1537, mul_1538, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_81.run(buf1685, buf1698, buf1711, buf1724, buf1672, primals_322, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, buf1546, buf1571, buf1577, primals_325, primals_324, primals_323, buf1732, buf1730, buf1728, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1729 = reinterpret_tensor(buf1711, (8192, 4096), (4096, 1)); del buf1711  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1728, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_326, (4096, 4096), (1, 4096), 0), out=buf1729)
        buf1731 = reinterpret_tensor(buf1728, (8192, 4096), (4096, 1)); del buf1728  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1730, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_327, (4096, 4096), (1, 4096), 0), out=buf1731)
        buf1733 = reinterpret_tensor(buf1730, (8192, 4096), (4096, 1)); del buf1730  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1732, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_328, (4096, 4096), (1, 4096), 0), out=buf1733)
        buf1736 = buf1649; del buf1649  # reuse
        buf1734 = reinterpret_tensor(buf1736, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1735 = reinterpret_tensor(buf1736, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1739 = buf1646; del buf1646  # reuse
        buf1737 = reinterpret_tensor(buf1739, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1738 = reinterpret_tensor(buf1739, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1729, primals_450, buf1731, buf1734, buf1735, buf1737, buf1738, 16777216, grid=grid(16777216), stream=stream0)
        buf1740 = reinterpret_tensor(buf1731, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1731  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1736, buf1740, 33554432, grid=grid(33554432), stream=stream0)
        del buf1734
        del buf1735
        del buf1737
        del buf1738
        buf1741 = reinterpret_tensor(buf1729, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1729  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1739, buf1741, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1742 = reinterpret_tensor(buf1655, (128, 2048, 2048), (4194304, 2048, 1)); del buf1655  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1740, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1741, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1742)
        buf1745 = reinterpret_tensor(buf1652, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1652  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1742, buf14, buf1745, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1746 = reinterpret_tensor(buf1741, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1741  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1733, buf1746, 33554432, grid=grid(33554432), stream=stream0)
        buf1747 = reinterpret_tensor(buf1733, (128, 2048, 128), (262144, 128, 1)); del buf1733  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1745, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1746, (128, 2048, 128), (262144, 128, 1), 0), out=buf1747)
        buf1748 = reinterpret_tensor(buf1746, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1746  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1747, buf1748, 33554432, grid=grid(33554432), stream=stream0)
        buf1749 = reinterpret_tensor(buf1747, (8192, 4096), (4096, 1)); del buf1747  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1748, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_329, (4096, 4096), (1, 4096), 0), out=buf1749)
        buf1751 = reinterpret_tensor(buf1748, (4, 2048, 4096), (8388608, 4096, 1)); del buf1748  # reuse
        # Source Nodes: [add_1566, add_1567, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1724, buf1749, primals_330, buf1751, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1752 = reinterpret_tensor(buf1665, (8192, 11008), (11008, 1)); del buf1665  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1751, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_331, (4096, 11008), (1, 4096), 0), out=buf1752)
        buf1753 = buf1664; del buf1664  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1751, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_332, (4096, 11008), (1, 4096), 0), out=buf1753)
        buf1754 = reinterpret_tensor(buf1752, (4, 2048, 11008), (22544384, 11008, 1)); del buf1752  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1754, buf1753, 90177536, grid=grid(90177536), stream=stream0)
        buf1755 = reinterpret_tensor(buf1751, (8192, 4096), (4096, 1)); del buf1751  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1754, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_333, (11008, 4096), (1, 11008), 0), out=buf1755)
        buf1757 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1758 = reinterpret_tensor(buf1740, (8192, 4096), (4096, 1)); del buf1740  # reuse
        # Source Nodes: [add_1566, add_1568, l__mod___dynamic_dense_27_w1, mean_27, mul_1539, pow_28, rsqrt_27], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1724, buf1749, buf1755, buf1757, buf1758, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1761 = empty_strided((4096, 120), (120, 1), device='cuda', dtype=torch.float16)
        buf1759 = reinterpret_tensor(buf1761, (4096, 116), (120, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_82.run(primals_439, buf1759, 4096, 116, grid=grid(4096, 116), stream=stream0)
        buf1760 = reinterpret_tensor(buf1761, (4096, 4), (120, 1), 116)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_83.run(buf1760, 16384, grid=grid(16384), stream=stream0)
        del buf1759
        del buf1760
        buf1762 = empty_strided((8192, 120), (120, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf1758, buf1761, out=buf1762)
        buf1763 = empty_strided((8192, 116), (116, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_27_act, l__mod___dynamic_dense_27_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_84.run(buf1762, buf1763, 950272, grid=grid(950272), stream=stream0)
        buf1764 = empty_strided((8192, 116), (116, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_27_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1763, reinterpret_tensor(primals_440, (116, 116), (1, 116), 0), out=buf1764)
        buf1804 = buf1732; del buf1732  # reuse
        buf1805 = buf1804; del buf1804  # reuse
        buf1806 = buf1805; del buf1805  # reuse
        buf1807 = buf1806; del buf1806  # reuse
        buf1808 = buf1807; del buf1807  # reuse
        buf1809 = buf1808; del buf1808  # reuse
        buf1810 = buf1809; del buf1809  # reuse
        buf1811 = buf1810; del buf1810  # reuse
        buf1812 = buf1811; del buf1811  # reuse
        buf1813 = buf1812; del buf1812  # reuse
        buf1814 = buf1813; del buf1813  # reuse
        buf1815 = buf1814; del buf1814  # reuse
        buf1816 = buf1815; del buf1815  # reuse
        buf1817 = reinterpret_tensor(buf1739, (4, 2048, 4096), (8388608, 4096, 1)); del buf1739  # reuse
        buf1819 = reinterpret_tensor(buf1736, (4, 2048, 4096), (8388608, 4096, 1)); del buf1736  # reuse
        buf1821 = buf1632; del buf1632  # reuse
        buf1823 = buf1698; del buf1698  # reuse
        buf1825 = buf1685; del buf1685  # reuse
        buf1827 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1568, add_1569, add_1570, add_1571, add_1572, add_1573, add_1574, add_1575, add_1576, add_1577, add_1578, add_1579, add_1580, add_1581, add_1582, add_1583, add_1584, add_1585, add_1586, add_1587, add_1588, add_1589, add_1590, add_1591, add_1592, add_1593, add_1594, add_1595, add_1596, add_1597, add_1598, add_1599, add_1600, add_1601, add_1602, add_1603, add_1604, add_1605, add_1606, add_1607, add_1608, add_1609, add_1610, add_1611, add_1612, add_1613, add_1614, add_1615, add_1616, add_1617, add_1618, add_1619, add_162, add_1620, add_1621, add_1622, add_1623, add_1624, add_1625, add_1626, add_1627, add_1628, add_1629, add_1630, add_1631, add_1632, add_1633, add_1634, add_1635, add_1636, add_1637, add_1638, add_1639, add_1640, add_1641, add_1642, add_1643, add_1644, add_1645, add_1646, add_1647, add_1648, add_1649, add_1650, add_1651, add_1652, add_1653, add_1654, add_1655, add_1656, add_1657, add_1658, add_1659, add_1660, add_1661, add_1662, add_1663, add_1664, add_1665, add_1666, add_1667, add_1668, add_1669, add_1670, add_1671, add_1672, add_1673, add_1674, add_1675, add_1676, add_1677, add_1678, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1540, mul_1541, mul_1542, mul_1543, mul_1544, mul_1545, mul_1546, mul_1547, mul_1548, mul_1549, mul_1550, mul_1551, mul_1552, mul_1553, mul_1554, mul_1555, mul_1556, mul_1557, mul_1558, mul_1559, mul_1560, mul_1561, mul_1562, mul_1563, mul_1564, mul_1565, mul_1566, mul_1567, mul_1568, mul_1569, mul_1570, mul_1571, mul_1572, mul_1573, mul_1574, mul_1575, mul_1576, mul_1577, mul_1578, mul_1579, mul_1580, mul_1581, mul_1582, mul_1583, mul_1584, mul_1585, mul_1586, mul_1587, mul_1588, mul_1589, mul_1590, mul_1591, mul_1592, mul_1593, mul_1594, mul_1595, mul_1596, mul_1597, mul_1598, mul_1599, mul_1600, mul_1601, mul_1602, mul_1603, mul_1604, mul_1605, mul_1606, mul_1607, mul_1608, mul_1609, mul_1610, mul_1611, mul_1612, mul_1613, mul_1614, mul_1615, mul_1616, mul_1617, mul_1618, mul_1619, mul_1620, mul_1621, mul_1622, mul_1623, mul_1624, mul_1625, mul_1626, mul_1627, mul_1628, mul_1629, mul_1630, mul_1631, mul_1632, mul_1633, mul_1634, mul_1635, mul_1636, mul_1637, mul_1638, mul_1639, mul_1640, mul_1641, mul_1642, mul_1643, mul_1644, mul_1645, mul_1646, mul_1647, mul_1648, mul_1649, mul_1650, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_85.run(buf1816, buf1764, primals_334, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, buf1546, buf1571, buf1577, buf1660, buf1666, primals_335, primals_336, primals_337, buf1817, buf1819, buf1821, buf1823, buf1825, buf1827, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1824 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1823, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_338, (4096, 4096), (1, 4096), 0), out=buf1824)
        buf1826 = reinterpret_tensor(buf1823, (8192, 4096), (4096, 1)); del buf1823  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1825, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_339, (4096, 4096), (1, 4096), 0), out=buf1826)
        buf1828 = reinterpret_tensor(buf1825, (8192, 4096), (4096, 1)); del buf1825  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1827, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_340, (4096, 4096), (1, 4096), 0), out=buf1828)
        buf1831 = reinterpret_tensor(buf1821, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1821  # reuse
        buf1829 = reinterpret_tensor(buf1831, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1830 = reinterpret_tensor(buf1831, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1834 = reinterpret_tensor(buf1819, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf1819  # reuse
        buf1832 = reinterpret_tensor(buf1834, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1833 = reinterpret_tensor(buf1834, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1824, primals_450, buf1826, buf1829, buf1830, buf1832, buf1833, 16777216, grid=grid(16777216), stream=stream0)
        buf1835 = reinterpret_tensor(buf1826, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1826  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1831, buf1835, 33554432, grid=grid(33554432), stream=stream0)
        del buf1829
        del buf1830
        del buf1832
        del buf1833
        buf1836 = reinterpret_tensor(buf1824, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1824  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1834, buf1836, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1837 = reinterpret_tensor(buf1745, (128, 2048, 2048), (4194304, 2048, 1)); del buf1745  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1835, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1836, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1837)
        buf1840 = reinterpret_tensor(buf1742, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1742  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1837, buf14, buf1840, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1841 = reinterpret_tensor(buf1836, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1836  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1828, buf1841, 33554432, grid=grid(33554432), stream=stream0)
        buf1842 = reinterpret_tensor(buf1828, (128, 2048, 128), (262144, 128, 1)); del buf1828  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1840, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1841, (128, 2048, 128), (262144, 128, 1), 0), out=buf1842)
        buf1843 = reinterpret_tensor(buf1841, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1841  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1842, buf1843, 33554432, grid=grid(33554432), stream=stream0)
        buf1844 = reinterpret_tensor(buf1842, (8192, 4096), (4096, 1)); del buf1842  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1843, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_341, (4096, 4096), (1, 4096), 0), out=buf1844)
        buf1845 = buf1816; del buf1816  # reuse
        buf1847 = reinterpret_tensor(buf1843, (4, 2048, 4096), (8388608, 4096, 1)); del buf1843  # reuse
        # Source Nodes: [add_1458, add_1679, add_1680, add_1681, float_6, mean_3, mul_1651, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_86.run(buf1845, buf1764, primals_334, buf1660, buf1666, buf1844, primals_342, buf1847, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1848 = reinterpret_tensor(buf1754, (8192, 11008), (11008, 1)); del buf1754  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1847, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_343, (4096, 11008), (1, 4096), 0), out=buf1848)
        buf1849 = buf1753; del buf1753  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1847, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_344, (4096, 11008), (1, 4096), 0), out=buf1849)
        buf1850 = reinterpret_tensor(buf1848, (4, 2048, 11008), (22544384, 11008, 1)); del buf1848  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1850, buf1849, 90177536, grid=grid(90177536), stream=stream0)
        buf1851 = reinterpret_tensor(buf1847, (8192, 4096), (4096, 1)); del buf1847  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1850, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_345, (11008, 4096), (1, 11008), 0), out=buf1851)
        buf1853 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1854 = buf1844; del buf1844  # reuse
        # Source Nodes: [add_1680, add_1682, l__mod___dynamic_dense_28_w1, mean_28, mul_1652, pow_29, rsqrt_28], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf1845, buf1851, buf1853, buf1854, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1855 = empty_strided((8192, 120), (120, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_28_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf1854, reinterpret_tensor(primals_441, (4096, 120), (1, 4096), 0), out=buf1855)
        buf1856 = empty_strided((8192, 120), (120, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_28_act, l__mod___dynamic_dense_28_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_87.run(buf1855, buf1856, 983040, grid=grid(983040), stream=stream0)
        buf1857 = empty_strided((8192, 120), (120, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_28_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1856, reinterpret_tensor(primals_442, (120, 120), (1, 120), 0), out=buf1857)
        buf1858 = reinterpret_tensor(buf1835, (4, 2048, 4096), (8388608, 4096, 1)); del buf1835  # reuse
        buf1872 = buf1827; del buf1827  # reuse
        buf1886 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1900 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1859 = buf1858; del buf1858  # reuse
        buf1873 = buf1872; del buf1872  # reuse
        buf1887 = buf1886; del buf1886  # reuse
        buf1901 = buf1900; del buf1900  # reuse
        buf1860 = buf1859; del buf1859  # reuse
        buf1874 = buf1873; del buf1873  # reuse
        buf1888 = buf1887; del buf1887  # reuse
        buf1902 = buf1901; del buf1901  # reuse
        buf1861 = buf1860; del buf1860  # reuse
        buf1875 = buf1874; del buf1874  # reuse
        buf1889 = buf1888; del buf1888  # reuse
        buf1903 = buf1902; del buf1902  # reuse
        buf1862 = buf1861; del buf1861  # reuse
        buf1876 = buf1875; del buf1875  # reuse
        buf1890 = buf1889; del buf1889  # reuse
        buf1904 = buf1903; del buf1903  # reuse
        buf1863 = buf1862; del buf1862  # reuse
        buf1877 = buf1876; del buf1876  # reuse
        buf1891 = buf1890; del buf1890  # reuse
        buf1905 = buf1904; del buf1904  # reuse
        buf1864 = buf1863; del buf1863  # reuse
        buf1878 = buf1877; del buf1877  # reuse
        buf1892 = buf1891; del buf1891  # reuse
        buf1906 = buf1905; del buf1905  # reuse
        buf1865 = buf1864; del buf1864  # reuse
        buf1879 = buf1878; del buf1878  # reuse
        buf1893 = buf1892; del buf1892  # reuse
        buf1907 = buf1906; del buf1906  # reuse
        buf1866 = buf1865; del buf1865  # reuse
        buf1880 = buf1879; del buf1879  # reuse
        buf1894 = buf1893; del buf1893  # reuse
        buf1908 = buf1907; del buf1907  # reuse
        buf1867 = buf1866; del buf1866  # reuse
        buf1881 = buf1880; del buf1880  # reuse
        buf1895 = buf1894; del buf1894  # reuse
        buf1909 = buf1908; del buf1908  # reuse
        buf1868 = buf1867; del buf1867  # reuse
        buf1882 = buf1881; del buf1881  # reuse
        buf1896 = buf1895; del buf1895  # reuse
        buf1910 = buf1909; del buf1909  # reuse
        buf1869 = buf1868; del buf1868  # reuse
        buf1883 = buf1882; del buf1882  # reuse
        buf1897 = buf1896; del buf1896  # reuse
        buf1911 = buf1910; del buf1910  # reuse
        buf1870 = buf1869; del buf1869  # reuse
        buf1884 = buf1883; del buf1883  # reuse
        buf1898 = buf1897; del buf1897  # reuse
        buf1912 = buf1911; del buf1911  # reuse
        buf1871 = buf1870; del buf1870  # reuse
        buf1885 = buf1884; del buf1884  # reuse
        buf1899 = buf1898; del buf1898  # reuse
        buf1913 = buf1912; del buf1912  # reuse
        buf1921 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1919 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf1917 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1683, add_1684, add_1685, add_1686, add_1687, add_1688, add_1689, add_1690, add_1691, add_1692, add_1693, add_1694, add_1695, add_1696, add_1697, add_1698, add_1699, add_1700, add_1701, add_1702, add_1703, add_1704, add_1705, add_1706, add_1707, add_1708, add_1709, add_1710, add_1711, add_1712, add_1713, add_1714, add_1715, add_1716, add_1717, add_1718, add_1719, add_1720, add_1721, add_1722, add_1723, add_1724, add_1725, add_1726, add_1727, add_1728, add_1729, add_1730, add_1731, add_1732, add_1733, add_1734, add_1735, add_1736, add_1737, add_1738, add_1739, add_1740, add_1741, add_1742, add_1743, add_1744, add_1745, add_1746, add_1747, add_1748, add_1749, add_1750, add_1751, add_1752, add_1753, add_1754, add_1755, add_1756, add_1757, add_1758, add_1759, add_1760, add_1761, add_1762, add_1763, add_1764, add_1765, add_1766, add_1767, add_1768, add_1769, add_1770, add_1771, add_1772, add_1773, add_1774, add_1775, add_1776, add_1777, add_1778, add_1779, add_1780, add_1781, add_1782, add_1783, add_1784, add_1785, add_1786, add_1787, add_1788, add_1789, add_1790, add_1791, add_1792, add_1793, add_1794, add_1795, add_1796, add_1797, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mean_2, mul, mul_1, mul_1653, mul_1654, mul_1655, mul_1656, mul_1657, mul_1658, mul_1659, mul_1660, mul_1661, mul_1662, mul_1663, mul_1664, mul_1665, mul_1666, mul_1667, mul_1668, mul_1669, mul_1670, mul_1671, mul_1672, mul_1673, mul_1674, mul_1675, mul_1676, mul_1677, mul_1678, mul_1679, mul_1680, mul_1681, mul_1682, mul_1683, mul_1684, mul_1685, mul_1686, mul_1687, mul_1688, mul_1689, mul_1690, mul_1691, mul_1692, mul_1693, mul_1694, mul_1695, mul_1696, mul_1697, mul_1698, mul_1699, mul_1700, mul_1701, mul_1702, mul_1703, mul_1704, mul_1705, mul_1706, mul_1707, mul_1708, mul_1709, mul_1710, mul_1711, mul_1712, mul_1713, mul_1714, mul_1715, mul_1716, mul_1717, mul_1718, mul_1719, mul_1720, mul_1721, mul_1722, mul_1723, mul_1724, mul_1725, mul_1726, mul_1727, mul_1728, mul_1729, mul_1730, mul_1731, mul_1732, mul_1733, mul_1734, mul_1735, mul_1736, mul_1737, mul_1738, mul_1739, mul_1740, mul_1741, mul_1742, mul_1743, mul_1744, mul_1745, mul_1746, mul_1747, mul_1748, mul_1749, mul_1750, mul_1751, mul_1752, mul_1753, mul_1754, mul_1755, mul_1756, mul_1757, mul_1758, mul_1759, mul_1760, mul_1761, mul_1762, mul_1763, mul_1764, mul_1765, mul_1766, mul_1767, mul_1768, mul_2, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt, rsqrt_1, rsqrt_2, type_as, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_88.run(buf1871, buf1885, buf1899, buf1913, buf1857, primals_346, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, buf1546, buf1571, buf1577, buf1660, buf1666, buf1724, buf1749, buf1755, primals_349, primals_348, primals_347, buf1921, buf1919, buf1917, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1918 = reinterpret_tensor(buf1899, (8192, 4096), (4096, 1)); del buf1899  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1917, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_350, (4096, 4096), (1, 4096), 0), out=buf1918)
        buf1920 = reinterpret_tensor(buf1917, (8192, 4096), (4096, 1)); del buf1917  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1919, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_351, (4096, 4096), (1, 4096), 0), out=buf1920)
        buf1922 = reinterpret_tensor(buf1919, (8192, 4096), (4096, 1)); del buf1919  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1921, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_352, (4096, 4096), (1, 4096), 0), out=buf1922)
        buf1925 = buf1834; del buf1834  # reuse
        buf1923 = reinterpret_tensor(buf1925, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1924 = reinterpret_tensor(buf1925, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf1928 = buf1831; del buf1831  # reuse
        buf1926 = reinterpret_tensor(buf1928, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf1927 = reinterpret_tensor(buf1928, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf1918, primals_450, buf1920, buf1923, buf1924, buf1926, buf1927, 16777216, grid=grid(16777216), stream=stream0)
        buf1929 = reinterpret_tensor(buf1920, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1920  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf1925, buf1929, 33554432, grid=grid(33554432), stream=stream0)
        del buf1923
        del buf1924
        del buf1926
        del buf1927
        buf1930 = reinterpret_tensor(buf1918, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf1918  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf1928, buf1930, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf1931 = reinterpret_tensor(buf1840, (128, 2048, 2048), (4194304, 2048, 1)); del buf1840  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1929, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf1930, (128, 128, 2048), (262144, 2048, 1), 0), out=buf1931)
        buf1934 = reinterpret_tensor(buf1837, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1837  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf1931, buf14, buf1934, 262144, 2048, grid=grid(262144), stream=stream0)
        buf1935 = reinterpret_tensor(buf1930, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf1930  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf1922, buf1935, 33554432, grid=grid(33554432), stream=stream0)
        buf1936 = reinterpret_tensor(buf1922, (128, 2048, 128), (262144, 128, 1)); del buf1922  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf1934, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf1935, (128, 2048, 128), (262144, 128, 1), 0), out=buf1936)
        buf1937 = reinterpret_tensor(buf1935, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf1935  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf1936, buf1937, 33554432, grid=grid(33554432), stream=stream0)
        buf1938 = reinterpret_tensor(buf1936, (8192, 4096), (4096, 1)); del buf1936  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1937, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_353, (4096, 4096), (1, 4096), 0), out=buf1938)
        buf1940 = reinterpret_tensor(buf1937, (4, 2048, 4096), (8388608, 4096, 1)); del buf1937  # reuse
        # Source Nodes: [add_1798, add_1799, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf1913, buf1938, primals_354, buf1940, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1941 = reinterpret_tensor(buf1850, (8192, 11008), (11008, 1)); del buf1850  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1940, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_355, (4096, 11008), (1, 4096), 0), out=buf1941)
        buf1942 = buf1849; del buf1849  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1940, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_356, (4096, 11008), (1, 4096), 0), out=buf1942)
        buf1943 = reinterpret_tensor(buf1941, (4, 2048, 11008), (22544384, 11008, 1)); del buf1941  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf1943, buf1942, 90177536, grid=grid(90177536), stream=stream0)
        buf1944 = reinterpret_tensor(buf1940, (8192, 4096), (4096, 1)); del buf1940  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf1943, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_357, (11008, 4096), (1, 11008), 0), out=buf1944)
        buf1946 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf1947 = reinterpret_tensor(buf1929, (8192, 4096), (4096, 1)); del buf1929  # reuse
        # Source Nodes: [add_1798, add_1800, l__mod___dynamic_dense_29_w1, mean_29, mul_1769, pow_30, rsqrt_29], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf1913, buf1938, buf1944, buf1946, buf1947, 8192, 4096, grid=grid(8192), stream=stream0)
        buf1950 = empty_strided((4096, 128), (128, 1), device='cuda', dtype=torch.float16)
        buf1948 = reinterpret_tensor(buf1950, (4096, 124), (128, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_89.run(primals_443, buf1948, 4096, 124, grid=grid(4096, 124), stream=stream0)
        buf1949 = reinterpret_tensor(buf1950, (4096, 4), (128, 1), 124)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_90.run(buf1949, 16384, grid=grid(16384), stream=stream0)
        del buf1948
        del buf1949
        buf1951 = empty_strided((8192, 128), (128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf1947, buf1950, out=buf1951)
        buf1952 = empty_strided((8192, 124), (124, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_29_act, l__mod___dynamic_dense_29_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_91.run(buf1951, buf1952, 1015808, grid=grid(1015808), stream=stream0)
        buf1953 = empty_strided((8192, 124), (124, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_29_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf1952, reinterpret_tensor(primals_444, (124, 124), (1, 124), 0), out=buf1953)
        buf1996 = buf1921; del buf1921  # reuse
        buf1997 = buf1996; del buf1996  # reuse
        buf1998 = buf1997; del buf1997  # reuse
        buf1999 = buf1998; del buf1998  # reuse
        buf2000 = buf1999; del buf1999  # reuse
        buf2001 = buf2000; del buf2000  # reuse
        buf2002 = buf2001; del buf2001  # reuse
        buf2003 = buf2002; del buf2002  # reuse
        buf2004 = buf2003; del buf2003  # reuse
        buf2005 = buf2004; del buf2004  # reuse
        buf2006 = buf2005; del buf2005  # reuse
        buf2007 = buf2006; del buf2006  # reuse
        buf2008 = buf2007; del buf2007  # reuse
        buf2009 = buf2008; del buf2008  # reuse
        buf2010 = reinterpret_tensor(buf1928, (4, 2048, 4096), (8388608, 4096, 1)); del buf1928  # reuse
        buf2012 = reinterpret_tensor(buf1925, (4, 2048, 4096), (8388608, 4096, 1)); del buf1925  # reuse
        buf2014 = buf1817; del buf1817  # reuse
        buf2016 = buf1885; del buf1885  # reuse
        buf2018 = buf1871; del buf1871  # reuse
        # Source Nodes: [add, add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1800, add_1801, add_1802, add_1803, add_1804, add_1805, add_1806, add_1807, add_1808, add_1809, add_1810, add_1811, add_1812, add_1813, add_1814, add_1815, add_1816, add_1817, add_1818, add_1819, add_1820, add_1821, add_1822, add_1823, add_1824, add_1825, add_1826, add_1827, add_1828, add_1829, add_1830, add_1831, add_1832, add_1833, add_1834, add_1835, add_1836, add_1837, add_1838, add_1839, add_1840, add_1841, add_1842, add_1843, add_1844, add_1845, add_1846, add_1847, add_1848, add_1849, add_1850, add_1851, add_1852, add_1853, add_1854, add_1855, add_1856, add_1857, add_1858, add_1859, add_1860, add_1861, add_1862, add_1863, add_1864, add_1865, add_1866, add_1867, add_1868, add_1869, add_1870, add_1871, add_1872, add_1873, add_1874, add_1875, add_1876, add_1877, add_1878, add_1879, add_1880, add_1881, add_1882, add_1883, add_1884, add_1885, add_1886, add_1887, add_1888, add_1889, add_1890, add_1891, add_1892, add_1893, add_1894, add_1895, add_1896, add_1897, add_1898, add_1899, add_1900, add_1901, add_1902, add_1903, add_1904, add_1905, add_1906, add_1907, add_1908, add_1909, add_1910, add_1911, add_1912, add_1913, add_1914, add_1915, add_1916, add_1917, add_1918, add_198, add_20, add_200, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, float_2, float_3, mean, mean_1, mul, mul_1, mul_1770, mul_1771, mul_1772, mul_1773, mul_1774, mul_1775, mul_1776, mul_1777, mul_1778, mul_1779, mul_1780, mul_1781, mul_1782, mul_1783, mul_1784, mul_1785, mul_1786, mul_1787, mul_1788, mul_1789, mul_1790, mul_1791, mul_1792, mul_1793, mul_1794, mul_1795, mul_1796, mul_1797, mul_1798, mul_1799, mul_1800, mul_1801, mul_1802, mul_1803, mul_1804, mul_1805, mul_1806, mul_1807, mul_1808, mul_1809, mul_1810, mul_1811, mul_1812, mul_1813, mul_1814, mul_1815, mul_1816, mul_1817, mul_1818, mul_1819, mul_1820, mul_1821, mul_1822, mul_1823, mul_1824, mul_1825, mul_1826, mul_1827, mul_1828, mul_1829, mul_1830, mul_1831, mul_1832, mul_1833, mul_1834, mul_1835, mul_1836, mul_1837, mul_1838, mul_1839, mul_1840, mul_1841, mul_1842, mul_1843, mul_1844, mul_1845, mul_1846, mul_1847, mul_1848, mul_1849, mul_1850, mul_1851, mul_1852, mul_1853, mul_1854, mul_1855, mul_1856, mul_1857, mul_1858, mul_1859, mul_1860, mul_1861, mul_1862, mul_1863, mul_1864, mul_1865, mul_1866, mul_1867, mul_1868, mul_1869, mul_1870, mul_1871, mul_1872, mul_1873, mul_1874, mul_1875, mul_1876, mul_1877, mul_1878, mul_1879, mul_1880, mul_1881, mul_1882, mul_1883, mul_1884, mul_1885, mul_1886, mul_1887, mul_1888, mul_2, mul_3, mul_4, mul_5, rsqrt, rsqrt_1, type_as, type_as_1], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_92.run(buf2009, buf1953, primals_358, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, buf1546, buf1571, buf1577, buf1660, buf1666, buf1724, buf1749, buf1755, buf1845, buf1851, primals_359, primals_360, buf2010, buf2012, buf2014, buf2016, buf2018, 8192, 4096, grid=grid(8192), stream=stream0)
        del buf2010
        buf2020 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1890, mean_2, mul_6, mul_7, mul_8, rsqrt_2, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_93.run(buf2014, primals_361, buf2020, 8192, 4096, grid=grid(8192), stream=stream0)
        buf2017 = empty_strided((8192, 4096), (4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2016, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_362, (4096, 4096), (1, 4096), 0), out=buf2017)
        buf2019 = reinterpret_tensor(buf2016, (8192, 4096), (4096, 1)); del buf2016  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2018, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_363, (4096, 4096), (1, 4096), 0), out=buf2019)
        buf2021 = reinterpret_tensor(buf2018, (8192, 4096), (4096, 1)); del buf2018  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2020, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_364, (4096, 4096), (1, 4096), 0), out=buf2021)
        buf2024 = reinterpret_tensor(buf2014, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf2014  # reuse
        buf2022 = reinterpret_tensor(buf2024, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf2023 = reinterpret_tensor(buf2024, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf2027 = reinterpret_tensor(buf2012, (4, 2048, 32, 64, 2), (8388608, 4096, 128, 2, 1)); del buf2012  # reuse
        buf2025 = reinterpret_tensor(buf2027, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf2026 = reinterpret_tensor(buf2027, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf2017, primals_450, buf2019, buf2022, buf2023, buf2025, buf2026, 16777216, grid=grid(16777216), stream=stream0)
        buf2028 = reinterpret_tensor(buf2019, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf2019  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf2024, buf2028, 33554432, grid=grid(33554432), stream=stream0)
        del buf2022
        del buf2023
        del buf2025
        del buf2026
        buf2029 = reinterpret_tensor(buf2017, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf2017  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf2027, buf2029, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf2030 = reinterpret_tensor(buf1934, (128, 2048, 2048), (4194304, 2048, 1)); del buf1934  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2028, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf2029, (128, 128, 2048), (262144, 2048, 1), 0), out=buf2030)
        buf2033 = reinterpret_tensor(buf1931, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf1931  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf2030, buf14, buf2033, 262144, 2048, grid=grid(262144), stream=stream0)
        buf2034 = reinterpret_tensor(buf2029, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf2029  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf2021, buf2034, 33554432, grid=grid(33554432), stream=stream0)
        buf2035 = reinterpret_tensor(buf2021, (128, 2048, 128), (262144, 128, 1)); del buf2021  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2033, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf2034, (128, 2048, 128), (262144, 128, 1), 0), out=buf2035)
        buf2036 = reinterpret_tensor(buf2034, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf2034  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf2035, buf2036, 33554432, grid=grid(33554432), stream=stream0)
        buf2037 = reinterpret_tensor(buf2035, (8192, 4096), (4096, 1)); del buf2035  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2036, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_365, (4096, 4096), (1, 4096), 0), out=buf2037)
        buf2038 = buf2009; del buf2009  # reuse
        buf2040 = reinterpret_tensor(buf2036, (4, 2048, 4096), (8388608, 4096, 1)); del buf2036  # reuse
        # Source Nodes: [add_1682, add_1919, add_1920, add_1921, float_6, mean_3, mul_18, mul_1889, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_94.run(buf2038, buf1953, primals_358, buf1845, buf1851, buf2037, primals_366, buf2040, 8192, 4096, grid=grid(8192), stream=stream0)
        buf2041 = reinterpret_tensor(buf1943, (8192, 11008), (11008, 1)); del buf1943  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2040, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_367, (4096, 11008), (1, 4096), 0), out=buf2041)
        buf2042 = buf1942; del buf1942  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2040, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_368, (4096, 11008), (1, 4096), 0), out=buf2042)
        buf2043 = reinterpret_tensor(buf2041, (4, 2048, 11008), (22544384, 11008, 1)); del buf2041  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf2043, buf2042, 90177536, grid=grid(90177536), stream=stream0)
        buf2044 = reinterpret_tensor(buf2040, (8192, 4096), (4096, 1)); del buf2040  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2043, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_369, (11008, 4096), (1, 11008), 0), out=buf2044)
        buf2046 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf2047 = buf2037; del buf2037  # reuse
        # Source Nodes: [add_1920, add_1922, l__mod___dynamic_dense_30_w1, mean_30, mul_1890, pow_31, rsqrt_30], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_19.run(buf2038, buf2044, buf2046, buf2047, 8192, 4096, grid=grid(8192), stream=stream0)
        buf2048 = empty_strided((8192, 128), (128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_30_w1], Original ATen: [aten.mm]
        extern_kernels.mm(buf2047, reinterpret_tensor(primals_445, (4096, 128), (1, 4096), 0), out=buf2048)
        buf2049 = empty_strided((8192, 128), (128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_30_act, l__mod___dynamic_dense_30_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_95.run(buf2048, buf2049, 1048576, grid=grid(1048576), stream=stream0)
        buf2050 = empty_strided((8192, 128), (128, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_30_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf2049, reinterpret_tensor(primals_446, (128, 128), (1, 128), 0), out=buf2050)
        buf2051 = reinterpret_tensor(buf2028, (4, 2048, 4096), (8388608, 4096, 1)); del buf2028  # reuse
        buf2066 = buf2020; del buf2020  # reuse
        buf2081 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf2096 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf2052 = buf2051; del buf2051  # reuse
        buf2067 = buf2066; del buf2066  # reuse
        buf2082 = buf2081; del buf2081  # reuse
        buf2097 = buf2096; del buf2096  # reuse
        buf2053 = buf2052; del buf2052  # reuse
        buf2068 = buf2067; del buf2067  # reuse
        buf2083 = buf2082; del buf2082  # reuse
        buf2098 = buf2097; del buf2097  # reuse
        buf2054 = buf2053; del buf2053  # reuse
        buf2069 = buf2068; del buf2068  # reuse
        buf2084 = buf2083; del buf2083  # reuse
        buf2099 = buf2098; del buf2098  # reuse
        buf2055 = buf2054; del buf2054  # reuse
        buf2070 = buf2069; del buf2069  # reuse
        buf2085 = buf2084; del buf2084  # reuse
        buf2100 = buf2099; del buf2099  # reuse
        buf2056 = buf2055; del buf2055  # reuse
        buf2071 = buf2070; del buf2070  # reuse
        buf2086 = buf2085; del buf2085  # reuse
        buf2101 = buf2100; del buf2100  # reuse
        buf2057 = buf2056; del buf2056  # reuse
        buf2072 = buf2071; del buf2071  # reuse
        buf2087 = buf2086; del buf2086  # reuse
        buf2102 = buf2101; del buf2101  # reuse
        buf2058 = buf2057; del buf2057  # reuse
        buf2073 = buf2072; del buf2072  # reuse
        buf2088 = buf2087; del buf2087  # reuse
        buf2103 = buf2102; del buf2102  # reuse
        buf2059 = buf2058; del buf2058  # reuse
        buf2074 = buf2073; del buf2073  # reuse
        buf2089 = buf2088; del buf2088  # reuse
        buf2104 = buf2103; del buf2103  # reuse
        buf2060 = buf2059; del buf2059  # reuse
        buf2075 = buf2074; del buf2074  # reuse
        buf2090 = buf2089; del buf2089  # reuse
        buf2105 = buf2104; del buf2104  # reuse
        buf2061 = buf2060; del buf2060  # reuse
        buf2076 = buf2075; del buf2075  # reuse
        buf2091 = buf2090; del buf2090  # reuse
        buf2106 = buf2105; del buf2105  # reuse
        buf2062 = buf2061; del buf2061  # reuse
        buf2077 = buf2076; del buf2076  # reuse
        buf2092 = buf2091; del buf2091  # reuse
        buf2107 = buf2106; del buf2106  # reuse
        buf2063 = buf2062; del buf2062  # reuse
        buf2078 = buf2077; del buf2077  # reuse
        buf2093 = buf2092; del buf2092  # reuse
        buf2108 = buf2107; del buf2107  # reuse
        buf2064 = buf2063; del buf2063  # reuse
        buf2079 = buf2078; del buf2078  # reuse
        buf2094 = buf2093; del buf2093  # reuse
        buf2109 = buf2108; del buf2108  # reuse
        buf2065 = buf2064; del buf2064  # reuse
        buf2080 = buf2079; del buf2079  # reuse
        buf2095 = buf2094; del buf2094  # reuse
        buf2110 = buf2109; del buf2109  # reuse
        buf2118 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        buf2116 = empty_strided((4, 2048, 4096), (8388608, 4096, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1798, add_1800, add_1922, add_1923, add_1924, add_1925, add_1926, add_1927, add_1928, add_1929, add_1930, add_1931, add_1932, add_1933, add_1934, add_1935, add_1936, add_1937, add_1938, add_1939, add_1940, add_1941, add_1942, add_1943, add_1944, add_1945, add_1946, add_1947, add_1948, add_1949, add_1950, add_1951, add_1952, add_1953, add_1954, add_1955, add_1956, add_1957, add_1958, add_1959, add_1960, add_1961, add_1962, add_1963, add_1964, add_1965, add_1966, add_1967, add_1968, add_1969, add_1970, add_1971, add_1972, add_1973, add_1974, add_1975, add_1976, add_1977, add_1978, add_1979, add_198, add_1980, add_1981, add_1982, add_1983, add_1984, add_1985, add_1986, add_1987, add_1988, add_1989, add_1990, add_1991, add_1992, add_1993, add_1994, add_1995, add_1996, add_1997, add_1998, add_1999, add_20, add_200, add_2000, add_2001, add_2002, add_2003, add_2004, add_2005, add_2006, add_2007, add_2008, add_2009, add_2010, add_2011, add_2012, add_2013, add_2014, add_2015, add_2016, add_2017, add_2018, add_2019, add_2020, add_2021, add_2022, add_2023, add_2024, add_2025, add_2026, add_2027, add_2028, add_2029, add_2030, add_2031, add_2032, add_2033, add_2034, add_2035, add_2036, add_2037, add_2038, add_2039, add_2040, add_2041, add_2042, add_2043, add_2044, add_2045, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_2, float_3, mean_1, mean_2, mul_1891, mul_1892, mul_1893, mul_1894, mul_1895, mul_1896, mul_1897, mul_1898, mul_1899, mul_1900, mul_1901, mul_1902, mul_1903, mul_1904, mul_1905, mul_1906, mul_1907, mul_1908, mul_1909, mul_1910, mul_1911, mul_1912, mul_1913, mul_1914, mul_1915, mul_1916, mul_1917, mul_1918, mul_1919, mul_1920, mul_1921, mul_1922, mul_1923, mul_1924, mul_1925, mul_1926, mul_1927, mul_1928, mul_1929, mul_1930, mul_1931, mul_1932, mul_1933, mul_1934, mul_1935, mul_1936, mul_1937, mul_1938, mul_1939, mul_1940, mul_1941, mul_1942, mul_1943, mul_1944, mul_1945, mul_1946, mul_1947, mul_1948, mul_1949, mul_1950, mul_1951, mul_1952, mul_1953, mul_1954, mul_1955, mul_1956, mul_1957, mul_1958, mul_1959, mul_1960, mul_1961, mul_1962, mul_1963, mul_1964, mul_1965, mul_1966, mul_1967, mul_1968, mul_1969, mul_1970, mul_1971, mul_1972, mul_1973, mul_1974, mul_1975, mul_1976, mul_1977, mul_1978, mul_1979, mul_1980, mul_1981, mul_1982, mul_1983, mul_1984, mul_1985, mul_1986, mul_1987, mul_1988, mul_1989, mul_1990, mul_1991, mul_1992, mul_1993, mul_1994, mul_1995, mul_1996, mul_1997, mul_1998, mul_1999, mul_2000, mul_2001, mul_2002, mul_2003, mul_2004, mul_2005, mul_2006, mul_2007, mul_2008, mul_2009, mul_2010, mul_2011, mul_2012, mul_2013, mul_2014, mul_3, mul_4, mul_5, mul_6, mul_7, mul_8, rsqrt_1, rsqrt_2, type_as_1, type_as_2], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_96.run(buf2065, buf2080, buf2095, buf2110, buf2050, primals_370, buf0, buf21, buf27, buf65, buf100, buf106, buf116, buf141, buf147, buf186, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1012, buf1018, buf1060, buf1085, buf1091, buf1162, buf1168, buf1214, buf1239, buf1245, buf1320, buf1326, buf1376, buf1401, buf1407, buf1486, buf1492, buf1546, buf1571, buf1577, buf1660, buf1666, buf1724, buf1749, buf1755, buf1845, buf1851, buf1913, buf1938, buf1944, primals_373, primals_372, buf2118, buf2116, 8192, 4096, grid=grid(8192), stream=stream0)
        del buf2080
        buf2114 = buf2095; del buf2095  # reuse
        # Source Nodes: [add, float_1, mean, mul, mul_1, mul_2, rsqrt, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_97.run(buf2065, primals_371, buf2114, 8192, 4096, grid=grid(8192), stream=stream0)
        buf2115 = reinterpret_tensor(buf2065, (8192, 4096), (4096, 1)); del buf2065  # reuse
        # Source Nodes: [linear], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2114, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_374, (4096, 4096), (1, 4096), 0), out=buf2115)
        buf2117 = reinterpret_tensor(buf2114, (8192, 4096), (4096, 1)); del buf2114  # reuse
        # Source Nodes: [linear_1], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2116, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_375, (4096, 4096), (1, 4096), 0), out=buf2117)
        buf2119 = reinterpret_tensor(buf2116, (8192, 4096), (4096, 1)); del buf2116  # reuse
        # Source Nodes: [linear_2], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2118, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_376, (4096, 4096), (1, 4096), 0), out=buf2119)
        del buf2118
        buf2122 = buf2027; del buf2027  # reuse
        buf2120 = reinterpret_tensor(buf2122, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf2121 = reinterpret_tensor(buf2122, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        buf2125 = buf2024; del buf2024  # reuse
        buf2123 = reinterpret_tensor(buf2125, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 0)  # alias
        buf2124 = reinterpret_tensor(buf2125, (4, 2048, 32, 64, 1), (8388608, 4096, 128, 2, 1), 1)  # alias
        # Source Nodes: [stack, stack_1], Original ATen: [aten.stack]
        triton_poi_fused_stack_1.run(buf2115, primals_450, buf2117, buf2120, buf2121, buf2123, buf2124, 16777216, grid=grid(16777216), stream=stream0)
        buf2126 = reinterpret_tensor(buf2117, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf2117  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_3.run(buf2122, buf2126, 33554432, grid=grid(33554432), stream=stream0)
        del buf2120
        del buf2121
        del buf2122
        del buf2123
        del buf2124
        buf2127 = reinterpret_tensor(buf2115, (4, 32, 128, 2048), (8388608, 262144, 2048, 1)); del buf2115  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.clone]
        triton_poi_fused_clone_4.run(buf2125, buf2127, 16384, 2048, grid=grid(16384, 2048), stream=stream0)
        buf2128 = reinterpret_tensor(buf2033, (128, 2048, 2048), (4194304, 2048, 1)); del buf2033  # reuse
        # Source Nodes: [matmul], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2126, (128, 2048, 128), (262144, 128, 1), 0), reinterpret_tensor(buf2127, (128, 128, 2048), (262144, 2048, 1), 0), out=buf2128)
        buf2131 = reinterpret_tensor(buf2030, (4, 32, 2048, 2048), (134217728, 4194304, 2048, 1)); del buf2030  # reuse
        # Source Nodes: [mul_17, softmax, where], Original ATen: [aten._softmax, aten.mul, aten.where]
        triton_red_fused__softmax_mul_where_6.run(buf10, buf2128, buf14, buf2131, 262144, 2048, grid=grid(262144), stream=stream0)
        del buf2128
        buf2132 = reinterpret_tensor(buf2127, (4, 32, 2048, 128), (8388608, 262144, 128, 1)); del buf2127  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.clone]
        triton_poi_fused_clone_7.run(buf2119, buf2132, 33554432, grid=grid(33554432), stream=stream0)
        buf2133 = reinterpret_tensor(buf2119, (128, 2048, 128), (262144, 128, 1)); del buf2119  # reuse
        # Source Nodes: [matmul_1], Original ATen: [aten.bmm]
        extern_kernels.bmm(reinterpret_tensor(buf2131, (128, 2048, 2048), (4194304, 2048, 1), 0), reinterpret_tensor(buf2132, (128, 2048, 128), (262144, 128, 1), 0), out=buf2133)
        del buf2131
        buf2134 = reinterpret_tensor(buf2132, (4, 2048, 32, 128), (8388608, 4096, 128, 1)); del buf2132  # reuse
        # Source Nodes: [contiguous], Original ATen: [aten.clone]
        triton_poi_fused_clone_8.run(buf2133, buf2134, 33554432, grid=grid(33554432), stream=stream0)
        buf2135 = reinterpret_tensor(buf2133, (8192, 4096), (4096, 1)); del buf2133  # reuse
        # Source Nodes: [linear_3], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2134, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_377, (4096, 4096), (1, 4096), 0), out=buf2135)
        buf2137 = reinterpret_tensor(buf2134, (4, 2048, 4096), (8388608, 4096, 1)); del buf2134  # reuse
        # Source Nodes: [add_2046, add_2047, float_6, mean_3, mul_18, mul_19, mul_20, rsqrt_3, type_as_5], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_9.run(buf2110, buf2135, primals_378, buf2137, 8192, 4096, grid=grid(8192), stream=stream0)
        buf2138 = reinterpret_tensor(buf2043, (8192, 11008), (11008, 1)); del buf2043  # reuse
        # Source Nodes: [linear_4], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2137, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_379, (4096, 11008), (1, 4096), 0), out=buf2138)
        buf2139 = buf2042; del buf2042  # reuse
        # Source Nodes: [linear_5], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2137, (8192, 4096), (4096, 1), 0), reinterpret_tensor(primals_380, (4096, 11008), (1, 4096), 0), out=buf2139)
        buf2140 = reinterpret_tensor(buf2138, (4, 2048, 11008), (22544384, 11008, 1)); del buf2138  # reuse
        # Source Nodes: [mul_21, silu], Original ATen: [aten.mul, aten.silu]
        triton_poi_fused_mul_silu_10.run(buf2140, buf2139, 90177536, grid=grid(90177536), stream=stream0)
        del buf2139
        buf2141 = reinterpret_tensor(buf2137, (8192, 4096), (4096, 1)); del buf2137  # reuse
        # Source Nodes: [linear_6], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(buf2140, (8192, 11008), (11008, 1), 0), reinterpret_tensor(primals_381, (11008, 4096), (1, 11008), 0), out=buf2141)
        del buf2140
        buf2143 = empty_strided((4, 2048, 1), (2048, 1, 1), device='cuda', dtype=torch.float16)
        buf2144 = reinterpret_tensor(buf2126, (8192, 4096), (4096, 1)); del buf2126  # reuse
        # Source Nodes: [add_2046, add_2048, l__mod___dynamic_dense_31_w1, mean_31, mul_2015, pow_32, rsqrt_31], Original ATen: [aten.add, aten.mean, aten.mul, aten.pow, aten.rsqrt, aten.view]
        triton_red_fused_add_mean_mul_pow_rsqrt_view_11.run(buf2110, buf2135, buf2141, buf2143, buf2144, 8192, 4096, grid=grid(8192), stream=stream0)
        del buf2110
        del buf2135
        buf2147 = empty_strided((4096, 136), (136, 1), device='cuda', dtype=torch.float16)
        buf2145 = reinterpret_tensor(buf2147, (4096, 132), (136, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_98.run(primals_447, buf2145, 4096, 132, grid=grid(4096, 132), stream=stream0)
        buf2146 = reinterpret_tensor(buf2147, (4096, 4), (136, 1), 132)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_99.run(buf2146, 16384, grid=grid(16384), stream=stream0)
        del buf2145
        del buf2146
        buf2148 = empty_strided((8192, 136), (136, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf2144, buf2147, out=buf2148)
        buf2149 = empty_strided((8192, 132), (132, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_31_act, l__mod___dynamic_dense_31_w2], Original ATen: [aten.gelu, aten.view]
        triton_poi_fused_gelu_view_100.run(buf2148, buf2149, 1081344, grid=grid(1081344), stream=stream0)
        buf2150 = empty_strided((8192, 132), (132, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [l__mod___dynamic_dense_31_w2], Original ATen: [aten.mm]
        extern_kernels.mm(buf2149, reinterpret_tensor(primals_448, (132, 132), (1, 132), 0), out=buf2150)
        buf2151 = reinterpret_tensor(buf21, (4, 2048, 4096), (8388608, 4096, 1)); del buf21  # reuse
        buf2152 = buf100; del buf100  # reuse
        buf2153 = buf186; del buf186  # reuse
        buf2154 = buf2153; del buf2153  # reuse
        buf2155 = buf2154; del buf2154  # reuse
        buf2156 = buf2155; del buf2155  # reuse
        buf2157 = buf2156; del buf2156  # reuse
        buf2158 = buf2157; del buf2157  # reuse
        buf2159 = buf2158; del buf2158  # reuse
        buf2160 = buf1012; del buf1012  # reuse
        buf2161 = buf1162; del buf1162  # reuse
        buf2162 = buf1320; del buf1320  # reuse
        buf2163 = buf1486; del buf1486  # reuse
        buf2164 = buf1660; del buf1660  # reuse
        buf2165 = buf1845; del buf1845  # reuse
        buf2166 = reinterpret_tensor(buf2125, (4, 2048, 4096), (8388608, 4096, 1)); del buf2125  # reuse
        buf2167 = empty_strided((4, 2048, 1), (2048, 1, 8192), device='cuda', dtype=torch.float32)
        buf2168 = reinterpret_tensor(buf2167, (4, 2048, 1), (2048, 1, 1)); del buf2167  # reuse
        buf2169 = buf2141; del buf2141  # reuse
        # Source Nodes: [add_1058, add_1150, add_1152, add_1250, add_126, add_128, add_1350, add_1352, add_1458, add_1566, add_1568, add_162, add_1682, add_1798, add_1800, add_1922, add_198, add_20, add_200, add_2080, add_2081, add_2082, add_2083, add_2084, add_2085, add_2086, add_2087, add_2088, add_2089, add_2090, add_2091, add_2092, add_2093, add_2094, add_2095, add_2096, add_2097, add_2098, add_2099, add_2100, add_2101, add_2102, add_2103, add_2104, add_2105, add_2106, add_2107, add_2108, add_2109, add_2110, add_2111, add_2176, add_242, add_286, add_288, add_3, add_31, add_33, add_338, add_390, add_392, add_450, add_5, add_50, add_510, add_512, add_578, add_646, add_648, add_70, add_72, add_722, add_798, add_800, add_882, add_966, add_968, add_98, float_1, l__mod___output, mean_32, mul_2048, mul_2049, mul_2050, mul_2051, mul_2052, mul_2053, mul_2054, mul_2055, mul_2056, mul_2057, mul_2058, mul_2059, mul_2060, mul_2061, mul_2062, mul_2063, mul_2064, mul_2065, mul_2066, mul_2067, mul_2068, mul_2069, mul_2070, mul_2071, mul_2072, mul_2073, mul_2074, mul_2075, mul_2076, mul_2077, mul_2078, mul_2079, mul_2144, mul_2145, mul_2146, rsqrt_32, type_as], Original ATen: [aten._to_copy, aten.add, aten.mean, aten.mul, aten.rsqrt, aten.view]
        triton_red_fused__to_copy_add_mean_mul_rsqrt_view_101.run(buf2151, buf2152, buf2159, buf2160, buf2161, buf2162, buf2163, buf2164, buf2165, buf2168, buf2150, primals_382, buf0, buf27, buf65, buf106, buf116, buf141, buf147, buf192, buf206, buf231, buf237, buf280, buf286, buf304, buf329, buf335, buf382, buf388, buf410, buf435, buf441, buf492, buf498, buf524, buf549, buf555, buf610, buf616, buf646, buf671, buf677, buf736, buf742, buf776, buf801, buf807, buf870, buf876, buf914, buf939, buf945, buf1018, buf1060, buf1085, buf1091, buf1168, buf1214, buf1239, buf1245, buf1326, buf1376, buf1401, buf1407, buf1492, buf1546, buf1571, buf1577, buf1666, buf1724, buf1749, buf1755, buf1851, buf1913, buf1938, buf1944, buf2038, buf2044, primals_383, buf2166, buf2169, 8192, 4096, grid=grid(8192), stream=stream0)
        del buf1018
        del buf106
        del buf1060
        del buf1085
        del buf1091
        del buf116
        del buf1168
        del buf1214
        del buf1239
        del buf1245
        del buf1326
        del buf1376
        del buf1401
        del buf1407
        del buf141
        del buf147
        del buf1492
        del buf1546
        del buf1571
        del buf1577
        del buf1666
        del buf1724
        del buf1749
        del buf1755
        del buf1851
        del buf1913
        del buf192
        del buf1938
        del buf1944
        del buf2038
        del buf2044
        del buf206
        del buf2151
        del buf2152
        del buf2159
        del buf2160
        del buf2161
        del buf2162
        del buf2163
        del buf2164
        del buf2165
        del buf2166
        del buf231
        del buf237
        del buf27
        del buf280
        del buf286
        del buf304
        del buf329
        del buf335
        del buf382
        del buf388
        del buf410
        del buf435
        del buf441
        del buf492
        del buf498
        del buf524
        del buf549
        del buf555
        del buf610
        del buf616
        del buf646
        del buf65
        del buf671
        del buf677
        del buf736
        del buf742
        del buf776
        del buf801
        del buf807
        del buf870
        del buf876
        del buf914
        del buf939
        del buf945
        buf2172 = empty_strided((4096, 50264), (50264, 1), device='cuda', dtype=torch.float16)
        buf2170 = reinterpret_tensor(buf2172, (4096, 50257), (50264, 1), 0)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_102.run(primals_449, buf2170, 4096, 50257, grid=grid(4096, 50257), stream=stream0)
        buf2171 = reinterpret_tensor(buf2172, (4096, 7), (50264, 1), 50257)  # alias
        # Source Nodes: [], Original ATen: []
        triton_poi_fused_103.run(buf2171, 28672, grid=grid(28672), stream=stream0)
        del buf2170
        del buf2171
        buf2173 = empty_strided((8192, 50264), (50264, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [], Original ATen: []
        extern_kernels.mm(buf2169, buf2172, out=buf2173)
        del buf2172
        buf2176 = empty_strided((8192, 50257), (50257, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [cross_entropy], Original ATen: [aten._log_softmax]
        triton_red_fused__log_softmax_104.run(buf2173, buf2176, 8192, 50257, grid=grid(8192), stream=stream0)
        del buf2173
        buf2179 = empty_strided((), (), device='cuda', dtype=torch.float16)
        buf2178 = empty_strided((), (), device='cuda', dtype=torch.float16)
        buf2180 = buf2179; del buf2179  # reuse
        # Source Nodes: [cross_entropy], Original ATen: [aten.nll_loss_forward]
        triton_red_fused_nll_loss_forward_105.run(buf2180, primals_453, buf2176, buf2178, 1, 8192, grid=grid(1), stream=stream0)
        buf2181 = empty_strided((2048, 64, 2), (128, 2, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [getitem_1], Original ATen: [aten.index]
        triton_poi_fused_index_106.run(primals_450, buf2181, 262144, grid=grid(262144), stream=stream0)
        del primals_450
        buf2182 = empty_strided((4, 4, 2048, 2), (16384, 4096, 2, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1], Original ATen: [aten.add]
        triton_poi_fused_add_107.run(buf33, primals_10, buf2182, 65536, grid=grid(65536), stream=stream0)
        del buf33
        del primals_10
        buf2183 = empty_strided((4, 4, 2048, 3), (24576, 6144, 3, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_7], Original ATen: [aten.add]
        triton_poi_fused_add_108.run(buf71, primals_22, buf2183, 98304, grid=grid(98304), stream=stream0)
        del buf71
        del primals_22
        buf2184 = empty_strided((4, 4, 2048, 4), (32768, 8192, 4, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_17], Original ATen: [aten.add]
        triton_poi_fused_add_109.run(buf112, primals_34, buf2184, 131072, grid=grid(131072), stream=stream0)
        del buf112
        del primals_34
        buf2185 = empty_strided((4, 4, 2048, 5), (40960, 10240, 5, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_31], Original ATen: [aten.add]
        triton_poi_fused_add_110.run(buf153, primals_46, buf2185, 163840, grid=grid(163840), stream=stream0)
        del buf153
        del primals_46
        buf2186 = empty_strided((4, 4, 2048, 6), (49152, 12288, 6, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_49], Original ATen: [aten.add]
        triton_poi_fused_add_111.run(buf198, primals_58, buf2186, 196608, grid=grid(196608), stream=stream0)
        del buf198
        del primals_58
        buf2187 = empty_strided((4, 4, 2048, 7), (57344, 14336, 7, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_71], Original ATen: [aten.add]
        triton_poi_fused_add_112.run(buf243, primals_70, buf2187, 229376, grid=grid(229376), stream=stream0)
        del buf243
        del primals_70
        buf2188 = empty_strided((4, 4, 2048, 8), (65536, 16384, 8, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_97], Original ATen: [aten.add]
        triton_poi_fused_add_113.run(buf292, primals_82, buf2188, 262144, grid=grid(262144), stream=stream0)
        del buf292
        del primals_82
        buf2189 = empty_strided((4, 4, 2048, 9), (73728, 18432, 9, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_127], Original ATen: [aten.add]
        triton_poi_fused_add_114.run(buf341, primals_94, buf2189, 294912, grid=grid(294912), stream=stream0)
        del buf341
        del primals_94
        buf2190 = empty_strided((4, 4, 2048, 10), (81920, 20480, 10, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_161], Original ATen: [aten.add]
        triton_poi_fused_add_115.run(buf394, primals_106, buf2190, 327680, grid=grid(327680), stream=stream0)
        del buf394
        del primals_106
        buf2191 = empty_strided((4, 4, 2048, 11), (90112, 22528, 11, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_199], Original ATen: [aten.add]
        triton_poi_fused_add_116.run(buf447, primals_118, buf2191, 360448, grid=grid(360448), stream=stream0)
        del buf447
        del primals_118
        buf2192 = empty_strided((4, 4, 2048, 12), (98304, 24576, 12, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_241], Original ATen: [aten.add]
        triton_poi_fused_add_117.run(buf504, primals_130, buf2192, 393216, grid=grid(393216), stream=stream0)
        del buf504
        del primals_130
        buf2193 = empty_strided((4, 4, 2048, 13), (106496, 26624, 13, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_287], Original ATen: [aten.add]
        triton_poi_fused_add_118.run(buf561, primals_142, buf2193, 425984, grid=grid(425984), stream=stream0)
        del buf561
        del primals_142
        buf2194 = empty_strided((4, 4, 2048, 14), (114688, 28672, 14, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_337], Original ATen: [aten.add]
        triton_poi_fused_add_119.run(buf622, primals_154, buf2194, 458752, grid=grid(458752), stream=stream0)
        del buf622
        del primals_154
        buf2195 = reinterpret_tensor(buf1761, (4, 4, 2048, 15), (122880, 30720, 15, 1)); del buf1761  # reuse
        # Source Nodes: [add_391], Original ATen: [aten.add]
        triton_poi_fused_add_120.run(buf683, primals_166, buf2195, 491520, grid=grid(491520), stream=stream0)
        del buf683
        del primals_166
        buf2196 = reinterpret_tensor(buf1950, (4, 4, 2048, 16), (131072, 32768, 16, 1)); del buf1950  # reuse
        # Source Nodes: [add_449], Original ATen: [aten.add]
        triton_poi_fused_add_121.run(buf748, primals_178, buf2196, 524288, grid=grid(524288), stream=stream0)
        del buf748
        del primals_178
        buf2197 = reinterpret_tensor(buf2147, (4, 4, 2048, 17), (139264, 34816, 17, 1)); del buf2147  # reuse
        # Source Nodes: [add_511], Original ATen: [aten.add]
        triton_poi_fused_add_122.run(buf813, primals_190, buf2197, 557056, grid=grid(557056), stream=stream0)
        del buf813
        del primals_190
        buf2198 = empty_strided((4, 4, 2048, 18), (147456, 36864, 18, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_577], Original ATen: [aten.add]
        triton_poi_fused_add_123.run(buf882, primals_202, buf2198, 589824, grid=grid(589824), stream=stream0)
        del buf882
        del primals_202
        buf2199 = empty_strided((4, 4, 2048, 19), (155648, 38912, 19, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_647], Original ATen: [aten.add]
        triton_poi_fused_add_124.run(buf951, primals_214, buf2199, 622592, grid=grid(622592), stream=stream0)
        del buf951
        del primals_214
        buf2200 = empty_strided((4, 4, 2048, 20), (163840, 40960, 20, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_721], Original ATen: [aten.add]
        triton_poi_fused_add_125.run(buf1024, primals_226, buf2200, 655360, grid=grid(655360), stream=stream0)
        del buf1024
        del primals_226
        buf2201 = empty_strided((4, 4, 2048, 21), (172032, 43008, 21, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_799], Original ATen: [aten.add]
        triton_poi_fused_add_126.run(buf1097, primals_238, buf2201, 688128, grid=grid(688128), stream=stream0)
        del buf1097
        del primals_238
        buf2202 = empty_strided((4, 4, 2048, 22), (180224, 45056, 22, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_881], Original ATen: [aten.add]
        triton_poi_fused_add_127.run(buf1174, primals_250, buf2202, 720896, grid=grid(720896), stream=stream0)
        del buf1174
        del primals_250
        buf2203 = empty_strided((4, 4, 2048, 23), (188416, 47104, 23, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_967], Original ATen: [aten.add]
        triton_poi_fused_add_128.run(buf1251, primals_262, buf2203, 753664, grid=grid(753664), stream=stream0)
        del buf1251
        del primals_262
        buf2204 = empty_strided((4, 4, 2048, 24), (196608, 49152, 24, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1057], Original ATen: [aten.add]
        triton_poi_fused_add_129.run(buf1332, primals_274, buf2204, 786432, grid=grid(786432), stream=stream0)
        del buf1332
        del primals_274
        buf2205 = empty_strided((4, 4, 2048, 25), (204800, 51200, 25, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1151], Original ATen: [aten.add]
        triton_poi_fused_add_130.run(buf1413, primals_286, buf2205, 819200, grid=grid(819200), stream=stream0)
        del buf1413
        del primals_286
        buf2206 = empty_strided((4, 4, 2048, 26), (212992, 53248, 26, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1249], Original ATen: [aten.add]
        triton_poi_fused_add_131.run(buf1498, primals_298, buf2206, 851968, grid=grid(851968), stream=stream0)
        del buf1498
        del primals_298
        buf2207 = empty_strided((4, 4, 2048, 27), (221184, 55296, 27, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1351], Original ATen: [aten.add]
        triton_poi_fused_add_132.run(buf1583, primals_310, buf2207, 884736, grid=grid(884736), stream=stream0)
        del buf1583
        del primals_310
        buf2208 = empty_strided((4, 4, 2048, 28), (229376, 57344, 28, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1457], Original ATen: [aten.add]
        triton_poi_fused_add_133.run(buf1672, primals_322, buf2208, 917504, grid=grid(917504), stream=stream0)
        del buf1672
        del primals_322
        buf2209 = empty_strided((4, 4, 2048, 29), (237568, 59392, 29, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1567], Original ATen: [aten.add]
        triton_poi_fused_add_134.run(buf1764, primals_334, buf2209, 950272, grid=grid(950272), stream=stream0)
        del buf1764
        del primals_334
        buf2210 = empty_strided((4, 4, 2048, 30), (245760, 61440, 30, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1681], Original ATen: [aten.add]
        triton_poi_fused_add_135.run(buf1857, primals_346, buf2210, 983040, grid=grid(983040), stream=stream0)
        del buf1857
        del primals_346
        buf2211 = empty_strided((4, 4, 2048, 31), (253952, 63488, 31, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1799], Original ATen: [aten.add]
        triton_poi_fused_add_136.run(buf1953, primals_358, buf2211, 1015808, grid=grid(1015808), stream=stream0)
        del buf1953
        del primals_358
        buf2212 = empty_strided((4, 4, 2048, 32), (262144, 65536, 32, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_1921], Original ATen: [aten.add]
        triton_poi_fused_add_137.run(buf2050, primals_370, buf2212, 1048576, grid=grid(1048576), stream=stream0)
        del buf2050
        del primals_370
        buf2213 = empty_strided((4, 4, 2048, 33), (270336, 67584, 33, 1), device='cuda', dtype=torch.float16)
        # Source Nodes: [add_2047], Original ATen: [aten.add]
        triton_poi_fused_add_138.run(buf2150, primals_382, buf2213, 1081344, grid=grid(1081344), stream=stream0)
        del buf2150
        del primals_382
        return (buf2180, primals_6, primals_11, primals_12, primals_13, primals_18, primals_23, primals_24, primals_25, primals_30, primals_35, primals_36, primals_37, primals_42, primals_47, primals_48, primals_49, primals_54, primals_59, primals_60, primals_61, primals_66, primals_71, primals_72, primals_73, primals_78, primals_83, primals_84, primals_85, primals_90, primals_95, primals_96, primals_97, primals_102, primals_107, primals_108, primals_109, primals_114, primals_119, primals_120, primals_121, primals_126, primals_131, primals_132, primals_133, primals_138, primals_143, primals_144, primals_145, primals_150, primals_155, primals_156, primals_157, primals_162, primals_167, primals_168, primals_169, primals_174, primals_179, primals_180, primals_181, primals_186, primals_191, primals_192, primals_193, primals_198, primals_203, primals_204, primals_205, primals_210, primals_215, primals_216, primals_217, primals_222, primals_227, primals_228, primals_229, primals_234, primals_239, primals_240, primals_241, primals_246, primals_251, primals_252, primals_253, primals_258, primals_263, primals_264, primals_265, primals_270, primals_275, primals_276, primals_277, primals_282, primals_287, primals_288, primals_289, primals_294, primals_299, primals_300, primals_301, primals_306, primals_311, primals_312, primals_313, primals_318, primals_323, primals_324, primals_325, primals_330, primals_335, primals_336, primals_337, primals_342, primals_347, primals_348, primals_349, primals_354, primals_359, primals_360, primals_361, primals_366, primals_371, primals_372, primals_373, primals_378, primals_383, primals_452, primals_453, buf0, reinterpret_tensor(primals_2, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_3, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_4, (4096, 4096), (1, 4096), 0), reinterpret_tensor(buf2181, (1, 2048, 1, 64), (0, 128, 0, 2), 0), reinterpret_tensor(buf2181, (1, 2048, 1, 64), (0, 128, 0, 2), 1), buf10, buf14, reinterpret_tensor(primals_5, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_7, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_8, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_9, (11008, 4096), (1, 11008), 0), buf29, buf30, buf31, buf32, reinterpret_tensor(buf2182, (4, 2048, 1), (4096, 2, 0), 0), reinterpret_tensor(buf2182, (4, 2048, 1), (4096, 2, 0), 16384), reinterpret_tensor(buf2182, (4, 2048, 1), (4096, 2, 0), 32768), reinterpret_tensor(buf2182, (4, 2048, 1), (4096, 2, 0), 49152), reinterpret_tensor(primals_14, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_15, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_16, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_17, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_19, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_20, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_21, (11008, 4096), (1, 11008), 0), buf67, buf68, buf69, buf70, reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 0), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 1), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 24576), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 24577), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 49152), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 49153), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 73728), reinterpret_tensor(buf2183, (4, 2048, 1), (6144, 3, 0), 73729), reinterpret_tensor(primals_26, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_27, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_28, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_29, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_31, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_32, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_33, (11008, 4096), (1, 11008), 0), buf108, buf109, buf110, buf111, reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 0), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 1), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 2), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 32768), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 32769), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 32770), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 65536), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 65537), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 65538), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 98304), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 98305), reinterpret_tensor(buf2184, (4, 2048, 1), (8192, 4, 0), 98306), reinterpret_tensor(primals_38, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_39, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_40, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_41, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_43, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_44, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_45, (11008, 4096), (1, 11008), 0), buf149, buf150, buf151, buf152, reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 0), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 1), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 2), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 3), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 40960), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 40961), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 40962), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 40963), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 81920), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 81921), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 81922), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 81923), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 122880), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 122881), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 122882), reinterpret_tensor(buf2185, (4, 2048, 1), (10240, 5, 0), 122883), reinterpret_tensor(primals_50, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_51, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_52, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_53, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_55, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_56, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_57, (11008, 4096), (1, 11008), 0), buf194, buf195, buf196, buf197, reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 0), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 1), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 2), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 3), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 4), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 49152), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 49153), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 49154), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 49155), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 49156), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 98304), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 98305), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 98306), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 98307), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 98308), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 147456), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 147457), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 147458), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 147459), reinterpret_tensor(buf2186, (4, 2048, 1), (12288, 6, 0), 147460), reinterpret_tensor(primals_62, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_63, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_64, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_65, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_67, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_68, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_69, (11008, 4096), (1, 11008), 0), buf239, buf240, buf241, buf242, reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 0), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 1), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 2), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 3), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 4), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 5), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57344), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57345), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57346), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57347), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57348), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 57349), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114688), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114689), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114690), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114691), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114692), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 114693), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172032), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172033), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172034), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172035), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172036), reinterpret_tensor(buf2187, (4, 2048, 1), (14336, 7, 0), 172037), reinterpret_tensor(primals_74, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_75, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_76, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_77, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_79, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_80, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_81, (11008, 4096), (1, 11008), 0), buf288, buf289, buf290, buf291, reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 0), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 1), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 2), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 3), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 4), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 5), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 6), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65536), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65537), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65538), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65539), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65540), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65541), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 65542), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131072), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131073), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131074), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131075), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131076), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131077), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 131078), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196608), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196609), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196610), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196611), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196612), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196613), reinterpret_tensor(buf2188, (4, 2048, 1), (16384, 8, 0), 196614), reinterpret_tensor(primals_86, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_87, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_88, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_89, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_91, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_92, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_93, (11008, 4096), (1, 11008), 0), buf337, buf338, buf339, buf340, reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 0), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 1), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 2), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 3), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 4), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 5), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 6), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 7), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73728), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73729), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73730), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73731), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73732), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73733), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73734), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 73735), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147456), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147457), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147458), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147459), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147460), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147461), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147462), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 147463), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221184), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221185), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221186), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221187), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221188), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221189), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221190), reinterpret_tensor(buf2189, (4, 2048, 1), (18432, 9, 0), 221191), reinterpret_tensor(primals_98, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_99, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_100, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_101, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_103, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_104, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_105, (11008, 4096), (1, 11008), 0), buf390, buf391, buf392, buf393, reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 0), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 1), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 2), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 3), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 4), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 5), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 6), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 7), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 8), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81920), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81921), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81922), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81923), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81924), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81925), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81926), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81927), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 81928), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163840), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163841), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163842), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163843), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163844), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163845), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163846), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163847), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 163848), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245760), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245761), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245762), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245763), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245764), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245765), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245766), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245767), reinterpret_tensor(buf2190, (4, 2048, 1), (20480, 10, 0), 245768), reinterpret_tensor(primals_110, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_111, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_112, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_113, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_115, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_116, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_117, (11008, 4096), (1, 11008), 0), buf443, buf444, buf445, buf446, reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 0), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 1), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 2), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 3), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 4), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 5), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 6), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 7), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 8), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 9), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90112), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90113), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90114), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90115), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90116), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90117), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90118), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90119), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90120), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 90121), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180224), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180225), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180226), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180227), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180228), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180229), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180230), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180231), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180232), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 180233), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270336), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270337), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270338), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270339), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270340), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270341), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270342), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270343), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270344), reinterpret_tensor(buf2191, (4, 2048, 1), (22528, 11, 0), 270345), reinterpret_tensor(primals_122, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_123, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_124, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_125, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_127, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_128, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_129, (11008, 4096), (1, 11008), 0), buf500, buf501, buf502, buf503, reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 0), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 1), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 2), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 3), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 4), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 5), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 6), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 7), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 8), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 9), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 10), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98304), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98305), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98306), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98307), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98308), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98309), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98310), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98311), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98312), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98313), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 98314), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196608), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196609), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196610), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196611), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196612), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196613), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196614), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196615), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196616), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196617), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 196618), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294912), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294913), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294914), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294915), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294916), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294917), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294918), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294919), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294920), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294921), reinterpret_tensor(buf2192, (4, 2048, 1), (24576, 12, 0), 294922), reinterpret_tensor(primals_134, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_135, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_136, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_137, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_139, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_140, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_141, (11008, 4096), (1, 11008), 0), buf557, buf558, buf559, buf560, reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 0), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 1), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 2), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 3), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 4), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 5), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 6), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 7), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 8), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 9), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 10), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 11), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106496), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106497), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106498), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106499), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106500), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106501), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106502), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106503), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106504), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106505), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106506), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 106507), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212992), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212993), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212994), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212995), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212996), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212997), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212998), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 212999), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 213000), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 213001), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 213002), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 213003), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319488), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319489), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319490), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319491), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319492), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319493), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319494), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319495), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319496), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319497), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319498), reinterpret_tensor(buf2193, (4, 2048, 1), (26624, 13, 0), 319499), reinterpret_tensor(primals_146, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_147, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_148, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_149, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_151, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_152, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_153, (11008, 4096), (1, 11008), 0), buf618, buf619, buf620, buf621, reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 0), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 1), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 2), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 3), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 4), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 5), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 6), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 7), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 8), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 9), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 10), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 11), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 12), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114688), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114689), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114690), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114691), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114692), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114693), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114694), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114695), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114696), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114697), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114698), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114699), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 114700), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229376), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229377), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229378), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229379), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229380), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229381), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229382), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229383), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229384), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229385), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229386), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229387), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 229388), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344064), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344065), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344066), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344067), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344068), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344069), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344070), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344071), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344072), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344073), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344074), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344075), reinterpret_tensor(buf2194, (4, 2048, 1), (28672, 14, 0), 344076), reinterpret_tensor(primals_158, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_159, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_160, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_161, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_163, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_164, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_165, (11008, 4096), (1, 11008), 0), buf679, buf680, buf681, buf682, reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 0), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 1), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 2), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 3), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 4), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 5), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 6), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 7), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 8), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 9), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 10), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 11), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 12), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 13), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122880), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122881), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122882), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122883), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122884), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122885), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122886), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122887), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122888), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122889), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122890), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122891), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122892), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 122893), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245760), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245761), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245762), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245763), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245764), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245765), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245766), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245767), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245768), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245769), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245770), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245771), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245772), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 245773), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368640), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368641), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368642), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368643), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368644), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368645), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368646), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368647), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368648), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368649), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368650), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368651), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368652), reinterpret_tensor(buf2195, (4, 2048, 1), (30720, 15, 0), 368653), reinterpret_tensor(primals_170, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_171, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_172, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_173, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_175, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_176, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_177, (11008, 4096), (1, 11008), 0), buf744, buf745, buf746, buf747, reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 0), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 1), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 2), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 3), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 4), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 5), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 6), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 7), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 8), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 9), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 10), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 11), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 12), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 13), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 14), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131072), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131073), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131074), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131075), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131076), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131077), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131078), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131079), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131080), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131081), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131082), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131083), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131084), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131085), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 131086), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262144), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262145), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262146), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262147), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262148), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262149), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262150), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262151), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262152), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262153), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262154), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262155), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262156), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262157), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 262158), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393216), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393217), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393218), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393219), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393220), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393221), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393222), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393223), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393224), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393225), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393226), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393227), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393228), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393229), reinterpret_tensor(buf2196, (4, 2048, 1), (32768, 16, 0), 393230), reinterpret_tensor(primals_182, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_183, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_184, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_185, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_187, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_188, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_189, (11008, 4096), (1, 11008), 0), buf809, buf810, buf811, buf812, reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 0), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 1), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 2), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 3), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 4), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 5), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 6), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 7), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 8), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 9), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 10), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 11), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 12), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 13), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 14), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 15), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139264), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139265), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139266), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139267), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139268), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139269), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139270), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139271), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139272), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139273), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139274), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139275), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139276), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139277), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139278), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 139279), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278528), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278529), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278530), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278531), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278532), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278533), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278534), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278535), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278536), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278537), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278538), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278539), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278540), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278541), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278542), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 278543), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417792), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417793), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417794), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417795), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417796), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417797), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417798), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417799), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417800), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417801), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417802), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417803), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417804), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417805), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417806), reinterpret_tensor(buf2197, (4, 2048, 1), (34816, 17, 0), 417807), reinterpret_tensor(primals_194, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_195, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_196, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_197, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_199, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_200, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_201, (11008, 4096), (1, 11008), 0), buf878, buf879, buf880, buf881, reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 0), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 1), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 2), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 3), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 4), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 5), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 6), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 7), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 8), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 9), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 10), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 11), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 12), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 13), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 14), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 15), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 16), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147456), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147457), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147458), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147459), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147460), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147461), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147462), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147463), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147464), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147465), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147466), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147467), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147468), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147469), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147470), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147471), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 147472), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294912), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294913), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294914), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294915), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294916), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294917), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294918), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294919), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294920), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294921), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294922), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294923), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294924), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294925), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294926), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294927), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 294928), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442368), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442369), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442370), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442371), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442372), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442373), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442374), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442375), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442376), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442377), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442378), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442379), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442380), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442381), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442382), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442383), reinterpret_tensor(buf2198, (4, 2048, 1), (36864, 18, 0), 442384), reinterpret_tensor(primals_206, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_207, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_208, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_209, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_211, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_212, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_213, (11008, 4096), (1, 11008), 0), buf947, buf948, buf949, buf950, reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 0), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 1), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 2), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 3), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 4), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 5), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 6), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 7), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 8), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 9), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 10), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 11), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 12), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 13), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 14), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 15), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 16), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 17), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155648), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155649), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155650), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155651), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155652), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155653), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155654), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155655), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155656), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155657), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155658), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155659), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155660), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155661), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155662), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155663), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155664), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 155665), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311296), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311297), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311298), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311299), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311300), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311301), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311302), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311303), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311304), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311305), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311306), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311307), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311308), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311309), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311310), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311311), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311312), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 311313), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466944), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466945), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466946), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466947), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466948), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466949), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466950), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466951), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466952), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466953), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466954), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466955), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466956), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466957), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466958), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466959), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466960), reinterpret_tensor(buf2199, (4, 2048, 1), (38912, 19, 0), 466961), reinterpret_tensor(primals_218, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_219, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_220, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_221, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_223, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_224, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_225, (11008, 4096), (1, 11008), 0), buf1020, buf1021, buf1022, buf1023, reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 0), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 1), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 2), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 3), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 4), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 5), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 6), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 7), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 8), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 9), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 10), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 11), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 12), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 13), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 14), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 15), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 16), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 17), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 18), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163840), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163841), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163842), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163843), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163844), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163845), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163846), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163847), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163848), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163849), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163850), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163851), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163852), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163853), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163854), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163855), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163856), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163857), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 163858), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327680), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327681), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327682), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327683), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327684), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327685), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327686), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327687), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327688), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327689), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327690), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327691), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327692), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327693), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327694), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327695), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327696), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327697), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 327698), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491520), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491521), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491522), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491523), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491524), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491525), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491526), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491527), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491528), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491529), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491530), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491531), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491532), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491533), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491534), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491535), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491536), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491537), reinterpret_tensor(buf2200, (4, 2048, 1), (40960, 20, 0), 491538), reinterpret_tensor(primals_230, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_231, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_232, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_233, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_235, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_236, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_237, (11008, 4096), (1, 11008), 0), buf1093, buf1094, buf1095, buf1096, reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 0), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 1), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 2), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 3), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 4), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 5), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 6), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 7), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 8), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 9), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 10), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 11), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 12), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 13), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 14), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 15), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 16), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 17), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 18), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 19), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172032), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172033), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172034), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172035), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172036), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172037), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172038), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172039), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172040), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172041), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172042), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172043), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172044), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172045), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172046), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172047), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172048), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172049), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172050), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 172051), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344064), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344065), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344066), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344067), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344068), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344069), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344070), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344071), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344072), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344073), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344074), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344075), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344076), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344077), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344078), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344079), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344080), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344081), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344082), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 344083), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516096), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516097), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516098), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516099), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516100), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516101), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516102), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516103), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516104), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516105), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516106), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516107), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516108), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516109), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516110), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516111), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516112), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516113), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516114), reinterpret_tensor(buf2201, (4, 2048, 1), (43008, 21, 0), 516115), reinterpret_tensor(primals_242, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_243, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_244, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_245, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_247, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_248, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_249, (11008, 4096), (1, 11008), 0), buf1170, buf1171, buf1172, buf1173, reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 0), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 1), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 2), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 3), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 4), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 5), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 6), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 7), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 8), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 9), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 10), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 11), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 12), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 13), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 14), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 15), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 16), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 17), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 18), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 19), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 20), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180224), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180225), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180226), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180227), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180228), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180229), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180230), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180231), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180232), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180233), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180234), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180235), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180236), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180237), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180238), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180239), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180240), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180241), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180242), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180243), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 180244), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360448), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360449), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360450), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360451), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360452), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360453), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360454), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360455), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360456), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360457), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360458), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360459), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360460), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360461), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360462), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360463), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360464), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360465), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360466), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360467), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 360468), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540672), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540673), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540674), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540675), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540676), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540677), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540678), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540679), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540680), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540681), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540682), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540683), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540684), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540685), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540686), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540687), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540688), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540689), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540690), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540691), reinterpret_tensor(buf2202, (4, 2048, 1), (45056, 22, 0), 540692), reinterpret_tensor(primals_254, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_255, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_256, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_257, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_259, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_260, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_261, (11008, 4096), (1, 11008), 0), buf1247, buf1248, buf1249, buf1250, reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 0), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 1), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 2), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 3), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 4), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 5), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 6), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 7), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 8), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 9), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 10), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 11), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 12), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 13), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 14), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 15), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 16), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 17), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 18), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 19), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 20), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 21), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188416), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188417), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188418), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188419), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188420), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188421), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188422), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188423), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188424), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188425), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188426), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188427), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188428), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188429), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188430), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188431), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188432), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188433), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188434), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188435), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188436), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 188437), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376832), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376833), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376834), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376835), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376836), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376837), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376838), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376839), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376840), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376841), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376842), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376843), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376844), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376845), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376846), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376847), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376848), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376849), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376850), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376851), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376852), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 376853), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565248), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565249), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565250), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565251), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565252), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565253), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565254), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565255), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565256), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565257), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565258), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565259), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565260), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565261), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565262), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565263), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565264), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565265), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565266), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565267), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565268), reinterpret_tensor(buf2203, (4, 2048, 1), (47104, 23, 0), 565269), reinterpret_tensor(primals_266, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_267, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_268, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_269, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_271, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_272, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_273, (11008, 4096), (1, 11008), 0), buf1328, buf1329, buf1330, buf1331, reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 0), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 1), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 2), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 3), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 4), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 5), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 6), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 7), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 8), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 9), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 10), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 11), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 12), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 13), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 14), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 15), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 16), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 17), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 18), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 19), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 20), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 21), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 22), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196608), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196609), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196610), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196611), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196612), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196613), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196614), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196615), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196616), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196617), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196618), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196619), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196620), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196621), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196622), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196623), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196624), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196625), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196626), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196627), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196628), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196629), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 196630), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393216), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393217), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393218), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393219), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393220), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393221), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393222), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393223), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393224), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393225), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393226), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393227), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393228), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393229), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393230), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393231), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393232), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393233), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393234), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393235), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393236), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393237), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 393238), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589824), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589825), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589826), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589827), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589828), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589829), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589830), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589831), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589832), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589833), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589834), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589835), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589836), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589837), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589838), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589839), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589840), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589841), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589842), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589843), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589844), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589845), reinterpret_tensor(buf2204, (4, 2048, 1), (49152, 24, 0), 589846), reinterpret_tensor(primals_278, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_279, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_280, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_281, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_283, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_284, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_285, (11008, 4096), (1, 11008), 0), buf1409, buf1410, buf1411, buf1412, reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 0), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 1), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 2), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 3), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 4), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 5), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 6), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 7), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 8), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 9), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 10), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 11), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 12), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 13), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 14), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 15), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 16), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 17), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 18), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 19), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 20), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 21), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 22), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 23), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204800), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204801), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204802), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204803), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204804), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204805), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204806), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204807), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204808), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204809), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204810), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204811), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204812), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204813), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204814), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204815), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204816), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204817), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204818), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204819), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204820), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204821), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204822), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 204823), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409600), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409601), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409602), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409603), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409604), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409605), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409606), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409607), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409608), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409609), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409610), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409611), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409612), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409613), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409614), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409615), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409616), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409617), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409618), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409619), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409620), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409621), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409622), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 409623), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614400), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614401), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614402), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614403), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614404), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614405), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614406), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614407), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614408), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614409), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614410), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614411), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614412), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614413), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614414), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614415), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614416), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614417), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614418), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614419), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614420), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614421), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614422), reinterpret_tensor(buf2205, (4, 2048, 1), (51200, 25, 0), 614423), reinterpret_tensor(primals_290, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_291, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_292, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_293, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_295, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_296, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_297, (11008, 4096), (1, 11008), 0), buf1494, buf1495, buf1496, buf1497, reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 0), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 1), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 2), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 3), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 4), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 5), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 6), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 7), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 8), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 9), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 10), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 11), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 12), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 13), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 14), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 15), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 16), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 17), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 18), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 19), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 20), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 21), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 22), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 23), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 24), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212992), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212993), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212994), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212995), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212996), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212997), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212998), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 212999), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213000), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213001), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213002), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213003), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213004), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213005), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213006), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213007), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213008), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213009), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213010), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213011), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213012), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213013), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213014), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213015), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 213016), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425984), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425985), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425986), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425987), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425988), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425989), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425990), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425991), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425992), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425993), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425994), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425995), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425996), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425997), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425998), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 425999), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426000), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426001), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426002), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426003), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426004), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426005), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426006), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426007), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 426008), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638976), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638977), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638978), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638979), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638980), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638981), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638982), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638983), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638984), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638985), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638986), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638987), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638988), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638989), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638990), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638991), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638992), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638993), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638994), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638995), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638996), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638997), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638998), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 638999), reinterpret_tensor(buf2206, (4, 2048, 1), (53248, 26, 0), 639000), reinterpret_tensor(primals_302, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_303, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_304, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_305, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_307, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_308, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_309, (11008, 4096), (1, 11008), 0), buf1579, buf1580, buf1581, buf1582, reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 0), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 1), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 2), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 3), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 4), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 5), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 6), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 7), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 8), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 9), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 10), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 11), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 12), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 13), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 14), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 15), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 16), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 17), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 18), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 19), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 20), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 21), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 22), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 23), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 24), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 25), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221184), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221185), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221186), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221187), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221188), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221189), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221190), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221191), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221192), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221193), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221194), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221195), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221196), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221197), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221198), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221199), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221200), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221201), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221202), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221203), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221204), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221205), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221206), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221207), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221208), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 221209), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442368), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442369), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442370), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442371), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442372), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442373), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442374), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442375), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442376), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442377), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442378), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442379), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442380), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442381), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442382), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442383), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442384), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442385), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442386), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442387), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442388), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442389), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442390), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442391), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442392), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 442393), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663552), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663553), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663554), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663555), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663556), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663557), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663558), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663559), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663560), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663561), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663562), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663563), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663564), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663565), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663566), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663567), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663568), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663569), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663570), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663571), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663572), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663573), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663574), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663575), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663576), reinterpret_tensor(buf2207, (4, 2048, 1), (55296, 27, 0), 663577), reinterpret_tensor(primals_314, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_315, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_316, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_317, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_319, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_320, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_321, (11008, 4096), (1, 11008), 0), buf1668, buf1669, buf1670, buf1671, reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 0), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 1), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 2), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 3), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 4), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 5), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 6), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 7), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 8), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 9), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 10), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 11), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 12), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 13), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 14), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 15), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 16), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 17), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 18), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 19), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 20), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 21), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 22), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 23), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 24), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 25), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 26), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229376), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229377), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229378), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229379), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229380), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229381), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229382), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229383), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229384), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229385), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229386), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229387), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229388), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229389), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229390), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229391), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229392), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229393), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229394), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229395), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229396), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229397), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229398), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229399), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229400), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229401), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 229402), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458752), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458753), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458754), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458755), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458756), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458757), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458758), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458759), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458760), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458761), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458762), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458763), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458764), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458765), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458766), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458767), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458768), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458769), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458770), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458771), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458772), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458773), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458774), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458775), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458776), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458777), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 458778), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688128), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688129), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688130), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688131), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688132), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688133), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688134), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688135), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688136), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688137), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688138), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688139), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688140), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688141), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688142), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688143), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688144), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688145), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688146), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688147), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688148), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688149), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688150), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688151), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688152), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688153), reinterpret_tensor(buf2208, (4, 2048, 1), (57344, 28, 0), 688154), reinterpret_tensor(primals_326, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_327, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_328, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_329, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_331, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_332, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_333, (11008, 4096), (1, 11008), 0), buf1757, buf1758, buf1762, buf1763, reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 0), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 1), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 2), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 3), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 4), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 5), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 6), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 7), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 8), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 9), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 10), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 11), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 12), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 13), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 14), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 15), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 16), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 17), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 18), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 19), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 20), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 21), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 22), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 23), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 24), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 25), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 26), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 27), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237568), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237569), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237570), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237571), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237572), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237573), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237574), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237575), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237576), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237577), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237578), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237579), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237580), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237581), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237582), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237583), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237584), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237585), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237586), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237587), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237588), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237589), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237590), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237591), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237592), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237593), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237594), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 237595), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475136), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475137), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475138), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475139), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475140), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475141), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475142), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475143), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475144), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475145), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475146), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475147), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475148), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475149), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475150), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475151), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475152), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475153), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475154), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475155), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475156), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475157), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475158), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475159), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475160), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475161), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475162), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 475163), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712704), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712705), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712706), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712707), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712708), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712709), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712710), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712711), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712712), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712713), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712714), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712715), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712716), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712717), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712718), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712719), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712720), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712721), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712722), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712723), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712724), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712725), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712726), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712727), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712728), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712729), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712730), reinterpret_tensor(buf2209, (4, 2048, 1), (59392, 29, 0), 712731), reinterpret_tensor(primals_338, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_339, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_340, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_341, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_343, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_344, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_345, (11008, 4096), (1, 11008), 0), buf1853, buf1854, buf1855, buf1856, reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 0), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 1), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 2), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 3), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 4), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 5), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 6), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 7), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 8), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 9), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 10), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 11), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 12), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 13), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 14), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 15), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 16), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 17), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 18), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 19), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 20), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 21), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 22), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 23), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 24), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 25), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 26), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 27), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 28), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245760), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245761), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245762), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245763), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245764), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245765), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245766), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245767), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245768), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245769), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245770), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245771), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245772), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245773), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245774), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245775), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245776), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245777), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245778), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245779), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245780), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245781), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245782), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245783), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245784), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245785), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245786), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245787), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 245788), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491520), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491521), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491522), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491523), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491524), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491525), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491526), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491527), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491528), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491529), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491530), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491531), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491532), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491533), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491534), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491535), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491536), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491537), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491538), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491539), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491540), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491541), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491542), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491543), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491544), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491545), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491546), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491547), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 491548), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737280), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737281), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737282), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737283), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737284), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737285), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737286), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737287), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737288), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737289), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737290), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737291), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737292), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737293), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737294), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737295), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737296), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737297), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737298), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737299), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737300), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737301), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737302), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737303), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737304), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737305), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737306), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737307), reinterpret_tensor(buf2210, (4, 2048, 1), (61440, 30, 0), 737308), reinterpret_tensor(primals_350, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_351, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_352, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_353, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_355, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_356, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_357, (11008, 4096), (1, 11008), 0), buf1946, buf1947, buf1951, buf1952, reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 0), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 1), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 2), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 3), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 4), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 5), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 6), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 7), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 8), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 9), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 10), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 11), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 12), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 13), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 14), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 15), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 16), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 17), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 18), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 19), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 20), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 21), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 22), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 23), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 24), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 25), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 26), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 27), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 28), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 29), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253952), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253953), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253954), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253955), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253956), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253957), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253958), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253959), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253960), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253961), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253962), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253963), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253964), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253965), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253966), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253967), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253968), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253969), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253970), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253971), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253972), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253973), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253974), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253975), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253976), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253977), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253978), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253979), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253980), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 253981), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507904), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507905), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507906), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507907), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507908), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507909), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507910), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507911), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507912), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507913), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507914), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507915), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507916), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507917), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507918), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507919), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507920), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507921), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507922), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507923), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507924), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507925), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507926), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507927), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507928), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507929), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507930), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507931), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507932), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 507933), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761856), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761857), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761858), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761859), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761860), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761861), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761862), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761863), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761864), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761865), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761866), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761867), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761868), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761869), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761870), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761871), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761872), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761873), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761874), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761875), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761876), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761877), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761878), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761879), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761880), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761881), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761882), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761883), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761884), reinterpret_tensor(buf2211, (4, 2048, 1), (63488, 31, 0), 761885), reinterpret_tensor(primals_362, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_363, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_364, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_365, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_367, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_368, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_369, (11008, 4096), (1, 11008), 0), buf2046, buf2047, buf2048, buf2049, reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 0), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 1), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 2), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 3), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 4), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 5), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 6), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 7), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 8), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 9), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 10), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 11), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 12), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 13), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 14), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 15), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 16), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 17), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 18), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 19), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 20), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 21), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 22), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 23), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 24), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 25), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 26), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 27), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 28), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 29), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 30), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262144), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262145), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262146), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262147), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262148), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262149), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262150), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262151), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262152), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262153), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262154), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262155), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262156), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262157), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262158), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262159), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262160), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262161), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262162), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262163), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262164), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262165), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262166), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262167), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262168), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262169), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262170), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262171), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262172), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262173), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 262174), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524288), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524289), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524290), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524291), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524292), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524293), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524294), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524295), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524296), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524297), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524298), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524299), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524300), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524301), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524302), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524303), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524304), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524305), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524306), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524307), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524308), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524309), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524310), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524311), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524312), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524313), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524314), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524315), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524316), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524317), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 524318), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786432), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786433), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786434), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786435), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786436), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786437), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786438), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786439), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786440), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786441), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786442), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786443), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786444), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786445), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786446), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786447), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786448), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786449), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786450), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786451), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786452), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786453), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786454), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786455), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786456), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786457), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786458), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786459), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786460), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786461), reinterpret_tensor(buf2212, (4, 2048, 1), (65536, 32, 0), 786462), reinterpret_tensor(primals_374, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_375, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_376, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_377, (4096, 4096), (1, 4096), 0), reinterpret_tensor(primals_379, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_380, (4096, 11008), (1, 4096), 0), reinterpret_tensor(primals_381, (11008, 4096), (1, 11008), 0), buf2143, buf2144, buf2148, buf2149, reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270336), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270337), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270338), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270339), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270340), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270341), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270342), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270343), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270344), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270345), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270346), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270347), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270348), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270349), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270350), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270351), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270352), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270353), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270354), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270355), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270356), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270357), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270358), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270359), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270360), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270361), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270362), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270363), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270364), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270365), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270366), reinterpret_tensor(buf2213, (4, 2048, 1), (67584, 33, 0), 270367), buf2168, buf2169, buf2176, buf2178, reinterpret_tensor(primals_449, (50257, 4096), (4096, 1), 0), reinterpret_tensor(primals_448, (132, 132), (132, 1), 0), reinterpret_tensor(primals_447, (132, 4096), (4096, 1), 0), reinterpret_tensor(primals_446, (128, 128), (128, 1), 0), reinterpret_tensor(primals_445, (128, 4096), (4096, 1), 0), reinterpret_tensor(primals_444, (124, 124), (124, 1), 0), reinterpret_tensor(primals_443, (124, 4096), (4096, 1), 0), reinterpret_tensor(primals_442, (120, 120), (120, 1), 0), reinterpret_tensor(primals_441, (120, 4096), (4096, 1), 0), reinterpret_tensor(primals_440, (116, 116), (116, 1), 0), reinterpret_tensor(primals_439, (116, 4096), (4096, 1), 0), reinterpret_tensor(primals_438, (112, 112), (112, 1), 0), reinterpret_tensor(primals_437, (112, 4096), (4096, 1), 0), reinterpret_tensor(primals_436, (108, 108), (108, 1), 0), reinterpret_tensor(primals_435, (108, 4096), (4096, 1), 0), reinterpret_tensor(primals_434, (104, 104), (104, 1), 0), reinterpret_tensor(primals_433, (104, 4096), (4096, 1), 0), reinterpret_tensor(primals_432, (100, 100), (100, 1), 0), reinterpret_tensor(primals_431, (100, 4096), (4096, 1), 0), reinterpret_tensor(primals_430, (96, 96), (96, 1), 0), reinterpret_tensor(primals_429, (96, 4096), (4096, 1), 0), reinterpret_tensor(primals_428, (92, 92), (92, 1), 0), reinterpret_tensor(primals_427, (92, 4096), (4096, 1), 0), reinterpret_tensor(primals_426, (88, 88), (88, 1), 0), reinterpret_tensor(primals_425, (88, 4096), (4096, 1), 0), reinterpret_tensor(primals_424, (84, 84), (84, 1), 0), reinterpret_tensor(primals_423, (84, 4096), (4096, 1), 0), reinterpret_tensor(primals_422, (80, 80), (80, 1), 0), reinterpret_tensor(primals_421, (80, 4096), (4096, 1), 0), reinterpret_tensor(primals_420, (76, 76), (76, 1), 0), reinterpret_tensor(primals_419, (76, 4096), (4096, 1), 0), reinterpret_tensor(primals_418, (72, 72), (72, 1), 0), reinterpret_tensor(primals_417, (72, 4096), (4096, 1), 0), reinterpret_tensor(primals_416, (68, 68), (68, 1), 0), reinterpret_tensor(primals_415, (68, 4096), (4096, 1), 0), reinterpret_tensor(primals_414, (64, 64), (64, 1), 0), reinterpret_tensor(primals_413, (64, 4096), (4096, 1), 0), reinterpret_tensor(primals_412, (60, 60), (60, 1), 0), reinterpret_tensor(primals_411, (60, 4096), (4096, 1), 0), reinterpret_tensor(primals_410, (56, 56), (56, 1), 0), reinterpret_tensor(primals_409, (56, 4096), (4096, 1), 0), reinterpret_tensor(primals_408, (52, 52), (52, 1), 0), reinterpret_tensor(primals_407, (52, 4096), (4096, 1), 0), reinterpret_tensor(primals_406, (48, 48), (48, 1), 0), reinterpret_tensor(primals_405, (48, 4096), (4096, 1), 0), reinterpret_tensor(primals_404, (44, 44), (44, 1), 0), reinterpret_tensor(primals_403, (44, 4096), (4096, 1), 0), reinterpret_tensor(primals_402, (40, 40), (40, 1), 0), reinterpret_tensor(primals_401, (40, 4096), (4096, 1), 0), reinterpret_tensor(primals_400, (36, 36), (36, 1), 0), reinterpret_tensor(primals_399, (36, 4096), (4096, 1), 0), reinterpret_tensor(primals_398, (32, 32), (32, 1), 0), reinterpret_tensor(primals_397, (32, 4096), (4096, 1), 0), reinterpret_tensor(primals_396, (28, 28), (28, 1), 0), reinterpret_tensor(primals_395, (28, 4096), (4096, 1), 0), reinterpret_tensor(primals_394, (24, 24), (24, 1), 0), reinterpret_tensor(primals_393, (24, 4096), (4096, 1), 0), reinterpret_tensor(primals_392, (20, 20), (20, 1), 0), reinterpret_tensor(primals_391, (20, 4096), (4096, 1), 0), reinterpret_tensor(primals_390, (16, 16), (16, 1), 0), reinterpret_tensor(primals_389, (16, 4096), (4096, 1), 0), reinterpret_tensor(primals_388, (12, 12), (12, 1), 0), reinterpret_tensor(primals_387, (12, 4096), (4096, 1), 0), reinterpret_tensor(primals_386, (8, 8), (8, 1), 0), reinterpret_tensor(primals_385, (8, 4096), (4096, 1), 0), )


def benchmark_compiled_module(times=10, repeat=10):
    times=10
    repeat=1
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_2 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_3 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_4 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_5 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_6 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_7 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_8 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_9 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_10 = rand_strided((4, 2), (2, 1), device='cuda:0', dtype=torch.float16)
    primals_11 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_12 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_13 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_14 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_15 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_16 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_17 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_18 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_19 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_20 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_21 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_22 = rand_strided((4, 3), (3, 1), device='cuda:0', dtype=torch.float16)
    primals_23 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_24 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_25 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_26 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_27 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_28 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_29 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_30 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_31 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_32 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_33 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_34 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float16)
    primals_35 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_36 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_37 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_38 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_39 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_40 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_41 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_42 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_43 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_44 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_45 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_46 = rand_strided((4, 5), (5, 1), device='cuda:0', dtype=torch.float16)
    primals_47 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_48 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_49 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_50 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_51 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_52 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_53 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_54 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_55 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_56 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_57 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_58 = rand_strided((4, 6), (6, 1), device='cuda:0', dtype=torch.float16)
    primals_59 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_60 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_61 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_62 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_63 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_64 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_65 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_66 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_67 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_68 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_69 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_70 = rand_strided((4, 7), (7, 1), device='cuda:0', dtype=torch.float16)
    primals_71 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_72 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_73 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_74 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_75 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_76 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_77 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_78 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_79 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_80 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_81 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_82 = rand_strided((4, 8), (8, 1), device='cuda:0', dtype=torch.float16)
    primals_83 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_84 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_85 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_86 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_87 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_88 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_89 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_90 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_91 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_92 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_93 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_94 = rand_strided((4, 9), (9, 1), device='cuda:0', dtype=torch.float16)
    primals_95 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_96 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_97 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_98 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_99 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_100 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_101 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_102 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_103 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_104 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_105 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_106 = rand_strided((4, 10), (10, 1), device='cuda:0', dtype=torch.float16)
    primals_107 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_108 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_109 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_110 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_111 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_112 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_113 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_114 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_115 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_116 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_117 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_118 = rand_strided((4, 11), (11, 1), device='cuda:0', dtype=torch.float16)
    primals_119 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_120 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_121 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_122 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_123 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_124 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_125 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_126 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_127 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_128 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_129 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_130 = rand_strided((4, 12), (12, 1), device='cuda:0', dtype=torch.float16)
    primals_131 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_132 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_133 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_134 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_135 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_136 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_137 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_138 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_139 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_140 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_141 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_142 = rand_strided((4, 13), (13, 1), device='cuda:0', dtype=torch.float16)
    primals_143 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_144 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_145 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_146 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_147 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_148 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_149 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_150 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_151 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_152 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_153 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_154 = rand_strided((4, 14), (14, 1), device='cuda:0', dtype=torch.float16)
    primals_155 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_156 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_157 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_158 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_159 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_160 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_161 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_162 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_163 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_164 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_165 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_166 = rand_strided((4, 15), (15, 1), device='cuda:0', dtype=torch.float16)
    primals_167 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_168 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_169 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_170 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_171 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_172 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_173 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_174 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_175 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_176 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_177 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_178 = rand_strided((4, 16), (16, 1), device='cuda:0', dtype=torch.float16)
    primals_179 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_180 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_181 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_182 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_183 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_184 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_185 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_186 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_187 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_188 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_189 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_190 = rand_strided((4, 17), (17, 1), device='cuda:0', dtype=torch.float16)
    primals_191 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_192 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_193 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_194 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_195 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_196 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_197 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_198 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_199 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_200 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_201 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_202 = rand_strided((4, 18), (18, 1), device='cuda:0', dtype=torch.float16)
    primals_203 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_204 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_205 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_206 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_207 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_208 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_209 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_210 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_211 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_212 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_213 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_214 = rand_strided((4, 19), (19, 1), device='cuda:0', dtype=torch.float16)
    primals_215 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_216 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_217 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_218 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_219 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_220 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_221 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_222 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_223 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_224 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_225 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_226 = rand_strided((4, 20), (20, 1), device='cuda:0', dtype=torch.float16)
    primals_227 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_228 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_229 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_230 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_231 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_232 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_233 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_234 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_235 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_236 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_237 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_238 = rand_strided((4, 21), (21, 1), device='cuda:0', dtype=torch.float16)
    primals_239 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_240 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_241 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_242 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_243 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_244 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_245 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_246 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_247 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_248 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_249 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_250 = rand_strided((4, 22), (22, 1), device='cuda:0', dtype=torch.float16)
    primals_251 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_252 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_253 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_254 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_255 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_256 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_257 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_258 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_259 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_260 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_261 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_262 = rand_strided((4, 23), (23, 1), device='cuda:0', dtype=torch.float16)
    primals_263 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_264 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_265 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_266 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_267 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_268 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_269 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_270 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_271 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_272 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_273 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_274 = rand_strided((4, 24), (24, 1), device='cuda:0', dtype=torch.float16)
    primals_275 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_276 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_277 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_278 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_279 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_280 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_281 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_282 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_283 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_284 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_285 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_286 = rand_strided((4, 25), (25, 1), device='cuda:0', dtype=torch.float16)
    primals_287 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_288 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_289 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_290 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_291 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_292 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_293 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_294 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_295 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_296 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_297 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_298 = rand_strided((4, 26), (26, 1), device='cuda:0', dtype=torch.float16)
    primals_299 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_300 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_301 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_302 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_303 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_304 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_305 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_306 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_307 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_308 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_309 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_310 = rand_strided((4, 27), (27, 1), device='cuda:0', dtype=torch.float16)
    primals_311 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_312 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_313 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_314 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_315 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_316 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_317 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_318 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_319 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_320 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_321 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_322 = rand_strided((4, 28), (28, 1), device='cuda:0', dtype=torch.float16)
    primals_323 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_324 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_325 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_326 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_327 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_328 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_329 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_330 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_331 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_332 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_333 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_334 = rand_strided((4, 29), (29, 1), device='cuda:0', dtype=torch.float16)
    primals_335 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_336 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_337 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_338 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_339 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_340 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_341 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_342 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_343 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_344 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_345 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_346 = rand_strided((4, 30), (30, 1), device='cuda:0', dtype=torch.float16)
    primals_347 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_348 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_349 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_350 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_351 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_352 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_353 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_354 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_355 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_356 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_357 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_358 = rand_strided((4, 31), (31, 1), device='cuda:0', dtype=torch.float16)
    primals_359 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_360 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_361 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_362 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_363 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_364 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_365 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_366 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_367 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_368 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_369 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_370 = rand_strided((4, 32), (32, 1), device='cuda:0', dtype=torch.float16)
    primals_371 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_372 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_373 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_374 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_375 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_376 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_377 = rand_strided((4096, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_378 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_379 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_380 = rand_strided((11008, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_381 = rand_strided((4096, 11008), (11008, 1), device='cuda:0', dtype=torch.float16)
    primals_382 = rand_strided((4, 33), (33, 1), device='cuda:0', dtype=torch.float16)
    primals_383 = rand_strided((4096, ), (1, ), device='cuda:0', dtype=torch.float16)
    primals_384 = rand_strided((50257, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_385 = rand_strided((8, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_386 = rand_strided((8, 8), (8, 1), device='cuda:0', dtype=torch.float16)
    primals_387 = rand_strided((12, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_388 = rand_strided((12, 12), (12, 1), device='cuda:0', dtype=torch.float16)
    primals_389 = rand_strided((16, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_390 = rand_strided((16, 16), (16, 1), device='cuda:0', dtype=torch.float16)
    primals_391 = rand_strided((20, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_392 = rand_strided((20, 20), (20, 1), device='cuda:0', dtype=torch.float16)
    primals_393 = rand_strided((24, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_394 = rand_strided((24, 24), (24, 1), device='cuda:0', dtype=torch.float16)
    primals_395 = rand_strided((28, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_396 = rand_strided((28, 28), (28, 1), device='cuda:0', dtype=torch.float16)
    primals_397 = rand_strided((32, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_398 = rand_strided((32, 32), (32, 1), device='cuda:0', dtype=torch.float16)
    primals_399 = rand_strided((36, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_400 = rand_strided((36, 36), (36, 1), device='cuda:0', dtype=torch.float16)
    primals_401 = rand_strided((40, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_402 = rand_strided((40, 40), (40, 1), device='cuda:0', dtype=torch.float16)
    primals_403 = rand_strided((44, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_404 = rand_strided((44, 44), (44, 1), device='cuda:0', dtype=torch.float16)
    primals_405 = rand_strided((48, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_406 = rand_strided((48, 48), (48, 1), device='cuda:0', dtype=torch.float16)
    primals_407 = rand_strided((52, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_408 = rand_strided((52, 52), (52, 1), device='cuda:0', dtype=torch.float16)
    primals_409 = rand_strided((56, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_410 = rand_strided((56, 56), (56, 1), device='cuda:0', dtype=torch.float16)
    primals_411 = rand_strided((60, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_412 = rand_strided((60, 60), (60, 1), device='cuda:0', dtype=torch.float16)
    primals_413 = rand_strided((64, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_414 = rand_strided((64, 64), (64, 1), device='cuda:0', dtype=torch.float16)
    primals_415 = rand_strided((68, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_416 = rand_strided((68, 68), (68, 1), device='cuda:0', dtype=torch.float16)
    primals_417 = rand_strided((72, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_418 = rand_strided((72, 72), (72, 1), device='cuda:0', dtype=torch.float16)
    primals_419 = rand_strided((76, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_420 = rand_strided((76, 76), (76, 1), device='cuda:0', dtype=torch.float16)
    primals_421 = rand_strided((80, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_422 = rand_strided((80, 80), (80, 1), device='cuda:0', dtype=torch.float16)
    primals_423 = rand_strided((84, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_424 = rand_strided((84, 84), (84, 1), device='cuda:0', dtype=torch.float16)
    primals_425 = rand_strided((88, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_426 = rand_strided((88, 88), (88, 1), device='cuda:0', dtype=torch.float16)
    primals_427 = rand_strided((92, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_428 = rand_strided((92, 92), (92, 1), device='cuda:0', dtype=torch.float16)
    primals_429 = rand_strided((96, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_430 = rand_strided((96, 96), (96, 1), device='cuda:0', dtype=torch.float16)
    primals_431 = rand_strided((100, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_432 = rand_strided((100, 100), (100, 1), device='cuda:0', dtype=torch.float16)
    primals_433 = rand_strided((104, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_434 = rand_strided((104, 104), (104, 1), device='cuda:0', dtype=torch.float16)
    primals_435 = rand_strided((108, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_436 = rand_strided((108, 108), (108, 1), device='cuda:0', dtype=torch.float16)
    primals_437 = rand_strided((112, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_438 = rand_strided((112, 112), (112, 1), device='cuda:0', dtype=torch.float16)
    primals_439 = rand_strided((116, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_440 = rand_strided((116, 116), (116, 1), device='cuda:0', dtype=torch.float16)
    primals_441 = rand_strided((120, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_442 = rand_strided((120, 120), (120, 1), device='cuda:0', dtype=torch.float16)
    primals_443 = rand_strided((124, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_444 = rand_strided((124, 124), (124, 1), device='cuda:0', dtype=torch.float16)
    primals_445 = rand_strided((128, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_446 = rand_strided((128, 128), (128, 1), device='cuda:0', dtype=torch.float16)
    primals_447 = rand_strided((132, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_448 = rand_strided((132, 132), (132, 1), device='cuda:0', dtype=torch.float16)
    primals_449 = rand_strided((50257, 4096), (4096, 1), device='cuda:0', dtype=torch.float16)
    primals_450 = rand_strided((2048, 64, 2), (128, 2, 1), device='cuda:0', dtype=torch.float16)
    primals_451 = rand_strided((2048, 2048), (2048, 1), device='cuda:0', dtype=torch.bool)
    primals_452 = rand_strided((4, 2048), (2049, 1), device='cuda:0', dtype=torch.int64)
    primals_453 = rand_strided((4, 2048), (2049, 1), device='cuda:0', dtype=torch.int64)
    return print_performance(lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_80, primals_81, primals_82, primals_83, primals_84, primals_85, primals_86, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_96, primals_97, primals_98, primals_99, primals_100, primals_101, primals_102, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_112, primals_113, primals_114, primals_115, primals_116, primals_117, primals_118, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_128, primals_129, primals_130, primals_131, primals_132, primals_133, primals_134, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_144, primals_145, primals_146, primals_147, primals_148, primals_149, primals_150, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_160, primals_161, primals_162, primals_163, primals_164, primals_165, primals_166, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_176, primals_177, primals_178, primals_179, primals_180, primals_181, primals_182, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_192, primals_193, primals_194, primals_195, primals_196, primals_197, primals_198, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_208, primals_209, primals_210, primals_211, primals_212, primals_213, primals_214, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_224, primals_225, primals_226, primals_227, primals_228, primals_229, primals_230, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_240, primals_241, primals_242, primals_243, primals_244, primals_245, primals_246, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_256, primals_257, primals_258, primals_259, primals_260, primals_261, primals_262, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_272, primals_273, primals_274, primals_275, primals_276, primals_277, primals_278, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_288, primals_289, primals_290, primals_291, primals_292, primals_293, primals_294, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_304, primals_305, primals_306, primals_307, primals_308, primals_309, primals_310, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_320, primals_321, primals_322, primals_323, primals_324, primals_325, primals_326, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_336, primals_337, primals_338, primals_339, primals_340, primals_341, primals_342, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_352, primals_353, primals_354, primals_355, primals_356, primals_357, primals_358, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_368, primals_369, primals_370, primals_371, primals_372, primals_373, primals_374, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_384, primals_385, primals_386, primals_387, primals_388, primals_389, primals_390, primals_391, primals_392, primals_393, primals_394, primals_395, primals_396, primals_397, primals_398, primals_399, primals_400, primals_401, primals_402, primals_403, primals_404, primals_405, primals_406, primals_407, primals_408, primals_409, primals_410, primals_411, primals_412, primals_413, primals_414, primals_415, primals_416, primals_417, primals_418, primals_419, primals_420, primals_421, primals_422, primals_423, primals_424, primals_425, primals_426, primals_427, primals_428, primals_429, primals_430, primals_431, primals_432, primals_433, primals_434, primals_435, primals_436, primals_437, primals_438, primals_439, primals_440, primals_441, primals_442, primals_443, primals_444, primals_445, primals_446, primals_447, primals_448, primals_449, primals_450, primals_451, primals_452, primals_453]), times=times, repeat=repeat)

def print_mem(s=''):
    print(f"Memory used at {s}: {torch.cuda.max_memory_reserved() / 1e9:.02f} GB, {torch.cuda.memory_allocated() / 1e9:.02f}, {torch.cuda.memory_allocated() / 1e9:.02f}")


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('None', benchmark_compiled_module)
    print(f"Memory used: {torch.cuda.max_memory_reserved() / 1e9:.02f} GB")
